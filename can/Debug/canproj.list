
canproj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009310  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  080094b0  080094b0  0000a4b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009920  08009920  0000b06c  2**0
                  CONTENTS
  4 .ARM          00000008  08009920  08009920  0000a920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009928  08009928  0000b06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009928  08009928  0000a928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800992c  0800992c  0000a92c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08009930  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004690  2000006c  0800999c  0000b06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200046fc  0800999c  0000b6fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b97a  00000000  00000000  0000b09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f4d  00000000  00000000  00026a16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001798  00000000  00000000  0002a968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001249  00000000  00000000  0002c100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa43  00000000  00000000  0002d349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a6d0  00000000  00000000  00047d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1c14  00000000  00000000  0006245c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00104070  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006dcc  00000000  00000000  001040b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0010ae80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009498 	.word	0x08009498

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08009498 	.word	0x08009498

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	4a07      	ldr	r2, [pc, #28]	@ (80005ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000590:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	4a06      	ldr	r2, [pc, #24]	@ (80005b0 <vApplicationGetIdleTaskMemory+0x30>)
 8000596:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2280      	movs	r2, #128	@ 0x80
 800059c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000088 	.word	0x20000088
 80005b0:	20000128 	.word	0x20000128

080005b4 <vApplicationGetTimerTaskMemory>:

//No idea what this doe, but needed for xEventGroupSetBitsFromISR
void vApplicationGetTimerTaskMemory(StaticTask_t **ppxTimerTaskTCBBuffer,
                                    StackType_t **ppxTimerTaskStackBuffer,
                                    uint32_t *pulTimerTaskStackSize)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;              // Provide TCB memory
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	4a07      	ldr	r2, [pc, #28]	@ (80005e0 <vApplicationGetTimerTaskMemory+0x2c>)
 80005c4:	601a      	str	r2, [r3, #0]
    *ppxTimerTaskStackBuffer = xTimerStack;               // Provide stack memory
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	4a06      	ldr	r2, [pc, #24]	@ (80005e4 <vApplicationGetTimerTaskMemory+0x30>)
 80005ca:	601a      	str	r2, [r3, #0]
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH; // Provide stack size
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2280      	movs	r2, #128	@ 0x80
 80005d0:	601a      	str	r2, [r3, #0]
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	20000400 	.word	0x20000400
 80005e4:	200004a0 	.word	0x200004a0

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b5b0      	push	{r4, r5, r7, lr}
 80005ea:	b09e      	sub	sp, #120	@ 0x78
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ee:	f001 f887 	bl	8001700 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f2:	f000 f89d 	bl	8000730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f6:	f000 f98d 	bl	8000914 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005fa:	f000 f961 	bl	80008c0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80005fe:	f000 f929 	bl	8000854 <MX_SPI1_Init>
  MX_RTC_Init();
 8000602:	f000 f901 	bl	8000808 <MX_RTC_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of uartMutex */
  osMutexDef(uartMutex);
 8000606:	2300      	movs	r3, #0
 8000608:	673b      	str	r3, [r7, #112]	@ 0x70
 800060a:	2300      	movs	r3, #0
 800060c:	677b      	str	r3, [r7, #116]	@ 0x74
  uartMutexHandle = osMutexCreate(osMutex(uartMutex));
 800060e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000612:	4618      	mov	r0, r3
 8000614:	f004 f89e 	bl	8004754 <osMutexCreate>
 8000618:	4603      	mov	r3, r0
 800061a:	4a37      	ldr	r2, [pc, #220]	@ (80006f8 <main+0x110>)
 800061c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  messageToRead = xEventGroupCreate();
 800061e:	f004 f935 	bl	800488c <xEventGroupCreate>
 8000622:	4603      	mov	r3, r0
 8000624:	4a35      	ldr	r2, [pc, #212]	@ (80006fc <main+0x114>)
 8000626:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  MessageQueueHandle = xQueueCreate(3, sizeof(MessageCAN*));
 8000628:	2200      	movs	r2, #0
 800062a:	2104      	movs	r1, #4
 800062c:	2003      	movs	r0, #3
 800062e:	f004 fca8 	bl	8004f82 <xQueueGenericCreate>
 8000632:	4603      	mov	r3, r0
 8000634:	4a32      	ldr	r2, [pc, #200]	@ (8000700 <main+0x118>)
 8000636:	6013      	str	r3, [r2, #0]

  if (MessageQueueHandle == 0){
 8000638:	4b31      	ldr	r3, [pc, #196]	@ (8000700 <main+0x118>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d104      	bne.n	800064a <main+0x62>
	  print("Error Creating Queue");
 8000640:	4830      	ldr	r0, [pc, #192]	@ (8000704 <main+0x11c>)
 8000642:	f000 fa47 	bl	8000ad4 <print>
	  Error_Handler();
 8000646:	f000 fdc5 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 800064a:	4b2f      	ldr	r3, [pc, #188]	@ (8000708 <main+0x120>)
 800064c:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8000650:	461d      	mov	r5, r3
 8000652:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000654:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000656:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800065a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800065e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000662:	2100      	movs	r1, #0
 8000664:	4618      	mov	r0, r3
 8000666:	f004 f802 	bl	800466e <osThreadCreate>
 800066a:	4603      	mov	r3, r0
 800066c:	4a27      	ldr	r2, [pc, #156]	@ (800070c <main+0x124>)
 800066e:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityAboveNormal, 0, 512);
 8000670:	4b27      	ldr	r3, [pc, #156]	@ (8000710 <main+0x128>)
 8000672:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000676:	461d      	mov	r5, r3
 8000678:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800067a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800067c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000680:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000684:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f003 ffef 	bl	800466e <osThreadCreate>
 8000690:	4603      	mov	r3, r0
 8000692:	4a20      	ldr	r2, [pc, #128]	@ (8000714 <main+0x12c>)
 8000694:	6013      	str	r3, [r2, #0]

  /* definition and creation of sdCardMsgPost */
  osThreadDef(sdCardMsgPost, StartTask03, osPriorityAboveNormal, 0, 512);
 8000696:	4b20      	ldr	r3, [pc, #128]	@ (8000718 <main+0x130>)
 8000698:	f107 041c 	add.w	r4, r7, #28
 800069c:	461d      	mov	r5, r3
 800069e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sdCardMsgPostHandle = osThreadCreate(osThread(sdCardMsgPost), NULL);
 80006aa:	f107 031c 	add.w	r3, r7, #28
 80006ae:	2100      	movs	r1, #0
 80006b0:	4618      	mov	r0, r3
 80006b2:	f003 ffdc 	bl	800466e <osThreadCreate>
 80006b6:	4603      	mov	r3, r0
 80006b8:	4a18      	ldr	r2, [pc, #96]	@ (800071c <main+0x134>)
 80006ba:	6013      	str	r3, [r2, #0]

  /* definition and creation of messageAvailabl */
  osThreadDef(messageAvailabl, StartTask04, osPriorityAboveNormal, 0, 256);
 80006bc:	4b18      	ldr	r3, [pc, #96]	@ (8000720 <main+0x138>)
 80006be:	463c      	mov	r4, r7
 80006c0:	461d      	mov	r5, r3
 80006c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  messageAvailablHandle = osThreadCreate(osThread(messageAvailabl), NULL);
 80006ce:	463b      	mov	r3, r7
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f003 ffcb 	bl	800466e <osThreadCreate>
 80006d8:	4603      	mov	r3, r0
 80006da:	4a12      	ldr	r2, [pc, #72]	@ (8000724 <main+0x13c>)
 80006dc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  print("MCP2515 init Started");
 80006de:	4812      	ldr	r0, [pc, #72]	@ (8000728 <main+0x140>)
 80006e0:	f000 f9f8 	bl	8000ad4 <print>
  //mcp2515init();
  TimeInit();
 80006e4:	f000 faba 	bl	8000c5c <TimeInit>
  print("Program Started");  /* USER CODE END RTOS_THREADS */
 80006e8:	4810      	ldr	r0, [pc, #64]	@ (800072c <main+0x144>)
 80006ea:	f000 f9f3 	bl	8000ad4 <print>

  /* Start scheduler */
  osKernelStart();
 80006ee:	f003 ffb7 	bl	8004660 <osKernelStart>





  while (1)
 80006f2:	bf00      	nop
 80006f4:	e7fd      	b.n	80006f2 <main+0x10a>
 80006f6:	bf00      	nop
 80006f8:	200003f8 	.word	0x200003f8
 80006fc:	200003fc 	.word	0x200003fc
 8000700:	200006a4 	.word	0x200006a4
 8000704:	080094b0 	.word	0x080094b0
 8000708:	080094fc 	.word	0x080094fc
 800070c:	200003e8 	.word	0x200003e8
 8000710:	08009524 	.word	0x08009524
 8000714:	200003ec 	.word	0x200003ec
 8000718:	08009550 	.word	0x08009550
 800071c:	200003f0 	.word	0x200003f0
 8000720:	0800957c 	.word	0x0800957c
 8000724:	200003f4 	.word	0x200003f4
 8000728:	080094c8 	.word	0x080094c8
 800072c:	080094e0 	.word	0x080094e0

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b094      	sub	sp, #80	@ 0x50
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 0320 	add.w	r3, r7, #32
 800073a:	2230      	movs	r2, #48	@ 0x30
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f007 fdfb 	bl	800833a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	4b29      	ldr	r3, [pc, #164]	@ (8000800 <SystemClock_Config+0xd0>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800075c:	4a28      	ldr	r2, [pc, #160]	@ (8000800 <SystemClock_Config+0xd0>)
 800075e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000762:	6413      	str	r3, [r2, #64]	@ 0x40
 8000764:	4b26      	ldr	r3, [pc, #152]	@ (8000800 <SystemClock_Config+0xd0>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000768:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000770:	2300      	movs	r3, #0
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	4b23      	ldr	r3, [pc, #140]	@ (8000804 <SystemClock_Config+0xd4>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a22      	ldr	r2, [pc, #136]	@ (8000804 <SystemClock_Config+0xd4>)
 800077a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800077e:	6013      	str	r3, [r2, #0]
 8000780:	4b20      	ldr	r3, [pc, #128]	@ (8000804 <SystemClock_Config+0xd4>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800078c:	230a      	movs	r3, #10
 800078e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000790:	2301      	movs	r3, #1
 8000792:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000794:	2310      	movs	r3, #16
 8000796:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000798:	2301      	movs	r3, #1
 800079a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079c:	2302      	movs	r3, #2
 800079e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a0:	2300      	movs	r3, #0
 80007a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007a4:	2310      	movs	r3, #16
 80007a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007a8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80007ac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007ae:	2304      	movs	r3, #4
 80007b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007b2:	2304      	movs	r3, #4
 80007b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b6:	f107 0320 	add.w	r3, r7, #32
 80007ba:	4618      	mov	r0, r3
 80007bc:	f001 fa92 	bl	8001ce4 <HAL_RCC_OscConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007c6:	f000 fd05 	bl	80011d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ca:	230f      	movs	r3, #15
 80007cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ce:	2302      	movs	r3, #2
 80007d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007e0:	f107 030c 	add.w	r3, r7, #12
 80007e4:	2102      	movs	r1, #2
 80007e6:	4618      	mov	r0, r3
 80007e8:	f001 fcf4 	bl	80021d4 <HAL_RCC_ClockConfig>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007f2:	f000 fcef 	bl	80011d4 <Error_Handler>
  }
}
 80007f6:	bf00      	nop
 80007f8:	3750      	adds	r7, #80	@ 0x50
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800
 8000804:	40007000 	.word	0x40007000

08000808 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800080c:	4b0f      	ldr	r3, [pc, #60]	@ (800084c <MX_RTC_Init+0x44>)
 800080e:	4a10      	ldr	r2, [pc, #64]	@ (8000850 <MX_RTC_Init+0x48>)
 8000810:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000812:	4b0e      	ldr	r3, [pc, #56]	@ (800084c <MX_RTC_Init+0x44>)
 8000814:	2200      	movs	r2, #0
 8000816:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000818:	4b0c      	ldr	r3, [pc, #48]	@ (800084c <MX_RTC_Init+0x44>)
 800081a:	227f      	movs	r2, #127	@ 0x7f
 800081c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800081e:	4b0b      	ldr	r3, [pc, #44]	@ (800084c <MX_RTC_Init+0x44>)
 8000820:	22ff      	movs	r2, #255	@ 0xff
 8000822:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000824:	4b09      	ldr	r3, [pc, #36]	@ (800084c <MX_RTC_Init+0x44>)
 8000826:	2200      	movs	r2, #0
 8000828:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800082a:	4b08      	ldr	r3, [pc, #32]	@ (800084c <MX_RTC_Init+0x44>)
 800082c:	2200      	movs	r2, #0
 800082e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000830:	4b06      	ldr	r3, [pc, #24]	@ (800084c <MX_RTC_Init+0x44>)
 8000832:	2200      	movs	r2, #0
 8000834:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000836:	4805      	ldr	r0, [pc, #20]	@ (800084c <MX_RTC_Init+0x44>)
 8000838:	f002 f80e 	bl	8002858 <HAL_RTC_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000842:	f000 fcc7 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000328 	.word	0x20000328
 8000850:	40002800 	.word	0x40002800

08000854 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000858:	4b17      	ldr	r3, [pc, #92]	@ (80008b8 <MX_SPI1_Init+0x64>)
 800085a:	4a18      	ldr	r2, [pc, #96]	@ (80008bc <MX_SPI1_Init+0x68>)
 800085c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800085e:	4b16      	ldr	r3, [pc, #88]	@ (80008b8 <MX_SPI1_Init+0x64>)
 8000860:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000864:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000866:	4b14      	ldr	r3, [pc, #80]	@ (80008b8 <MX_SPI1_Init+0x64>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800086c:	4b12      	ldr	r3, [pc, #72]	@ (80008b8 <MX_SPI1_Init+0x64>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000872:	4b11      	ldr	r3, [pc, #68]	@ (80008b8 <MX_SPI1_Init+0x64>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000878:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <MX_SPI1_Init+0x64>)
 800087a:	2200      	movs	r2, #0
 800087c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800087e:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <MX_SPI1_Init+0x64>)
 8000880:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000884:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000886:	4b0c      	ldr	r3, [pc, #48]	@ (80008b8 <MX_SPI1_Init+0x64>)
 8000888:	2220      	movs	r2, #32
 800088a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800088c:	4b0a      	ldr	r3, [pc, #40]	@ (80008b8 <MX_SPI1_Init+0x64>)
 800088e:	2200      	movs	r2, #0
 8000890:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000892:	4b09      	ldr	r3, [pc, #36]	@ (80008b8 <MX_SPI1_Init+0x64>)
 8000894:	2200      	movs	r2, #0
 8000896:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000898:	4b07      	ldr	r3, [pc, #28]	@ (80008b8 <MX_SPI1_Init+0x64>)
 800089a:	2200      	movs	r2, #0
 800089c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800089e:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <MX_SPI1_Init+0x64>)
 80008a0:	220a      	movs	r2, #10
 80008a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008a4:	4804      	ldr	r0, [pc, #16]	@ (80008b8 <MX_SPI1_Init+0x64>)
 80008a6:	f002 fa5f 	bl	8002d68 <HAL_SPI_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008b0:	f000 fc90 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000348 	.word	0x20000348
 80008bc:	40013000 	.word	0x40013000

080008c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008c4:	4b11      	ldr	r3, [pc, #68]	@ (800090c <MX_USART2_UART_Init+0x4c>)
 80008c6:	4a12      	ldr	r2, [pc, #72]	@ (8000910 <MX_USART2_UART_Init+0x50>)
 80008c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ca:	4b10      	ldr	r3, [pc, #64]	@ (800090c <MX_USART2_UART_Init+0x4c>)
 80008cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	@ (800090c <MX_USART2_UART_Init+0x4c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	@ (800090c <MX_USART2_UART_Init+0x4c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008de:	4b0b      	ldr	r3, [pc, #44]	@ (800090c <MX_USART2_UART_Init+0x4c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008e4:	4b09      	ldr	r3, [pc, #36]	@ (800090c <MX_USART2_UART_Init+0x4c>)
 80008e6:	220c      	movs	r2, #12
 80008e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ea:	4b08      	ldr	r3, [pc, #32]	@ (800090c <MX_USART2_UART_Init+0x4c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f0:	4b06      	ldr	r3, [pc, #24]	@ (800090c <MX_USART2_UART_Init+0x4c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008f6:	4805      	ldr	r0, [pc, #20]	@ (800090c <MX_USART2_UART_Init+0x4c>)
 80008f8:	f003 fa7c 	bl	8003df4 <HAL_UART_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000902:	f000 fc67 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	200003a0 	.word	0x200003a0
 8000910:	40004400 	.word	0x40004400

08000914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08a      	sub	sp, #40	@ 0x28
 8000918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]
 800092e:	4b3a      	ldr	r3, [pc, #232]	@ (8000a18 <MX_GPIO_Init+0x104>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	4a39      	ldr	r2, [pc, #228]	@ (8000a18 <MX_GPIO_Init+0x104>)
 8000934:	f043 0304 	orr.w	r3, r3, #4
 8000938:	6313      	str	r3, [r2, #48]	@ 0x30
 800093a:	4b37      	ldr	r3, [pc, #220]	@ (8000a18 <MX_GPIO_Init+0x104>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	f003 0304 	and.w	r3, r3, #4
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	4b33      	ldr	r3, [pc, #204]	@ (8000a18 <MX_GPIO_Init+0x104>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	4a32      	ldr	r2, [pc, #200]	@ (8000a18 <MX_GPIO_Init+0x104>)
 8000950:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000954:	6313      	str	r3, [r2, #48]	@ 0x30
 8000956:	4b30      	ldr	r3, [pc, #192]	@ (8000a18 <MX_GPIO_Init+0x104>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	4b2c      	ldr	r3, [pc, #176]	@ (8000a18 <MX_GPIO_Init+0x104>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	4a2b      	ldr	r2, [pc, #172]	@ (8000a18 <MX_GPIO_Init+0x104>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6313      	str	r3, [r2, #48]	@ 0x30
 8000972:	4b29      	ldr	r3, [pc, #164]	@ (8000a18 <MX_GPIO_Init+0x104>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	60bb      	str	r3, [r7, #8]
 800097c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	4b25      	ldr	r3, [pc, #148]	@ (8000a18 <MX_GPIO_Init+0x104>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	4a24      	ldr	r2, [pc, #144]	@ (8000a18 <MX_GPIO_Init+0x104>)
 8000988:	f043 0302 	orr.w	r3, r3, #2
 800098c:	6313      	str	r3, [r2, #48]	@ 0x30
 800098e:	4b22      	ldr	r3, [pc, #136]	@ (8000a18 <MX_GPIO_Init+0x104>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	f003 0302 	and.w	r3, r3, #2
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	2140      	movs	r1, #64	@ 0x40
 800099e:	481f      	ldr	r0, [pc, #124]	@ (8000a1c <MX_GPIO_Init+0x108>)
 80009a0:	f001 f96e 	bl	8001c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Btn_Int_Pin */
  GPIO_InitStruct.Pin = Btn_Int_Pin;
 80009a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009aa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Btn_Int_GPIO_Port, &GPIO_InitStruct);
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	4619      	mov	r1, r3
 80009ba:	4819      	ldr	r0, [pc, #100]	@ (8000a20 <MX_GPIO_Init+0x10c>)
 80009bc:	f000 ffc4 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_INT_Pin */
  GPIO_InitStruct.Pin = CAN_INT_Pin;
 80009c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ca:	2301      	movs	r3, #1
 80009cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CAN_INT_GPIO_Port, &GPIO_InitStruct);
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	4619      	mov	r1, r3
 80009d4:	4813      	ldr	r0, [pc, #76]	@ (8000a24 <MX_GPIO_Init+0x110>)
 80009d6:	f000 ffb7 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80009da:	2340      	movs	r3, #64	@ 0x40
 80009dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009de:	2301      	movs	r3, #1
 80009e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80009ea:	f107 0314 	add.w	r3, r7, #20
 80009ee:	4619      	mov	r1, r3
 80009f0:	480a      	ldr	r0, [pc, #40]	@ (8000a1c <MX_GPIO_Init+0x108>)
 80009f2:	f000 ffa9 	bl	8001948 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2105      	movs	r1, #5
 80009fa:	2028      	movs	r0, #40	@ 0x28
 80009fc:	f000 ff7a 	bl	80018f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a00:	2028      	movs	r0, #40	@ 0x28
 8000a02:	f000 ff93 	bl	800192c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000a06:	2201      	movs	r2, #1
 8000a08:	2140      	movs	r1, #64	@ 0x40
 8000a0a:	4804      	ldr	r0, [pc, #16]	@ (8000a1c <MX_GPIO_Init+0x108>)
 8000a0c:	f001 f938 	bl	8001c80 <HAL_GPIO_WritePin>

/* USER CODE END MX_GPIO_Init_2 */
}
 8000a10:	bf00      	nop
 8000a12:	3728      	adds	r7, #40	@ 0x28
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40020400 	.word	0x40020400
 8000a20:	40020800 	.word	0x40020800
 8000a24:	40020000 	.word	0x40020000

08000a28 <LogStackUsage>:

/* USER CODE BEGIN 4 */

void LogStackUsage(const char* taskName, osThreadId thread_id) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	6039      	str	r1, [r7, #0]
    // Cast CMSIS-RTOS thread ID to FreeRTOS TaskHandle_t
    TaskHandle_t freertosTaskHandle = (TaskHandle_t)thread_id;
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	617b      	str	r3, [r7, #20]

    // Get the high water mark (minimum unused stack) in words
    UBaseType_t highWaterMark = uxTaskGetStackHighWaterMark(freertosTaskHandle);
 8000a36:	6978      	ldr	r0, [r7, #20]
 8000a38:	f006 f894 	bl	8006b64 <uxTaskGetStackHighWaterMark>
 8000a3c:	6138      	str	r0, [r7, #16]

    // Convert remaining stack from words to bytes
    uint32_t remainingStackBytes = highWaterMark * sizeof(StackType_t);
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	60fb      	str	r3, [r7, #12]

    // Prepare the log message
    char *buffer;
    buffer = pvPortMalloc(100 * (sizeof(char)));
 8000a44:	2064      	movs	r0, #100	@ 0x64
 8000a46:	f007 f909 	bl	8007c5c <pvPortMalloc>
 8000a4a:	60b8      	str	r0, [r7, #8]
    sprintf(buffer, "%s Remaining Stack: %lu bytes", taskName, (unsigned long)remainingStackBytes);
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	4906      	ldr	r1, [pc, #24]	@ (8000a6c <LogStackUsage+0x44>)
 8000a52:	68b8      	ldr	r0, [r7, #8]
 8000a54:	f007 fc0e 	bl	8008274 <siprintf>
    vPortFree(buffer);
 8000a58:	68b8      	ldr	r0, [r7, #8]
 8000a5a:	f007 f9d3 	bl	8007e04 <vPortFree>

    // Log via UART
    print(buffer);
 8000a5e:	68b8      	ldr	r0, [r7, #8]
 8000a60:	f000 f838 	bl	8000ad4 <print>
}
 8000a64:	bf00      	nop
 8000a66:	3718      	adds	r7, #24
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	08009598 	.word	0x08009598

08000a70 <HeapMonitorTask>:

/* Define the Heap Monitor Task */
void HeapMonitorTask(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b09c      	sub	sp, #112	@ 0x70
 8000a74:	af00      	add	r7, sp, #0

        size_t freeHeap = xPortGetFreeHeapSize();
 8000a76:	f007 fa29 	bl	8007ecc <xPortGetFreeHeapSize>
 8000a7a:	66f8      	str	r0, [r7, #108]	@ 0x6c
        size_t minFreeHeap = xPortGetMinimumEverFreeHeapSize();
 8000a7c:	f007 fa32 	bl	8007ee4 <xPortGetMinimumEverFreeHeapSize>
 8000a80:	66b8      	str	r0, [r7, #104]	@ 0x68
        //size_t totalHeap = xPortGetTotalHeapSize();

        char buffer[100];
        sprintf(buffer, "Heap: Free %lu bytes, Min Free %lu bytes\r\n",
 8000a82:	1d38      	adds	r0, r7, #4
 8000a84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000a86:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000a88:	4905      	ldr	r1, [pc, #20]	@ (8000aa0 <HeapMonitorTask+0x30>)
 8000a8a:	f007 fbf3 	bl	8008274 <siprintf>
                (unsigned long)freeHeap,
                (unsigned long)minFreeHeap);
        print(buffer);
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	4618      	mov	r0, r3
 8000a92:	f000 f81f 	bl	8000ad4 <print>
}
 8000a96:	bf00      	nop
 8000a98:	3770      	adds	r7, #112	@ 0x70
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	080095b8 	.word	0x080095b8

08000aa4 <vApplicationStackOverflowHook>:



void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
   print("Stack Overflow");
 8000aae:	4803      	ldr	r0, [pc, #12]	@ (8000abc <vApplicationStackOverflowHook+0x18>)
 8000ab0:	f000 f810 	bl	8000ad4 <print>
}
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	080095e4 	.word	0x080095e4

08000ac0 <vApplicationMallocFailedHook>:


void vApplicationMallocFailedHook(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
   print("Malloc Failed");
 8000ac4:	4802      	ldr	r0, [pc, #8]	@ (8000ad0 <vApplicationMallocFailedHook+0x10>)
 8000ac6:	f000 f805 	bl	8000ad4 <print>
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	080095f4 	.word	0x080095f4

08000ad4 <print>:


void print(const char* buffer) {
 8000ad4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ad8:	b087      	sub	sp, #28
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
    // Calculate the string length
	if (osMutexWait(uartMutexHandle, osWaitForever) == osOK){
 8000ade:	4b2e      	ldr	r3, [pc, #184]	@ (8000b98 <print+0xc4>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f003 fe4c 	bl	8004784 <osMutexWait>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d14d      	bne.n	8000b8e <print+0xba>
 8000af2:	466b      	mov	r3, sp
 8000af4:	461e      	mov	r6, r3
    size_t length = strlen(buffer);
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f7ff fb72 	bl	80001e0 <strlen>
 8000afc:	6178      	str	r0, [r7, #20]

    // Add space for the new line and carriage return
    char tempBuffer[length + 3]; // Original string + '\r' + '\n' + null terminator
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	1cd9      	adds	r1, r3, #3
 8000b02:	460b      	mov	r3, r1
 8000b04:	3b01      	subs	r3, #1
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	2300      	movs	r3, #0
 8000b0a:	4688      	mov	r8, r1
 8000b0c:	4699      	mov	r9, r3
 8000b0e:	f04f 0200 	mov.w	r2, #0
 8000b12:	f04f 0300 	mov.w	r3, #0
 8000b16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000b1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000b1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000b22:	2300      	movs	r3, #0
 8000b24:	460c      	mov	r4, r1
 8000b26:	461d      	mov	r5, r3
 8000b28:	f04f 0200 	mov.w	r2, #0
 8000b2c:	f04f 0300 	mov.w	r3, #0
 8000b30:	00eb      	lsls	r3, r5, #3
 8000b32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000b36:	00e2      	lsls	r2, r4, #3
 8000b38:	1dcb      	adds	r3, r1, #7
 8000b3a:	08db      	lsrs	r3, r3, #3
 8000b3c:	00db      	lsls	r3, r3, #3
 8000b3e:	ebad 0d03 	sub.w	sp, sp, r3
 8000b42:	466b      	mov	r3, sp
 8000b44:	3300      	adds	r3, #0
 8000b46:	60fb      	str	r3, [r7, #12]

    // Copy the original string into the temporary buffer
    strcpy(tempBuffer, buffer);
 8000b48:	6879      	ldr	r1, [r7, #4]
 8000b4a:	68f8      	ldr	r0, [r7, #12]
 8000b4c:	f007 fcc7 	bl	80084de <strcpy>

    // Append the new line and carriage return
    tempBuffer[length] = '\r';     // Carriage return
 8000b50:	68fa      	ldr	r2, [r7, #12]
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	4413      	add	r3, r2
 8000b56:	220d      	movs	r2, #13
 8000b58:	701a      	strb	r2, [r3, #0]
    tempBuffer[length + 1] = '\n'; // New line
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	68fa      	ldr	r2, [r7, #12]
 8000b60:	210a      	movs	r1, #10
 8000b62:	54d1      	strb	r1, [r2, r3]
    tempBuffer[length + 2] = '\0'; // Null terminator
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	3302      	adds	r3, #2
 8000b68:	68fa      	ldr	r2, [r7, #12]
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	54d1      	strb	r1, [r2, r3]

    // Transmit the modified string over UART
    HAL_UART_Transmit(&huart2, (uint8_t*)tempBuffer, strlen(tempBuffer), 100);
 8000b6e:	68f8      	ldr	r0, [r7, #12]
 8000b70:	f7ff fb36 	bl	80001e0 <strlen>
 8000b74:	4603      	mov	r3, r0
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	2364      	movs	r3, #100	@ 0x64
 8000b7a:	68f9      	ldr	r1, [r7, #12]
 8000b7c:	4807      	ldr	r0, [pc, #28]	@ (8000b9c <print+0xc8>)
 8000b7e:	f003 f989 	bl	8003e94 <HAL_UART_Transmit>
    osMutexRelease(uartMutexHandle);
 8000b82:	4b05      	ldr	r3, [pc, #20]	@ (8000b98 <print+0xc4>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4618      	mov	r0, r3
 8000b88:	f003 fe4a 	bl	8004820 <osMutexRelease>
 8000b8c:	46b5      	mov	sp, r6
	}

}
 8000b8e:	bf00      	nop
 8000b90:	371c      	adds	r7, #28
 8000b92:	46bd      	mov	sp, r7
 8000b94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000b98:	200003f8 	.word	0x200003f8
 8000b9c:	200003a0 	.word	0x200003a0

08000ba0 <mcp2515writeRegister>:

void mcp2515writeRegister(uint8_t address, uint8_t data){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	460a      	mov	r2, r1
 8000baa:	71fb      	strb	r3, [r7, #7]
 8000bac:	4613      	mov	r3, r2
 8000bae:	71bb      	strb	r3, [r7, #6]

	uint8_t txBuffer[3] = {0x02, address, data};
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	733b      	strb	r3, [r7, #12]
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	737b      	strb	r3, [r7, #13]
 8000bb8:	79bb      	ldrb	r3, [r7, #6]
 8000bba:	73bb      	strb	r3, [r7, #14]

	SPI1_CS_LOW();
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2140      	movs	r1, #64	@ 0x40
 8000bc0:	4809      	ldr	r0, [pc, #36]	@ (8000be8 <mcp2515writeRegister+0x48>)
 8000bc2:	f001 f85d 	bl	8001c80 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, txBuffer, sizeof(txBuffer), 100);
 8000bc6:	f107 010c 	add.w	r1, r7, #12
 8000bca:	2364      	movs	r3, #100	@ 0x64
 8000bcc:	2203      	movs	r2, #3
 8000bce:	4807      	ldr	r0, [pc, #28]	@ (8000bec <mcp2515writeRegister+0x4c>)
 8000bd0:	f002 f953 	bl	8002e7a <HAL_SPI_Transmit>
	SPI1_CS_HIGH();
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	2140      	movs	r1, #64	@ 0x40
 8000bd8:	4803      	ldr	r0, [pc, #12]	@ (8000be8 <mcp2515writeRegister+0x48>)
 8000bda:	f001 f851 	bl	8001c80 <HAL_GPIO_WritePin>
}
 8000bde:	bf00      	nop
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40020400 	.word	0x40020400
 8000bec:	20000348 	.word	0x20000348

08000bf0 <mcp2515readRegister>:


uint8_t mcp2515readRegister(uint8_t address){
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af02      	add	r7, sp, #8
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]

	uint8_t txBuffer[3] = {0x03, address, 0xFF};
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	733b      	strb	r3, [r7, #12]
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	737b      	strb	r3, [r7, #13]
 8000c02:	23ff      	movs	r3, #255	@ 0xff
 8000c04:	73bb      	strb	r3, [r7, #14]
	uint8_t rxBuffer[3] = {0};
 8000c06:	4b12      	ldr	r3, [pc, #72]	@ (8000c50 <mcp2515readRegister+0x60>)
 8000c08:	881b      	ldrh	r3, [r3, #0]
 8000c0a:	813b      	strh	r3, [r7, #8]
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	72bb      	strb	r3, [r7, #10]

	HAL_StatusTypeDef status;

	SPI1_CS_LOW();
 8000c10:	2200      	movs	r2, #0
 8000c12:	2140      	movs	r1, #64	@ 0x40
 8000c14:	480f      	ldr	r0, [pc, #60]	@ (8000c54 <mcp2515readRegister+0x64>)
 8000c16:	f001 f833 	bl	8001c80 <HAL_GPIO_WritePin>
    status = HAL_SPI_TransmitReceive(&hspi1, txBuffer, rxBuffer, sizeof(txBuffer), 100);
 8000c1a:	f107 0208 	add.w	r2, r7, #8
 8000c1e:	f107 010c 	add.w	r1, r7, #12
 8000c22:	2364      	movs	r3, #100	@ 0x64
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	2303      	movs	r3, #3
 8000c28:	480b      	ldr	r0, [pc, #44]	@ (8000c58 <mcp2515readRegister+0x68>)
 8000c2a:	f002 fb83 	bl	8003334 <HAL_SPI_TransmitReceive>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	73fb      	strb	r3, [r7, #15]
	SPI1_CS_HIGH();
 8000c32:	2201      	movs	r2, #1
 8000c34:	2140      	movs	r1, #64	@ 0x40
 8000c36:	4807      	ldr	r0, [pc, #28]	@ (8000c54 <mcp2515readRegister+0x64>)
 8000c38:	f001 f822 	bl	8001c80 <HAL_GPIO_WritePin>

	if(status != HAL_OK){
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <mcp2515readRegister+0x56>

		Error_Handler();
 8000c42:	f000 fac7 	bl	80011d4 <Error_Handler>
	}
	return rxBuffer[2];
 8000c46:	7abb      	ldrb	r3, [r7, #10]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3710      	adds	r7, #16
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	08009604 	.word	0x08009604
 8000c54:	40020400 	.word	0x40020400
 8000c58:	20000348 	.word	0x20000348

08000c5c <TimeInit>:

void TimeInit(void){
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime = {0};
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
	sTime.Hours = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	71bb      	strb	r3, [r7, #6]
	sTime.SubSeconds = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60bb      	str	r3, [r7, #8]

	if(HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK){
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	2200      	movs	r2, #0
 8000c84:	4619      	mov	r1, r3
 8000c86:	4806      	ldr	r0, [pc, #24]	@ (8000ca0 <TimeInit+0x44>)
 8000c88:	f001 fe69 	bl	800295e <HAL_RTC_SetTime>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <TimeInit+0x3a>
		Error_Handler();
 8000c92:	f000 fa9f 	bl	80011d4 <Error_Handler>
	}
}
 8000c96:	bf00      	nop
 8000c98:	3718      	adds	r7, #24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000328 	.word	0x20000328

08000ca4 <Timestamp>:


uint32_t Timestamp(void) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08a      	sub	sp, #40	@ 0x28
 8000ca8:	af00      	add	r7, sp, #0
    RTC_TimeTypeDef sTime = {0};
 8000caa:	f107 0308 	add.w	r3, r7, #8
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
 8000cb6:	60da      	str	r2, [r3, #12]
 8000cb8:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 8000cba:	2300      	movs	r3, #0
 8000cbc:	607b      	str	r3, [r7, #4]
    uint32_t timeValue = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	627b      	str	r3, [r7, #36]	@ 0x24

    // Retrieve time from RTC
    if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) == HAL_OK) {
 8000cc2:	f107 0308 	add.w	r3, r7, #8
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	4619      	mov	r1, r3
 8000cca:	481b      	ldr	r0, [pc, #108]	@ (8000d38 <Timestamp+0x94>)
 8000ccc:	f001 fee1 	bl	8002a92 <HAL_RTC_GetTime>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d125      	bne.n	8000d22 <Timestamp+0x7e>

        uint32_t SubSeconds = sTime.SubSeconds;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	623b      	str	r3, [r7, #32]
		uint32_t Predivider = hrtc.Init.SynchPrediv; // Predivider value set in RTC config
 8000cda:	4b17      	ldr	r3, [pc, #92]	@ (8000d38 <Timestamp+0x94>)
 8000cdc:	68db      	ldr	r3, [r3, #12]
 8000cde:	61fb      	str	r3, [r7, #28]

		// Calculate milliseconds
		timeValue = (sTime.Hours * 3600000)+ (sTime.Minutes * 60000)+(sTime.Seconds * 1000) +
 8000ce0:	7a3b      	ldrb	r3, [r7, #8]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	4b15      	ldr	r3, [pc, #84]	@ (8000d3c <Timestamp+0x98>)
 8000ce6:	fb03 f202 	mul.w	r2, r3, r2
 8000cea:	7a7b      	ldrb	r3, [r7, #9]
 8000cec:	4619      	mov	r1, r3
 8000cee:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8000cf2:	fb01 f303 	mul.w	r3, r1, r3
 8000cf6:	441a      	add	r2, r3
 8000cf8:	7abb      	ldrb	r3, [r7, #10]
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d00:	fb01 f303 	mul.w	r3, r1, r3
 8000d04:	4413      	add	r3, r2
 8000d06:	4619      	mov	r1, r3
				   (((Predivider - SubSeconds) * 1000) / (Predivider + 1));
 8000d08:	69fa      	ldr	r2, [r7, #28]
 8000d0a:	6a3b      	ldr	r3, [r7, #32]
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000d12:	fb03 f202 	mul.w	r2, r3, r2
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	fbb2 f3f3 	udiv	r3, r2, r3
		timeValue = (sTime.Hours * 3600000)+ (sTime.Minutes * 60000)+(sTime.Seconds * 1000) +
 8000d1e:	440b      	add	r3, r1
 8000d20:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	2200      	movs	r2, #0
 8000d26:	4619      	mov	r1, r3
 8000d28:	4803      	ldr	r0, [pc, #12]	@ (8000d38 <Timestamp+0x94>)
 8000d2a:	f001 ff10 	bl	8002b4e <HAL_RTC_GetDate>

    return timeValue;
 8000d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3728      	adds	r7, #40	@ 0x28
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000328 	.word	0x20000328
 8000d3c:	0036ee80 	.word	0x0036ee80

08000d40 <mcp2515messageAvailable>:
	}

	HAL_Delay (10);
}

void mcp2515messageAvailable(void){
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0

	GPIO_PinState status;
	GPIO_PinState status1;


	status = HAL_GPIO_ReadPin(CAN_INT_GPIO_Port, CAN_INT_Pin);
 8000d46:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d4a:	4811      	ldr	r0, [pc, #68]	@ (8000d90 <mcp2515messageAvailable+0x50>)
 8000d4c:	f000 ff80 	bl	8001c50 <HAL_GPIO_ReadPin>
 8000d50:	4603      	mov	r3, r0
 8000d52:	71fb      	strb	r3, [r7, #7]
	//Set the Interrupt flag from the RX0IF
	mcp2515writeRegister(0x2B, 0x01);
 8000d54:	2101      	movs	r1, #1
 8000d56:	202b      	movs	r0, #43	@ 0x2b
 8000d58:	f7ff ff22 	bl	8000ba0 <mcp2515writeRegister>



	//read the result from the Interrupt enable register at RX0IE
	uint8_t result = mcp2515readRegister(0x2B);
 8000d5c:	202b      	movs	r0, #43	@ 0x2b
 8000d5e:	f7ff ff47 	bl	8000bf0 <mcp2515readRegister>
 8000d62:	4603      	mov	r3, r0
 8000d64:	71bb      	strb	r3, [r7, #6]
	result = mcp2515readRegister(0x0C);
 8000d66:	200c      	movs	r0, #12
 8000d68:	f7ff ff42 	bl	8000bf0 <mcp2515readRegister>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	71bb      	strb	r3, [r7, #6]
	mcp2515writeRegister(0x2C, 0x01);
 8000d70:	2101      	movs	r1, #1
 8000d72:	202c      	movs	r0, #44	@ 0x2c
 8000d74:	f7ff ff14 	bl	8000ba0 <mcp2515writeRegister>

	if (result != 0x01){
		//Error_Handler();
	}

	status1 = HAL_GPIO_ReadPin(CAN_INT_GPIO_Port, CAN_INT_Pin);
 8000d78:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d7c:	4804      	ldr	r0, [pc, #16]	@ (8000d90 <mcp2515messageAvailable+0x50>)
 8000d7e:	f000 ff67 	bl	8001c50 <HAL_GPIO_ReadPin>
 8000d82:	4603      	mov	r3, r0
 8000d84:	717b      	strb	r3, [r7, #5]

}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40020000 	.word	0x40020000

08000d94 <mcp2515readMessage>:


void mcp2515readMessage(bool random, uint8_t fixedData){
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08e      	sub	sp, #56	@ 0x38
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	460a      	mov	r2, r1
 8000d9e:	71fb      	strb	r3, [r7, #7]
 8000da0:	4613      	mov	r3, r2
 8000da2:	71bb      	strb	r3, [r7, #6]
	 * 		 fixedData(uint8_t
	 */


	//Sanity check for GPIO pin
	GPIO_PinState status = HAL_GPIO_ReadPin(CAN_INT_GPIO_Port, CAN_INT_Pin);
 8000da4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000da8:	485d      	ldr	r0, [pc, #372]	@ (8000f20 <mcp2515readMessage+0x18c>)
 8000daa:	f000 ff51 	bl	8001c50 <HAL_GPIO_ReadPin>
 8000dae:	4603      	mov	r3, r0
 8000db0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status == GPIO_PIN_RESET){
 8000db4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	f040 80a7 	bne.w	8000f0c <mcp2515readMessage+0x178>
		uint8_t readRXB0[1] = {0x90};
 8000dbe:	2390      	movs	r3, #144	@ 0x90
 8000dc0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		uint8_t RXB0Buffer[14] = {0};
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
 8000dc8:	f107 0318 	add.w	r3, r7, #24
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	811a      	strh	r2, [r3, #8]
		uint16_t RXB0Data[1] = {0};
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	823b      	strh	r3, [r7, #16]

		//Clear RXB0
		mcp2515writeRegister(0x2C, 0x00);
 8000dd8:	2100      	movs	r1, #0
 8000dda:	202c      	movs	r0, #44	@ 0x2c
 8000ddc:	f7ff fee0 	bl	8000ba0 <mcp2515writeRegister>

		SPI1_CS_LOW();
 8000de0:	2200      	movs	r2, #0
 8000de2:	2140      	movs	r1, #64	@ 0x40
 8000de4:	484f      	ldr	r0, [pc, #316]	@ (8000f24 <mcp2515readMessage+0x190>)
 8000de6:	f000 ff4b 	bl	8001c80 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, readRXB0, 1, 100);
 8000dea:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000dee:	2364      	movs	r3, #100	@ 0x64
 8000df0:	2201      	movs	r2, #1
 8000df2:	484d      	ldr	r0, [pc, #308]	@ (8000f28 <mcp2515readMessage+0x194>)
 8000df4:	f002 f841 	bl	8002e7a <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, RXB0Buffer, 14, 100);
 8000df8:	f107 0114 	add.w	r1, r7, #20
 8000dfc:	2364      	movs	r3, #100	@ 0x64
 8000dfe:	220e      	movs	r2, #14
 8000e00:	4849      	ldr	r0, [pc, #292]	@ (8000f28 <mcp2515readMessage+0x194>)
 8000e02:	f002 f97e 	bl	8003102 <HAL_SPI_Receive>
		SPI1_CS_HIGH();
 8000e06:	2201      	movs	r2, #1
 8000e08:	2140      	movs	r1, #64	@ 0x40
 8000e0a:	4846      	ldr	r0, [pc, #280]	@ (8000f24 <mcp2515readMessage+0x190>)
 8000e0c:	f000 ff38 	bl	8001c80 <HAL_GPIO_WritePin>

		//Returns data of the message, can be random or fixed for testing
		if (random == true){
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d010      	beq.n	8000e38 <mcp2515readMessage+0xa4>
			RXB0Data[0] = rand() % (255);
 8000e16:	f007 f92d 	bl	8008074 <rand>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	4b43      	ldr	r3, [pc, #268]	@ (8000f2c <mcp2515readMessage+0x198>)
 8000e1e:	fb83 1302 	smull	r1, r3, r3, r2
 8000e22:	4413      	add	r3, r2
 8000e24:	11d9      	asrs	r1, r3, #7
 8000e26:	17d3      	asrs	r3, r2, #31
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	021b      	lsls	r3, r3, #8
 8000e2e:	1a5b      	subs	r3, r3, r1
 8000e30:	1ad1      	subs	r1, r2, r3
 8000e32:	b28b      	uxth	r3, r1
 8000e34:	823b      	strh	r3, [r7, #16]
 8000e36:	e002      	b.n	8000e3e <mcp2515readMessage+0xaa>
		}
		else{

			RXB0Data[0] = fixedData;
 8000e38:	79bb      	ldrb	r3, [r7, #6]
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	823b      	strh	r3, [r7, #16]
		}

		uint32_t timestamp = Timestamp();
 8000e3e:	f7ff ff31 	bl	8000ca4 <Timestamp>
 8000e42:	6338      	str	r0, [r7, #48]	@ 0x30
		counter += 1;
 8000e44:	4b3a      	ldr	r3, [pc, #232]	@ (8000f30 <mcp2515readMessage+0x19c>)
 8000e46:	881b      	ldrh	r3, [r3, #0]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	4b38      	ldr	r3, [pc, #224]	@ (8000f30 <mcp2515readMessage+0x19c>)
 8000e4e:	801a      	strh	r2, [r3, #0]


		//Create Pointer to the MessageCAN Struct
		MessageCAN *ptrToStruct;

		ptrToStruct = pvPortMalloc(sizeof(MessageCAN)); //Returns Object not address
 8000e50:	200c      	movs	r0, #12
 8000e52:	f006 ff03 	bl	8007c5c <pvPortMalloc>
 8000e56:	4603      	mov	r3, r0
 8000e58:	60fb      	str	r3, [r7, #12]
		if (ptrToStruct == NULL) {
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d104      	bne.n	8000e6a <mcp2515readMessage+0xd6>
		    print("Memory allocation failed for can msg");
 8000e60:	4834      	ldr	r0, [pc, #208]	@ (8000f34 <mcp2515readMessage+0x1a0>)
 8000e62:	f7ff fe37 	bl	8000ad4 <print>
		    Error_Handler();
 8000e66:	f000 f9b5 	bl	80011d4 <Error_Handler>
		}

		ptrToStruct->canID = 0x35;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	2235      	movs	r2, #53	@ 0x35
 8000e6e:	701a      	strb	r2, [r3, #0]
		ptrToStruct->data = RXB0Data[0];  //DOES NOT DECAY TO POINTER because of [0]
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	8a3a      	ldrh	r2, [r7, #16]
 8000e74:	805a      	strh	r2, [r3, #2]
		ptrToStruct->timeStamp = timestamp;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000e7a:	605a      	str	r2, [r3, #4]
		ptrToStruct->sensorName = "Temp Sensor";
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	4a2e      	ldr	r2, [pc, #184]	@ (8000f38 <mcp2515readMessage+0x1a4>)
 8000e80:	609a      	str	r2, [r3, #8]

		//Send to QUeue
		if (xQueueSend(MessageQueueHandle, &ptrToStruct, portMAX_DELAY) == pdPASS)
 8000e82:	4b2e      	ldr	r3, [pc, #184]	@ (8000f3c <mcp2515readMessage+0x1a8>)
 8000e84:	6818      	ldr	r0, [r3, #0]
 8000e86:	f107 010c 	add.w	r1, r7, #12
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e90:	f004 f91e 	bl	80050d0 <xQueueGenericSend>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d103      	bne.n	8000ea2 <mcp2515readMessage+0x10e>
		{
			print("Message in Queue");
 8000e9a:	4829      	ldr	r0, [pc, #164]	@ (8000f40 <mcp2515readMessage+0x1ac>)
 8000e9c:	f7ff fe1a 	bl	8000ad4 <print>
 8000ea0:	e006      	b.n	8000eb0 <mcp2515readMessage+0x11c>
		}
		else{

			vPortFree(ptrToStruct);
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f006 ffad 	bl	8007e04 <vPortFree>
			print("Failed to put message in Queue");
 8000eaa:	4826      	ldr	r0, [pc, #152]	@ (8000f44 <mcp2515readMessage+0x1b0>)
 8000eac:	f7ff fe12 	bl	8000ad4 <print>
		}

		uint32_t MsgInQueue = uxQueueSpacesAvailable(MessageQueueHandle);
 8000eb0:	4b22      	ldr	r3, [pc, #136]	@ (8000f3c <mcp2515readMessage+0x1a8>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f004 fdce 	bl	8005a56 <uxQueueSpacesAvailable>
 8000eba:	62f8      	str	r0, [r7, #44]	@ 0x2c

		char *ptr;
		ptr = pvPortMalloc(100 * sizeof(char));
 8000ebc:	2064      	movs	r0, #100	@ 0x64
 8000ebe:	f006 fecd 	bl	8007c5c <pvPortMalloc>
 8000ec2:	62b8      	str	r0, [r7, #40]	@ 0x28
		if (ptr == NULL) {
 8000ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d104      	bne.n	8000ed4 <mcp2515readMessage+0x140>
				    print("Memory allocation failed for msg in queue number");
 8000eca:	481f      	ldr	r0, [pc, #124]	@ (8000f48 <mcp2515readMessage+0x1b4>)
 8000ecc:	f7ff fe02 	bl	8000ad4 <print>
				    Error_Handler();
 8000ed0:	f000 f980 	bl	80011d4 <Error_Handler>
				}
		sprintf(ptr, "Number of spaces in Queue: %u", MsgInQueue);
 8000ed4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ed6:	491d      	ldr	r1, [pc, #116]	@ (8000f4c <mcp2515readMessage+0x1b8>)
 8000ed8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000eda:	f007 f9cb 	bl	8008274 <siprintf>
		print(ptr);
 8000ede:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000ee0:	f7ff fdf8 	bl	8000ad4 <print>
		vPortFree(ptr);
 8000ee4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000ee6:	f006 ff8d 	bl	8007e04 <vPortFree>
		ptr = NULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	62bb      	str	r3, [r7, #40]	@ 0x28

		if (MsgInQueue == 0){    //
 8000eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d110      	bne.n	8000f16 <mcp2515readMessage+0x182>

			print("Queue is Full");
 8000ef4:	4816      	ldr	r0, [pc, #88]	@ (8000f50 <mcp2515readMessage+0x1bc>)
 8000ef6:	f7ff fded 	bl	8000ad4 <print>
			xEventGroupSetBits(messageToRead, EVENT_BIT_3);
 8000efa:	4b16      	ldr	r3, [pc, #88]	@ (8000f54 <mcp2515readMessage+0x1c0>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2108      	movs	r1, #8
 8000f00:	4618      	mov	r0, r3
 8000f02:	f003 fde8 	bl	8004ad6 <xEventGroupSetBits>
			osThreadYield();
 8000f06:	f003 fbff 	bl	8004708 <osThreadYield>
	else{
		print("no message in buffer, should not happen error");
		Error_Handler();
	}

}
 8000f0a:	e004      	b.n	8000f16 <mcp2515readMessage+0x182>
		print("no message in buffer, should not happen error");
 8000f0c:	4812      	ldr	r0, [pc, #72]	@ (8000f58 <mcp2515readMessage+0x1c4>)
 8000f0e:	f7ff fde1 	bl	8000ad4 <print>
		Error_Handler();
 8000f12:	f000 f95f 	bl	80011d4 <Error_Handler>
}
 8000f16:	bf00      	nop
 8000f18:	3738      	adds	r7, #56	@ 0x38
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40020000 	.word	0x40020000
 8000f24:	40020400 	.word	0x40020400
 8000f28:	20000348 	.word	0x20000348
 8000f2c:	80808081 	.word	0x80808081
 8000f30:	200006a0 	.word	0x200006a0
 8000f34:	08009608 	.word	0x08009608
 8000f38:	08009630 	.word	0x08009630
 8000f3c:	200006a4 	.word	0x200006a4
 8000f40:	0800963c 	.word	0x0800963c
 8000f44:	08009650 	.word	0x08009650
 8000f48:	08009670 	.word	0x08009670
 8000f4c:	080096a4 	.word	0x080096a4
 8000f50:	080096c4 	.word	0x080096c4
 8000f54:	200003fc 	.word	0x200003fc
 8000f58:	080096d4 	.word	0x080096d4

08000f5c <sdCardMsgPost>:

void sdCardMsgPost(void){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af02      	add	r7, sp, #8
	 * This function should be called whenever the mail queue is full by responding to an event
	 * It should process every message in the queue, post it to the SD card using a for-loop or print out to terminal
	 * Free all memory as messages are processed
	 */

	if (uxQueueSpacesAvailable(MessageQueueHandle) == 0){
 8000f62:	4b29      	ldr	r3, [pc, #164]	@ (8001008 <sdCardMsgPost+0xac>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f004 fd75 	bl	8005a56 <uxQueueSpacesAvailable>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d145      	bne.n	8000ffe <sdCardMsgPost+0xa2>

		MessageCAN *ptrToRxMsg;
		char *ptr;

		print("In SD Msg post function");
 8000f72:	4826      	ldr	r0, [pc, #152]	@ (800100c <sdCardMsgPost+0xb0>)
 8000f74:	f7ff fdae 	bl	8000ad4 <print>

		uint8_t numberOfMessages = uxQueueMessagesWaiting(MessageQueueHandle);
 8000f78:	4b23      	ldr	r3, [pc, #140]	@ (8001008 <sdCardMsgPost+0xac>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f004 fd4b 	bl	8005a18 <uxQueueMessagesWaiting>
 8000f82:	4603      	mov	r3, r0
 8000f84:	72fb      	strb	r3, [r7, #11]

		//while(uxQueueMessagesWaiting(MessageQueueHandle) != 0)
		for(int i = 0; i < numberOfMessages; i++){			//     ////Make this a for loop for sizeof messages waiting
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	e034      	b.n	8000ff6 <sdCardMsgPost+0x9a>



			if (xQueueReceive(MessageQueueHandle, &ptrToRxMsg, portMAX_DELAY) == pdPASS ){
 8000f8c:	4b1e      	ldr	r3, [pc, #120]	@ (8001008 <sdCardMsgPost+0xac>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4639      	mov	r1, r7
 8000f92:	f04f 32ff 	mov.w	r2, #4294967295
 8000f96:	4618      	mov	r0, r3
 8000f98:	f004 faca 	bl	8005530 <xQueueReceive>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d126      	bne.n	8000ff0 <sdCardMsgPost+0x94>

				ptr = pvPortMalloc(100 * sizeof(char));
 8000fa2:	2064      	movs	r0, #100	@ 0x64
 8000fa4:	f006 fe5a 	bl	8007c5c <pvPortMalloc>
 8000fa8:	6078      	str	r0, [r7, #4]
				if (ptr == NULL) {
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d104      	bne.n	8000fba <sdCardMsgPost+0x5e>
							print("Memory allocation failed for sd card msg");
 8000fb0:	4817      	ldr	r0, [pc, #92]	@ (8001010 <sdCardMsgPost+0xb4>)
 8000fb2:	f7ff fd8f 	bl	8000ad4 <print>
							Error_Handler();
 8000fb6:	f000 f90d 	bl	80011d4 <Error_Handler>
				}
				if (i < 3){
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	dc17      	bgt.n	8000ff0 <sdCardMsgPost+0x94>
				sprintf (ptr, "Received Data: %u at Time: %u from %s", ptrToRxMsg->data, ptrToRxMsg->timeStamp, ptrToRxMsg->sensorName);
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	885b      	ldrh	r3, [r3, #2]
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685a      	ldr	r2, [r3, #4]
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	460a      	mov	r2, r1
 8000fd4:	490f      	ldr	r1, [pc, #60]	@ (8001014 <sdCardMsgPost+0xb8>)
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f007 f94c 	bl	8008274 <siprintf>
				print(ptr);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff fd79 	bl	8000ad4 <print>
				vPortFree(ptr);
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f006 ff0e 	bl	8007e04 <vPortFree>
				vPortFree(ptrToRxMsg);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f006 ff0a 	bl	8007e04 <vPortFree>
		for(int i = 0; i < numberOfMessages; i++){			//     ////Make this a for loop for sizeof messages waiting
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	7afb      	ldrb	r3, [r7, #11]
 8000ff8:	68fa      	ldr	r2, [r7, #12]
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	dbc6      	blt.n	8000f8c <sdCardMsgPost+0x30>
				}
			}

		}
	}
}
 8000ffe:	bf00      	nop
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200006a4 	.word	0x200006a4
 800100c:	08009704 	.word	0x08009704
 8001010:	0800971c 	.word	0x0800971c
 8001014:	08009748 	.word	0x08009748

08001018 <HAL_GPIO_EXTI_Callback>:
	return;
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	80fb      	strh	r3, [r7, #6]


	UNUSED(GPIO_Pin);
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
	xEventGroupSetBitsFromISR(messageToRead, EVENT_BIT_1, &xHigherPriorityTaskWoken);
 8001026:	4b06      	ldr	r3, [pc, #24]	@ (8001040 <HAL_GPIO_EXTI_Callback+0x28>)
 8001028:	6819      	ldr	r1, [r3, #0]
 800102a:	f107 030c 	add.w	r3, r7, #12
 800102e:	2202      	movs	r2, #2
 8001030:	4804      	ldr	r0, [pc, #16]	@ (8001044 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001032:	f006 fba1 	bl	8007778 <xTimerPendFunctionCallFromISR>
}
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200003fc 	.word	0x200003fc
 8001044:	08004bef 	.word	0x08004bef

08001048 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
    //print("Idle Task");
    //LogStackUsage("Idle Task", defaultTaskHandle);
    HeapMonitorTask();
 8001050:	f7ff fd0e 	bl	8000a70 <HeapMonitorTask>
    osDelay(1000);
 8001054:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001058:	f003 fb68 	bl	800472c <osDelay>
    HeapMonitorTask();
 800105c:	bf00      	nop
 800105e:	e7f7      	b.n	8001050 <StartDefaultTask+0x8>

08001060 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af02      	add	r7, sp, #8
 8001066:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  //print("Task 2 Entered");
	  EventBits_t uxBits = xEventGroupWaitBits(messageToRead, EVENT_BIT_2, pdTRUE, pdTRUE, portMAX_DELAY);
 8001068:	4b10      	ldr	r3, [pc, #64]	@ (80010ac <StartTask02+0x4c>)
 800106a:	6818      	ldr	r0, [r3, #0]
 800106c:	f04f 33ff 	mov.w	r3, #4294967295
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	2301      	movs	r3, #1
 8001074:	2201      	movs	r2, #1
 8001076:	2104      	movs	r1, #4
 8001078:	f003 fc22 	bl	80048c0 <xEventGroupWaitBits>
 800107c:	60f8      	str	r0, [r7, #12]
	  //if (ux)
	  print("Task Started");
 800107e:	480c      	ldr	r0, [pc, #48]	@ (80010b0 <StartTask02+0x50>)
 8001080:	f7ff fd28 	bl	8000ad4 <print>
      mcp2515readMessage(false, 100);
 8001084:	2164      	movs	r1, #100	@ 0x64
 8001086:	2000      	movs	r0, #0
 8001088:	f7ff fe84 	bl	8000d94 <mcp2515readMessage>
      EventBits_t currentBits = xEventGroupGetBits(messageToRead);  //DEBUG
 800108c:	4b07      	ldr	r3, [pc, #28]	@ (80010ac <StartTask02+0x4c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f003 fce6 	bl	8004a64 <xEventGroupClearBits>
 8001098:	60b8      	str	r0, [r7, #8]
      LogStackUsage("Read Message Task", myTask02Handle);
 800109a:	4b06      	ldr	r3, [pc, #24]	@ (80010b4 <StartTask02+0x54>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4619      	mov	r1, r3
 80010a0:	4805      	ldr	r0, [pc, #20]	@ (80010b8 <StartTask02+0x58>)
 80010a2:	f7ff fcc1 	bl	8000a28 <LogStackUsage>
  {
 80010a6:	bf00      	nop
 80010a8:	e7de      	b.n	8001068 <StartTask02+0x8>
 80010aa:	bf00      	nop
 80010ac:	200003fc 	.word	0x200003fc
 80010b0:	08009770 	.word	0x08009770
 80010b4:	200003ec 	.word	0x200003ec
 80010b8:	08009780 	.word	0x08009780

080010bc <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af02      	add	r7, sp, #8
 80010c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	 //print("Task 3 Entered");
	 EventBits_t uxBits = xEventGroupWaitBits(messageToRead, EVENT_BIT_3, pdTRUE, pdTRUE, portMAX_DELAY); //Or change to IF QueueFull == true then ELSE osYield();
 80010c4:	4b17      	ldr	r3, [pc, #92]	@ (8001124 <StartTask03+0x68>)
 80010c6:	6818      	ldr	r0, [r3, #0]
 80010c8:	f04f 33ff 	mov.w	r3, #4294967295
 80010cc:	9300      	str	r3, [sp, #0]
 80010ce:	2301      	movs	r3, #1
 80010d0:	2201      	movs	r2, #1
 80010d2:	2108      	movs	r1, #8
 80010d4:	f003 fbf4 	bl	80048c0 <xEventGroupWaitBits>
 80010d8:	60f8      	str	r0, [r7, #12]
	 taskENTER_CRITICAL();
 80010da:	f006 fc9d 	bl	8007a18 <vPortEnterCritical>
	 print("Task 3 Started");
 80010de:	4812      	ldr	r0, [pc, #72]	@ (8001128 <StartTask03+0x6c>)
 80010e0:	f7ff fcf8 	bl	8000ad4 <print>
	 sdCardMsgPost();
 80010e4:	f7ff ff3a 	bl	8000f5c <sdCardMsgPost>
	 xEventGroupSetBits(messageToRead, EVENT_BIT_0);
 80010e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001124 <StartTask03+0x68>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f003 fcf1 	bl	8004ad6 <xEventGroupSetBits>
	 EventBits_t currentBits = xEventGroupGetBits(messageToRead);
 80010f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001124 <StartTask03+0x68>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f003 fcb2 	bl	8004a64 <xEventGroupClearBits>
 8001100:	60b8      	str	r0, [r7, #8]
	 if (currentBits == 0x04){
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	2b04      	cmp	r3, #4
 8001106:	d104      	bne.n	8001112 <StartTask03+0x56>
		 print("Bits not reset for event flag");
 8001108:	4808      	ldr	r0, [pc, #32]	@ (800112c <StartTask03+0x70>)
 800110a:	f7ff fce3 	bl	8000ad4 <print>
		 Error_Handler();
 800110e:	f000 f861 	bl	80011d4 <Error_Handler>
	 }
     LogStackUsage("SD Card message Post", sdCardMsgPostHandle);
 8001112:	4b07      	ldr	r3, [pc, #28]	@ (8001130 <StartTask03+0x74>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4619      	mov	r1, r3
 8001118:	4806      	ldr	r0, [pc, #24]	@ (8001134 <StartTask03+0x78>)
 800111a:	f7ff fc85 	bl	8000a28 <LogStackUsage>
     taskEXIT_CRITICAL();
 800111e:	f006 fcad 	bl	8007a7c <vPortExitCritical>
  {
 8001122:	e7cf      	b.n	80010c4 <StartTask03+0x8>
 8001124:	200003fc 	.word	0x200003fc
 8001128:	08009794 	.word	0x08009794
 800112c:	080097a4 	.word	0x080097a4
 8001130:	200003f0 	.word	0x200003f0
 8001134:	080097c4 	.word	0x080097c4

08001138 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af02      	add	r7, sp, #8
 800113e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
	  EventBits_t uxBits = xEventGroupWaitBits(messageToRead, EVENT_BIT_1, pdTRUE, pdTRUE, portMAX_DELAY);
 8001140:	4b17      	ldr	r3, [pc, #92]	@ (80011a0 <StartTask04+0x68>)
 8001142:	6818      	ldr	r0, [r3, #0]
 8001144:	f04f 33ff 	mov.w	r3, #4294967295
 8001148:	9300      	str	r3, [sp, #0]
 800114a:	2301      	movs	r3, #1
 800114c:	2201      	movs	r2, #1
 800114e:	2102      	movs	r1, #2
 8001150:	f003 fbb6 	bl	80048c0 <xEventGroupWaitBits>
 8001154:	60f8      	str	r0, [r7, #12]
	  print("Task 4 started");
 8001156:	4813      	ldr	r0, [pc, #76]	@ (80011a4 <StartTask04+0x6c>)
 8001158:	f7ff fcbc 	bl	8000ad4 <print>
	  mcp2515messageAvailable();
 800115c:	f7ff fdf0 	bl	8000d40 <mcp2515messageAvailable>
	  EventBits_t currentBits = xEventGroupGetBits(messageToRead);
 8001160:	4b0f      	ldr	r3, [pc, #60]	@ (80011a0 <StartTask04+0x68>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f003 fc7c 	bl	8004a64 <xEventGroupClearBits>
 800116c:	60b8      	str	r0, [r7, #8]
	  uxBits = xEventGroupSetBits(messageToRead, EVENT_BIT_2);
 800116e:	4b0c      	ldr	r3, [pc, #48]	@ (80011a0 <StartTask04+0x68>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2104      	movs	r1, #4
 8001174:	4618      	mov	r0, r3
 8001176:	f003 fcae 	bl	8004ad6 <xEventGroupSetBits>
 800117a:	60f8      	str	r0, [r7, #12]
	  currentBits = xEventGroupGetBits(messageToRead);
 800117c:	4b08      	ldr	r3, [pc, #32]	@ (80011a0 <StartTask04+0x68>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f003 fc6e 	bl	8004a64 <xEventGroupClearBits>
 8001188:	60b8      	str	r0, [r7, #8]
      LogStackUsage("Avialable Message Task", messageAvailablHandle);
 800118a:	4b07      	ldr	r3, [pc, #28]	@ (80011a8 <StartTask04+0x70>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4619      	mov	r1, r3
 8001190:	4806      	ldr	r0, [pc, #24]	@ (80011ac <StartTask04+0x74>)
 8001192:	f7ff fc49 	bl	8000a28 <LogStackUsage>
	  osDelay(50);
 8001196:	2032      	movs	r0, #50	@ 0x32
 8001198:	f003 fac8 	bl	800472c <osDelay>
  {
 800119c:	bf00      	nop
 800119e:	e7cf      	b.n	8001140 <StartTask04+0x8>
 80011a0:	200003fc 	.word	0x200003fc
 80011a4:	080097dc 	.word	0x080097dc
 80011a8:	200003f4 	.word	0x200003f4
 80011ac:	080097ec 	.word	0x080097ec

080011b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a04      	ldr	r2, [pc, #16]	@ (80011d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d101      	bne.n	80011c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011c2:	f000 fabf 	bl	8001744 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40010000 	.word	0x40010000

080011d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d8:	b672      	cpsid	i
}
 80011da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();


  while (1)
 80011dc:	bf00      	nop
 80011de:	e7fd      	b.n	80011dc <Error_Handler+0x8>

080011e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	4b12      	ldr	r3, [pc, #72]	@ (8001234 <HAL_MspInit+0x54>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ee:	4a11      	ldr	r2, [pc, #68]	@ (8001234 <HAL_MspInit+0x54>)
 80011f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001234 <HAL_MspInit+0x54>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	603b      	str	r3, [r7, #0]
 8001206:	4b0b      	ldr	r3, [pc, #44]	@ (8001234 <HAL_MspInit+0x54>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120a:	4a0a      	ldr	r2, [pc, #40]	@ (8001234 <HAL_MspInit+0x54>)
 800120c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001210:	6413      	str	r3, [r2, #64]	@ 0x40
 8001212:	4b08      	ldr	r3, [pc, #32]	@ (8001234 <HAL_MspInit+0x54>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001216:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800121a:	603b      	str	r3, [r7, #0]
 800121c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800121e:	2200      	movs	r2, #0
 8001220:	210f      	movs	r1, #15
 8001222:	f06f 0001 	mvn.w	r0, #1
 8001226:	f000 fb65 	bl	80018f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40023800 	.word	0x40023800

08001238 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001240:	f107 0308 	add.w	r3, r7, #8
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
 8001250:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a0c      	ldr	r2, [pc, #48]	@ (8001288 <HAL_RTC_MspInit+0x50>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d111      	bne.n	8001280 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800125c:	2302      	movs	r3, #2
 800125e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001260:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001264:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001266:	f107 0308 	add.w	r3, r7, #8
 800126a:	4618      	mov	r0, r3
 800126c:	f001 fa04 	bl	8002678 <HAL_RCCEx_PeriphCLKConfig>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001276:	f7ff ffad 	bl	80011d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800127a:	4b04      	ldr	r3, [pc, #16]	@ (800128c <HAL_RTC_MspInit+0x54>)
 800127c:	2201      	movs	r2, #1
 800127e:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001280:	bf00      	nop
 8001282:	3720      	adds	r7, #32
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40002800 	.word	0x40002800
 800128c:	42470e3c 	.word	0x42470e3c

08001290 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	@ 0x28
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a19      	ldr	r2, [pc, #100]	@ (8001314 <HAL_SPI_MspInit+0x84>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d12b      	bne.n	800130a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
 80012b6:	4b18      	ldr	r3, [pc, #96]	@ (8001318 <HAL_SPI_MspInit+0x88>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ba:	4a17      	ldr	r2, [pc, #92]	@ (8001318 <HAL_SPI_MspInit+0x88>)
 80012bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012c2:	4b15      	ldr	r3, [pc, #84]	@ (8001318 <HAL_SPI_MspInit+0x88>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012ca:	613b      	str	r3, [r7, #16]
 80012cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	4b11      	ldr	r3, [pc, #68]	@ (8001318 <HAL_SPI_MspInit+0x88>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	4a10      	ldr	r2, [pc, #64]	@ (8001318 <HAL_SPI_MspInit+0x88>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012de:	4b0e      	ldr	r3, [pc, #56]	@ (8001318 <HAL_SPI_MspInit+0x88>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80012ea:	23e0      	movs	r3, #224	@ 0xe0
 80012ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f6:	2303      	movs	r3, #3
 80012f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012fa:	2305      	movs	r3, #5
 80012fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	4619      	mov	r1, r3
 8001304:	4805      	ldr	r0, [pc, #20]	@ (800131c <HAL_SPI_MspInit+0x8c>)
 8001306:	f000 fb1f 	bl	8001948 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800130a:	bf00      	nop
 800130c:	3728      	adds	r7, #40	@ 0x28
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40013000 	.word	0x40013000
 8001318:	40023800 	.word	0x40023800
 800131c:	40020000 	.word	0x40020000

08001320 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	@ 0x28
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a19      	ldr	r2, [pc, #100]	@ (80013a4 <HAL_UART_MspInit+0x84>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d12b      	bne.n	800139a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	4b18      	ldr	r3, [pc, #96]	@ (80013a8 <HAL_UART_MspInit+0x88>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134a:	4a17      	ldr	r2, [pc, #92]	@ (80013a8 <HAL_UART_MspInit+0x88>)
 800134c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001350:	6413      	str	r3, [r2, #64]	@ 0x40
 8001352:	4b15      	ldr	r3, [pc, #84]	@ (80013a8 <HAL_UART_MspInit+0x88>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	4b11      	ldr	r3, [pc, #68]	@ (80013a8 <HAL_UART_MspInit+0x88>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001366:	4a10      	ldr	r2, [pc, #64]	@ (80013a8 <HAL_UART_MspInit+0x88>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6313      	str	r3, [r2, #48]	@ 0x30
 800136e:	4b0e      	ldr	r3, [pc, #56]	@ (80013a8 <HAL_UART_MspInit+0x88>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800137a:	230c      	movs	r3, #12
 800137c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137e:	2302      	movs	r3, #2
 8001380:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001386:	2303      	movs	r3, #3
 8001388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800138a:	2307      	movs	r3, #7
 800138c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	4619      	mov	r1, r3
 8001394:	4805      	ldr	r0, [pc, #20]	@ (80013ac <HAL_UART_MspInit+0x8c>)
 8001396:	f000 fad7 	bl	8001948 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800139a:	bf00      	nop
 800139c:	3728      	adds	r7, #40	@ 0x28
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40004400 	.word	0x40004400
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40020000 	.word	0x40020000

080013b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08c      	sub	sp, #48	@ 0x30
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80013b8:	2300      	movs	r3, #0
 80013ba:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80013bc:	2300      	movs	r3, #0
 80013be:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80013c0:	2300      	movs	r3, #0
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001480 <HAL_InitTick+0xd0>)
 80013c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c8:	4a2d      	ldr	r2, [pc, #180]	@ (8001480 <HAL_InitTick+0xd0>)
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	6453      	str	r3, [r2, #68]	@ 0x44
 80013d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001480 <HAL_InitTick+0xd0>)
 80013d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013dc:	f107 020c 	add.w	r2, r7, #12
 80013e0:	f107 0310 	add.w	r3, r7, #16
 80013e4:	4611      	mov	r1, r2
 80013e6:	4618      	mov	r0, r3
 80013e8:	f001 f914 	bl	8002614 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80013ec:	f001 f8fe 	bl	80025ec <HAL_RCC_GetPCLK2Freq>
 80013f0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013f4:	4a23      	ldr	r2, [pc, #140]	@ (8001484 <HAL_InitTick+0xd4>)
 80013f6:	fba2 2303 	umull	r2, r3, r2, r3
 80013fa:	0c9b      	lsrs	r3, r3, #18
 80013fc:	3b01      	subs	r3, #1
 80013fe:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001400:	4b21      	ldr	r3, [pc, #132]	@ (8001488 <HAL_InitTick+0xd8>)
 8001402:	4a22      	ldr	r2, [pc, #136]	@ (800148c <HAL_InitTick+0xdc>)
 8001404:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001406:	4b20      	ldr	r3, [pc, #128]	@ (8001488 <HAL_InitTick+0xd8>)
 8001408:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800140c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800140e:	4a1e      	ldr	r2, [pc, #120]	@ (8001488 <HAL_InitTick+0xd8>)
 8001410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001412:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001414:	4b1c      	ldr	r3, [pc, #112]	@ (8001488 <HAL_InitTick+0xd8>)
 8001416:	2200      	movs	r2, #0
 8001418:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141a:	4b1b      	ldr	r3, [pc, #108]	@ (8001488 <HAL_InitTick+0xd8>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001420:	4b19      	ldr	r3, [pc, #100]	@ (8001488 <HAL_InitTick+0xd8>)
 8001422:	2200      	movs	r2, #0
 8001424:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001426:	4818      	ldr	r0, [pc, #96]	@ (8001488 <HAL_InitTick+0xd8>)
 8001428:	f002 fa70 	bl	800390c <HAL_TIM_Base_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001432:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001436:	2b00      	cmp	r3, #0
 8001438:	d11b      	bne.n	8001472 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800143a:	4813      	ldr	r0, [pc, #76]	@ (8001488 <HAL_InitTick+0xd8>)
 800143c:	f002 fac0 	bl	80039c0 <HAL_TIM_Base_Start_IT>
 8001440:	4603      	mov	r3, r0
 8001442:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001446:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800144a:	2b00      	cmp	r3, #0
 800144c:	d111      	bne.n	8001472 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800144e:	2019      	movs	r0, #25
 8001450:	f000 fa6c 	bl	800192c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b0f      	cmp	r3, #15
 8001458:	d808      	bhi.n	800146c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800145a:	2200      	movs	r2, #0
 800145c:	6879      	ldr	r1, [r7, #4]
 800145e:	2019      	movs	r0, #25
 8001460:	f000 fa48 	bl	80018f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001464:	4a0a      	ldr	r2, [pc, #40]	@ (8001490 <HAL_InitTick+0xe0>)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	e002      	b.n	8001472 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001472:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001476:	4618      	mov	r0, r3
 8001478:	3730      	adds	r7, #48	@ 0x30
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40023800 	.word	0x40023800
 8001484:	431bde83 	.word	0x431bde83
 8001488:	200006a8 	.word	0x200006a8
 800148c:	40010000 	.word	0x40010000
 8001490:	20000004 	.word	0x20000004

08001494 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001498:	bf00      	nop
 800149a:	e7fd      	b.n	8001498 <NMI_Handler+0x4>

0800149c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	print("Hard Fault");
 80014a0:	4802      	ldr	r0, [pc, #8]	@ (80014ac <HardFault_Handler+0x10>)
 80014a2:	f7ff fb17 	bl	8000ad4 <print>

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a6:	bf00      	nop
 80014a8:	e7fd      	b.n	80014a6 <HardFault_Handler+0xa>
 80014aa:	bf00      	nop
 80014ac:	08009804 	.word	0x08009804

080014b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b4:	bf00      	nop
 80014b6:	e7fd      	b.n	80014b4 <MemManage_Handler+0x4>

080014b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <BusFault_Handler+0x4>

080014c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <UsageFault_Handler+0x4>

080014c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
	...

080014d8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014dc:	4802      	ldr	r0, [pc, #8]	@ (80014e8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80014de:	f002 fad1 	bl	8003a84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	200006a8 	.word	0x200006a8

080014ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Btn_Int_Pin);
 80014f0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80014f4:	f000 fbde 	bl	8001cb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}

080014fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  return 1;
 8001500:	2301      	movs	r3, #1
}
 8001502:	4618      	mov	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <_kill>:

int _kill(int pid, int sig)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001516:	f006 ffb5 	bl	8008484 <__errno>
 800151a:	4603      	mov	r3, r0
 800151c:	2216      	movs	r2, #22
 800151e:	601a      	str	r2, [r3, #0]
  return -1;
 8001520:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001524:	4618      	mov	r0, r3
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <_exit>:

void _exit (int status)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001534:	f04f 31ff 	mov.w	r1, #4294967295
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff ffe7 	bl	800150c <_kill>
  while (1) {}    /* Make sure we hang here */
 800153e:	bf00      	nop
 8001540:	e7fd      	b.n	800153e <_exit+0x12>

08001542 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b086      	sub	sp, #24
 8001546:	af00      	add	r7, sp, #0
 8001548:	60f8      	str	r0, [r7, #12]
 800154a:	60b9      	str	r1, [r7, #8]
 800154c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154e:	2300      	movs	r3, #0
 8001550:	617b      	str	r3, [r7, #20]
 8001552:	e00a      	b.n	800156a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001554:	f3af 8000 	nop.w
 8001558:	4601      	mov	r1, r0
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	1c5a      	adds	r2, r3, #1
 800155e:	60ba      	str	r2, [r7, #8]
 8001560:	b2ca      	uxtb	r2, r1
 8001562:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	3301      	adds	r3, #1
 8001568:	617b      	str	r3, [r7, #20]
 800156a:	697a      	ldr	r2, [r7, #20]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	429a      	cmp	r2, r3
 8001570:	dbf0      	blt.n	8001554 <_read+0x12>
  }

  return len;
 8001572:	687b      	ldr	r3, [r7, #4]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]
 800158c:	e009      	b.n	80015a2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	1c5a      	adds	r2, r3, #1
 8001592:	60ba      	str	r2, [r7, #8]
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	3301      	adds	r3, #1
 80015a0:	617b      	str	r3, [r7, #20]
 80015a2:	697a      	ldr	r2, [r7, #20]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	dbf1      	blt.n	800158e <_write+0x12>
  }
  return len;
 80015aa:	687b      	ldr	r3, [r7, #4]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3718      	adds	r7, #24
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <_close>:

int _close(int file)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015dc:	605a      	str	r2, [r3, #4]
  return 0;
 80015de:	2300      	movs	r3, #0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <_isatty>:

int _isatty(int file)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015f4:	2301      	movs	r3, #1
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001602:	b480      	push	{r7}
 8001604:	b085      	sub	sp, #20
 8001606:	af00      	add	r7, sp, #0
 8001608:	60f8      	str	r0, [r7, #12]
 800160a:	60b9      	str	r1, [r7, #8]
 800160c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800160e:	2300      	movs	r3, #0
}
 8001610:	4618      	mov	r0, r3
 8001612:	3714      	adds	r7, #20
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001624:	4a14      	ldr	r2, [pc, #80]	@ (8001678 <_sbrk+0x5c>)
 8001626:	4b15      	ldr	r3, [pc, #84]	@ (800167c <_sbrk+0x60>)
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001630:	4b13      	ldr	r3, [pc, #76]	@ (8001680 <_sbrk+0x64>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d102      	bne.n	800163e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001638:	4b11      	ldr	r3, [pc, #68]	@ (8001680 <_sbrk+0x64>)
 800163a:	4a12      	ldr	r2, [pc, #72]	@ (8001684 <_sbrk+0x68>)
 800163c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800163e:	4b10      	ldr	r3, [pc, #64]	@ (8001680 <_sbrk+0x64>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	429a      	cmp	r2, r3
 800164a:	d207      	bcs.n	800165c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800164c:	f006 ff1a 	bl	8008484 <__errno>
 8001650:	4603      	mov	r3, r0
 8001652:	220c      	movs	r2, #12
 8001654:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001656:	f04f 33ff 	mov.w	r3, #4294967295
 800165a:	e009      	b.n	8001670 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800165c:	4b08      	ldr	r3, [pc, #32]	@ (8001680 <_sbrk+0x64>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001662:	4b07      	ldr	r3, [pc, #28]	@ (8001680 <_sbrk+0x64>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4413      	add	r3, r2
 800166a:	4a05      	ldr	r2, [pc, #20]	@ (8001680 <_sbrk+0x64>)
 800166c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800166e:	68fb      	ldr	r3, [r7, #12]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20020000 	.word	0x20020000
 800167c:	00000400 	.word	0x00000400
 8001680:	200006f0 	.word	0x200006f0
 8001684:	20004700 	.word	0x20004700

08001688 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800168c:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <SystemInit+0x20>)
 800168e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001692:	4a05      	ldr	r2, [pc, #20]	@ (80016a8 <SystemInit+0x20>)
 8001694:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001698:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack    		 /* set stack pointer */
 80016ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016b0:	f7ff ffea 	bl	8001688 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016b4:	480c      	ldr	r0, [pc, #48]	@ (80016e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016b6:	490d      	ldr	r1, [pc, #52]	@ (80016ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016b8:	4a0d      	ldr	r2, [pc, #52]	@ (80016f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016bc:	e002      	b.n	80016c4 <LoopCopyDataInit>

080016be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016c2:	3304      	adds	r3, #4

080016c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c8:	d3f9      	bcc.n	80016be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ca:	4a0a      	ldr	r2, [pc, #40]	@ (80016f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016cc:	4c0a      	ldr	r4, [pc, #40]	@ (80016f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d0:	e001      	b.n	80016d6 <LoopFillZerobss>

080016d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d4:	3204      	adds	r2, #4

080016d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d8:	d3fb      	bcc.n	80016d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016da:	f006 fed9 	bl	8008490 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016de:	f7fe ff83 	bl	80005e8 <main>
  bx  lr    
 80016e2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016ec:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80016f0:	08009930 	.word	0x08009930
  ldr r2, =_sbss
 80016f4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80016f8:	200046fc 	.word	0x200046fc

080016fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016fc:	e7fe      	b.n	80016fc <ADC_IRQHandler>
	...

08001700 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001704:	4b0e      	ldr	r3, [pc, #56]	@ (8001740 <HAL_Init+0x40>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a0d      	ldr	r2, [pc, #52]	@ (8001740 <HAL_Init+0x40>)
 800170a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800170e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001710:	4b0b      	ldr	r3, [pc, #44]	@ (8001740 <HAL_Init+0x40>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a0a      	ldr	r2, [pc, #40]	@ (8001740 <HAL_Init+0x40>)
 8001716:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800171a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800171c:	4b08      	ldr	r3, [pc, #32]	@ (8001740 <HAL_Init+0x40>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a07      	ldr	r2, [pc, #28]	@ (8001740 <HAL_Init+0x40>)
 8001722:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001726:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001728:	2003      	movs	r0, #3
 800172a:	f000 f8d8 	bl	80018de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800172e:	200f      	movs	r0, #15
 8001730:	f7ff fe3e 	bl	80013b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001734:	f7ff fd54 	bl	80011e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40023c00 	.word	0x40023c00

08001744 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001748:	4b06      	ldr	r3, [pc, #24]	@ (8001764 <HAL_IncTick+0x20>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	461a      	mov	r2, r3
 800174e:	4b06      	ldr	r3, [pc, #24]	@ (8001768 <HAL_IncTick+0x24>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4413      	add	r3, r2
 8001754:	4a04      	ldr	r2, [pc, #16]	@ (8001768 <HAL_IncTick+0x24>)
 8001756:	6013      	str	r3, [r2, #0]
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	20000008 	.word	0x20000008
 8001768:	200006f4 	.word	0x200006f4

0800176c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return uwTick;
 8001770:	4b03      	ldr	r3, [pc, #12]	@ (8001780 <HAL_GetTick+0x14>)
 8001772:	681b      	ldr	r3, [r3, #0]
}
 8001774:	4618      	mov	r0, r3
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	200006f4 	.word	0x200006f4

08001784 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001794:	4b0c      	ldr	r3, [pc, #48]	@ (80017c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800179a:	68ba      	ldr	r2, [r7, #8]
 800179c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017a0:	4013      	ands	r3, r2
 80017a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017b6:	4a04      	ldr	r2, [pc, #16]	@ (80017c8 <__NVIC_SetPriorityGrouping+0x44>)
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	60d3      	str	r3, [r2, #12]
}
 80017bc:	bf00      	nop
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d0:	4b04      	ldr	r3, [pc, #16]	@ (80017e4 <__NVIC_GetPriorityGrouping+0x18>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	0a1b      	lsrs	r3, r3, #8
 80017d6:	f003 0307 	and.w	r3, r3, #7
}
 80017da:	4618      	mov	r0, r3
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	db0b      	blt.n	8001812 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	f003 021f 	and.w	r2, r3, #31
 8001800:	4907      	ldr	r1, [pc, #28]	@ (8001820 <__NVIC_EnableIRQ+0x38>)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	095b      	lsrs	r3, r3, #5
 8001808:	2001      	movs	r0, #1
 800180a:	fa00 f202 	lsl.w	r2, r0, r2
 800180e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	e000e100 	.word	0xe000e100

08001824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	6039      	str	r1, [r7, #0]
 800182e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001834:	2b00      	cmp	r3, #0
 8001836:	db0a      	blt.n	800184e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	b2da      	uxtb	r2, r3
 800183c:	490c      	ldr	r1, [pc, #48]	@ (8001870 <__NVIC_SetPriority+0x4c>)
 800183e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001842:	0112      	lsls	r2, r2, #4
 8001844:	b2d2      	uxtb	r2, r2
 8001846:	440b      	add	r3, r1
 8001848:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800184c:	e00a      	b.n	8001864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	b2da      	uxtb	r2, r3
 8001852:	4908      	ldr	r1, [pc, #32]	@ (8001874 <__NVIC_SetPriority+0x50>)
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	3b04      	subs	r3, #4
 800185c:	0112      	lsls	r2, r2, #4
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	440b      	add	r3, r1
 8001862:	761a      	strb	r2, [r3, #24]
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	e000e100 	.word	0xe000e100
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001878:	b480      	push	{r7}
 800187a:	b089      	sub	sp, #36	@ 0x24
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	f1c3 0307 	rsb	r3, r3, #7
 8001892:	2b04      	cmp	r3, #4
 8001894:	bf28      	it	cs
 8001896:	2304      	movcs	r3, #4
 8001898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	3304      	adds	r3, #4
 800189e:	2b06      	cmp	r3, #6
 80018a0:	d902      	bls.n	80018a8 <NVIC_EncodePriority+0x30>
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3b03      	subs	r3, #3
 80018a6:	e000      	b.n	80018aa <NVIC_EncodePriority+0x32>
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ac:	f04f 32ff 	mov.w	r2, #4294967295
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43da      	mvns	r2, r3
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	401a      	ands	r2, r3
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c0:	f04f 31ff 	mov.w	r1, #4294967295
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ca:	43d9      	mvns	r1, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d0:	4313      	orrs	r3, r2
         );
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3724      	adds	r7, #36	@ 0x24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b082      	sub	sp, #8
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff ff4c 	bl	8001784 <__NVIC_SetPriorityGrouping>
}
 80018ec:	bf00      	nop
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
 8001900:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001906:	f7ff ff61 	bl	80017cc <__NVIC_GetPriorityGrouping>
 800190a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	68b9      	ldr	r1, [r7, #8]
 8001910:	6978      	ldr	r0, [r7, #20]
 8001912:	f7ff ffb1 	bl	8001878 <NVIC_EncodePriority>
 8001916:	4602      	mov	r2, r0
 8001918:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800191c:	4611      	mov	r1, r2
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff ff80 	bl	8001824 <__NVIC_SetPriority>
}
 8001924:	bf00      	nop
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff ff54 	bl	80017e8 <__NVIC_EnableIRQ>
}
 8001940:	bf00      	nop
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001948:	b480      	push	{r7}
 800194a:	b089      	sub	sp, #36	@ 0x24
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001956:	2300      	movs	r3, #0
 8001958:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800195a:	2300      	movs	r3, #0
 800195c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800195e:	2300      	movs	r3, #0
 8001960:	61fb      	str	r3, [r7, #28]
 8001962:	e159      	b.n	8001c18 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001964:	2201      	movs	r2, #1
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	4013      	ands	r3, r2
 8001976:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	429a      	cmp	r2, r3
 800197e:	f040 8148 	bne.w	8001c12 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f003 0303 	and.w	r3, r3, #3
 800198a:	2b01      	cmp	r3, #1
 800198c:	d005      	beq.n	800199a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001996:	2b02      	cmp	r3, #2
 8001998:	d130      	bne.n	80019fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	2203      	movs	r2, #3
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43db      	mvns	r3, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4013      	ands	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	68da      	ldr	r2, [r3, #12]
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019d0:	2201      	movs	r2, #1
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	43db      	mvns	r3, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4013      	ands	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	091b      	lsrs	r3, r3, #4
 80019e6:	f003 0201 	and.w	r2, r3, #1
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f003 0303 	and.w	r3, r3, #3
 8001a04:	2b03      	cmp	r3, #3
 8001a06:	d017      	beq.n	8001a38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	2203      	movs	r2, #3
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 0303 	and.w	r3, r3, #3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d123      	bne.n	8001a8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	08da      	lsrs	r2, r3, #3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3208      	adds	r2, #8
 8001a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	f003 0307 	and.w	r3, r3, #7
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	220f      	movs	r2, #15
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	691a      	ldr	r2, [r3, #16]
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	08da      	lsrs	r2, r3, #3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3208      	adds	r2, #8
 8001a86:	69b9      	ldr	r1, [r7, #24]
 8001a88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	2203      	movs	r2, #3
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 0203 	and.w	r2, r3, #3
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f000 80a2 	beq.w	8001c12 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	4b57      	ldr	r3, [pc, #348]	@ (8001c30 <HAL_GPIO_Init+0x2e8>)
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ad6:	4a56      	ldr	r2, [pc, #344]	@ (8001c30 <HAL_GPIO_Init+0x2e8>)
 8001ad8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001adc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ade:	4b54      	ldr	r3, [pc, #336]	@ (8001c30 <HAL_GPIO_Init+0x2e8>)
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aea:	4a52      	ldr	r2, [pc, #328]	@ (8001c34 <HAL_GPIO_Init+0x2ec>)
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	089b      	lsrs	r3, r3, #2
 8001af0:	3302      	adds	r3, #2
 8001af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	220f      	movs	r2, #15
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43db      	mvns	r3, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a49      	ldr	r2, [pc, #292]	@ (8001c38 <HAL_GPIO_Init+0x2f0>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d019      	beq.n	8001b4a <HAL_GPIO_Init+0x202>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a48      	ldr	r2, [pc, #288]	@ (8001c3c <HAL_GPIO_Init+0x2f4>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d013      	beq.n	8001b46 <HAL_GPIO_Init+0x1fe>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a47      	ldr	r2, [pc, #284]	@ (8001c40 <HAL_GPIO_Init+0x2f8>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d00d      	beq.n	8001b42 <HAL_GPIO_Init+0x1fa>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a46      	ldr	r2, [pc, #280]	@ (8001c44 <HAL_GPIO_Init+0x2fc>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d007      	beq.n	8001b3e <HAL_GPIO_Init+0x1f6>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a45      	ldr	r2, [pc, #276]	@ (8001c48 <HAL_GPIO_Init+0x300>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d101      	bne.n	8001b3a <HAL_GPIO_Init+0x1f2>
 8001b36:	2304      	movs	r3, #4
 8001b38:	e008      	b.n	8001b4c <HAL_GPIO_Init+0x204>
 8001b3a:	2307      	movs	r3, #7
 8001b3c:	e006      	b.n	8001b4c <HAL_GPIO_Init+0x204>
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e004      	b.n	8001b4c <HAL_GPIO_Init+0x204>
 8001b42:	2302      	movs	r3, #2
 8001b44:	e002      	b.n	8001b4c <HAL_GPIO_Init+0x204>
 8001b46:	2301      	movs	r3, #1
 8001b48:	e000      	b.n	8001b4c <HAL_GPIO_Init+0x204>
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	69fa      	ldr	r2, [r7, #28]
 8001b4e:	f002 0203 	and.w	r2, r2, #3
 8001b52:	0092      	lsls	r2, r2, #2
 8001b54:	4093      	lsls	r3, r2
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b5c:	4935      	ldr	r1, [pc, #212]	@ (8001c34 <HAL_GPIO_Init+0x2ec>)
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	089b      	lsrs	r3, r3, #2
 8001b62:	3302      	adds	r3, #2
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b6a:	4b38      	ldr	r3, [pc, #224]	@ (8001c4c <HAL_GPIO_Init+0x304>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	43db      	mvns	r3, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4013      	ands	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b8e:	4a2f      	ldr	r2, [pc, #188]	@ (8001c4c <HAL_GPIO_Init+0x304>)
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b94:	4b2d      	ldr	r3, [pc, #180]	@ (8001c4c <HAL_GPIO_Init+0x304>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d003      	beq.n	8001bb8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bb8:	4a24      	ldr	r2, [pc, #144]	@ (8001c4c <HAL_GPIO_Init+0x304>)
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bbe:	4b23      	ldr	r3, [pc, #140]	@ (8001c4c <HAL_GPIO_Init+0x304>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001be2:	4a1a      	ldr	r2, [pc, #104]	@ (8001c4c <HAL_GPIO_Init+0x304>)
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001be8:	4b18      	ldr	r3, [pc, #96]	@ (8001c4c <HAL_GPIO_Init+0x304>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d003      	beq.n	8001c0c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c0c:	4a0f      	ldr	r2, [pc, #60]	@ (8001c4c <HAL_GPIO_Init+0x304>)
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	3301      	adds	r3, #1
 8001c16:	61fb      	str	r3, [r7, #28]
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	2b0f      	cmp	r3, #15
 8001c1c:	f67f aea2 	bls.w	8001964 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c20:	bf00      	nop
 8001c22:	bf00      	nop
 8001c24:	3724      	adds	r7, #36	@ 0x24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	40023800 	.word	0x40023800
 8001c34:	40013800 	.word	0x40013800
 8001c38:	40020000 	.word	0x40020000
 8001c3c:	40020400 	.word	0x40020400
 8001c40:	40020800 	.word	0x40020800
 8001c44:	40020c00 	.word	0x40020c00
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	40013c00 	.word	0x40013c00

08001c50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	691a      	ldr	r2, [r3, #16]
 8001c60:	887b      	ldrh	r3, [r7, #2]
 8001c62:	4013      	ands	r3, r2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d002      	beq.n	8001c6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	73fb      	strb	r3, [r7, #15]
 8001c6c:	e001      	b.n	8001c72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	807b      	strh	r3, [r7, #2]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c90:	787b      	ldrb	r3, [r7, #1]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c96:	887a      	ldrh	r2, [r7, #2]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c9c:	e003      	b.n	8001ca6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c9e:	887b      	ldrh	r3, [r7, #2]
 8001ca0:	041a      	lsls	r2, r3, #16
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	619a      	str	r2, [r3, #24]
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
	...

08001cb4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001cbe:	4b08      	ldr	r3, [pc, #32]	@ (8001ce0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cc0:	695a      	ldr	r2, [r3, #20]
 8001cc2:	88fb      	ldrh	r3, [r7, #6]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d006      	beq.n	8001cd8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cca:	4a05      	ldr	r2, [pc, #20]	@ (8001ce0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ccc:	88fb      	ldrh	r3, [r7, #6]
 8001cce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cd0:	88fb      	ldrh	r3, [r7, #6]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff f9a0 	bl	8001018 <HAL_GPIO_EXTI_Callback>
  }
}
 8001cd8:	bf00      	nop
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40013c00 	.word	0x40013c00

08001ce4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e267      	b.n	80021c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d075      	beq.n	8001dee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001d02:	4b88      	ldr	r3, [pc, #544]	@ (8001f24 <HAL_RCC_OscConfig+0x240>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 030c 	and.w	r3, r3, #12
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	d00c      	beq.n	8001d28 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d0e:	4b85      	ldr	r3, [pc, #532]	@ (8001f24 <HAL_RCC_OscConfig+0x240>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001d16:	2b08      	cmp	r3, #8
 8001d18:	d112      	bne.n	8001d40 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d1a:	4b82      	ldr	r3, [pc, #520]	@ (8001f24 <HAL_RCC_OscConfig+0x240>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d26:	d10b      	bne.n	8001d40 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d28:	4b7e      	ldr	r3, [pc, #504]	@ (8001f24 <HAL_RCC_OscConfig+0x240>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d05b      	beq.n	8001dec <HAL_RCC_OscConfig+0x108>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d157      	bne.n	8001dec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e242      	b.n	80021c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d48:	d106      	bne.n	8001d58 <HAL_RCC_OscConfig+0x74>
 8001d4a:	4b76      	ldr	r3, [pc, #472]	@ (8001f24 <HAL_RCC_OscConfig+0x240>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a75      	ldr	r2, [pc, #468]	@ (8001f24 <HAL_RCC_OscConfig+0x240>)
 8001d50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d54:	6013      	str	r3, [r2, #0]
 8001d56:	e01d      	b.n	8001d94 <HAL_RCC_OscConfig+0xb0>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d60:	d10c      	bne.n	8001d7c <HAL_RCC_OscConfig+0x98>
 8001d62:	4b70      	ldr	r3, [pc, #448]	@ (8001f24 <HAL_RCC_OscConfig+0x240>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a6f      	ldr	r2, [pc, #444]	@ (8001f24 <HAL_RCC_OscConfig+0x240>)
 8001d68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d6c:	6013      	str	r3, [r2, #0]
 8001d6e:	4b6d      	ldr	r3, [pc, #436]	@ (8001f24 <HAL_RCC_OscConfig+0x240>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a6c      	ldr	r2, [pc, #432]	@ (8001f24 <HAL_RCC_OscConfig+0x240>)
 8001d74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	e00b      	b.n	8001d94 <HAL_RCC_OscConfig+0xb0>
 8001d7c:	4b69      	ldr	r3, [pc, #420]	@ (8001f24 <HAL_RCC_OscConfig+0x240>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a68      	ldr	r2, [pc, #416]	@ (8001f24 <HAL_RCC_OscConfig+0x240>)
 8001d82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d86:	6013      	str	r3, [r2, #0]
 8001d88:	4b66      	ldr	r3, [pc, #408]	@ (8001f24 <HAL_RCC_OscConfig+0x240>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a65      	ldr	r2, [pc, #404]	@ (8001f24 <HAL_RCC_OscConfig+0x240>)
 8001d8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d013      	beq.n	8001dc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9c:	f7ff fce6 	bl	800176c <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da4:	f7ff fce2 	bl	800176c <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b64      	cmp	r3, #100	@ 0x64
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e207      	b.n	80021c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db6:	4b5b      	ldr	r3, [pc, #364]	@ (8001f24 <HAL_RCC_OscConfig+0x240>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0f0      	beq.n	8001da4 <HAL_RCC_OscConfig+0xc0>
 8001dc2:	e014      	b.n	8001dee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc4:	f7ff fcd2 	bl	800176c <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dcc:	f7ff fcce 	bl	800176c <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b64      	cmp	r3, #100	@ 0x64
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e1f3      	b.n	80021c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dde:	4b51      	ldr	r3, [pc, #324]	@ (8001f24 <HAL_RCC_OscConfig+0x240>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1f0      	bne.n	8001dcc <HAL_RCC_OscConfig+0xe8>
 8001dea:	e000      	b.n	8001dee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d063      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001dfa:	4b4a      	ldr	r3, [pc, #296]	@ (8001f24 <HAL_RCC_OscConfig+0x240>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 030c 	and.w	r3, r3, #12
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00b      	beq.n	8001e1e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e06:	4b47      	ldr	r3, [pc, #284]	@ (8001f24 <HAL_RCC_OscConfig+0x240>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001e0e:	2b08      	cmp	r3, #8
 8001e10:	d11c      	bne.n	8001e4c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e12:	4b44      	ldr	r3, [pc, #272]	@ (8001f24 <HAL_RCC_OscConfig+0x240>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d116      	bne.n	8001e4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e1e:	4b41      	ldr	r3, [pc, #260]	@ (8001f24 <HAL_RCC_OscConfig+0x240>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d005      	beq.n	8001e36 <HAL_RCC_OscConfig+0x152>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d001      	beq.n	8001e36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e1c7      	b.n	80021c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e36:	4b3b      	ldr	r3, [pc, #236]	@ (8001f24 <HAL_RCC_OscConfig+0x240>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	4937      	ldr	r1, [pc, #220]	@ (8001f24 <HAL_RCC_OscConfig+0x240>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e4a:	e03a      	b.n	8001ec2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d020      	beq.n	8001e96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e54:	4b34      	ldr	r3, [pc, #208]	@ (8001f28 <HAL_RCC_OscConfig+0x244>)
 8001e56:	2201      	movs	r2, #1
 8001e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5a:	f7ff fc87 	bl	800176c <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e62:	f7ff fc83 	bl	800176c <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e1a8      	b.n	80021c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e74:	4b2b      	ldr	r3, [pc, #172]	@ (8001f24 <HAL_RCC_OscConfig+0x240>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d0f0      	beq.n	8001e62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e80:	4b28      	ldr	r3, [pc, #160]	@ (8001f24 <HAL_RCC_OscConfig+0x240>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	4925      	ldr	r1, [pc, #148]	@ (8001f24 <HAL_RCC_OscConfig+0x240>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	600b      	str	r3, [r1, #0]
 8001e94:	e015      	b.n	8001ec2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e96:	4b24      	ldr	r3, [pc, #144]	@ (8001f28 <HAL_RCC_OscConfig+0x244>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9c:	f7ff fc66 	bl	800176c <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ea4:	f7ff fc62 	bl	800176c <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e187      	b.n	80021c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eb6:	4b1b      	ldr	r3, [pc, #108]	@ (8001f24 <HAL_RCC_OscConfig+0x240>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f0      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0308 	and.w	r3, r3, #8
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d036      	beq.n	8001f3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d016      	beq.n	8001f04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ed6:	4b15      	ldr	r3, [pc, #84]	@ (8001f2c <HAL_RCC_OscConfig+0x248>)
 8001ed8:	2201      	movs	r2, #1
 8001eda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001edc:	f7ff fc46 	bl	800176c <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee4:	f7ff fc42 	bl	800176c <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e167      	b.n	80021c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8001f24 <HAL_RCC_OscConfig+0x240>)
 8001ef8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0f0      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x200>
 8001f02:	e01b      	b.n	8001f3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f04:	4b09      	ldr	r3, [pc, #36]	@ (8001f2c <HAL_RCC_OscConfig+0x248>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f0a:	f7ff fc2f 	bl	800176c <HAL_GetTick>
 8001f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f10:	e00e      	b.n	8001f30 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f12:	f7ff fc2b 	bl	800176c <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d907      	bls.n	8001f30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e150      	b.n	80021c6 <HAL_RCC_OscConfig+0x4e2>
 8001f24:	40023800 	.word	0x40023800
 8001f28:	42470000 	.word	0x42470000
 8001f2c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f30:	4b88      	ldr	r3, [pc, #544]	@ (8002154 <HAL_RCC_OscConfig+0x470>)
 8001f32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1ea      	bne.n	8001f12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0304 	and.w	r3, r3, #4
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f000 8097 	beq.w	8002078 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f4e:	4b81      	ldr	r3, [pc, #516]	@ (8002154 <HAL_RCC_OscConfig+0x470>)
 8001f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10f      	bne.n	8001f7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	4b7d      	ldr	r3, [pc, #500]	@ (8002154 <HAL_RCC_OscConfig+0x470>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f62:	4a7c      	ldr	r2, [pc, #496]	@ (8002154 <HAL_RCC_OscConfig+0x470>)
 8001f64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f6a:	4b7a      	ldr	r3, [pc, #488]	@ (8002154 <HAL_RCC_OscConfig+0x470>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f72:	60bb      	str	r3, [r7, #8]
 8001f74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f76:	2301      	movs	r3, #1
 8001f78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f7a:	4b77      	ldr	r3, [pc, #476]	@ (8002158 <HAL_RCC_OscConfig+0x474>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d118      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f86:	4b74      	ldr	r3, [pc, #464]	@ (8002158 <HAL_RCC_OscConfig+0x474>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a73      	ldr	r2, [pc, #460]	@ (8002158 <HAL_RCC_OscConfig+0x474>)
 8001f8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f92:	f7ff fbeb 	bl	800176c <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f9a:	f7ff fbe7 	bl	800176c <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e10c      	b.n	80021c6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fac:	4b6a      	ldr	r3, [pc, #424]	@ (8002158 <HAL_RCC_OscConfig+0x474>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0f0      	beq.n	8001f9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d106      	bne.n	8001fce <HAL_RCC_OscConfig+0x2ea>
 8001fc0:	4b64      	ldr	r3, [pc, #400]	@ (8002154 <HAL_RCC_OscConfig+0x470>)
 8001fc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fc4:	4a63      	ldr	r2, [pc, #396]	@ (8002154 <HAL_RCC_OscConfig+0x470>)
 8001fc6:	f043 0301 	orr.w	r3, r3, #1
 8001fca:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fcc:	e01c      	b.n	8002008 <HAL_RCC_OscConfig+0x324>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	2b05      	cmp	r3, #5
 8001fd4:	d10c      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x30c>
 8001fd6:	4b5f      	ldr	r3, [pc, #380]	@ (8002154 <HAL_RCC_OscConfig+0x470>)
 8001fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fda:	4a5e      	ldr	r2, [pc, #376]	@ (8002154 <HAL_RCC_OscConfig+0x470>)
 8001fdc:	f043 0304 	orr.w	r3, r3, #4
 8001fe0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fe2:	4b5c      	ldr	r3, [pc, #368]	@ (8002154 <HAL_RCC_OscConfig+0x470>)
 8001fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fe6:	4a5b      	ldr	r2, [pc, #364]	@ (8002154 <HAL_RCC_OscConfig+0x470>)
 8001fe8:	f043 0301 	orr.w	r3, r3, #1
 8001fec:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fee:	e00b      	b.n	8002008 <HAL_RCC_OscConfig+0x324>
 8001ff0:	4b58      	ldr	r3, [pc, #352]	@ (8002154 <HAL_RCC_OscConfig+0x470>)
 8001ff2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ff4:	4a57      	ldr	r2, [pc, #348]	@ (8002154 <HAL_RCC_OscConfig+0x470>)
 8001ff6:	f023 0301 	bic.w	r3, r3, #1
 8001ffa:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ffc:	4b55      	ldr	r3, [pc, #340]	@ (8002154 <HAL_RCC_OscConfig+0x470>)
 8001ffe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002000:	4a54      	ldr	r2, [pc, #336]	@ (8002154 <HAL_RCC_OscConfig+0x470>)
 8002002:	f023 0304 	bic.w	r3, r3, #4
 8002006:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d015      	beq.n	800203c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002010:	f7ff fbac 	bl	800176c <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002016:	e00a      	b.n	800202e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002018:	f7ff fba8 	bl	800176c <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002026:	4293      	cmp	r3, r2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e0cb      	b.n	80021c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800202e:	4b49      	ldr	r3, [pc, #292]	@ (8002154 <HAL_RCC_OscConfig+0x470>)
 8002030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0ee      	beq.n	8002018 <HAL_RCC_OscConfig+0x334>
 800203a:	e014      	b.n	8002066 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800203c:	f7ff fb96 	bl	800176c <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002042:	e00a      	b.n	800205a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002044:	f7ff fb92 	bl	800176c <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002052:	4293      	cmp	r3, r2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e0b5      	b.n	80021c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800205a:	4b3e      	ldr	r3, [pc, #248]	@ (8002154 <HAL_RCC_OscConfig+0x470>)
 800205c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1ee      	bne.n	8002044 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002066:	7dfb      	ldrb	r3, [r7, #23]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d105      	bne.n	8002078 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800206c:	4b39      	ldr	r3, [pc, #228]	@ (8002154 <HAL_RCC_OscConfig+0x470>)
 800206e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002070:	4a38      	ldr	r2, [pc, #224]	@ (8002154 <HAL_RCC_OscConfig+0x470>)
 8002072:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002076:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	2b00      	cmp	r3, #0
 800207e:	f000 80a1 	beq.w	80021c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002082:	4b34      	ldr	r3, [pc, #208]	@ (8002154 <HAL_RCC_OscConfig+0x470>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 030c 	and.w	r3, r3, #12
 800208a:	2b08      	cmp	r3, #8
 800208c:	d05c      	beq.n	8002148 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	2b02      	cmp	r3, #2
 8002094:	d141      	bne.n	800211a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002096:	4b31      	ldr	r3, [pc, #196]	@ (800215c <HAL_RCC_OscConfig+0x478>)
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209c:	f7ff fb66 	bl	800176c <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a4:	f7ff fb62 	bl	800176c <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e087      	b.n	80021c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b6:	4b27      	ldr	r3, [pc, #156]	@ (8002154 <HAL_RCC_OscConfig+0x470>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f0      	bne.n	80020a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	69da      	ldr	r2, [r3, #28]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	431a      	orrs	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d0:	019b      	lsls	r3, r3, #6
 80020d2:	431a      	orrs	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020d8:	085b      	lsrs	r3, r3, #1
 80020da:	3b01      	subs	r3, #1
 80020dc:	041b      	lsls	r3, r3, #16
 80020de:	431a      	orrs	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020e4:	061b      	lsls	r3, r3, #24
 80020e6:	491b      	ldr	r1, [pc, #108]	@ (8002154 <HAL_RCC_OscConfig+0x470>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020ec:	4b1b      	ldr	r3, [pc, #108]	@ (800215c <HAL_RCC_OscConfig+0x478>)
 80020ee:	2201      	movs	r2, #1
 80020f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f2:	f7ff fb3b 	bl	800176c <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020f8:	e008      	b.n	800210c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020fa:	f7ff fb37 	bl	800176c <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e05c      	b.n	80021c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800210c:	4b11      	ldr	r3, [pc, #68]	@ (8002154 <HAL_RCC_OscConfig+0x470>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d0f0      	beq.n	80020fa <HAL_RCC_OscConfig+0x416>
 8002118:	e054      	b.n	80021c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800211a:	4b10      	ldr	r3, [pc, #64]	@ (800215c <HAL_RCC_OscConfig+0x478>)
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002120:	f7ff fb24 	bl	800176c <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002128:	f7ff fb20 	bl	800176c <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e045      	b.n	80021c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800213a:	4b06      	ldr	r3, [pc, #24]	@ (8002154 <HAL_RCC_OscConfig+0x470>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1f0      	bne.n	8002128 <HAL_RCC_OscConfig+0x444>
 8002146:	e03d      	b.n	80021c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d107      	bne.n	8002160 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e038      	b.n	80021c6 <HAL_RCC_OscConfig+0x4e2>
 8002154:	40023800 	.word	0x40023800
 8002158:	40007000 	.word	0x40007000
 800215c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002160:	4b1b      	ldr	r3, [pc, #108]	@ (80021d0 <HAL_RCC_OscConfig+0x4ec>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d028      	beq.n	80021c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002178:	429a      	cmp	r2, r3
 800217a:	d121      	bne.n	80021c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002186:	429a      	cmp	r2, r3
 8002188:	d11a      	bne.n	80021c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002190:	4013      	ands	r3, r2
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002196:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002198:	4293      	cmp	r3, r2
 800219a:	d111      	bne.n	80021c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021a6:	085b      	lsrs	r3, r3, #1
 80021a8:	3b01      	subs	r3, #1
 80021aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d107      	bne.n	80021c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021bc:	429a      	cmp	r2, r3
 80021be:	d001      	beq.n	80021c4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e000      	b.n	80021c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40023800 	.word	0x40023800

080021d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e0cc      	b.n	8002382 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021e8:	4b68      	ldr	r3, [pc, #416]	@ (800238c <HAL_RCC_ClockConfig+0x1b8>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d90c      	bls.n	8002210 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f6:	4b65      	ldr	r3, [pc, #404]	@ (800238c <HAL_RCC_ClockConfig+0x1b8>)
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	b2d2      	uxtb	r2, r2
 80021fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021fe:	4b63      	ldr	r3, [pc, #396]	@ (800238c <HAL_RCC_ClockConfig+0x1b8>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	429a      	cmp	r2, r3
 800220a:	d001      	beq.n	8002210 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e0b8      	b.n	8002382 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d020      	beq.n	800225e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0304 	and.w	r3, r3, #4
 8002224:	2b00      	cmp	r3, #0
 8002226:	d005      	beq.n	8002234 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002228:	4b59      	ldr	r3, [pc, #356]	@ (8002390 <HAL_RCC_ClockConfig+0x1bc>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	4a58      	ldr	r2, [pc, #352]	@ (8002390 <HAL_RCC_ClockConfig+0x1bc>)
 800222e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002232:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0308 	and.w	r3, r3, #8
 800223c:	2b00      	cmp	r3, #0
 800223e:	d005      	beq.n	800224c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002240:	4b53      	ldr	r3, [pc, #332]	@ (8002390 <HAL_RCC_ClockConfig+0x1bc>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	4a52      	ldr	r2, [pc, #328]	@ (8002390 <HAL_RCC_ClockConfig+0x1bc>)
 8002246:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800224a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800224c:	4b50      	ldr	r3, [pc, #320]	@ (8002390 <HAL_RCC_ClockConfig+0x1bc>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	494d      	ldr	r1, [pc, #308]	@ (8002390 <HAL_RCC_ClockConfig+0x1bc>)
 800225a:	4313      	orrs	r3, r2
 800225c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d044      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d107      	bne.n	8002282 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002272:	4b47      	ldr	r3, [pc, #284]	@ (8002390 <HAL_RCC_ClockConfig+0x1bc>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d119      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e07f      	b.n	8002382 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b02      	cmp	r3, #2
 8002288:	d003      	beq.n	8002292 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800228e:	2b03      	cmp	r3, #3
 8002290:	d107      	bne.n	80022a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002292:	4b3f      	ldr	r3, [pc, #252]	@ (8002390 <HAL_RCC_ClockConfig+0x1bc>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d109      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e06f      	b.n	8002382 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002390 <HAL_RCC_ClockConfig+0x1bc>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e067      	b.n	8002382 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022b2:	4b37      	ldr	r3, [pc, #220]	@ (8002390 <HAL_RCC_ClockConfig+0x1bc>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f023 0203 	bic.w	r2, r3, #3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	4934      	ldr	r1, [pc, #208]	@ (8002390 <HAL_RCC_ClockConfig+0x1bc>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022c4:	f7ff fa52 	bl	800176c <HAL_GetTick>
 80022c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ca:	e00a      	b.n	80022e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022cc:	f7ff fa4e 	bl	800176c <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022da:	4293      	cmp	r3, r2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e04f      	b.n	8002382 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e2:	4b2b      	ldr	r3, [pc, #172]	@ (8002390 <HAL_RCC_ClockConfig+0x1bc>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 020c 	and.w	r2, r3, #12
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d1eb      	bne.n	80022cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022f4:	4b25      	ldr	r3, [pc, #148]	@ (800238c <HAL_RCC_ClockConfig+0x1b8>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d20c      	bcs.n	800231c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002302:	4b22      	ldr	r3, [pc, #136]	@ (800238c <HAL_RCC_ClockConfig+0x1b8>)
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800230a:	4b20      	ldr	r3, [pc, #128]	@ (800238c <HAL_RCC_ClockConfig+0x1b8>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	429a      	cmp	r2, r3
 8002316:	d001      	beq.n	800231c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e032      	b.n	8002382 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b00      	cmp	r3, #0
 8002326:	d008      	beq.n	800233a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002328:	4b19      	ldr	r3, [pc, #100]	@ (8002390 <HAL_RCC_ClockConfig+0x1bc>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	4916      	ldr	r1, [pc, #88]	@ (8002390 <HAL_RCC_ClockConfig+0x1bc>)
 8002336:	4313      	orrs	r3, r2
 8002338:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0308 	and.w	r3, r3, #8
 8002342:	2b00      	cmp	r3, #0
 8002344:	d009      	beq.n	800235a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002346:	4b12      	ldr	r3, [pc, #72]	@ (8002390 <HAL_RCC_ClockConfig+0x1bc>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	490e      	ldr	r1, [pc, #56]	@ (8002390 <HAL_RCC_ClockConfig+0x1bc>)
 8002356:	4313      	orrs	r3, r2
 8002358:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800235a:	f000 f821 	bl	80023a0 <HAL_RCC_GetSysClockFreq>
 800235e:	4602      	mov	r2, r0
 8002360:	4b0b      	ldr	r3, [pc, #44]	@ (8002390 <HAL_RCC_ClockConfig+0x1bc>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	091b      	lsrs	r3, r3, #4
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	490a      	ldr	r1, [pc, #40]	@ (8002394 <HAL_RCC_ClockConfig+0x1c0>)
 800236c:	5ccb      	ldrb	r3, [r1, r3]
 800236e:	fa22 f303 	lsr.w	r3, r2, r3
 8002372:	4a09      	ldr	r2, [pc, #36]	@ (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 8002374:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002376:	4b09      	ldr	r3, [pc, #36]	@ (800239c <HAL_RCC_ClockConfig+0x1c8>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff f818 	bl	80013b0 <HAL_InitTick>

  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40023c00 	.word	0x40023c00
 8002390:	40023800 	.word	0x40023800
 8002394:	08009828 	.word	0x08009828
 8002398:	20000000 	.word	0x20000000
 800239c:	20000004 	.word	0x20000004

080023a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023a4:	b094      	sub	sp, #80	@ 0x50
 80023a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80023ac:	2300      	movs	r3, #0
 80023ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023b8:	4b79      	ldr	r3, [pc, #484]	@ (80025a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 030c 	and.w	r3, r3, #12
 80023c0:	2b08      	cmp	r3, #8
 80023c2:	d00d      	beq.n	80023e0 <HAL_RCC_GetSysClockFreq+0x40>
 80023c4:	2b08      	cmp	r3, #8
 80023c6:	f200 80e1 	bhi.w	800258c <HAL_RCC_GetSysClockFreq+0x1ec>
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d002      	beq.n	80023d4 <HAL_RCC_GetSysClockFreq+0x34>
 80023ce:	2b04      	cmp	r3, #4
 80023d0:	d003      	beq.n	80023da <HAL_RCC_GetSysClockFreq+0x3a>
 80023d2:	e0db      	b.n	800258c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023d4:	4b73      	ldr	r3, [pc, #460]	@ (80025a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80023d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80023d8:	e0db      	b.n	8002592 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023da:	4b73      	ldr	r3, [pc, #460]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80023dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80023de:	e0d8      	b.n	8002592 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023e0:	4b6f      	ldr	r3, [pc, #444]	@ (80025a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023e8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023ea:	4b6d      	ldr	r3, [pc, #436]	@ (80025a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d063      	beq.n	80024be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023f6:	4b6a      	ldr	r3, [pc, #424]	@ (80025a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	099b      	lsrs	r3, r3, #6
 80023fc:	2200      	movs	r2, #0
 80023fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002400:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002408:	633b      	str	r3, [r7, #48]	@ 0x30
 800240a:	2300      	movs	r3, #0
 800240c:	637b      	str	r3, [r7, #52]	@ 0x34
 800240e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002412:	4622      	mov	r2, r4
 8002414:	462b      	mov	r3, r5
 8002416:	f04f 0000 	mov.w	r0, #0
 800241a:	f04f 0100 	mov.w	r1, #0
 800241e:	0159      	lsls	r1, r3, #5
 8002420:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002424:	0150      	lsls	r0, r2, #5
 8002426:	4602      	mov	r2, r0
 8002428:	460b      	mov	r3, r1
 800242a:	4621      	mov	r1, r4
 800242c:	1a51      	subs	r1, r2, r1
 800242e:	6139      	str	r1, [r7, #16]
 8002430:	4629      	mov	r1, r5
 8002432:	eb63 0301 	sbc.w	r3, r3, r1
 8002436:	617b      	str	r3, [r7, #20]
 8002438:	f04f 0200 	mov.w	r2, #0
 800243c:	f04f 0300 	mov.w	r3, #0
 8002440:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002444:	4659      	mov	r1, fp
 8002446:	018b      	lsls	r3, r1, #6
 8002448:	4651      	mov	r1, sl
 800244a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800244e:	4651      	mov	r1, sl
 8002450:	018a      	lsls	r2, r1, #6
 8002452:	4651      	mov	r1, sl
 8002454:	ebb2 0801 	subs.w	r8, r2, r1
 8002458:	4659      	mov	r1, fp
 800245a:	eb63 0901 	sbc.w	r9, r3, r1
 800245e:	f04f 0200 	mov.w	r2, #0
 8002462:	f04f 0300 	mov.w	r3, #0
 8002466:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800246a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800246e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002472:	4690      	mov	r8, r2
 8002474:	4699      	mov	r9, r3
 8002476:	4623      	mov	r3, r4
 8002478:	eb18 0303 	adds.w	r3, r8, r3
 800247c:	60bb      	str	r3, [r7, #8]
 800247e:	462b      	mov	r3, r5
 8002480:	eb49 0303 	adc.w	r3, r9, r3
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	f04f 0200 	mov.w	r2, #0
 800248a:	f04f 0300 	mov.w	r3, #0
 800248e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002492:	4629      	mov	r1, r5
 8002494:	024b      	lsls	r3, r1, #9
 8002496:	4621      	mov	r1, r4
 8002498:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800249c:	4621      	mov	r1, r4
 800249e:	024a      	lsls	r2, r1, #9
 80024a0:	4610      	mov	r0, r2
 80024a2:	4619      	mov	r1, r3
 80024a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024a6:	2200      	movs	r2, #0
 80024a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80024ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80024b0:	f7fd feee 	bl	8000290 <__aeabi_uldivmod>
 80024b4:	4602      	mov	r2, r0
 80024b6:	460b      	mov	r3, r1
 80024b8:	4613      	mov	r3, r2
 80024ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024bc:	e058      	b.n	8002570 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024be:	4b38      	ldr	r3, [pc, #224]	@ (80025a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	099b      	lsrs	r3, r3, #6
 80024c4:	2200      	movs	r2, #0
 80024c6:	4618      	mov	r0, r3
 80024c8:	4611      	mov	r1, r2
 80024ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80024ce:	623b      	str	r3, [r7, #32]
 80024d0:	2300      	movs	r3, #0
 80024d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80024d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80024d8:	4642      	mov	r2, r8
 80024da:	464b      	mov	r3, r9
 80024dc:	f04f 0000 	mov.w	r0, #0
 80024e0:	f04f 0100 	mov.w	r1, #0
 80024e4:	0159      	lsls	r1, r3, #5
 80024e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024ea:	0150      	lsls	r0, r2, #5
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	4641      	mov	r1, r8
 80024f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80024f6:	4649      	mov	r1, r9
 80024f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80024fc:	f04f 0200 	mov.w	r2, #0
 8002500:	f04f 0300 	mov.w	r3, #0
 8002504:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002508:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800250c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002510:	ebb2 040a 	subs.w	r4, r2, sl
 8002514:	eb63 050b 	sbc.w	r5, r3, fp
 8002518:	f04f 0200 	mov.w	r2, #0
 800251c:	f04f 0300 	mov.w	r3, #0
 8002520:	00eb      	lsls	r3, r5, #3
 8002522:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002526:	00e2      	lsls	r2, r4, #3
 8002528:	4614      	mov	r4, r2
 800252a:	461d      	mov	r5, r3
 800252c:	4643      	mov	r3, r8
 800252e:	18e3      	adds	r3, r4, r3
 8002530:	603b      	str	r3, [r7, #0]
 8002532:	464b      	mov	r3, r9
 8002534:	eb45 0303 	adc.w	r3, r5, r3
 8002538:	607b      	str	r3, [r7, #4]
 800253a:	f04f 0200 	mov.w	r2, #0
 800253e:	f04f 0300 	mov.w	r3, #0
 8002542:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002546:	4629      	mov	r1, r5
 8002548:	028b      	lsls	r3, r1, #10
 800254a:	4621      	mov	r1, r4
 800254c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002550:	4621      	mov	r1, r4
 8002552:	028a      	lsls	r2, r1, #10
 8002554:	4610      	mov	r0, r2
 8002556:	4619      	mov	r1, r3
 8002558:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800255a:	2200      	movs	r2, #0
 800255c:	61bb      	str	r3, [r7, #24]
 800255e:	61fa      	str	r2, [r7, #28]
 8002560:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002564:	f7fd fe94 	bl	8000290 <__aeabi_uldivmod>
 8002568:	4602      	mov	r2, r0
 800256a:	460b      	mov	r3, r1
 800256c:	4613      	mov	r3, r2
 800256e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002570:	4b0b      	ldr	r3, [pc, #44]	@ (80025a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	0c1b      	lsrs	r3, r3, #16
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	3301      	adds	r3, #1
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002580:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002582:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002584:	fbb2 f3f3 	udiv	r3, r2, r3
 8002588:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800258a:	e002      	b.n	8002592 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800258c:	4b05      	ldr	r3, [pc, #20]	@ (80025a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800258e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002590:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002592:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002594:	4618      	mov	r0, r3
 8002596:	3750      	adds	r7, #80	@ 0x50
 8002598:	46bd      	mov	sp, r7
 800259a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800259e:	bf00      	nop
 80025a0:	40023800 	.word	0x40023800
 80025a4:	00f42400 	.word	0x00f42400
 80025a8:	007a1200 	.word	0x007a1200

080025ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025b0:	4b03      	ldr	r3, [pc, #12]	@ (80025c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80025b2:	681b      	ldr	r3, [r3, #0]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	20000000 	.word	0x20000000

080025c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025c8:	f7ff fff0 	bl	80025ac <HAL_RCC_GetHCLKFreq>
 80025cc:	4602      	mov	r2, r0
 80025ce:	4b05      	ldr	r3, [pc, #20]	@ (80025e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	0a9b      	lsrs	r3, r3, #10
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	4903      	ldr	r1, [pc, #12]	@ (80025e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025da:	5ccb      	ldrb	r3, [r1, r3]
 80025dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40023800 	.word	0x40023800
 80025e8:	08009838 	.word	0x08009838

080025ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025f0:	f7ff ffdc 	bl	80025ac <HAL_RCC_GetHCLKFreq>
 80025f4:	4602      	mov	r2, r0
 80025f6:	4b05      	ldr	r3, [pc, #20]	@ (800260c <HAL_RCC_GetPCLK2Freq+0x20>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	0b5b      	lsrs	r3, r3, #13
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	4903      	ldr	r1, [pc, #12]	@ (8002610 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002602:	5ccb      	ldrb	r3, [r1, r3]
 8002604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002608:	4618      	mov	r0, r3
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40023800 	.word	0x40023800
 8002610:	08009838 	.word	0x08009838

08002614 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	220f      	movs	r2, #15
 8002622:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002624:	4b12      	ldr	r3, [pc, #72]	@ (8002670 <HAL_RCC_GetClockConfig+0x5c>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 0203 	and.w	r2, r3, #3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002630:	4b0f      	ldr	r3, [pc, #60]	@ (8002670 <HAL_RCC_GetClockConfig+0x5c>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800263c:	4b0c      	ldr	r3, [pc, #48]	@ (8002670 <HAL_RCC_GetClockConfig+0x5c>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002648:	4b09      	ldr	r3, [pc, #36]	@ (8002670 <HAL_RCC_GetClockConfig+0x5c>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	08db      	lsrs	r3, r3, #3
 800264e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002656:	4b07      	ldr	r3, [pc, #28]	@ (8002674 <HAL_RCC_GetClockConfig+0x60>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0207 	and.w	r2, r3, #7
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	601a      	str	r2, [r3, #0]
}
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	40023800 	.word	0x40023800
 8002674:	40023c00 	.word	0x40023c00

08002678 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002680:	2300      	movs	r3, #0
 8002682:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002684:	2300      	movs	r3, #0
 8002686:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	2b00      	cmp	r3, #0
 8002692:	d105      	bne.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800269c:	2b00      	cmp	r3, #0
 800269e:	d038      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80026a0:	4b68      	ldr	r3, [pc, #416]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80026a6:	f7ff f861 	bl	800176c <HAL_GetTick>
 80026aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80026ac:	e008      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80026ae:	f7ff f85d 	bl	800176c <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e0bd      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80026c0:	4b61      	ldr	r3, [pc, #388]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1f0      	bne.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	019b      	lsls	r3, r3, #6
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	071b      	lsls	r3, r3, #28
 80026de:	495a      	ldr	r1, [pc, #360]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80026e6:	4b57      	ldr	r3, [pc, #348]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80026e8:	2201      	movs	r2, #1
 80026ea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80026ec:	f7ff f83e 	bl	800176c <HAL_GetTick>
 80026f0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80026f2:	e008      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80026f4:	f7ff f83a 	bl	800176c <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d901      	bls.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e09a      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002706:	4b50      	ldr	r3, [pc, #320]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d0f0      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 8083 	beq.w	8002826 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002720:	2300      	movs	r3, #0
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	4b48      	ldr	r3, [pc, #288]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002728:	4a47      	ldr	r2, [pc, #284]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800272a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800272e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002730:	4b45      	ldr	r3, [pc, #276]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002734:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800273c:	4b43      	ldr	r3, [pc, #268]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a42      	ldr	r2, [pc, #264]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002742:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002746:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002748:	f7ff f810 	bl	800176c <HAL_GetTick>
 800274c:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800274e:	e008      	b.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002750:	f7ff f80c 	bl	800176c <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e06c      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002762:	4b3a      	ldr	r3, [pc, #232]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0f0      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800276e:	4b36      	ldr	r3, [pc, #216]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002772:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002776:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d02f      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x166>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	429a      	cmp	r2, r3
 800278a:	d028      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800278c:	4b2e      	ldr	r3, [pc, #184]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800278e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002790:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002794:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002796:	4b2e      	ldr	r3, [pc, #184]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002798:	2201      	movs	r2, #1
 800279a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800279c:	4b2c      	ldr	r3, [pc, #176]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800279e:	2200      	movs	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80027a2:	4a29      	ldr	r2, [pc, #164]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80027a8:	4b27      	ldr	r3, [pc, #156]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d114      	bne.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80027b4:	f7fe ffda 	bl	800176c <HAL_GetTick>
 80027b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ba:	e00a      	b.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027bc:	f7fe ffd6 	bl	800176c <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e034      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d0ee      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80027ea:	d10d      	bne.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80027ec:	4b16      	ldr	r3, [pc, #88]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80027fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002800:	4911      	ldr	r1, [pc, #68]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002802:	4313      	orrs	r3, r2
 8002804:	608b      	str	r3, [r1, #8]
 8002806:	e005      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002808:	4b0f      	ldr	r3, [pc, #60]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	4a0e      	ldr	r2, [pc, #56]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800280e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002812:	6093      	str	r3, [r2, #8]
 8002814:	4b0c      	ldr	r3, [pc, #48]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002816:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002820:	4909      	ldr	r1, [pc, #36]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002822:	4313      	orrs	r3, r2
 8002824:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0308 	and.w	r3, r3, #8
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	7d1a      	ldrb	r2, [r3, #20]
 8002836:	4b07      	ldr	r3, [pc, #28]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002838:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3718      	adds	r7, #24
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	42470068 	.word	0x42470068
 8002848:	40023800 	.word	0x40023800
 800284c:	40007000 	.word	0x40007000
 8002850:	42470e40 	.word	0x42470e40
 8002854:	424711e0 	.word	0x424711e0

08002858 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e073      	b.n	8002956 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	7f5b      	ldrb	r3, [r3, #29]
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	d105      	bne.n	8002884 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7fe fcda 	bl	8001238 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2202      	movs	r2, #2
 8002888:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	f003 0310 	and.w	r3, r3, #16
 8002894:	2b10      	cmp	r3, #16
 8002896:	d055      	beq.n	8002944 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	22ca      	movs	r2, #202	@ 0xca
 800289e:	625a      	str	r2, [r3, #36]	@ 0x24
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2253      	movs	r2, #83	@ 0x53
 80028a6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 f9c5 	bl	8002c38 <RTC_EnterInitMode>
 80028ae:	4603      	mov	r3, r0
 80028b0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80028b2:	7bfb      	ldrb	r3, [r7, #15]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d12c      	bne.n	8002912 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6812      	ldr	r2, [r2, #0]
 80028c2:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80028c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80028ca:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6899      	ldr	r1, [r3, #8]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	431a      	orrs	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	431a      	orrs	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	68d2      	ldr	r2, [r2, #12]
 80028f2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6919      	ldr	r1, [r3, #16]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	041a      	lsls	r2, r3, #16
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 f9cc 	bl	8002ca6 <RTC_ExitInitMode>
 800290e:	4603      	mov	r3, r0
 8002910:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002912:	7bfb      	ldrb	r3, [r7, #15]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d110      	bne.n	800293a <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002926:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	699a      	ldr	r2, [r3, #24]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	430a      	orrs	r2, r1
 8002938:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	22ff      	movs	r2, #255	@ 0xff
 8002940:	625a      	str	r2, [r3, #36]	@ 0x24
 8002942:	e001      	b.n	8002948 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002944:	2300      	movs	r3, #0
 8002946:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002948:	7bfb      	ldrb	r3, [r7, #15]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d102      	bne.n	8002954 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2201      	movs	r2, #1
 8002952:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002954:	7bfb      	ldrb	r3, [r7, #15]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800295e:	b590      	push	{r4, r7, lr}
 8002960:	b087      	sub	sp, #28
 8002962:	af00      	add	r7, sp, #0
 8002964:	60f8      	str	r0, [r7, #12]
 8002966:	60b9      	str	r1, [r7, #8]
 8002968:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800296a:	2300      	movs	r3, #0
 800296c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	7f1b      	ldrb	r3, [r3, #28]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d101      	bne.n	800297a <HAL_RTC_SetTime+0x1c>
 8002976:	2302      	movs	r3, #2
 8002978:	e087      	b.n	8002a8a <HAL_RTC_SetTime+0x12c>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2201      	movs	r2, #1
 800297e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2202      	movs	r2, #2
 8002984:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d126      	bne.n	80029da <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002996:	2b00      	cmp	r3, #0
 8002998:	d102      	bne.n	80029a0 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	2200      	movs	r2, #0
 800299e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f000 f9a3 	bl	8002cf0 <RTC_ByteToBcd2>
 80029aa:	4603      	mov	r3, r0
 80029ac:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	785b      	ldrb	r3, [r3, #1]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f000 f99c 	bl	8002cf0 <RTC_ByteToBcd2>
 80029b8:	4603      	mov	r3, r0
 80029ba:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80029bc:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	789b      	ldrb	r3, [r3, #2]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f000 f994 	bl	8002cf0 <RTC_ByteToBcd2>
 80029c8:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80029ca:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	78db      	ldrb	r3, [r3, #3]
 80029d2:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80029d4:	4313      	orrs	r3, r2
 80029d6:	617b      	str	r3, [r7, #20]
 80029d8:	e018      	b.n	8002a0c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d102      	bne.n	80029ee <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	2200      	movs	r2, #0
 80029ec:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	785b      	ldrb	r3, [r3, #1]
 80029f8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80029fa:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80029fc:	68ba      	ldr	r2, [r7, #8]
 80029fe:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002a00:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	78db      	ldrb	r3, [r3, #3]
 8002a06:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	22ca      	movs	r2, #202	@ 0xca
 8002a12:	625a      	str	r2, [r3, #36]	@ 0x24
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2253      	movs	r2, #83	@ 0x53
 8002a1a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 f90b 	bl	8002c38 <RTC_EnterInitMode>
 8002a22:	4603      	mov	r3, r0
 8002a24:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002a26:	7cfb      	ldrb	r3, [r7, #19]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d120      	bne.n	8002a6e <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002a36:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002a3a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689a      	ldr	r2, [r3, #8]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002a4a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6899      	ldr	r1, [r3, #8]
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	68da      	ldr	r2, [r3, #12]
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	430a      	orrs	r2, r1
 8002a62:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 f91e 	bl	8002ca6 <RTC_ExitInitMode>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002a6e:	7cfb      	ldrb	r3, [r7, #19]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d102      	bne.n	8002a7a <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2201      	movs	r2, #1
 8002a78:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	22ff      	movs	r2, #255	@ 0xff
 8002a80:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	771a      	strb	r2, [r3, #28]

  return status;
 8002a88:	7cfb      	ldrb	r3, [r7, #19]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	371c      	adds	r7, #28
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd90      	pop	{r4, r7, pc}

08002a92 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b086      	sub	sp, #24
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	60f8      	str	r0, [r7, #12]
 8002a9a:	60b9      	str	r1, [r7, #8]
 8002a9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002ac4:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002ac8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	0c1b      	lsrs	r3, r3, #16
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	0a1b      	lsrs	r3, r3, #8
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	0d9b      	lsrs	r3, r3, #22
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	b2da      	uxtb	r2, r3
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d11a      	bne.n	8002b44 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 f90a 	bl	8002d2c <RTC_Bcd2ToByte>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	785b      	ldrb	r3, [r3, #1]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f000 f901 	bl	8002d2c <RTC_Bcd2ToByte>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	789b      	ldrb	r3, [r3, #2]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 f8f8 	bl	8002d2c <RTC_Bcd2ToByte>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	461a      	mov	r2, r3
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3718      	adds	r7, #24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b086      	sub	sp, #24
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	60f8      	str	r0, [r7, #12]
 8002b56:	60b9      	str	r1, [r7, #8]
 8002b58:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002b68:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002b6c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	0c1b      	lsrs	r3, r3, #16
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	0a1b      	lsrs	r3, r3, #8
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	f003 031f 	and.w	r3, r3, #31
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	0b5b      	lsrs	r3, r3, #13
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d11a      	bne.n	8002be2 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	78db      	ldrb	r3, [r3, #3]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f000 f8bb 	bl	8002d2c <RTC_Bcd2ToByte>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	461a      	mov	r2, r3
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	785b      	ldrb	r3, [r3, #1]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f000 f8b2 	bl	8002d2c <RTC_Bcd2ToByte>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	461a      	mov	r2, r3
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	789b      	ldrb	r3, [r3, #2]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f000 f8a9 	bl	8002d2c <RTC_Bcd2ToByte>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	461a      	mov	r2, r3
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3718      	adds	r7, #24
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a0d      	ldr	r2, [pc, #52]	@ (8002c34 <HAL_RTC_WaitForSynchro+0x48>)
 8002bfe:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c00:	f7fe fdb4 	bl	800176c <HAL_GetTick>
 8002c04:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002c06:	e009      	b.n	8002c1c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002c08:	f7fe fdb0 	bl	800176c <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c16:	d901      	bls.n	8002c1c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e007      	b.n	8002c2c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	f003 0320 	and.w	r3, r3, #32
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0ee      	beq.n	8002c08 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	00013f5f 	.word	0x00013f5f

08002c38 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002c44:	2300      	movs	r3, #0
 8002c46:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d122      	bne.n	8002c9c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68da      	ldr	r2, [r3, #12]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002c64:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c66:	f7fe fd81 	bl	800176c <HAL_GetTick>
 8002c6a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002c6c:	e00c      	b.n	8002c88 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002c6e:	f7fe fd7d 	bl	800176c <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c7c:	d904      	bls.n	8002c88 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2204      	movs	r2, #4
 8002c82:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d102      	bne.n	8002c9c <RTC_EnterInitMode+0x64>
 8002c96:	7bfb      	ldrb	r3, [r7, #15]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d1e8      	bne.n	8002c6e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b084      	sub	sp, #16
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68da      	ldr	r2, [r3, #12]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002cc0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f003 0320 	and.w	r3, r3, #32
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10a      	bne.n	8002ce6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f7ff ff8b 	bl	8002bec <HAL_RTC_WaitForSynchro>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d004      	beq.n	8002ce6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2204      	movs	r2, #4
 8002ce0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8002cfe:	e005      	b.n	8002d0c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	3301      	adds	r3, #1
 8002d04:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8002d06:	79fb      	ldrb	r3, [r7, #7]
 8002d08:	3b0a      	subs	r3, #10
 8002d0a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8002d0c:	79fb      	ldrb	r3, [r7, #7]
 8002d0e:	2b09      	cmp	r3, #9
 8002d10:	d8f6      	bhi.n	8002d00 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	011b      	lsls	r3, r3, #4
 8002d18:	b2da      	uxtb	r2, r3
 8002d1a:	79fb      	ldrb	r3, [r7, #7]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	b2db      	uxtb	r3, r3
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3714      	adds	r7, #20
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8002d3a:	79fb      	ldrb	r3, [r7, #7]
 8002d3c:	091b      	lsrs	r3, r3, #4
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	461a      	mov	r2, r3
 8002d42:	4613      	mov	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4413      	add	r3, r2
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	79fb      	ldrb	r3, [r7, #7]
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	4413      	add	r3, r2
 8002d5a:	b2db      	uxtb	r3, r3
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3714      	adds	r7, #20
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e07b      	b.n	8002e72 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d108      	bne.n	8002d94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d8a:	d009      	beq.n	8002da0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	61da      	str	r2, [r3, #28]
 8002d92:	e005      	b.n	8002da0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d106      	bne.n	8002dc0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7fe fa68 	bl	8001290 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002dd6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002de8:	431a      	orrs	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	431a      	orrs	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e10:	431a      	orrs	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e24:	ea42 0103 	orr.w	r1, r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e2c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	0c1b      	lsrs	r3, r3, #16
 8002e3e:	f003 0104 	and.w	r1, r3, #4
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e46:	f003 0210 	and.w	r2, r3, #16
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	69da      	ldr	r2, [r3, #28]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b088      	sub	sp, #32
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	60f8      	str	r0, [r7, #12]
 8002e82:	60b9      	str	r1, [r7, #8]
 8002e84:	603b      	str	r3, [r7, #0]
 8002e86:	4613      	mov	r3, r2
 8002e88:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e8a:	f7fe fc6f 	bl	800176c <HAL_GetTick>
 8002e8e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002e90:	88fb      	ldrh	r3, [r7, #6]
 8002e92:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d001      	beq.n	8002ea4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	e12a      	b.n	80030fa <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d002      	beq.n	8002eb0 <HAL_SPI_Transmit+0x36>
 8002eaa:	88fb      	ldrh	r3, [r7, #6]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e122      	b.n	80030fa <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d101      	bne.n	8002ec2 <HAL_SPI_Transmit+0x48>
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	e11b      	b.n	80030fa <HAL_SPI_Transmit+0x280>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2203      	movs	r2, #3
 8002ece:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	88fa      	ldrh	r2, [r7, #6]
 8002ee2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	88fa      	ldrh	r2, [r7, #6]
 8002ee8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f10:	d10f      	bne.n	8002f32 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f20:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f30:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f3c:	2b40      	cmp	r3, #64	@ 0x40
 8002f3e:	d007      	beq.n	8002f50 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f58:	d152      	bne.n	8003000 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d002      	beq.n	8002f68 <HAL_SPI_Transmit+0xee>
 8002f62:	8b7b      	ldrh	r3, [r7, #26]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d145      	bne.n	8002ff4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f6c:	881a      	ldrh	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f78:	1c9a      	adds	r2, r3, #2
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	3b01      	subs	r3, #1
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f8c:	e032      	b.n	8002ff4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d112      	bne.n	8002fc2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa0:	881a      	ldrh	r2, [r3, #0]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fac:	1c9a      	adds	r2, r3, #2
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002fc0:	e018      	b.n	8002ff4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fc2:	f7fe fbd3 	bl	800176c <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d803      	bhi.n	8002fda <HAL_SPI_Transmit+0x160>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd8:	d102      	bne.n	8002fe0 <HAL_SPI_Transmit+0x166>
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d109      	bne.n	8002ff4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e082      	b.n	80030fa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1c7      	bne.n	8002f8e <HAL_SPI_Transmit+0x114>
 8002ffe:	e053      	b.n	80030a8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d002      	beq.n	800300e <HAL_SPI_Transmit+0x194>
 8003008:	8b7b      	ldrh	r3, [r7, #26]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d147      	bne.n	800309e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	330c      	adds	r3, #12
 8003018:	7812      	ldrb	r2, [r2, #0]
 800301a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003020:	1c5a      	adds	r2, r3, #1
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800302a:	b29b      	uxth	r3, r3
 800302c:	3b01      	subs	r3, #1
 800302e:	b29a      	uxth	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003034:	e033      	b.n	800309e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b02      	cmp	r3, #2
 8003042:	d113      	bne.n	800306c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	330c      	adds	r3, #12
 800304e:	7812      	ldrb	r2, [r2, #0]
 8003050:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003056:	1c5a      	adds	r2, r3, #1
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003060:	b29b      	uxth	r3, r3
 8003062:	3b01      	subs	r3, #1
 8003064:	b29a      	uxth	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	86da      	strh	r2, [r3, #54]	@ 0x36
 800306a:	e018      	b.n	800309e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800306c:	f7fe fb7e 	bl	800176c <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	429a      	cmp	r2, r3
 800307a:	d803      	bhi.n	8003084 <HAL_SPI_Transmit+0x20a>
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003082:	d102      	bne.n	800308a <HAL_SPI_Transmit+0x210>
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d109      	bne.n	800309e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e02d      	b.n	80030fa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1c6      	bne.n	8003036 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030a8:	69fa      	ldr	r2, [r7, #28]
 80030aa:	6839      	ldr	r1, [r7, #0]
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 fbd9 	bl	8003864 <SPI_EndRxTxTransaction>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d002      	beq.n	80030be <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2220      	movs	r2, #32
 80030bc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10a      	bne.n	80030dc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030c6:	2300      	movs	r3, #0
 80030c8:	617b      	str	r3, [r7, #20]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	617b      	str	r3, [r7, #20]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	617b      	str	r3, [r7, #20]
 80030da:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e000      	b.n	80030fa <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80030f8:	2300      	movs	r3, #0
  }
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3720      	adds	r7, #32
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b088      	sub	sp, #32
 8003106:	af02      	add	r7, sp, #8
 8003108:	60f8      	str	r0, [r7, #12]
 800310a:	60b9      	str	r1, [r7, #8]
 800310c:	603b      	str	r3, [r7, #0]
 800310e:	4613      	mov	r3, r2
 8003110:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b01      	cmp	r3, #1
 800311c:	d001      	beq.n	8003122 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800311e:	2302      	movs	r3, #2
 8003120:	e104      	b.n	800332c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800312a:	d112      	bne.n	8003152 <HAL_SPI_Receive+0x50>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d10e      	bne.n	8003152 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2204      	movs	r2, #4
 8003138:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800313c:	88fa      	ldrh	r2, [r7, #6]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	4613      	mov	r3, r2
 8003144:	68ba      	ldr	r2, [r7, #8]
 8003146:	68b9      	ldr	r1, [r7, #8]
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f000 f8f3 	bl	8003334 <HAL_SPI_TransmitReceive>
 800314e:	4603      	mov	r3, r0
 8003150:	e0ec      	b.n	800332c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003152:	f7fe fb0b 	bl	800176c <HAL_GetTick>
 8003156:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d002      	beq.n	8003164 <HAL_SPI_Receive+0x62>
 800315e:	88fb      	ldrh	r3, [r7, #6]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d101      	bne.n	8003168 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e0e1      	b.n	800332c <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800316e:	2b01      	cmp	r3, #1
 8003170:	d101      	bne.n	8003176 <HAL_SPI_Receive+0x74>
 8003172:	2302      	movs	r3, #2
 8003174:	e0da      	b.n	800332c <HAL_SPI_Receive+0x22a>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2204      	movs	r2, #4
 8003182:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	88fa      	ldrh	r2, [r7, #6]
 8003196:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	88fa      	ldrh	r2, [r7, #6]
 800319c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031c4:	d10f      	bne.n	80031e6 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80031e4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031f0:	2b40      	cmp	r3, #64	@ 0x40
 80031f2:	d007      	beq.n	8003204 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003202:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d170      	bne.n	80032ee <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800320c:	e035      	b.n	800327a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b01      	cmp	r3, #1
 800321a:	d115      	bne.n	8003248 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f103 020c 	add.w	r2, r3, #12
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003228:	7812      	ldrb	r2, [r2, #0]
 800322a:	b2d2      	uxtb	r2, r2
 800322c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003232:	1c5a      	adds	r2, r3, #1
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800323c:	b29b      	uxth	r3, r3
 800323e:	3b01      	subs	r3, #1
 8003240:	b29a      	uxth	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003246:	e018      	b.n	800327a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003248:	f7fe fa90 	bl	800176c <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	429a      	cmp	r2, r3
 8003256:	d803      	bhi.n	8003260 <HAL_SPI_Receive+0x15e>
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800325e:	d102      	bne.n	8003266 <HAL_SPI_Receive+0x164>
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d109      	bne.n	800327a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e058      	b.n	800332c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800327e:	b29b      	uxth	r3, r3
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1c4      	bne.n	800320e <HAL_SPI_Receive+0x10c>
 8003284:	e038      	b.n	80032f8 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b01      	cmp	r3, #1
 8003292:	d113      	bne.n	80032bc <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68da      	ldr	r2, [r3, #12]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800329e:	b292      	uxth	r2, r2
 80032a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a6:	1c9a      	adds	r2, r3, #2
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	3b01      	subs	r3, #1
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80032ba:	e018      	b.n	80032ee <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032bc:	f7fe fa56 	bl	800176c <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d803      	bhi.n	80032d4 <HAL_SPI_Receive+0x1d2>
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d2:	d102      	bne.n	80032da <HAL_SPI_Receive+0x1d8>
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d109      	bne.n	80032ee <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e01e      	b.n	800332c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1c6      	bne.n	8003286 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	6839      	ldr	r1, [r7, #0]
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f000 fa4b 	bl	8003798 <SPI_EndRxTransaction>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d002      	beq.n	800330e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2220      	movs	r2, #32
 800330c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e000      	b.n	800332c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800332a:	2300      	movs	r3, #0
  }
}
 800332c:	4618      	mov	r0, r3
 800332e:	3718      	adds	r7, #24
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b08a      	sub	sp, #40	@ 0x28
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
 8003340:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003342:	2301      	movs	r3, #1
 8003344:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003346:	f7fe fa11 	bl	800176c <HAL_GetTick>
 800334a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003352:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800335a:	887b      	ldrh	r3, [r7, #2]
 800335c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800335e:	7ffb      	ldrb	r3, [r7, #31]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d00c      	beq.n	800337e <HAL_SPI_TransmitReceive+0x4a>
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800336a:	d106      	bne.n	800337a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d102      	bne.n	800337a <HAL_SPI_TransmitReceive+0x46>
 8003374:	7ffb      	ldrb	r3, [r7, #31]
 8003376:	2b04      	cmp	r3, #4
 8003378:	d001      	beq.n	800337e <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800337a:	2302      	movs	r3, #2
 800337c:	e17f      	b.n	800367e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d005      	beq.n	8003390 <HAL_SPI_TransmitReceive+0x5c>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d002      	beq.n	8003390 <HAL_SPI_TransmitReceive+0x5c>
 800338a:	887b      	ldrh	r3, [r7, #2]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d101      	bne.n	8003394 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e174      	b.n	800367e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800339a:	2b01      	cmp	r3, #1
 800339c:	d101      	bne.n	80033a2 <HAL_SPI_TransmitReceive+0x6e>
 800339e:	2302      	movs	r3, #2
 80033a0:	e16d      	b.n	800367e <HAL_SPI_TransmitReceive+0x34a>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b04      	cmp	r3, #4
 80033b4:	d003      	beq.n	80033be <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2205      	movs	r2, #5
 80033ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	887a      	ldrh	r2, [r7, #2]
 80033ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	887a      	ldrh	r2, [r7, #2]
 80033d4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	887a      	ldrh	r2, [r7, #2]
 80033e0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	887a      	ldrh	r2, [r7, #2]
 80033e6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033fe:	2b40      	cmp	r3, #64	@ 0x40
 8003400:	d007      	beq.n	8003412 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003410:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800341a:	d17e      	bne.n	800351a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d002      	beq.n	800342a <HAL_SPI_TransmitReceive+0xf6>
 8003424:	8afb      	ldrh	r3, [r7, #22]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d16c      	bne.n	8003504 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800342e:	881a      	ldrh	r2, [r3, #0]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343a:	1c9a      	adds	r2, r3, #2
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003444:	b29b      	uxth	r3, r3
 8003446:	3b01      	subs	r3, #1
 8003448:	b29a      	uxth	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800344e:	e059      	b.n	8003504 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b02      	cmp	r3, #2
 800345c:	d11b      	bne.n	8003496 <HAL_SPI_TransmitReceive+0x162>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003462:	b29b      	uxth	r3, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	d016      	beq.n	8003496 <HAL_SPI_TransmitReceive+0x162>
 8003468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800346a:	2b01      	cmp	r3, #1
 800346c:	d113      	bne.n	8003496 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003472:	881a      	ldrh	r2, [r3, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800347e:	1c9a      	adds	r2, r3, #2
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003488:	b29b      	uxth	r3, r3
 800348a:	3b01      	subs	r3, #1
 800348c:	b29a      	uxth	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003492:	2300      	movs	r3, #0
 8003494:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d119      	bne.n	80034d8 <HAL_SPI_TransmitReceive+0x1a4>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d014      	beq.n	80034d8 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68da      	ldr	r2, [r3, #12]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034b8:	b292      	uxth	r2, r2
 80034ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c0:	1c9a      	adds	r2, r3, #2
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	3b01      	subs	r3, #1
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80034d4:	2301      	movs	r3, #1
 80034d6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80034d8:	f7fe f948 	bl	800176c <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	6a3b      	ldr	r3, [r7, #32]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d80d      	bhi.n	8003504 <HAL_SPI_TransmitReceive+0x1d0>
 80034e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ee:	d009      	beq.n	8003504 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e0bc      	b.n	800367e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003508:	b29b      	uxth	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1a0      	bne.n	8003450 <HAL_SPI_TransmitReceive+0x11c>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003512:	b29b      	uxth	r3, r3
 8003514:	2b00      	cmp	r3, #0
 8003516:	d19b      	bne.n	8003450 <HAL_SPI_TransmitReceive+0x11c>
 8003518:	e082      	b.n	8003620 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d002      	beq.n	8003528 <HAL_SPI_TransmitReceive+0x1f4>
 8003522:	8afb      	ldrh	r3, [r7, #22]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d171      	bne.n	800360c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	330c      	adds	r3, #12
 8003532:	7812      	ldrb	r2, [r2, #0]
 8003534:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353a:	1c5a      	adds	r2, r3, #1
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003544:	b29b      	uxth	r3, r3
 8003546:	3b01      	subs	r3, #1
 8003548:	b29a      	uxth	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800354e:	e05d      	b.n	800360c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b02      	cmp	r3, #2
 800355c:	d11c      	bne.n	8003598 <HAL_SPI_TransmitReceive+0x264>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003562:	b29b      	uxth	r3, r3
 8003564:	2b00      	cmp	r3, #0
 8003566:	d017      	beq.n	8003598 <HAL_SPI_TransmitReceive+0x264>
 8003568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356a:	2b01      	cmp	r3, #1
 800356c:	d114      	bne.n	8003598 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	330c      	adds	r3, #12
 8003578:	7812      	ldrb	r2, [r2, #0]
 800357a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003580:	1c5a      	adds	r2, r3, #1
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800358a:	b29b      	uxth	r3, r3
 800358c:	3b01      	subs	r3, #1
 800358e:	b29a      	uxth	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003594:	2300      	movs	r3, #0
 8003596:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d119      	bne.n	80035da <HAL_SPI_TransmitReceive+0x2a6>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d014      	beq.n	80035da <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68da      	ldr	r2, [r3, #12]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ba:	b2d2      	uxtb	r2, r2
 80035bc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c2:	1c5a      	adds	r2, r3, #1
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	3b01      	subs	r3, #1
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035d6:	2301      	movs	r3, #1
 80035d8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80035da:	f7fe f8c7 	bl	800176c <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d803      	bhi.n	80035f2 <HAL_SPI_TransmitReceive+0x2be>
 80035ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f0:	d102      	bne.n	80035f8 <HAL_SPI_TransmitReceive+0x2c4>
 80035f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d109      	bne.n	800360c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e038      	b.n	800367e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003610:	b29b      	uxth	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d19c      	bne.n	8003550 <HAL_SPI_TransmitReceive+0x21c>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800361a:	b29b      	uxth	r3, r3
 800361c:	2b00      	cmp	r3, #0
 800361e:	d197      	bne.n	8003550 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003620:	6a3a      	ldr	r2, [r7, #32]
 8003622:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f000 f91d 	bl	8003864 <SPI_EndRxTxTransaction>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d008      	beq.n	8003642 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2220      	movs	r2, #32
 8003634:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e01d      	b.n	800367e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10a      	bne.n	8003660 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800364a:	2300      	movs	r3, #0
 800364c:	613b      	str	r3, [r7, #16]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	613b      	str	r3, [r7, #16]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	613b      	str	r3, [r7, #16]
 800365e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e000      	b.n	800367e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800367c:	2300      	movs	r3, #0
  }
}
 800367e:	4618      	mov	r0, r3
 8003680:	3728      	adds	r7, #40	@ 0x28
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
	...

08003688 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b088      	sub	sp, #32
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	603b      	str	r3, [r7, #0]
 8003694:	4613      	mov	r3, r2
 8003696:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003698:	f7fe f868 	bl	800176c <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036a0:	1a9b      	subs	r3, r3, r2
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	4413      	add	r3, r2
 80036a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80036a8:	f7fe f860 	bl	800176c <HAL_GetTick>
 80036ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80036ae:	4b39      	ldr	r3, [pc, #228]	@ (8003794 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	015b      	lsls	r3, r3, #5
 80036b4:	0d1b      	lsrs	r3, r3, #20
 80036b6:	69fa      	ldr	r2, [r7, #28]
 80036b8:	fb02 f303 	mul.w	r3, r2, r3
 80036bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036be:	e054      	b.n	800376a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c6:	d050      	beq.n	800376a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036c8:	f7fe f850 	bl	800176c <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	69fa      	ldr	r2, [r7, #28]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d902      	bls.n	80036de <SPI_WaitFlagStateUntilTimeout+0x56>
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d13d      	bne.n	800375a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80036ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036f6:	d111      	bne.n	800371c <SPI_WaitFlagStateUntilTimeout+0x94>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003700:	d004      	beq.n	800370c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800370a:	d107      	bne.n	800371c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800371a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003720:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003724:	d10f      	bne.n	8003746 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003734:	601a      	str	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003744:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e017      	b.n	800378a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	3b01      	subs	r3, #1
 8003768:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689a      	ldr	r2, [r3, #8]
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	4013      	ands	r3, r2
 8003774:	68ba      	ldr	r2, [r7, #8]
 8003776:	429a      	cmp	r2, r3
 8003778:	bf0c      	ite	eq
 800377a:	2301      	moveq	r3, #1
 800377c:	2300      	movne	r3, #0
 800377e:	b2db      	uxtb	r3, r3
 8003780:	461a      	mov	r2, r3
 8003782:	79fb      	ldrb	r3, [r7, #7]
 8003784:	429a      	cmp	r2, r3
 8003786:	d19b      	bne.n	80036c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3720      	adds	r7, #32
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	20000000 	.word	0x20000000

08003798 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af02      	add	r7, sp, #8
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037ac:	d111      	bne.n	80037d2 <SPI_EndRxTransaction+0x3a>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037b6:	d004      	beq.n	80037c2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037c0:	d107      	bne.n	80037d2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037d0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037da:	d12a      	bne.n	8003832 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037e4:	d012      	beq.n	800380c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	2200      	movs	r2, #0
 80037ee:	2180      	movs	r1, #128	@ 0x80
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f7ff ff49 	bl	8003688 <SPI_WaitFlagStateUntilTimeout>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d02d      	beq.n	8003858 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003800:	f043 0220 	orr.w	r2, r3, #32
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e026      	b.n	800385a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	2200      	movs	r2, #0
 8003814:	2101      	movs	r1, #1
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f7ff ff36 	bl	8003688 <SPI_WaitFlagStateUntilTimeout>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d01a      	beq.n	8003858 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003826:	f043 0220 	orr.w	r2, r3, #32
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e013      	b.n	800385a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	9300      	str	r3, [sp, #0]
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	2200      	movs	r2, #0
 800383a:	2101      	movs	r1, #1
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f7ff ff23 	bl	8003688 <SPI_WaitFlagStateUntilTimeout>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d007      	beq.n	8003858 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800384c:	f043 0220 	orr.w	r2, r3, #32
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e000      	b.n	800385a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
	...

08003864 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b088      	sub	sp, #32
 8003868:	af02      	add	r7, sp, #8
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	2201      	movs	r2, #1
 8003878:	2102      	movs	r1, #2
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f7ff ff04 	bl	8003688 <SPI_WaitFlagStateUntilTimeout>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d007      	beq.n	8003896 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800388a:	f043 0220 	orr.w	r2, r3, #32
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e032      	b.n	80038fc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003896:	4b1b      	ldr	r3, [pc, #108]	@ (8003904 <SPI_EndRxTxTransaction+0xa0>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a1b      	ldr	r2, [pc, #108]	@ (8003908 <SPI_EndRxTxTransaction+0xa4>)
 800389c:	fba2 2303 	umull	r2, r3, r2, r3
 80038a0:	0d5b      	lsrs	r3, r3, #21
 80038a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80038a6:	fb02 f303 	mul.w	r3, r2, r3
 80038aa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038b4:	d112      	bne.n	80038dc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	9300      	str	r3, [sp, #0]
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	2200      	movs	r2, #0
 80038be:	2180      	movs	r1, #128	@ 0x80
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f7ff fee1 	bl	8003688 <SPI_WaitFlagStateUntilTimeout>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d016      	beq.n	80038fa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d0:	f043 0220 	orr.w	r2, r3, #32
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e00f      	b.n	80038fc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00a      	beq.n	80038f8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	3b01      	subs	r3, #1
 80038e6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038f2:	2b80      	cmp	r3, #128	@ 0x80
 80038f4:	d0f2      	beq.n	80038dc <SPI_EndRxTxTransaction+0x78>
 80038f6:	e000      	b.n	80038fa <SPI_EndRxTxTransaction+0x96>
        break;
 80038f8:	bf00      	nop
  }

  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3718      	adds	r7, #24
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	20000000 	.word	0x20000000
 8003908:	165e9f81 	.word	0x165e9f81

0800390c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e041      	b.n	80039a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d106      	bne.n	8003938 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f839 	bl	80039aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2202      	movs	r2, #2
 800393c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3304      	adds	r3, #4
 8003948:	4619      	mov	r1, r3
 800394a:	4610      	mov	r0, r2
 800394c:	f000 f9b2 	bl	8003cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b083      	sub	sp, #12
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
	...

080039c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d001      	beq.n	80039d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e044      	b.n	8003a62 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2202      	movs	r2, #2
 80039dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68da      	ldr	r2, [r3, #12]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f042 0201 	orr.w	r2, r2, #1
 80039ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a1e      	ldr	r2, [pc, #120]	@ (8003a70 <HAL_TIM_Base_Start_IT+0xb0>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d018      	beq.n	8003a2c <HAL_TIM_Base_Start_IT+0x6c>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a02:	d013      	beq.n	8003a2c <HAL_TIM_Base_Start_IT+0x6c>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a1a      	ldr	r2, [pc, #104]	@ (8003a74 <HAL_TIM_Base_Start_IT+0xb4>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d00e      	beq.n	8003a2c <HAL_TIM_Base_Start_IT+0x6c>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a19      	ldr	r2, [pc, #100]	@ (8003a78 <HAL_TIM_Base_Start_IT+0xb8>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d009      	beq.n	8003a2c <HAL_TIM_Base_Start_IT+0x6c>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a17      	ldr	r2, [pc, #92]	@ (8003a7c <HAL_TIM_Base_Start_IT+0xbc>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d004      	beq.n	8003a2c <HAL_TIM_Base_Start_IT+0x6c>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a16      	ldr	r2, [pc, #88]	@ (8003a80 <HAL_TIM_Base_Start_IT+0xc0>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d111      	bne.n	8003a50 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 0307 	and.w	r3, r3, #7
 8003a36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2b06      	cmp	r3, #6
 8003a3c:	d010      	beq.n	8003a60 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f042 0201 	orr.w	r2, r2, #1
 8003a4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a4e:	e007      	b.n	8003a60 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0201 	orr.w	r2, r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3714      	adds	r7, #20
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	40010000 	.word	0x40010000
 8003a74:	40000400 	.word	0x40000400
 8003a78:	40000800 	.word	0x40000800
 8003a7c:	40000c00 	.word	0x40000c00
 8003a80:	40014000 	.word	0x40014000

08003a84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d020      	beq.n	8003ae8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d01b      	beq.n	8003ae8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f06f 0202 	mvn.w	r2, #2
 8003ab8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	f003 0303 	and.w	r3, r3, #3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f8d2 	bl	8003c78 <HAL_TIM_IC_CaptureCallback>
 8003ad4:	e005      	b.n	8003ae2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f8c4 	bl	8003c64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 f8d5 	bl	8003c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	f003 0304 	and.w	r3, r3, #4
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d020      	beq.n	8003b34 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d01b      	beq.n	8003b34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f06f 0204 	mvn.w	r2, #4
 8003b04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2202      	movs	r2, #2
 8003b0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 f8ac 	bl	8003c78 <HAL_TIM_IC_CaptureCallback>
 8003b20:	e005      	b.n	8003b2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f89e 	bl	8003c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 f8af 	bl	8003c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d020      	beq.n	8003b80 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f003 0308 	and.w	r3, r3, #8
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d01b      	beq.n	8003b80 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f06f 0208 	mvn.w	r2, #8
 8003b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2204      	movs	r2, #4
 8003b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d003      	beq.n	8003b6e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f886 	bl	8003c78 <HAL_TIM_IC_CaptureCallback>
 8003b6c:	e005      	b.n	8003b7a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f878 	bl	8003c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f889 	bl	8003c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	f003 0310 	and.w	r3, r3, #16
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d020      	beq.n	8003bcc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f003 0310 	and.w	r3, r3, #16
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d01b      	beq.n	8003bcc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f06f 0210 	mvn.w	r2, #16
 8003b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2208      	movs	r2, #8
 8003ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	69db      	ldr	r3, [r3, #28]
 8003baa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f860 	bl	8003c78 <HAL_TIM_IC_CaptureCallback>
 8003bb8:	e005      	b.n	8003bc6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f852 	bl	8003c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 f863 	bl	8003c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00c      	beq.n	8003bf0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d007      	beq.n	8003bf0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f06f 0201 	mvn.w	r2, #1
 8003be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7fd fae0 	bl	80011b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00c      	beq.n	8003c14 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d007      	beq.n	8003c14 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f8e6 	bl	8003de0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00c      	beq.n	8003c38 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d007      	beq.n	8003c38 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f834 	bl	8003ca0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	f003 0320 	and.w	r3, r3, #32
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00c      	beq.n	8003c5c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f003 0320 	and.w	r3, r3, #32
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d007      	beq.n	8003c5c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f06f 0220 	mvn.w	r2, #32
 8003c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f8b8 	bl	8003dcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c5c:	bf00      	nop
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c6c:	bf00      	nop
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a3a      	ldr	r2, [pc, #232]	@ (8003db0 <TIM_Base_SetConfig+0xfc>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d00f      	beq.n	8003cec <TIM_Base_SetConfig+0x38>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cd2:	d00b      	beq.n	8003cec <TIM_Base_SetConfig+0x38>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a37      	ldr	r2, [pc, #220]	@ (8003db4 <TIM_Base_SetConfig+0x100>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d007      	beq.n	8003cec <TIM_Base_SetConfig+0x38>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a36      	ldr	r2, [pc, #216]	@ (8003db8 <TIM_Base_SetConfig+0x104>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d003      	beq.n	8003cec <TIM_Base_SetConfig+0x38>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a35      	ldr	r2, [pc, #212]	@ (8003dbc <TIM_Base_SetConfig+0x108>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d108      	bne.n	8003cfe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a2b      	ldr	r2, [pc, #172]	@ (8003db0 <TIM_Base_SetConfig+0xfc>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d01b      	beq.n	8003d3e <TIM_Base_SetConfig+0x8a>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d0c:	d017      	beq.n	8003d3e <TIM_Base_SetConfig+0x8a>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a28      	ldr	r2, [pc, #160]	@ (8003db4 <TIM_Base_SetConfig+0x100>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d013      	beq.n	8003d3e <TIM_Base_SetConfig+0x8a>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a27      	ldr	r2, [pc, #156]	@ (8003db8 <TIM_Base_SetConfig+0x104>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d00f      	beq.n	8003d3e <TIM_Base_SetConfig+0x8a>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a26      	ldr	r2, [pc, #152]	@ (8003dbc <TIM_Base_SetConfig+0x108>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d00b      	beq.n	8003d3e <TIM_Base_SetConfig+0x8a>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a25      	ldr	r2, [pc, #148]	@ (8003dc0 <TIM_Base_SetConfig+0x10c>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d007      	beq.n	8003d3e <TIM_Base_SetConfig+0x8a>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a24      	ldr	r2, [pc, #144]	@ (8003dc4 <TIM_Base_SetConfig+0x110>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d003      	beq.n	8003d3e <TIM_Base_SetConfig+0x8a>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a23      	ldr	r2, [pc, #140]	@ (8003dc8 <TIM_Base_SetConfig+0x114>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d108      	bne.n	8003d50 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a0e      	ldr	r2, [pc, #56]	@ (8003db0 <TIM_Base_SetConfig+0xfc>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d103      	bne.n	8003d84 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	691a      	ldr	r2, [r3, #16]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d105      	bne.n	8003da2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	f023 0201 	bic.w	r2, r3, #1
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	611a      	str	r2, [r3, #16]
  }
}
 8003da2:	bf00      	nop
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	40010000 	.word	0x40010000
 8003db4:	40000400 	.word	0x40000400
 8003db8:	40000800 	.word	0x40000800
 8003dbc:	40000c00 	.word	0x40000c00
 8003dc0:	40014000 	.word	0x40014000
 8003dc4:	40014400 	.word	0x40014400
 8003dc8:	40014800 	.word	0x40014800

08003dcc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e042      	b.n	8003e8c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d106      	bne.n	8003e20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7fd fa80 	bl	8001320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2224      	movs	r2, #36	@ 0x24
 8003e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68da      	ldr	r2, [r3, #12]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 f973 	bl	8004124 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	691a      	ldr	r2, [r3, #16]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	695a      	ldr	r2, [r3, #20]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68da      	ldr	r2, [r3, #12]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2220      	movs	r2, #32
 8003e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3708      	adds	r7, #8
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b08a      	sub	sp, #40	@ 0x28
 8003e98:	af02      	add	r7, sp, #8
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	603b      	str	r3, [r7, #0]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b20      	cmp	r3, #32
 8003eb2:	d175      	bne.n	8003fa0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d002      	beq.n	8003ec0 <HAL_UART_Transmit+0x2c>
 8003eba:	88fb      	ldrh	r3, [r7, #6]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d101      	bne.n	8003ec4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e06e      	b.n	8003fa2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2221      	movs	r2, #33	@ 0x21
 8003ece:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ed2:	f7fd fc4b 	bl	800176c <HAL_GetTick>
 8003ed6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	88fa      	ldrh	r2, [r7, #6]
 8003edc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	88fa      	ldrh	r2, [r7, #6]
 8003ee2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eec:	d108      	bne.n	8003f00 <HAL_UART_Transmit+0x6c>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d104      	bne.n	8003f00 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	61bb      	str	r3, [r7, #24]
 8003efe:	e003      	b.n	8003f08 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f04:	2300      	movs	r3, #0
 8003f06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f08:	e02e      	b.n	8003f68 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	2200      	movs	r2, #0
 8003f12:	2180      	movs	r1, #128	@ 0x80
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f000 f848 	bl	8003faa <UART_WaitOnFlagUntilTimeout>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d005      	beq.n	8003f2c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2220      	movs	r2, #32
 8003f24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e03a      	b.n	8003fa2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10b      	bne.n	8003f4a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	881b      	ldrh	r3, [r3, #0]
 8003f36:	461a      	mov	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	3302      	adds	r3, #2
 8003f46:	61bb      	str	r3, [r7, #24]
 8003f48:	e007      	b.n	8003f5a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	781a      	ldrb	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	3301      	adds	r3, #1
 8003f58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	3b01      	subs	r3, #1
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1cb      	bne.n	8003f0a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	2140      	movs	r1, #64	@ 0x40
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f000 f814 	bl	8003faa <UART_WaitOnFlagUntilTimeout>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d005      	beq.n	8003f94 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e006      	b.n	8003fa2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2220      	movs	r2, #32
 8003f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	e000      	b.n	8003fa2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003fa0:	2302      	movs	r3, #2
  }
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3720      	adds	r7, #32
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b086      	sub	sp, #24
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	60f8      	str	r0, [r7, #12]
 8003fb2:	60b9      	str	r1, [r7, #8]
 8003fb4:	603b      	str	r3, [r7, #0]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fba:	e03b      	b.n	8004034 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fbc:	6a3b      	ldr	r3, [r7, #32]
 8003fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc2:	d037      	beq.n	8004034 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fc4:	f7fd fbd2 	bl	800176c <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	6a3a      	ldr	r2, [r7, #32]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d302      	bcc.n	8003fda <UART_WaitOnFlagUntilTimeout+0x30>
 8003fd4:	6a3b      	ldr	r3, [r7, #32]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e03a      	b.n	8004054 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	f003 0304 	and.w	r3, r3, #4
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d023      	beq.n	8004034 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	2b80      	cmp	r3, #128	@ 0x80
 8003ff0:	d020      	beq.n	8004034 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	2b40      	cmp	r3, #64	@ 0x40
 8003ff6:	d01d      	beq.n	8004034 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0308 	and.w	r3, r3, #8
 8004002:	2b08      	cmp	r3, #8
 8004004:	d116      	bne.n	8004034 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004006:	2300      	movs	r3, #0
 8004008:	617b      	str	r3, [r7, #20]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	617b      	str	r3, [r7, #20]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	617b      	str	r3, [r7, #20]
 800401a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800401c:	68f8      	ldr	r0, [r7, #12]
 800401e:	f000 f81d 	bl	800405c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2208      	movs	r2, #8
 8004026:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e00f      	b.n	8004054 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	4013      	ands	r3, r2
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	429a      	cmp	r2, r3
 8004042:	bf0c      	ite	eq
 8004044:	2301      	moveq	r3, #1
 8004046:	2300      	movne	r3, #0
 8004048:	b2db      	uxtb	r3, r3
 800404a:	461a      	mov	r2, r3
 800404c:	79fb      	ldrb	r3, [r7, #7]
 800404e:	429a      	cmp	r2, r3
 8004050:	d0b4      	beq.n	8003fbc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3718      	adds	r7, #24
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800405c:	b480      	push	{r7}
 800405e:	b095      	sub	sp, #84	@ 0x54
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	330c      	adds	r3, #12
 800406a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800406e:	e853 3f00 	ldrex	r3, [r3]
 8004072:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004076:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800407a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	330c      	adds	r3, #12
 8004082:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004084:	643a      	str	r2, [r7, #64]	@ 0x40
 8004086:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004088:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800408a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800408c:	e841 2300 	strex	r3, r2, [r1]
 8004090:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1e5      	bne.n	8004064 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	3314      	adds	r3, #20
 800409e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a0:	6a3b      	ldr	r3, [r7, #32]
 80040a2:	e853 3f00 	ldrex	r3, [r3]
 80040a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	f023 0301 	bic.w	r3, r3, #1
 80040ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	3314      	adds	r3, #20
 80040b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040c0:	e841 2300 	strex	r3, r2, [r1]
 80040c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80040c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1e5      	bne.n	8004098 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d119      	bne.n	8004108 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	330c      	adds	r3, #12
 80040da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	e853 3f00 	ldrex	r3, [r3]
 80040e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	f023 0310 	bic.w	r3, r3, #16
 80040ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	330c      	adds	r3, #12
 80040f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040f4:	61ba      	str	r2, [r7, #24]
 80040f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f8:	6979      	ldr	r1, [r7, #20]
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	e841 2300 	strex	r3, r2, [r1]
 8004100:	613b      	str	r3, [r7, #16]
   return(result);
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1e5      	bne.n	80040d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2220      	movs	r2, #32
 800410c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004116:	bf00      	nop
 8004118:	3754      	adds	r7, #84	@ 0x54
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
	...

08004124 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004124:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004128:	b0c0      	sub	sp, #256	@ 0x100
 800412a:	af00      	add	r7, sp, #0
 800412c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800413c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004140:	68d9      	ldr	r1, [r3, #12]
 8004142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	ea40 0301 	orr.w	r3, r0, r1
 800414c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800414e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	431a      	orrs	r2, r3
 800415c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	431a      	orrs	r2, r3
 8004164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	4313      	orrs	r3, r2
 800416c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800417c:	f021 010c 	bic.w	r1, r1, #12
 8004180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800418a:	430b      	orrs	r3, r1
 800418c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800418e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800419a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800419e:	6999      	ldr	r1, [r3, #24]
 80041a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	ea40 0301 	orr.w	r3, r0, r1
 80041aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	4b8f      	ldr	r3, [pc, #572]	@ (80043f0 <UART_SetConfig+0x2cc>)
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d005      	beq.n	80041c4 <UART_SetConfig+0xa0>
 80041b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	4b8d      	ldr	r3, [pc, #564]	@ (80043f4 <UART_SetConfig+0x2d0>)
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d104      	bne.n	80041ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041c4:	f7fe fa12 	bl	80025ec <HAL_RCC_GetPCLK2Freq>
 80041c8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80041cc:	e003      	b.n	80041d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041ce:	f7fe f9f9 	bl	80025c4 <HAL_RCC_GetPCLK1Freq>
 80041d2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041da:	69db      	ldr	r3, [r3, #28]
 80041dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041e0:	f040 810c 	bne.w	80043fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041e8:	2200      	movs	r2, #0
 80041ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80041ee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80041f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80041f6:	4622      	mov	r2, r4
 80041f8:	462b      	mov	r3, r5
 80041fa:	1891      	adds	r1, r2, r2
 80041fc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80041fe:	415b      	adcs	r3, r3
 8004200:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004202:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004206:	4621      	mov	r1, r4
 8004208:	eb12 0801 	adds.w	r8, r2, r1
 800420c:	4629      	mov	r1, r5
 800420e:	eb43 0901 	adc.w	r9, r3, r1
 8004212:	f04f 0200 	mov.w	r2, #0
 8004216:	f04f 0300 	mov.w	r3, #0
 800421a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800421e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004222:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004226:	4690      	mov	r8, r2
 8004228:	4699      	mov	r9, r3
 800422a:	4623      	mov	r3, r4
 800422c:	eb18 0303 	adds.w	r3, r8, r3
 8004230:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004234:	462b      	mov	r3, r5
 8004236:	eb49 0303 	adc.w	r3, r9, r3
 800423a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800423e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800424a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800424e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004252:	460b      	mov	r3, r1
 8004254:	18db      	adds	r3, r3, r3
 8004256:	653b      	str	r3, [r7, #80]	@ 0x50
 8004258:	4613      	mov	r3, r2
 800425a:	eb42 0303 	adc.w	r3, r2, r3
 800425e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004260:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004264:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004268:	f7fc f812 	bl	8000290 <__aeabi_uldivmod>
 800426c:	4602      	mov	r2, r0
 800426e:	460b      	mov	r3, r1
 8004270:	4b61      	ldr	r3, [pc, #388]	@ (80043f8 <UART_SetConfig+0x2d4>)
 8004272:	fba3 2302 	umull	r2, r3, r3, r2
 8004276:	095b      	lsrs	r3, r3, #5
 8004278:	011c      	lsls	r4, r3, #4
 800427a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800427e:	2200      	movs	r2, #0
 8004280:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004284:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004288:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800428c:	4642      	mov	r2, r8
 800428e:	464b      	mov	r3, r9
 8004290:	1891      	adds	r1, r2, r2
 8004292:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004294:	415b      	adcs	r3, r3
 8004296:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004298:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800429c:	4641      	mov	r1, r8
 800429e:	eb12 0a01 	adds.w	sl, r2, r1
 80042a2:	4649      	mov	r1, r9
 80042a4:	eb43 0b01 	adc.w	fp, r3, r1
 80042a8:	f04f 0200 	mov.w	r2, #0
 80042ac:	f04f 0300 	mov.w	r3, #0
 80042b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042bc:	4692      	mov	sl, r2
 80042be:	469b      	mov	fp, r3
 80042c0:	4643      	mov	r3, r8
 80042c2:	eb1a 0303 	adds.w	r3, sl, r3
 80042c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80042ca:	464b      	mov	r3, r9
 80042cc:	eb4b 0303 	adc.w	r3, fp, r3
 80042d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80042d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80042e0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80042e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80042e8:	460b      	mov	r3, r1
 80042ea:	18db      	adds	r3, r3, r3
 80042ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80042ee:	4613      	mov	r3, r2
 80042f0:	eb42 0303 	adc.w	r3, r2, r3
 80042f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80042f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80042fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80042fe:	f7fb ffc7 	bl	8000290 <__aeabi_uldivmod>
 8004302:	4602      	mov	r2, r0
 8004304:	460b      	mov	r3, r1
 8004306:	4611      	mov	r1, r2
 8004308:	4b3b      	ldr	r3, [pc, #236]	@ (80043f8 <UART_SetConfig+0x2d4>)
 800430a:	fba3 2301 	umull	r2, r3, r3, r1
 800430e:	095b      	lsrs	r3, r3, #5
 8004310:	2264      	movs	r2, #100	@ 0x64
 8004312:	fb02 f303 	mul.w	r3, r2, r3
 8004316:	1acb      	subs	r3, r1, r3
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800431e:	4b36      	ldr	r3, [pc, #216]	@ (80043f8 <UART_SetConfig+0x2d4>)
 8004320:	fba3 2302 	umull	r2, r3, r3, r2
 8004324:	095b      	lsrs	r3, r3, #5
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800432c:	441c      	add	r4, r3
 800432e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004332:	2200      	movs	r2, #0
 8004334:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004338:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800433c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004340:	4642      	mov	r2, r8
 8004342:	464b      	mov	r3, r9
 8004344:	1891      	adds	r1, r2, r2
 8004346:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004348:	415b      	adcs	r3, r3
 800434a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800434c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004350:	4641      	mov	r1, r8
 8004352:	1851      	adds	r1, r2, r1
 8004354:	6339      	str	r1, [r7, #48]	@ 0x30
 8004356:	4649      	mov	r1, r9
 8004358:	414b      	adcs	r3, r1
 800435a:	637b      	str	r3, [r7, #52]	@ 0x34
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004368:	4659      	mov	r1, fp
 800436a:	00cb      	lsls	r3, r1, #3
 800436c:	4651      	mov	r1, sl
 800436e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004372:	4651      	mov	r1, sl
 8004374:	00ca      	lsls	r2, r1, #3
 8004376:	4610      	mov	r0, r2
 8004378:	4619      	mov	r1, r3
 800437a:	4603      	mov	r3, r0
 800437c:	4642      	mov	r2, r8
 800437e:	189b      	adds	r3, r3, r2
 8004380:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004384:	464b      	mov	r3, r9
 8004386:	460a      	mov	r2, r1
 8004388:	eb42 0303 	adc.w	r3, r2, r3
 800438c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800439c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80043a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80043a4:	460b      	mov	r3, r1
 80043a6:	18db      	adds	r3, r3, r3
 80043a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043aa:	4613      	mov	r3, r2
 80043ac:	eb42 0303 	adc.w	r3, r2, r3
 80043b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80043b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80043ba:	f7fb ff69 	bl	8000290 <__aeabi_uldivmod>
 80043be:	4602      	mov	r2, r0
 80043c0:	460b      	mov	r3, r1
 80043c2:	4b0d      	ldr	r3, [pc, #52]	@ (80043f8 <UART_SetConfig+0x2d4>)
 80043c4:	fba3 1302 	umull	r1, r3, r3, r2
 80043c8:	095b      	lsrs	r3, r3, #5
 80043ca:	2164      	movs	r1, #100	@ 0x64
 80043cc:	fb01 f303 	mul.w	r3, r1, r3
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	00db      	lsls	r3, r3, #3
 80043d4:	3332      	adds	r3, #50	@ 0x32
 80043d6:	4a08      	ldr	r2, [pc, #32]	@ (80043f8 <UART_SetConfig+0x2d4>)
 80043d8:	fba2 2303 	umull	r2, r3, r2, r3
 80043dc:	095b      	lsrs	r3, r3, #5
 80043de:	f003 0207 	and.w	r2, r3, #7
 80043e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4422      	add	r2, r4
 80043ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80043ec:	e106      	b.n	80045fc <UART_SetConfig+0x4d8>
 80043ee:	bf00      	nop
 80043f0:	40011000 	.word	0x40011000
 80043f4:	40011400 	.word	0x40011400
 80043f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004400:	2200      	movs	r2, #0
 8004402:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004406:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800440a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800440e:	4642      	mov	r2, r8
 8004410:	464b      	mov	r3, r9
 8004412:	1891      	adds	r1, r2, r2
 8004414:	6239      	str	r1, [r7, #32]
 8004416:	415b      	adcs	r3, r3
 8004418:	627b      	str	r3, [r7, #36]	@ 0x24
 800441a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800441e:	4641      	mov	r1, r8
 8004420:	1854      	adds	r4, r2, r1
 8004422:	4649      	mov	r1, r9
 8004424:	eb43 0501 	adc.w	r5, r3, r1
 8004428:	f04f 0200 	mov.w	r2, #0
 800442c:	f04f 0300 	mov.w	r3, #0
 8004430:	00eb      	lsls	r3, r5, #3
 8004432:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004436:	00e2      	lsls	r2, r4, #3
 8004438:	4614      	mov	r4, r2
 800443a:	461d      	mov	r5, r3
 800443c:	4643      	mov	r3, r8
 800443e:	18e3      	adds	r3, r4, r3
 8004440:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004444:	464b      	mov	r3, r9
 8004446:	eb45 0303 	adc.w	r3, r5, r3
 800444a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800444e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800445a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800445e:	f04f 0200 	mov.w	r2, #0
 8004462:	f04f 0300 	mov.w	r3, #0
 8004466:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800446a:	4629      	mov	r1, r5
 800446c:	008b      	lsls	r3, r1, #2
 800446e:	4621      	mov	r1, r4
 8004470:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004474:	4621      	mov	r1, r4
 8004476:	008a      	lsls	r2, r1, #2
 8004478:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800447c:	f7fb ff08 	bl	8000290 <__aeabi_uldivmod>
 8004480:	4602      	mov	r2, r0
 8004482:	460b      	mov	r3, r1
 8004484:	4b60      	ldr	r3, [pc, #384]	@ (8004608 <UART_SetConfig+0x4e4>)
 8004486:	fba3 2302 	umull	r2, r3, r3, r2
 800448a:	095b      	lsrs	r3, r3, #5
 800448c:	011c      	lsls	r4, r3, #4
 800448e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004492:	2200      	movs	r2, #0
 8004494:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004498:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800449c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80044a0:	4642      	mov	r2, r8
 80044a2:	464b      	mov	r3, r9
 80044a4:	1891      	adds	r1, r2, r2
 80044a6:	61b9      	str	r1, [r7, #24]
 80044a8:	415b      	adcs	r3, r3
 80044aa:	61fb      	str	r3, [r7, #28]
 80044ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044b0:	4641      	mov	r1, r8
 80044b2:	1851      	adds	r1, r2, r1
 80044b4:	6139      	str	r1, [r7, #16]
 80044b6:	4649      	mov	r1, r9
 80044b8:	414b      	adcs	r3, r1
 80044ba:	617b      	str	r3, [r7, #20]
 80044bc:	f04f 0200 	mov.w	r2, #0
 80044c0:	f04f 0300 	mov.w	r3, #0
 80044c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044c8:	4659      	mov	r1, fp
 80044ca:	00cb      	lsls	r3, r1, #3
 80044cc:	4651      	mov	r1, sl
 80044ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044d2:	4651      	mov	r1, sl
 80044d4:	00ca      	lsls	r2, r1, #3
 80044d6:	4610      	mov	r0, r2
 80044d8:	4619      	mov	r1, r3
 80044da:	4603      	mov	r3, r0
 80044dc:	4642      	mov	r2, r8
 80044de:	189b      	adds	r3, r3, r2
 80044e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80044e4:	464b      	mov	r3, r9
 80044e6:	460a      	mov	r2, r1
 80044e8:	eb42 0303 	adc.w	r3, r2, r3
 80044ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80044f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80044fa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80044fc:	f04f 0200 	mov.w	r2, #0
 8004500:	f04f 0300 	mov.w	r3, #0
 8004504:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004508:	4649      	mov	r1, r9
 800450a:	008b      	lsls	r3, r1, #2
 800450c:	4641      	mov	r1, r8
 800450e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004512:	4641      	mov	r1, r8
 8004514:	008a      	lsls	r2, r1, #2
 8004516:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800451a:	f7fb feb9 	bl	8000290 <__aeabi_uldivmod>
 800451e:	4602      	mov	r2, r0
 8004520:	460b      	mov	r3, r1
 8004522:	4611      	mov	r1, r2
 8004524:	4b38      	ldr	r3, [pc, #224]	@ (8004608 <UART_SetConfig+0x4e4>)
 8004526:	fba3 2301 	umull	r2, r3, r3, r1
 800452a:	095b      	lsrs	r3, r3, #5
 800452c:	2264      	movs	r2, #100	@ 0x64
 800452e:	fb02 f303 	mul.w	r3, r2, r3
 8004532:	1acb      	subs	r3, r1, r3
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	3332      	adds	r3, #50	@ 0x32
 8004538:	4a33      	ldr	r2, [pc, #204]	@ (8004608 <UART_SetConfig+0x4e4>)
 800453a:	fba2 2303 	umull	r2, r3, r2, r3
 800453e:	095b      	lsrs	r3, r3, #5
 8004540:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004544:	441c      	add	r4, r3
 8004546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800454a:	2200      	movs	r2, #0
 800454c:	673b      	str	r3, [r7, #112]	@ 0x70
 800454e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004550:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004554:	4642      	mov	r2, r8
 8004556:	464b      	mov	r3, r9
 8004558:	1891      	adds	r1, r2, r2
 800455a:	60b9      	str	r1, [r7, #8]
 800455c:	415b      	adcs	r3, r3
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004564:	4641      	mov	r1, r8
 8004566:	1851      	adds	r1, r2, r1
 8004568:	6039      	str	r1, [r7, #0]
 800456a:	4649      	mov	r1, r9
 800456c:	414b      	adcs	r3, r1
 800456e:	607b      	str	r3, [r7, #4]
 8004570:	f04f 0200 	mov.w	r2, #0
 8004574:	f04f 0300 	mov.w	r3, #0
 8004578:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800457c:	4659      	mov	r1, fp
 800457e:	00cb      	lsls	r3, r1, #3
 8004580:	4651      	mov	r1, sl
 8004582:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004586:	4651      	mov	r1, sl
 8004588:	00ca      	lsls	r2, r1, #3
 800458a:	4610      	mov	r0, r2
 800458c:	4619      	mov	r1, r3
 800458e:	4603      	mov	r3, r0
 8004590:	4642      	mov	r2, r8
 8004592:	189b      	adds	r3, r3, r2
 8004594:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004596:	464b      	mov	r3, r9
 8004598:	460a      	mov	r2, r1
 800459a:	eb42 0303 	adc.w	r3, r2, r3
 800459e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80045a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80045aa:	667a      	str	r2, [r7, #100]	@ 0x64
 80045ac:	f04f 0200 	mov.w	r2, #0
 80045b0:	f04f 0300 	mov.w	r3, #0
 80045b4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80045b8:	4649      	mov	r1, r9
 80045ba:	008b      	lsls	r3, r1, #2
 80045bc:	4641      	mov	r1, r8
 80045be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045c2:	4641      	mov	r1, r8
 80045c4:	008a      	lsls	r2, r1, #2
 80045c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80045ca:	f7fb fe61 	bl	8000290 <__aeabi_uldivmod>
 80045ce:	4602      	mov	r2, r0
 80045d0:	460b      	mov	r3, r1
 80045d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004608 <UART_SetConfig+0x4e4>)
 80045d4:	fba3 1302 	umull	r1, r3, r3, r2
 80045d8:	095b      	lsrs	r3, r3, #5
 80045da:	2164      	movs	r1, #100	@ 0x64
 80045dc:	fb01 f303 	mul.w	r3, r1, r3
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	011b      	lsls	r3, r3, #4
 80045e4:	3332      	adds	r3, #50	@ 0x32
 80045e6:	4a08      	ldr	r2, [pc, #32]	@ (8004608 <UART_SetConfig+0x4e4>)
 80045e8:	fba2 2303 	umull	r2, r3, r2, r3
 80045ec:	095b      	lsrs	r3, r3, #5
 80045ee:	f003 020f 	and.w	r2, r3, #15
 80045f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4422      	add	r2, r4
 80045fa:	609a      	str	r2, [r3, #8]
}
 80045fc:	bf00      	nop
 80045fe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004602:	46bd      	mov	sp, r7
 8004604:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004608:	51eb851f 	.word	0x51eb851f

0800460c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	4603      	mov	r3, r0
 8004614:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004616:	2300      	movs	r3, #0
 8004618:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800461a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800461e:	2b84      	cmp	r3, #132	@ 0x84
 8004620:	d005      	beq.n	800462e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004622:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	4413      	add	r3, r2
 800462a:	3303      	adds	r3, #3
 800462c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800462e:	68fb      	ldr	r3, [r7, #12]
}
 8004630:	4618      	mov	r0, r3
 8004632:	3714      	adds	r7, #20
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004642:	f3ef 8305 	mrs	r3, IPSR
 8004646:	607b      	str	r3, [r7, #4]
  return(result);
 8004648:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800464a:	2b00      	cmp	r3, #0
 800464c:	bf14      	ite	ne
 800464e:	2301      	movne	r3, #1
 8004650:	2300      	moveq	r3, #0
 8004652:	b2db      	uxtb	r3, r3
}
 8004654:	4618      	mov	r0, r3
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004664:	f001 fd90 	bl	8006188 <vTaskStartScheduler>
  
  return osOK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	bd80      	pop	{r7, pc}

0800466e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800466e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004670:	b089      	sub	sp, #36	@ 0x24
 8004672:	af04      	add	r7, sp, #16
 8004674:	6078      	str	r0, [r7, #4]
 8004676:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d020      	beq.n	80046c2 <osThreadCreate+0x54>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d01c      	beq.n	80046c2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685c      	ldr	r4, [r3, #4]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	691e      	ldr	r6, [r3, #16]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800469a:	4618      	mov	r0, r3
 800469c:	f7ff ffb6 	bl	800460c <makeFreeRtosPriority>
 80046a0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046aa:	9202      	str	r2, [sp, #8]
 80046ac:	9301      	str	r3, [sp, #4]
 80046ae:	9100      	str	r1, [sp, #0]
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	4632      	mov	r2, r6
 80046b4:	4629      	mov	r1, r5
 80046b6:	4620      	mov	r0, r4
 80046b8:	f001 fb78 	bl	8005dac <xTaskCreateStatic>
 80046bc:	4603      	mov	r3, r0
 80046be:	60fb      	str	r3, [r7, #12]
 80046c0:	e01c      	b.n	80046fc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685c      	ldr	r4, [r3, #4]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046ce:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7ff ff98 	bl	800460c <makeFreeRtosPriority>
 80046dc:	4602      	mov	r2, r0
 80046de:	f107 030c 	add.w	r3, r7, #12
 80046e2:	9301      	str	r3, [sp, #4]
 80046e4:	9200      	str	r2, [sp, #0]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	4632      	mov	r2, r6
 80046ea:	4629      	mov	r1, r5
 80046ec:	4620      	mov	r0, r4
 80046ee:	f001 fbbd 	bl	8005e6c <xTaskCreate>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d001      	beq.n	80046fc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80046f8:	2300      	movs	r3, #0
 80046fa:	e000      	b.n	80046fe <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80046fc:	68fb      	ldr	r3, [r7, #12]
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3714      	adds	r7, #20
 8004702:	46bd      	mov	sp, r7
 8004704:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004708 <osThreadYield>:
* @brief  Pass control to next thread that is in state \b READY.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadYield shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadYield (void)
{
 8004708:	b480      	push	{r7}
 800470a:	af00      	add	r7, sp, #0
  taskYIELD();
 800470c:	4b06      	ldr	r3, [pc, #24]	@ (8004728 <osThreadYield+0x20>)
 800470e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	f3bf 8f6f 	isb	sy
  
  return osOK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr
 8004728:	e000ed04 	.word	0xe000ed04

0800472c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <osDelay+0x16>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	e000      	b.n	8004744 <osDelay+0x18>
 8004742:	2301      	movs	r3, #1
 8004744:	4618      	mov	r0, r3
 8004746:	f001 fce9 	bl	800611c <vTaskDelay>
  
  return osOK;
 800474a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800474c:	4618      	mov	r0, r3
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d007      	beq.n	8004774 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	4619      	mov	r1, r3
 800476a:	2001      	movs	r0, #1
 800476c:	f000 fc95 	bl	800509a <xQueueCreateMutexStatic>
 8004770:	4603      	mov	r3, r0
 8004772:	e003      	b.n	800477c <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8004774:	2001      	movs	r0, #1
 8004776:	f000 fc78 	bl	800506a <xQueueCreateMutex>
 800477a:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800477c:	4618      	mov	r0, r3
 800477e:	3708      	adds	r7, #8
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800478e:	2300      	movs	r3, #0
 8004790:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <osMutexWait+0x18>
    return osErrorParameter;
 8004798:	2380      	movs	r3, #128	@ 0x80
 800479a:	e03a      	b.n	8004812 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800479c:	2300      	movs	r3, #0
 800479e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a6:	d103      	bne.n	80047b0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80047a8:	f04f 33ff 	mov.w	r3, #4294967295
 80047ac:	60fb      	str	r3, [r7, #12]
 80047ae:	e009      	b.n	80047c4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d006      	beq.n	80047c4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <osMutexWait+0x40>
      ticks = 1;
 80047c0:	2301      	movs	r3, #1
 80047c2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80047c4:	f7ff ff3a 	bl	800463c <inHandlerMode>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d017      	beq.n	80047fe <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80047ce:	f107 0308 	add.w	r3, r7, #8
 80047d2:	461a      	mov	r2, r3
 80047d4:	2100      	movs	r1, #0
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f001 f89c 	bl	8005914 <xQueueReceiveFromISR>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d001      	beq.n	80047e6 <osMutexWait+0x62>
      return osErrorOS;
 80047e2:	23ff      	movs	r3, #255	@ 0xff
 80047e4:	e015      	b.n	8004812 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d011      	beq.n	8004810 <osMutexWait+0x8c>
 80047ec:	4b0b      	ldr	r3, [pc, #44]	@ (800481c <osMutexWait+0x98>)
 80047ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047f2:	601a      	str	r2, [r3, #0]
 80047f4:	f3bf 8f4f 	dsb	sy
 80047f8:	f3bf 8f6f 	isb	sy
 80047fc:	e008      	b.n	8004810 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80047fe:	68f9      	ldr	r1, [r7, #12]
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 ff77 	bl	80056f4 <xQueueSemaphoreTake>
 8004806:	4603      	mov	r3, r0
 8004808:	2b01      	cmp	r3, #1
 800480a:	d001      	beq.n	8004810 <osMutexWait+0x8c>
    return osErrorOS;
 800480c:	23ff      	movs	r3, #255	@ 0xff
 800480e:	e000      	b.n	8004812 <osMutexWait+0x8e>
  }
  
  return osOK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	e000ed04 	.word	0xe000ed04

08004820 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004828:	2300      	movs	r3, #0
 800482a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800482c:	2300      	movs	r3, #0
 800482e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004830:	f7ff ff04 	bl	800463c <inHandlerMode>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d016      	beq.n	8004868 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800483a:	f107 0308 	add.w	r3, r7, #8
 800483e:	4619      	mov	r1, r3
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 fde5 	bl	8005410 <xQueueGiveFromISR>
 8004846:	4603      	mov	r3, r0
 8004848:	2b01      	cmp	r3, #1
 800484a:	d001      	beq.n	8004850 <osMutexRelease+0x30>
      return osErrorOS;
 800484c:	23ff      	movs	r3, #255	@ 0xff
 800484e:	e017      	b.n	8004880 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d013      	beq.n	800487e <osMutexRelease+0x5e>
 8004856:	4b0c      	ldr	r3, [pc, #48]	@ (8004888 <osMutexRelease+0x68>)
 8004858:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800485c:	601a      	str	r2, [r3, #0]
 800485e:	f3bf 8f4f 	dsb	sy
 8004862:	f3bf 8f6f 	isb	sy
 8004866:	e00a      	b.n	800487e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004868:	2300      	movs	r3, #0
 800486a:	2200      	movs	r2, #0
 800486c:	2100      	movs	r1, #0
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 fc2e 	bl	80050d0 <xQueueGenericSend>
 8004874:	4603      	mov	r3, r0
 8004876:	2b01      	cmp	r3, #1
 8004878:	d001      	beq.n	800487e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800487a:	23ff      	movs	r3, #255	@ 0xff
 800487c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800487e:	68fb      	ldr	r3, [r7, #12]
}
 8004880:	4618      	mov	r0, r3
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	e000ed04 	.word	0xe000ed04

0800488c <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8004892:	201c      	movs	r0, #28
 8004894:	f003 f9e2 	bl	8007c5c <pvPortMalloc>
 8004898:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00a      	beq.n	80048b6 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	3304      	adds	r3, #4
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 f9ce 	bl	8004c4c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80048b6:	687b      	ldr	r3, [r7, #4]
	}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3708      	adds	r7, #8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b090      	sub	sp, #64	@ 0x40
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
 80048cc:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80048d2:	2300      	movs	r3, #0
 80048d4:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80048d6:	2300      	movs	r3, #0
 80048d8:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10b      	bne.n	80048f8 <xEventGroupWaitBits+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80048e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048e4:	f383 8811 	msr	BASEPRI, r3
 80048e8:	f3bf 8f6f 	isb	sy
 80048ec:	f3bf 8f4f 	dsb	sy
 80048f0:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80048f2:	bf00      	nop
 80048f4:	bf00      	nop
 80048f6:	e7fd      	b.n	80048f4 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048fe:	d30b      	bcc.n	8004918 <xEventGroupWaitBits+0x58>
	__asm volatile
 8004900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004904:	f383 8811 	msr	BASEPRI, r3
 8004908:	f3bf 8f6f 	isb	sy
 800490c:	f3bf 8f4f 	dsb	sy
 8004910:	61fb      	str	r3, [r7, #28]
}
 8004912:	bf00      	nop
 8004914:	bf00      	nop
 8004916:	e7fd      	b.n	8004914 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10b      	bne.n	8004936 <xEventGroupWaitBits+0x76>
	__asm volatile
 800491e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004922:	f383 8811 	msr	BASEPRI, r3
 8004926:	f3bf 8f6f 	isb	sy
 800492a:	f3bf 8f4f 	dsb	sy
 800492e:	61bb      	str	r3, [r7, #24]
}
 8004930:	bf00      	nop
 8004932:	bf00      	nop
 8004934:	e7fd      	b.n	8004932 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004936:	f002 f987 	bl	8006c48 <xTaskGetSchedulerState>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d102      	bne.n	8004946 <xEventGroupWaitBits+0x86>
 8004940:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <xEventGroupWaitBits+0x8a>
 8004946:	2301      	movs	r3, #1
 8004948:	e000      	b.n	800494c <xEventGroupWaitBits+0x8c>
 800494a:	2300      	movs	r3, #0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d10b      	bne.n	8004968 <xEventGroupWaitBits+0xa8>
	__asm volatile
 8004950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004954:	f383 8811 	msr	BASEPRI, r3
 8004958:	f3bf 8f6f 	isb	sy
 800495c:	f3bf 8f4f 	dsb	sy
 8004960:	617b      	str	r3, [r7, #20]
}
 8004962:	bf00      	nop
 8004964:	bf00      	nop
 8004966:	e7fd      	b.n	8004964 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 8004968:	f001 fc7e 	bl	8006268 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800496c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8004972:	683a      	ldr	r2, [r7, #0]
 8004974:	68b9      	ldr	r1, [r7, #8]
 8004976:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004978:	f000 f946 	bl	8004c08 <prvTestWaitCondition>
 800497c:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 800497e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00e      	beq.n	80049a2 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8004984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004986:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8004988:	2300      	movs	r3, #0
 800498a:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d028      	beq.n	80049e4 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	43db      	mvns	r3, r3
 800499a:	401a      	ands	r2, r3
 800499c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	e020      	b.n	80049e4 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80049a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d104      	bne.n	80049b2 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80049a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 80049ac:	2301      	movs	r3, #1
 80049ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80049b0:	e018      	b.n	80049e4 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d003      	beq.n	80049c0 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80049b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049be:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d003      	beq.n	80049ce <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80049c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049c8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80049cc:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80049ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049d0:	1d18      	adds	r0, r3, #4
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d6:	4313      	orrs	r3, r2
 80049d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049da:	4619      	mov	r1, r3
 80049dc:	f001 fe68 	bl	80066b0 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80049e0:	2300      	movs	r3, #0
 80049e2:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80049e4:	f001 fc4e 	bl	8006284 <xTaskResumeAll>
 80049e8:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80049ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d031      	beq.n	8004a54 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 80049f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d107      	bne.n	8004a06 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 80049f6:	4b1a      	ldr	r3, [pc, #104]	@ (8004a60 <xEventGroupWaitBits+0x1a0>)
 80049f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049fc:	601a      	str	r2, [r3, #0]
 80049fe:	f3bf 8f4f 	dsb	sy
 8004a02:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8004a06:	f002 facb 	bl	8006fa0 <uxTaskResetEventItemValue>
 8004a0a:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8004a0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d11a      	bne.n	8004a4c <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 8004a16:	f002 ffff 	bl	8007a18 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8004a1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	68b9      	ldr	r1, [r7, #8]
 8004a24:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004a26:	f000 f8ef 	bl	8004c08 <prvTestWaitCondition>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d009      	beq.n	8004a44 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d006      	beq.n	8004a44 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	43db      	mvns	r3, r3
 8004a3e:	401a      	ands	r2, r3
 8004a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a42:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8004a44:	2301      	movs	r3, #1
 8004a46:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 8004a48:	f003 f818 	bl	8007a7c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004a4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a4e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8004a54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3740      	adds	r7, #64	@ 0x40
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	e000ed04 	.word	0xe000ed04

08004a64 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d10b      	bne.n	8004a90 <xEventGroupClearBits+0x2c>
	__asm volatile
 8004a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a7c:	f383 8811 	msr	BASEPRI, r3
 8004a80:	f3bf 8f6f 	isb	sy
 8004a84:	f3bf 8f4f 	dsb	sy
 8004a88:	60fb      	str	r3, [r7, #12]
}
 8004a8a:	bf00      	nop
 8004a8c:	bf00      	nop
 8004a8e:	e7fd      	b.n	8004a8c <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a96:	d30b      	bcc.n	8004ab0 <xEventGroupClearBits+0x4c>
	__asm volatile
 8004a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a9c:	f383 8811 	msr	BASEPRI, r3
 8004aa0:	f3bf 8f6f 	isb	sy
 8004aa4:	f3bf 8f4f 	dsb	sy
 8004aa8:	60bb      	str	r3, [r7, #8]
}
 8004aaa:	bf00      	nop
 8004aac:	bf00      	nop
 8004aae:	e7fd      	b.n	8004aac <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8004ab0:	f002 ffb2 	bl	8007a18 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	43db      	mvns	r3, r3
 8004ac2:	401a      	ands	r2, r3
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8004ac8:	f002 ffd8 	bl	8007a7c <vPortExitCritical>

	return uxReturn;
 8004acc:	693b      	ldr	r3, [r7, #16]
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3718      	adds	r7, #24
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b08e      	sub	sp, #56	@ 0x38
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
 8004ade:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10b      	bne.n	8004b0a <xEventGroupSetBits+0x34>
	__asm volatile
 8004af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004af6:	f383 8811 	msr	BASEPRI, r3
 8004afa:	f3bf 8f6f 	isb	sy
 8004afe:	f3bf 8f4f 	dsb	sy
 8004b02:	613b      	str	r3, [r7, #16]
}
 8004b04:	bf00      	nop
 8004b06:	bf00      	nop
 8004b08:	e7fd      	b.n	8004b06 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b10:	d30b      	bcc.n	8004b2a <xEventGroupSetBits+0x54>
	__asm volatile
 8004b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b16:	f383 8811 	msr	BASEPRI, r3
 8004b1a:	f3bf 8f6f 	isb	sy
 8004b1e:	f3bf 8f4f 	dsb	sy
 8004b22:	60fb      	str	r3, [r7, #12]
}
 8004b24:	bf00      	nop
 8004b26:	bf00      	nop
 8004b28:	e7fd      	b.n	8004b26 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8004b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b2c:	3304      	adds	r3, #4
 8004b2e:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b32:	3308      	adds	r3, #8
 8004b34:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8004b36:	f001 fb97 	bl	8006268 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8004b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	431a      	orrs	r2, r3
 8004b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b4a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8004b4c:	e03c      	b.n	8004bc8 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8004b4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8004b54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8004b64:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004b6c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d108      	bne.n	8004b8a <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8004b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	4013      	ands	r3, r2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00b      	beq.n	8004b9c <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 8004b84:	2301      	movs	r3, #1
 8004b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b88:	e008      	b.n	8004b9c <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8004b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	4013      	ands	r3, r2
 8004b92:	69ba      	ldr	r2, [r7, #24]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d101      	bne.n	8004b9c <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8004b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d010      	beq.n	8004bc4 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d003      	beq.n	8004bb4 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8004bac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8004bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004bc0:	f001 fe44 	bl	800684c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 8004bc8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004bca:	6a3b      	ldr	r3, [r7, #32]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d1be      	bne.n	8004b4e <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8004bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd6:	43db      	mvns	r3, r3
 8004bd8:	401a      	ands	r2, r3
 8004bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bdc:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8004bde:	f001 fb51 	bl	8006284 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8004be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be4:	681b      	ldr	r3, [r3, #0]
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3738      	adds	r7, #56	@ 0x38
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b082      	sub	sp, #8
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
 8004bf6:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8004bf8:	6839      	ldr	r1, [r7, #0]
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7ff ff6b 	bl	8004ad6 <xEventGroupSetBits>
}
 8004c00:	bf00      	nop
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b087      	sub	sp, #28
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8004c14:	2300      	movs	r3, #0
 8004c16:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d107      	bne.n	8004c2e <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	4013      	ands	r3, r2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00a      	beq.n	8004c3e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	617b      	str	r3, [r7, #20]
 8004c2c:	e007      	b.n	8004c3e <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	4013      	ands	r3, r2
 8004c34:	68ba      	ldr	r2, [r7, #8]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d101      	bne.n	8004c3e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8004c3e:	697b      	ldr	r3, [r7, #20]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	371c      	adds	r7, #28
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f103 0208 	add.w	r2, r3, #8
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f04f 32ff 	mov.w	r2, #4294967295
 8004c64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f103 0208 	add.w	r2, r3, #8
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f103 0208 	add.w	r2, r3, #8
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004c9a:	bf00      	nop
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b085      	sub	sp, #20
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
 8004cae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	689a      	ldr	r2, [r3, #8]
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	683a      	ldr	r2, [r7, #0]
 8004cd0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	1c5a      	adds	r2, r3, #1
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	601a      	str	r2, [r3, #0]
}
 8004ce2:	bf00      	nop
 8004ce4:	3714      	adds	r7, #20
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b085      	sub	sp, #20
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
 8004cf6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d04:	d103      	bne.n	8004d0e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	60fb      	str	r3, [r7, #12]
 8004d0c:	e00c      	b.n	8004d28 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	3308      	adds	r3, #8
 8004d12:	60fb      	str	r3, [r7, #12]
 8004d14:	e002      	b.n	8004d1c <vListInsert+0x2e>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	60fb      	str	r3, [r7, #12]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d2f6      	bcs.n	8004d16 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	683a      	ldr	r2, [r7, #0]
 8004d42:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	1c5a      	adds	r2, r3, #1
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	601a      	str	r2, [r3, #0]
}
 8004d54:	bf00      	nop
 8004d56:	3714      	adds	r7, #20
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	6892      	ldr	r2, [r2, #8]
 8004d76:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	6852      	ldr	r2, [r2, #4]
 8004d80:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d103      	bne.n	8004d94 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689a      	ldr	r2, [r3, #8]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	1e5a      	subs	r2, r3, #1
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3714      	adds	r7, #20
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d10b      	bne.n	8004de0 <xQueueGenericReset+0x2c>
	__asm volatile
 8004dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dcc:	f383 8811 	msr	BASEPRI, r3
 8004dd0:	f3bf 8f6f 	isb	sy
 8004dd4:	f3bf 8f4f 	dsb	sy
 8004dd8:	60bb      	str	r3, [r7, #8]
}
 8004dda:	bf00      	nop
 8004ddc:	bf00      	nop
 8004dde:	e7fd      	b.n	8004ddc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004de0:	f002 fe1a 	bl	8007a18 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dec:	68f9      	ldr	r1, [r7, #12]
 8004dee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004df0:	fb01 f303 	mul.w	r3, r1, r3
 8004df4:	441a      	add	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e10:	3b01      	subs	r3, #1
 8004e12:	68f9      	ldr	r1, [r7, #12]
 8004e14:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004e16:	fb01 f303 	mul.w	r3, r1, r3
 8004e1a:	441a      	add	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	22ff      	movs	r2, #255	@ 0xff
 8004e24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	22ff      	movs	r2, #255	@ 0xff
 8004e2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d114      	bne.n	8004e60 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d01a      	beq.n	8004e74 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	3310      	adds	r3, #16
 8004e42:	4618      	mov	r0, r3
 8004e44:	f001 fc9e 	bl	8006784 <xTaskRemoveFromEventList>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d012      	beq.n	8004e74 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e84 <xQueueGenericReset+0xd0>)
 8004e50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e54:	601a      	str	r2, [r3, #0]
 8004e56:	f3bf 8f4f 	dsb	sy
 8004e5a:	f3bf 8f6f 	isb	sy
 8004e5e:	e009      	b.n	8004e74 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	3310      	adds	r3, #16
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7ff fef1 	bl	8004c4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	3324      	adds	r3, #36	@ 0x24
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7ff feec 	bl	8004c4c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004e74:	f002 fe02 	bl	8007a7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004e78:	2301      	movs	r3, #1
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	e000ed04 	.word	0xe000ed04

08004e88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b08e      	sub	sp, #56	@ 0x38
 8004e8c:	af02      	add	r7, sp, #8
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
 8004e94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d10b      	bne.n	8004eb4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ea0:	f383 8811 	msr	BASEPRI, r3
 8004ea4:	f3bf 8f6f 	isb	sy
 8004ea8:	f3bf 8f4f 	dsb	sy
 8004eac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004eae:	bf00      	nop
 8004eb0:	bf00      	nop
 8004eb2:	e7fd      	b.n	8004eb0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10b      	bne.n	8004ed2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ebe:	f383 8811 	msr	BASEPRI, r3
 8004ec2:	f3bf 8f6f 	isb	sy
 8004ec6:	f3bf 8f4f 	dsb	sy
 8004eca:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004ecc:	bf00      	nop
 8004ece:	bf00      	nop
 8004ed0:	e7fd      	b.n	8004ece <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d002      	beq.n	8004ede <xQueueGenericCreateStatic+0x56>
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <xQueueGenericCreateStatic+0x5a>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e000      	b.n	8004ee4 <xQueueGenericCreateStatic+0x5c>
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10b      	bne.n	8004f00 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eec:	f383 8811 	msr	BASEPRI, r3
 8004ef0:	f3bf 8f6f 	isb	sy
 8004ef4:	f3bf 8f4f 	dsb	sy
 8004ef8:	623b      	str	r3, [r7, #32]
}
 8004efa:	bf00      	nop
 8004efc:	bf00      	nop
 8004efe:	e7fd      	b.n	8004efc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d102      	bne.n	8004f0c <xQueueGenericCreateStatic+0x84>
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d101      	bne.n	8004f10 <xQueueGenericCreateStatic+0x88>
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e000      	b.n	8004f12 <xQueueGenericCreateStatic+0x8a>
 8004f10:	2300      	movs	r3, #0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10b      	bne.n	8004f2e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f1a:	f383 8811 	msr	BASEPRI, r3
 8004f1e:	f3bf 8f6f 	isb	sy
 8004f22:	f3bf 8f4f 	dsb	sy
 8004f26:	61fb      	str	r3, [r7, #28]
}
 8004f28:	bf00      	nop
 8004f2a:	bf00      	nop
 8004f2c:	e7fd      	b.n	8004f2a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004f2e:	2348      	movs	r3, #72	@ 0x48
 8004f30:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	2b48      	cmp	r3, #72	@ 0x48
 8004f36:	d00b      	beq.n	8004f50 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f3c:	f383 8811 	msr	BASEPRI, r3
 8004f40:	f3bf 8f6f 	isb	sy
 8004f44:	f3bf 8f4f 	dsb	sy
 8004f48:	61bb      	str	r3, [r7, #24]
}
 8004f4a:	bf00      	nop
 8004f4c:	bf00      	nop
 8004f4e:	e7fd      	b.n	8004f4c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004f50:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00d      	beq.n	8004f78 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f64:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f6a:	9300      	str	r3, [sp, #0]
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	68b9      	ldr	r1, [r7, #8]
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f000 f840 	bl	8004ff8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3730      	adds	r7, #48	@ 0x30
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004f82:	b580      	push	{r7, lr}
 8004f84:	b08a      	sub	sp, #40	@ 0x28
 8004f86:	af02      	add	r7, sp, #8
 8004f88:	60f8      	str	r0, [r7, #12]
 8004f8a:	60b9      	str	r1, [r7, #8]
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10b      	bne.n	8004fae <xQueueGenericCreate+0x2c>
	__asm volatile
 8004f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f9a:	f383 8811 	msr	BASEPRI, r3
 8004f9e:	f3bf 8f6f 	isb	sy
 8004fa2:	f3bf 8f4f 	dsb	sy
 8004fa6:	613b      	str	r3, [r7, #16]
}
 8004fa8:	bf00      	nop
 8004faa:	bf00      	nop
 8004fac:	e7fd      	b.n	8004faa <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	68ba      	ldr	r2, [r7, #8]
 8004fb2:	fb02 f303 	mul.w	r3, r2, r3
 8004fb6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	3348      	adds	r3, #72	@ 0x48
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f002 fe4d 	bl	8007c5c <pvPortMalloc>
 8004fc2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d011      	beq.n	8004fee <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	3348      	adds	r3, #72	@ 0x48
 8004fd2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004fdc:	79fa      	ldrb	r2, [r7, #7]
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	9300      	str	r3, [sp, #0]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	68b9      	ldr	r1, [r7, #8]
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f000 f805 	bl	8004ff8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004fee:	69bb      	ldr	r3, [r7, #24]
	}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3720      	adds	r7, #32
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]
 8005004:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d103      	bne.n	8005014 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	69ba      	ldr	r2, [r7, #24]
 8005010:	601a      	str	r2, [r3, #0]
 8005012:	e002      	b.n	800501a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005026:	2101      	movs	r1, #1
 8005028:	69b8      	ldr	r0, [r7, #24]
 800502a:	f7ff fec3 	bl	8004db4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800502e:	bf00      	nop
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005036:	b580      	push	{r7, lr}
 8005038:	b082      	sub	sp, #8
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00e      	beq.n	8005062 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005056:	2300      	movs	r3, #0
 8005058:	2200      	movs	r2, #0
 800505a:	2100      	movs	r1, #0
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 f837 	bl	80050d0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005062:	bf00      	nop
 8005064:	3708      	adds	r7, #8
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800506a:	b580      	push	{r7, lr}
 800506c:	b086      	sub	sp, #24
 800506e:	af00      	add	r7, sp, #0
 8005070:	4603      	mov	r3, r0
 8005072:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005074:	2301      	movs	r3, #1
 8005076:	617b      	str	r3, [r7, #20]
 8005078:	2300      	movs	r3, #0
 800507a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800507c:	79fb      	ldrb	r3, [r7, #7]
 800507e:	461a      	mov	r2, r3
 8005080:	6939      	ldr	r1, [r7, #16]
 8005082:	6978      	ldr	r0, [r7, #20]
 8005084:	f7ff ff7d 	bl	8004f82 <xQueueGenericCreate>
 8005088:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f7ff ffd3 	bl	8005036 <prvInitialiseMutex>

		return xNewQueue;
 8005090:	68fb      	ldr	r3, [r7, #12]
	}
 8005092:	4618      	mov	r0, r3
 8005094:	3718      	adds	r7, #24
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800509a:	b580      	push	{r7, lr}
 800509c:	b088      	sub	sp, #32
 800509e:	af02      	add	r7, sp, #8
 80050a0:	4603      	mov	r3, r0
 80050a2:	6039      	str	r1, [r7, #0]
 80050a4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80050a6:	2301      	movs	r3, #1
 80050a8:	617b      	str	r3, [r7, #20]
 80050aa:	2300      	movs	r3, #0
 80050ac:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80050ae:	79fb      	ldrb	r3, [r7, #7]
 80050b0:	9300      	str	r3, [sp, #0]
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2200      	movs	r2, #0
 80050b6:	6939      	ldr	r1, [r7, #16]
 80050b8:	6978      	ldr	r0, [r7, #20]
 80050ba:	f7ff fee5 	bl	8004e88 <xQueueGenericCreateStatic>
 80050be:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	f7ff ffb8 	bl	8005036 <prvInitialiseMutex>

		return xNewQueue;
 80050c6:	68fb      	ldr	r3, [r7, #12]
	}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3718      	adds	r7, #24
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b08e      	sub	sp, #56	@ 0x38
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
 80050dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80050de:	2300      	movs	r3, #0
 80050e0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80050e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10b      	bne.n	8005104 <xQueueGenericSend+0x34>
	__asm volatile
 80050ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f0:	f383 8811 	msr	BASEPRI, r3
 80050f4:	f3bf 8f6f 	isb	sy
 80050f8:	f3bf 8f4f 	dsb	sy
 80050fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80050fe:	bf00      	nop
 8005100:	bf00      	nop
 8005102:	e7fd      	b.n	8005100 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d103      	bne.n	8005112 <xQueueGenericSend+0x42>
 800510a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800510c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800510e:	2b00      	cmp	r3, #0
 8005110:	d101      	bne.n	8005116 <xQueueGenericSend+0x46>
 8005112:	2301      	movs	r3, #1
 8005114:	e000      	b.n	8005118 <xQueueGenericSend+0x48>
 8005116:	2300      	movs	r3, #0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10b      	bne.n	8005134 <xQueueGenericSend+0x64>
	__asm volatile
 800511c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005120:	f383 8811 	msr	BASEPRI, r3
 8005124:	f3bf 8f6f 	isb	sy
 8005128:	f3bf 8f4f 	dsb	sy
 800512c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800512e:	bf00      	nop
 8005130:	bf00      	nop
 8005132:	e7fd      	b.n	8005130 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	2b02      	cmp	r3, #2
 8005138:	d103      	bne.n	8005142 <xQueueGenericSend+0x72>
 800513a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800513c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800513e:	2b01      	cmp	r3, #1
 8005140:	d101      	bne.n	8005146 <xQueueGenericSend+0x76>
 8005142:	2301      	movs	r3, #1
 8005144:	e000      	b.n	8005148 <xQueueGenericSend+0x78>
 8005146:	2300      	movs	r3, #0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d10b      	bne.n	8005164 <xQueueGenericSend+0x94>
	__asm volatile
 800514c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005150:	f383 8811 	msr	BASEPRI, r3
 8005154:	f3bf 8f6f 	isb	sy
 8005158:	f3bf 8f4f 	dsb	sy
 800515c:	623b      	str	r3, [r7, #32]
}
 800515e:	bf00      	nop
 8005160:	bf00      	nop
 8005162:	e7fd      	b.n	8005160 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005164:	f001 fd70 	bl	8006c48 <xTaskGetSchedulerState>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d102      	bne.n	8005174 <xQueueGenericSend+0xa4>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d101      	bne.n	8005178 <xQueueGenericSend+0xa8>
 8005174:	2301      	movs	r3, #1
 8005176:	e000      	b.n	800517a <xQueueGenericSend+0xaa>
 8005178:	2300      	movs	r3, #0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10b      	bne.n	8005196 <xQueueGenericSend+0xc6>
	__asm volatile
 800517e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005182:	f383 8811 	msr	BASEPRI, r3
 8005186:	f3bf 8f6f 	isb	sy
 800518a:	f3bf 8f4f 	dsb	sy
 800518e:	61fb      	str	r3, [r7, #28]
}
 8005190:	bf00      	nop
 8005192:	bf00      	nop
 8005194:	e7fd      	b.n	8005192 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005196:	f002 fc3f 	bl	8007a18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800519a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800519c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800519e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d302      	bcc.n	80051ac <xQueueGenericSend+0xdc>
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d129      	bne.n	8005200 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80051ac:	683a      	ldr	r2, [r7, #0]
 80051ae:	68b9      	ldr	r1, [r7, #8]
 80051b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051b2:	f000 fc8c 	bl	8005ace <prvCopyDataToQueue>
 80051b6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d010      	beq.n	80051e2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c2:	3324      	adds	r3, #36	@ 0x24
 80051c4:	4618      	mov	r0, r3
 80051c6:	f001 fadd 	bl	8006784 <xTaskRemoveFromEventList>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d013      	beq.n	80051f8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80051d0:	4b3f      	ldr	r3, [pc, #252]	@ (80052d0 <xQueueGenericSend+0x200>)
 80051d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051d6:	601a      	str	r2, [r3, #0]
 80051d8:	f3bf 8f4f 	dsb	sy
 80051dc:	f3bf 8f6f 	isb	sy
 80051e0:	e00a      	b.n	80051f8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80051e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d007      	beq.n	80051f8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80051e8:	4b39      	ldr	r3, [pc, #228]	@ (80052d0 <xQueueGenericSend+0x200>)
 80051ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051ee:	601a      	str	r2, [r3, #0]
 80051f0:	f3bf 8f4f 	dsb	sy
 80051f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80051f8:	f002 fc40 	bl	8007a7c <vPortExitCritical>
				return pdPASS;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e063      	b.n	80052c8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d103      	bne.n	800520e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005206:	f002 fc39 	bl	8007a7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800520a:	2300      	movs	r3, #0
 800520c:	e05c      	b.n	80052c8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800520e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005210:	2b00      	cmp	r3, #0
 8005212:	d106      	bne.n	8005222 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005214:	f107 0314 	add.w	r3, r7, #20
 8005218:	4618      	mov	r0, r3
 800521a:	f001 fb7b 	bl	8006914 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800521e:	2301      	movs	r3, #1
 8005220:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005222:	f002 fc2b 	bl	8007a7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005226:	f001 f81f 	bl	8006268 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800522a:	f002 fbf5 	bl	8007a18 <vPortEnterCritical>
 800522e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005230:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005234:	b25b      	sxtb	r3, r3
 8005236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800523a:	d103      	bne.n	8005244 <xQueueGenericSend+0x174>
 800523c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800523e:	2200      	movs	r2, #0
 8005240:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005246:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800524a:	b25b      	sxtb	r3, r3
 800524c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005250:	d103      	bne.n	800525a <xQueueGenericSend+0x18a>
 8005252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005254:	2200      	movs	r2, #0
 8005256:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800525a:	f002 fc0f 	bl	8007a7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800525e:	1d3a      	adds	r2, r7, #4
 8005260:	f107 0314 	add.w	r3, r7, #20
 8005264:	4611      	mov	r1, r2
 8005266:	4618      	mov	r0, r3
 8005268:	f001 fb6a 	bl	8006940 <xTaskCheckForTimeOut>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d124      	bne.n	80052bc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005272:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005274:	f000 fd23 	bl	8005cbe <prvIsQueueFull>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d018      	beq.n	80052b0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800527e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005280:	3310      	adds	r3, #16
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	4611      	mov	r1, r2
 8005286:	4618      	mov	r0, r3
 8005288:	f001 f9ec 	bl	8006664 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800528c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800528e:	f000 fcae 	bl	8005bee <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005292:	f000 fff7 	bl	8006284 <xTaskResumeAll>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	f47f af7c 	bne.w	8005196 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800529e:	4b0c      	ldr	r3, [pc, #48]	@ (80052d0 <xQueueGenericSend+0x200>)
 80052a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052a4:	601a      	str	r2, [r3, #0]
 80052a6:	f3bf 8f4f 	dsb	sy
 80052aa:	f3bf 8f6f 	isb	sy
 80052ae:	e772      	b.n	8005196 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80052b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80052b2:	f000 fc9c 	bl	8005bee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80052b6:	f000 ffe5 	bl	8006284 <xTaskResumeAll>
 80052ba:	e76c      	b.n	8005196 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80052bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80052be:	f000 fc96 	bl	8005bee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80052c2:	f000 ffdf 	bl	8006284 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80052c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3738      	adds	r7, #56	@ 0x38
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	e000ed04 	.word	0xe000ed04

080052d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b090      	sub	sp, #64	@ 0x40
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
 80052e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80052e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d10b      	bne.n	8005304 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80052ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f0:	f383 8811 	msr	BASEPRI, r3
 80052f4:	f3bf 8f6f 	isb	sy
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80052fe:	bf00      	nop
 8005300:	bf00      	nop
 8005302:	e7fd      	b.n	8005300 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d103      	bne.n	8005312 <xQueueGenericSendFromISR+0x3e>
 800530a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800530c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800530e:	2b00      	cmp	r3, #0
 8005310:	d101      	bne.n	8005316 <xQueueGenericSendFromISR+0x42>
 8005312:	2301      	movs	r3, #1
 8005314:	e000      	b.n	8005318 <xQueueGenericSendFromISR+0x44>
 8005316:	2300      	movs	r3, #0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d10b      	bne.n	8005334 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800531c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005320:	f383 8811 	msr	BASEPRI, r3
 8005324:	f3bf 8f6f 	isb	sy
 8005328:	f3bf 8f4f 	dsb	sy
 800532c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800532e:	bf00      	nop
 8005330:	bf00      	nop
 8005332:	e7fd      	b.n	8005330 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	2b02      	cmp	r3, #2
 8005338:	d103      	bne.n	8005342 <xQueueGenericSendFromISR+0x6e>
 800533a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800533c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800533e:	2b01      	cmp	r3, #1
 8005340:	d101      	bne.n	8005346 <xQueueGenericSendFromISR+0x72>
 8005342:	2301      	movs	r3, #1
 8005344:	e000      	b.n	8005348 <xQueueGenericSendFromISR+0x74>
 8005346:	2300      	movs	r3, #0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d10b      	bne.n	8005364 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800534c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005350:	f383 8811 	msr	BASEPRI, r3
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	f3bf 8f4f 	dsb	sy
 800535c:	623b      	str	r3, [r7, #32]
}
 800535e:	bf00      	nop
 8005360:	bf00      	nop
 8005362:	e7fd      	b.n	8005360 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005364:	f002 fc38 	bl	8007bd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005368:	f3ef 8211 	mrs	r2, BASEPRI
 800536c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005370:	f383 8811 	msr	BASEPRI, r3
 8005374:	f3bf 8f6f 	isb	sy
 8005378:	f3bf 8f4f 	dsb	sy
 800537c:	61fa      	str	r2, [r7, #28]
 800537e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005380:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005382:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005386:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800538a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800538c:	429a      	cmp	r2, r3
 800538e:	d302      	bcc.n	8005396 <xQueueGenericSendFromISR+0xc2>
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	2b02      	cmp	r3, #2
 8005394:	d12f      	bne.n	80053f6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005398:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800539c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80053a6:	683a      	ldr	r2, [r7, #0]
 80053a8:	68b9      	ldr	r1, [r7, #8]
 80053aa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80053ac:	f000 fb8f 	bl	8005ace <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80053b0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80053b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b8:	d112      	bne.n	80053e0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d016      	beq.n	80053f0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053c4:	3324      	adds	r3, #36	@ 0x24
 80053c6:	4618      	mov	r0, r3
 80053c8:	f001 f9dc 	bl	8006784 <xTaskRemoveFromEventList>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00e      	beq.n	80053f0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00b      	beq.n	80053f0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	601a      	str	r2, [r3, #0]
 80053de:	e007      	b.n	80053f0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80053e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80053e4:	3301      	adds	r3, #1
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	b25a      	sxtb	r2, r3
 80053ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80053f0:	2301      	movs	r3, #1
 80053f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80053f4:	e001      	b.n	80053fa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80053f6:	2300      	movs	r3, #0
 80053f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053fc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005404:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005406:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005408:	4618      	mov	r0, r3
 800540a:	3740      	adds	r7, #64	@ 0x40
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b08e      	sub	sp, #56	@ 0x38
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800541e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005420:	2b00      	cmp	r3, #0
 8005422:	d10b      	bne.n	800543c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8005424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005428:	f383 8811 	msr	BASEPRI, r3
 800542c:	f3bf 8f6f 	isb	sy
 8005430:	f3bf 8f4f 	dsb	sy
 8005434:	623b      	str	r3, [r7, #32]
}
 8005436:	bf00      	nop
 8005438:	bf00      	nop
 800543a:	e7fd      	b.n	8005438 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800543c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800543e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00b      	beq.n	800545c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8005444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005448:	f383 8811 	msr	BASEPRI, r3
 800544c:	f3bf 8f6f 	isb	sy
 8005450:	f3bf 8f4f 	dsb	sy
 8005454:	61fb      	str	r3, [r7, #28]
}
 8005456:	bf00      	nop
 8005458:	bf00      	nop
 800545a:	e7fd      	b.n	8005458 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800545c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d103      	bne.n	800546c <xQueueGiveFromISR+0x5c>
 8005464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d101      	bne.n	8005470 <xQueueGiveFromISR+0x60>
 800546c:	2301      	movs	r3, #1
 800546e:	e000      	b.n	8005472 <xQueueGiveFromISR+0x62>
 8005470:	2300      	movs	r3, #0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10b      	bne.n	800548e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8005476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800547a:	f383 8811 	msr	BASEPRI, r3
 800547e:	f3bf 8f6f 	isb	sy
 8005482:	f3bf 8f4f 	dsb	sy
 8005486:	61bb      	str	r3, [r7, #24]
}
 8005488:	bf00      	nop
 800548a:	bf00      	nop
 800548c:	e7fd      	b.n	800548a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800548e:	f002 fba3 	bl	8007bd8 <vPortValidateInterruptPriority>
	__asm volatile
 8005492:	f3ef 8211 	mrs	r2, BASEPRI
 8005496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800549a:	f383 8811 	msr	BASEPRI, r3
 800549e:	f3bf 8f6f 	isb	sy
 80054a2:	f3bf 8f4f 	dsb	sy
 80054a6:	617a      	str	r2, [r7, #20]
 80054a8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80054aa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80054ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054b2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80054b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d22b      	bcs.n	8005516 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80054be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80054c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80054c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ca:	1c5a      	adds	r2, r3, #1
 80054cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ce:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80054d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80054d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d8:	d112      	bne.n	8005500 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d016      	beq.n	8005510 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e4:	3324      	adds	r3, #36	@ 0x24
 80054e6:	4618      	mov	r0, r3
 80054e8:	f001 f94c 	bl	8006784 <xTaskRemoveFromEventList>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00e      	beq.n	8005510 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00b      	beq.n	8005510 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	2201      	movs	r2, #1
 80054fc:	601a      	str	r2, [r3, #0]
 80054fe:	e007      	b.n	8005510 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005500:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005504:	3301      	adds	r3, #1
 8005506:	b2db      	uxtb	r3, r3
 8005508:	b25a      	sxtb	r2, r3
 800550a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800550c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005510:	2301      	movs	r3, #1
 8005512:	637b      	str	r3, [r7, #52]	@ 0x34
 8005514:	e001      	b.n	800551a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005516:	2300      	movs	r3, #0
 8005518:	637b      	str	r3, [r7, #52]	@ 0x34
 800551a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800551c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f383 8811 	msr	BASEPRI, r3
}
 8005524:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005528:	4618      	mov	r0, r3
 800552a:	3738      	adds	r7, #56	@ 0x38
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b08c      	sub	sp, #48	@ 0x30
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800553c:	2300      	movs	r3, #0
 800553e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10b      	bne.n	8005562 <xQueueReceive+0x32>
	__asm volatile
 800554a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800554e:	f383 8811 	msr	BASEPRI, r3
 8005552:	f3bf 8f6f 	isb	sy
 8005556:	f3bf 8f4f 	dsb	sy
 800555a:	623b      	str	r3, [r7, #32]
}
 800555c:	bf00      	nop
 800555e:	bf00      	nop
 8005560:	e7fd      	b.n	800555e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d103      	bne.n	8005570 <xQueueReceive+0x40>
 8005568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800556a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800556c:	2b00      	cmp	r3, #0
 800556e:	d101      	bne.n	8005574 <xQueueReceive+0x44>
 8005570:	2301      	movs	r3, #1
 8005572:	e000      	b.n	8005576 <xQueueReceive+0x46>
 8005574:	2300      	movs	r3, #0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10b      	bne.n	8005592 <xQueueReceive+0x62>
	__asm volatile
 800557a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800557e:	f383 8811 	msr	BASEPRI, r3
 8005582:	f3bf 8f6f 	isb	sy
 8005586:	f3bf 8f4f 	dsb	sy
 800558a:	61fb      	str	r3, [r7, #28]
}
 800558c:	bf00      	nop
 800558e:	bf00      	nop
 8005590:	e7fd      	b.n	800558e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005592:	f001 fb59 	bl	8006c48 <xTaskGetSchedulerState>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d102      	bne.n	80055a2 <xQueueReceive+0x72>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <xQueueReceive+0x76>
 80055a2:	2301      	movs	r3, #1
 80055a4:	e000      	b.n	80055a8 <xQueueReceive+0x78>
 80055a6:	2300      	movs	r3, #0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10b      	bne.n	80055c4 <xQueueReceive+0x94>
	__asm volatile
 80055ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055b0:	f383 8811 	msr	BASEPRI, r3
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	61bb      	str	r3, [r7, #24]
}
 80055be:	bf00      	nop
 80055c0:	bf00      	nop
 80055c2:	e7fd      	b.n	80055c0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80055c4:	f002 fa28 	bl	8007a18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055cc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d01f      	beq.n	8005614 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80055d4:	68b9      	ldr	r1, [r7, #8]
 80055d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80055d8:	f000 fae3 	bl	8005ba2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80055dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055de:	1e5a      	subs	r2, r3, #1
 80055e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055e2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00f      	beq.n	800560c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ee:	3310      	adds	r3, #16
 80055f0:	4618      	mov	r0, r3
 80055f2:	f001 f8c7 	bl	8006784 <xTaskRemoveFromEventList>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d007      	beq.n	800560c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80055fc:	4b3c      	ldr	r3, [pc, #240]	@ (80056f0 <xQueueReceive+0x1c0>)
 80055fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005602:	601a      	str	r2, [r3, #0]
 8005604:	f3bf 8f4f 	dsb	sy
 8005608:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800560c:	f002 fa36 	bl	8007a7c <vPortExitCritical>
				return pdPASS;
 8005610:	2301      	movs	r3, #1
 8005612:	e069      	b.n	80056e8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d103      	bne.n	8005622 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800561a:	f002 fa2f 	bl	8007a7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800561e:	2300      	movs	r3, #0
 8005620:	e062      	b.n	80056e8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005624:	2b00      	cmp	r3, #0
 8005626:	d106      	bne.n	8005636 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005628:	f107 0310 	add.w	r3, r7, #16
 800562c:	4618      	mov	r0, r3
 800562e:	f001 f971 	bl	8006914 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005632:	2301      	movs	r3, #1
 8005634:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005636:	f002 fa21 	bl	8007a7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800563a:	f000 fe15 	bl	8006268 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800563e:	f002 f9eb 	bl	8007a18 <vPortEnterCritical>
 8005642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005644:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005648:	b25b      	sxtb	r3, r3
 800564a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800564e:	d103      	bne.n	8005658 <xQueueReceive+0x128>
 8005650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005652:	2200      	movs	r2, #0
 8005654:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800565a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800565e:	b25b      	sxtb	r3, r3
 8005660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005664:	d103      	bne.n	800566e <xQueueReceive+0x13e>
 8005666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005668:	2200      	movs	r2, #0
 800566a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800566e:	f002 fa05 	bl	8007a7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005672:	1d3a      	adds	r2, r7, #4
 8005674:	f107 0310 	add.w	r3, r7, #16
 8005678:	4611      	mov	r1, r2
 800567a:	4618      	mov	r0, r3
 800567c:	f001 f960 	bl	8006940 <xTaskCheckForTimeOut>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d123      	bne.n	80056ce <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005686:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005688:	f000 fb03 	bl	8005c92 <prvIsQueueEmpty>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d017      	beq.n	80056c2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005694:	3324      	adds	r3, #36	@ 0x24
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	4611      	mov	r1, r2
 800569a:	4618      	mov	r0, r3
 800569c:	f000 ffe2 	bl	8006664 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80056a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80056a2:	f000 faa4 	bl	8005bee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80056a6:	f000 fded 	bl	8006284 <xTaskResumeAll>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d189      	bne.n	80055c4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80056b0:	4b0f      	ldr	r3, [pc, #60]	@ (80056f0 <xQueueReceive+0x1c0>)
 80056b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056b6:	601a      	str	r2, [r3, #0]
 80056b8:	f3bf 8f4f 	dsb	sy
 80056bc:	f3bf 8f6f 	isb	sy
 80056c0:	e780      	b.n	80055c4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80056c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80056c4:	f000 fa93 	bl	8005bee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80056c8:	f000 fddc 	bl	8006284 <xTaskResumeAll>
 80056cc:	e77a      	b.n	80055c4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80056ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80056d0:	f000 fa8d 	bl	8005bee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80056d4:	f000 fdd6 	bl	8006284 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80056da:	f000 fada 	bl	8005c92 <prvIsQueueEmpty>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f43f af6f 	beq.w	80055c4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80056e6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3730      	adds	r7, #48	@ 0x30
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	e000ed04 	.word	0xe000ed04

080056f4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b08e      	sub	sp, #56	@ 0x38
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80056fe:	2300      	movs	r3, #0
 8005700:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005706:	2300      	movs	r3, #0
 8005708:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800570a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800570c:	2b00      	cmp	r3, #0
 800570e:	d10b      	bne.n	8005728 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005714:	f383 8811 	msr	BASEPRI, r3
 8005718:	f3bf 8f6f 	isb	sy
 800571c:	f3bf 8f4f 	dsb	sy
 8005720:	623b      	str	r3, [r7, #32]
}
 8005722:	bf00      	nop
 8005724:	bf00      	nop
 8005726:	e7fd      	b.n	8005724 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800572a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00b      	beq.n	8005748 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005734:	f383 8811 	msr	BASEPRI, r3
 8005738:	f3bf 8f6f 	isb	sy
 800573c:	f3bf 8f4f 	dsb	sy
 8005740:	61fb      	str	r3, [r7, #28]
}
 8005742:	bf00      	nop
 8005744:	bf00      	nop
 8005746:	e7fd      	b.n	8005744 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005748:	f001 fa7e 	bl	8006c48 <xTaskGetSchedulerState>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d102      	bne.n	8005758 <xQueueSemaphoreTake+0x64>
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d101      	bne.n	800575c <xQueueSemaphoreTake+0x68>
 8005758:	2301      	movs	r3, #1
 800575a:	e000      	b.n	800575e <xQueueSemaphoreTake+0x6a>
 800575c:	2300      	movs	r3, #0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10b      	bne.n	800577a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8005762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005766:	f383 8811 	msr	BASEPRI, r3
 800576a:	f3bf 8f6f 	isb	sy
 800576e:	f3bf 8f4f 	dsb	sy
 8005772:	61bb      	str	r3, [r7, #24]
}
 8005774:	bf00      	nop
 8005776:	bf00      	nop
 8005778:	e7fd      	b.n	8005776 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800577a:	f002 f94d 	bl	8007a18 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800577e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005782:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005786:	2b00      	cmp	r3, #0
 8005788:	d024      	beq.n	80057d4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800578a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800578c:	1e5a      	subs	r2, r3, #1
 800578e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005790:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d104      	bne.n	80057a4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800579a:	f001 fc19 	bl	8006fd0 <pvTaskIncrementMutexHeldCount>
 800579e:	4602      	mov	r2, r0
 80057a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057a2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00f      	beq.n	80057cc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ae:	3310      	adds	r3, #16
 80057b0:	4618      	mov	r0, r3
 80057b2:	f000 ffe7 	bl	8006784 <xTaskRemoveFromEventList>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d007      	beq.n	80057cc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80057bc:	4b54      	ldr	r3, [pc, #336]	@ (8005910 <xQueueSemaphoreTake+0x21c>)
 80057be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057c2:	601a      	str	r2, [r3, #0]
 80057c4:	f3bf 8f4f 	dsb	sy
 80057c8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80057cc:	f002 f956 	bl	8007a7c <vPortExitCritical>
				return pdPASS;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e098      	b.n	8005906 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d112      	bne.n	8005800 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80057da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00b      	beq.n	80057f8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80057e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057e4:	f383 8811 	msr	BASEPRI, r3
 80057e8:	f3bf 8f6f 	isb	sy
 80057ec:	f3bf 8f4f 	dsb	sy
 80057f0:	617b      	str	r3, [r7, #20]
}
 80057f2:	bf00      	nop
 80057f4:	bf00      	nop
 80057f6:	e7fd      	b.n	80057f4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80057f8:	f002 f940 	bl	8007a7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80057fc:	2300      	movs	r3, #0
 80057fe:	e082      	b.n	8005906 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005802:	2b00      	cmp	r3, #0
 8005804:	d106      	bne.n	8005814 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005806:	f107 030c 	add.w	r3, r7, #12
 800580a:	4618      	mov	r0, r3
 800580c:	f001 f882 	bl	8006914 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005810:	2301      	movs	r3, #1
 8005812:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005814:	f002 f932 	bl	8007a7c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005818:	f000 fd26 	bl	8006268 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800581c:	f002 f8fc 	bl	8007a18 <vPortEnterCritical>
 8005820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005822:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005826:	b25b      	sxtb	r3, r3
 8005828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800582c:	d103      	bne.n	8005836 <xQueueSemaphoreTake+0x142>
 800582e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005830:	2200      	movs	r2, #0
 8005832:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005838:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800583c:	b25b      	sxtb	r3, r3
 800583e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005842:	d103      	bne.n	800584c <xQueueSemaphoreTake+0x158>
 8005844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005846:	2200      	movs	r2, #0
 8005848:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800584c:	f002 f916 	bl	8007a7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005850:	463a      	mov	r2, r7
 8005852:	f107 030c 	add.w	r3, r7, #12
 8005856:	4611      	mov	r1, r2
 8005858:	4618      	mov	r0, r3
 800585a:	f001 f871 	bl	8006940 <xTaskCheckForTimeOut>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d132      	bne.n	80058ca <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005864:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005866:	f000 fa14 	bl	8005c92 <prvIsQueueEmpty>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d026      	beq.n	80058be <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d109      	bne.n	800588c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005878:	f002 f8ce 	bl	8007a18 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800587c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	4618      	mov	r0, r3
 8005882:	f001 f9ff 	bl	8006c84 <xTaskPriorityInherit>
 8005886:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005888:	f002 f8f8 	bl	8007a7c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800588c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800588e:	3324      	adds	r3, #36	@ 0x24
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	4611      	mov	r1, r2
 8005894:	4618      	mov	r0, r3
 8005896:	f000 fee5 	bl	8006664 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800589a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800589c:	f000 f9a7 	bl	8005bee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80058a0:	f000 fcf0 	bl	8006284 <xTaskResumeAll>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	f47f af67 	bne.w	800577a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80058ac:	4b18      	ldr	r3, [pc, #96]	@ (8005910 <xQueueSemaphoreTake+0x21c>)
 80058ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058b2:	601a      	str	r2, [r3, #0]
 80058b4:	f3bf 8f4f 	dsb	sy
 80058b8:	f3bf 8f6f 	isb	sy
 80058bc:	e75d      	b.n	800577a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80058be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80058c0:	f000 f995 	bl	8005bee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058c4:	f000 fcde 	bl	8006284 <xTaskResumeAll>
 80058c8:	e757      	b.n	800577a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80058ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80058cc:	f000 f98f 	bl	8005bee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058d0:	f000 fcd8 	bl	8006284 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80058d6:	f000 f9dc 	bl	8005c92 <prvIsQueueEmpty>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f43f af4c 	beq.w	800577a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80058e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00d      	beq.n	8005904 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80058e8:	f002 f896 	bl	8007a18 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80058ec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80058ee:	f000 f8d6 	bl	8005a9e <prvGetDisinheritPriorityAfterTimeout>
 80058f2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80058f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80058fa:	4618      	mov	r0, r3
 80058fc:	f001 fac0 	bl	8006e80 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005900:	f002 f8bc 	bl	8007a7c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005904:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005906:	4618      	mov	r0, r3
 8005908:	3738      	adds	r7, #56	@ 0x38
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	e000ed04 	.word	0xe000ed04

08005914 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b08e      	sub	sp, #56	@ 0x38
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005926:	2b00      	cmp	r3, #0
 8005928:	d10b      	bne.n	8005942 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800592a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800592e:	f383 8811 	msr	BASEPRI, r3
 8005932:	f3bf 8f6f 	isb	sy
 8005936:	f3bf 8f4f 	dsb	sy
 800593a:	623b      	str	r3, [r7, #32]
}
 800593c:	bf00      	nop
 800593e:	bf00      	nop
 8005940:	e7fd      	b.n	800593e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d103      	bne.n	8005950 <xQueueReceiveFromISR+0x3c>
 8005948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800594a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800594c:	2b00      	cmp	r3, #0
 800594e:	d101      	bne.n	8005954 <xQueueReceiveFromISR+0x40>
 8005950:	2301      	movs	r3, #1
 8005952:	e000      	b.n	8005956 <xQueueReceiveFromISR+0x42>
 8005954:	2300      	movs	r3, #0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10b      	bne.n	8005972 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800595a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800595e:	f383 8811 	msr	BASEPRI, r3
 8005962:	f3bf 8f6f 	isb	sy
 8005966:	f3bf 8f4f 	dsb	sy
 800596a:	61fb      	str	r3, [r7, #28]
}
 800596c:	bf00      	nop
 800596e:	bf00      	nop
 8005970:	e7fd      	b.n	800596e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005972:	f002 f931 	bl	8007bd8 <vPortValidateInterruptPriority>
	__asm volatile
 8005976:	f3ef 8211 	mrs	r2, BASEPRI
 800597a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800597e:	f383 8811 	msr	BASEPRI, r3
 8005982:	f3bf 8f6f 	isb	sy
 8005986:	f3bf 8f4f 	dsb	sy
 800598a:	61ba      	str	r2, [r7, #24]
 800598c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800598e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005990:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005996:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800599a:	2b00      	cmp	r3, #0
 800599c:	d02f      	beq.n	80059fe <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800599e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80059a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80059a8:	68b9      	ldr	r1, [r7, #8]
 80059aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80059ac:	f000 f8f9 	bl	8005ba2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80059b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b2:	1e5a      	subs	r2, r3, #1
 80059b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80059b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80059bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c0:	d112      	bne.n	80059e8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d016      	beq.n	80059f8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059cc:	3310      	adds	r3, #16
 80059ce:	4618      	mov	r0, r3
 80059d0:	f000 fed8 	bl	8006784 <xTaskRemoveFromEventList>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00e      	beq.n	80059f8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00b      	beq.n	80059f8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	601a      	str	r2, [r3, #0]
 80059e6:	e007      	b.n	80059f8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80059e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80059ec:	3301      	adds	r3, #1
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	b25a      	sxtb	r2, r3
 80059f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80059f8:	2301      	movs	r3, #1
 80059fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80059fc:	e001      	b.n	8005a02 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80059fe:	2300      	movs	r3, #0
 8005a00:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a04:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	f383 8811 	msr	BASEPRI, r3
}
 8005a0c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3738      	adds	r7, #56	@ 0x38
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d10b      	bne.n	8005a3e <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8005a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a2a:	f383 8811 	msr	BASEPRI, r3
 8005a2e:	f3bf 8f6f 	isb	sy
 8005a32:	f3bf 8f4f 	dsb	sy
 8005a36:	60bb      	str	r3, [r7, #8]
}
 8005a38:	bf00      	nop
 8005a3a:	bf00      	nop
 8005a3c:	e7fd      	b.n	8005a3a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8005a3e:	f001 ffeb 	bl	8007a18 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a46:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005a48:	f002 f818 	bl	8007a7c <vPortExitCritical>

	return uxReturn;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b086      	sub	sp, #24
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d10b      	bne.n	8005a80 <uxQueueSpacesAvailable+0x2a>
	__asm volatile
 8005a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a6c:	f383 8811 	msr	BASEPRI, r3
 8005a70:	f3bf 8f6f 	isb	sy
 8005a74:	f3bf 8f4f 	dsb	sy
 8005a78:	60fb      	str	r3, [r7, #12]
}
 8005a7a:	bf00      	nop
 8005a7c:	bf00      	nop
 8005a7e:	e7fd      	b.n	8005a7c <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 8005a80:	f001 ffca 	bl	8007a18 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8005a90:	f001 fff4 	bl	8007a7c <vPortExitCritical>

	return uxReturn;
 8005a94:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005a96:	4618      	mov	r0, r3
 8005a98:	3718      	adds	r7, #24
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005a9e:	b480      	push	{r7}
 8005aa0:	b085      	sub	sp, #20
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d006      	beq.n	8005abc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f1c3 0307 	rsb	r3, r3, #7
 8005ab8:	60fb      	str	r3, [r7, #12]
 8005aba:	e001      	b.n	8005ac0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005abc:	2300      	movs	r3, #0
 8005abe:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
	}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3714      	adds	r7, #20
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b086      	sub	sp, #24
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	60f8      	str	r0, [r7, #12]
 8005ad6:	60b9      	str	r1, [r7, #8]
 8005ad8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005ada:	2300      	movs	r3, #0
 8005adc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ae2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d10d      	bne.n	8005b08 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d14d      	bne.n	8005b90 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	4618      	mov	r0, r3
 8005afa:	f001 f939 	bl	8006d70 <xTaskPriorityDisinherit>
 8005afe:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	609a      	str	r2, [r3, #8]
 8005b06:	e043      	b.n	8005b90 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d119      	bne.n	8005b42 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6858      	ldr	r0, [r3, #4]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b16:	461a      	mov	r2, r3
 8005b18:	68b9      	ldr	r1, [r7, #8]
 8005b1a:	f002 fce8 	bl	80084ee <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	685a      	ldr	r2, [r3, #4]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b26:	441a      	add	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d32b      	bcc.n	8005b90 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	605a      	str	r2, [r3, #4]
 8005b40:	e026      	b.n	8005b90 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	68d8      	ldr	r0, [r3, #12]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	68b9      	ldr	r1, [r7, #8]
 8005b4e:	f002 fcce 	bl	80084ee <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	68da      	ldr	r2, [r3, #12]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b5a:	425b      	negs	r3, r3
 8005b5c:	441a      	add	r2, r3
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	68da      	ldr	r2, [r3, #12]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d207      	bcs.n	8005b7e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	689a      	ldr	r2, [r3, #8]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b76:	425b      	negs	r3, r3
 8005b78:	441a      	add	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d105      	bne.n	8005b90 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d002      	beq.n	8005b90 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	1c5a      	adds	r2, r3, #1
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005b98:	697b      	ldr	r3, [r7, #20]
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3718      	adds	r7, #24
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b082      	sub	sp, #8
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
 8005baa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d018      	beq.n	8005be6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	68da      	ldr	r2, [r3, #12]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bbc:	441a      	add	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	68da      	ldr	r2, [r3, #12]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d303      	bcc.n	8005bd6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68d9      	ldr	r1, [r3, #12]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bde:	461a      	mov	r2, r3
 8005be0:	6838      	ldr	r0, [r7, #0]
 8005be2:	f002 fc84 	bl	80084ee <memcpy>
	}
}
 8005be6:	bf00      	nop
 8005be8:	3708      	adds	r7, #8
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b084      	sub	sp, #16
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005bf6:	f001 ff0f 	bl	8007a18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c00:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c02:	e011      	b.n	8005c28 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d012      	beq.n	8005c32 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	3324      	adds	r3, #36	@ 0x24
 8005c10:	4618      	mov	r0, r3
 8005c12:	f000 fdb7 	bl	8006784 <xTaskRemoveFromEventList>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d001      	beq.n	8005c20 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005c1c:	f000 fef4 	bl	8006a08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005c20:	7bfb      	ldrb	r3, [r7, #15]
 8005c22:	3b01      	subs	r3, #1
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	dce9      	bgt.n	8005c04 <prvUnlockQueue+0x16>
 8005c30:	e000      	b.n	8005c34 <prvUnlockQueue+0x46>
					break;
 8005c32:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	22ff      	movs	r2, #255	@ 0xff
 8005c38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005c3c:	f001 ff1e 	bl	8007a7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005c40:	f001 feea 	bl	8007a18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c4a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c4c:	e011      	b.n	8005c72 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d012      	beq.n	8005c7c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	3310      	adds	r3, #16
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f000 fd92 	bl	8006784 <xTaskRemoveFromEventList>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d001      	beq.n	8005c6a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005c66:	f000 fecf 	bl	8006a08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005c6a:	7bbb      	ldrb	r3, [r7, #14]
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	dce9      	bgt.n	8005c4e <prvUnlockQueue+0x60>
 8005c7a:	e000      	b.n	8005c7e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005c7c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	22ff      	movs	r2, #255	@ 0xff
 8005c82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005c86:	f001 fef9 	bl	8007a7c <vPortExitCritical>
}
 8005c8a:	bf00      	nop
 8005c8c:	3710      	adds	r7, #16
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b084      	sub	sp, #16
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c9a:	f001 febd 	bl	8007a18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d102      	bne.n	8005cac <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	60fb      	str	r3, [r7, #12]
 8005caa:	e001      	b.n	8005cb0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005cac:	2300      	movs	r3, #0
 8005cae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005cb0:	f001 fee4 	bl	8007a7c <vPortExitCritical>

	return xReturn;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b084      	sub	sp, #16
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005cc6:	f001 fea7 	bl	8007a18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d102      	bne.n	8005cdc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	60fb      	str	r3, [r7, #12]
 8005cda:	e001      	b.n	8005ce0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ce0:	f001 fecc 	bl	8007a7c <vPortExitCritical>

	return xReturn;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
	...

08005cf0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	60fb      	str	r3, [r7, #12]
 8005cfe:	e014      	b.n	8005d2a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005d00:	4a0f      	ldr	r2, [pc, #60]	@ (8005d40 <vQueueAddToRegistry+0x50>)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d10b      	bne.n	8005d24 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005d0c:	490c      	ldr	r1, [pc, #48]	@ (8005d40 <vQueueAddToRegistry+0x50>)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	683a      	ldr	r2, [r7, #0]
 8005d12:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005d16:	4a0a      	ldr	r2, [pc, #40]	@ (8005d40 <vQueueAddToRegistry+0x50>)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	00db      	lsls	r3, r3, #3
 8005d1c:	4413      	add	r3, r2
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005d22:	e006      	b.n	8005d32 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	3301      	adds	r3, #1
 8005d28:	60fb      	str	r3, [r7, #12]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2b07      	cmp	r3, #7
 8005d2e:	d9e7      	bls.n	8005d00 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005d30:	bf00      	nop
 8005d32:	bf00      	nop
 8005d34:	3714      	adds	r7, #20
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	200006f8 	.word	0x200006f8

08005d44 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b086      	sub	sp, #24
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005d54:	f001 fe60 	bl	8007a18 <vPortEnterCritical>
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d5e:	b25b      	sxtb	r3, r3
 8005d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d64:	d103      	bne.n	8005d6e <vQueueWaitForMessageRestricted+0x2a>
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d74:	b25b      	sxtb	r3, r3
 8005d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d7a:	d103      	bne.n	8005d84 <vQueueWaitForMessageRestricted+0x40>
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d84:	f001 fe7a 	bl	8007a7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d106      	bne.n	8005d9e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	3324      	adds	r3, #36	@ 0x24
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	68b9      	ldr	r1, [r7, #8]
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f000 fcc7 	bl	800672c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005d9e:	6978      	ldr	r0, [r7, #20]
 8005da0:	f7ff ff25 	bl	8005bee <prvUnlockQueue>
	}
 8005da4:	bf00      	nop
 8005da6:	3718      	adds	r7, #24
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b08e      	sub	sp, #56	@ 0x38
 8005db0:	af04      	add	r7, sp, #16
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]
 8005db8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005dba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d10b      	bne.n	8005dd8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc4:	f383 8811 	msr	BASEPRI, r3
 8005dc8:	f3bf 8f6f 	isb	sy
 8005dcc:	f3bf 8f4f 	dsb	sy
 8005dd0:	623b      	str	r3, [r7, #32]
}
 8005dd2:	bf00      	nop
 8005dd4:	bf00      	nop
 8005dd6:	e7fd      	b.n	8005dd4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10b      	bne.n	8005df6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005de2:	f383 8811 	msr	BASEPRI, r3
 8005de6:	f3bf 8f6f 	isb	sy
 8005dea:	f3bf 8f4f 	dsb	sy
 8005dee:	61fb      	str	r3, [r7, #28]
}
 8005df0:	bf00      	nop
 8005df2:	bf00      	nop
 8005df4:	e7fd      	b.n	8005df2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005df6:	23a0      	movs	r3, #160	@ 0xa0
 8005df8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	2ba0      	cmp	r3, #160	@ 0xa0
 8005dfe:	d00b      	beq.n	8005e18 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e04:	f383 8811 	msr	BASEPRI, r3
 8005e08:	f3bf 8f6f 	isb	sy
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	61bb      	str	r3, [r7, #24]
}
 8005e12:	bf00      	nop
 8005e14:	bf00      	nop
 8005e16:	e7fd      	b.n	8005e14 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005e18:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d01e      	beq.n	8005e5e <xTaskCreateStatic+0xb2>
 8005e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d01b      	beq.n	8005e5e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e28:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e2e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e32:	2202      	movs	r2, #2
 8005e34:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005e38:	2300      	movs	r3, #0
 8005e3a:	9303      	str	r3, [sp, #12]
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e3e:	9302      	str	r3, [sp, #8]
 8005e40:	f107 0314 	add.w	r3, r7, #20
 8005e44:	9301      	str	r3, [sp, #4]
 8005e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e48:	9300      	str	r3, [sp, #0]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	68b9      	ldr	r1, [r7, #8]
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f000 f851 	bl	8005ef8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e56:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005e58:	f000 f8f6 	bl	8006048 <prvAddNewTaskToReadyList>
 8005e5c:	e001      	b.n	8005e62 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005e62:	697b      	ldr	r3, [r7, #20]
	}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3728      	adds	r7, #40	@ 0x28
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b08c      	sub	sp, #48	@ 0x30
 8005e70:	af04      	add	r7, sp, #16
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	603b      	str	r3, [r7, #0]
 8005e78:	4613      	mov	r3, r2
 8005e7a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005e7c:	88fb      	ldrh	r3, [r7, #6]
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	4618      	mov	r0, r3
 8005e82:	f001 feeb 	bl	8007c5c <pvPortMalloc>
 8005e86:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00e      	beq.n	8005eac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005e8e:	20a0      	movs	r0, #160	@ 0xa0
 8005e90:	f001 fee4 	bl	8007c5c <pvPortMalloc>
 8005e94:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d003      	beq.n	8005ea4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	697a      	ldr	r2, [r7, #20]
 8005ea0:	631a      	str	r2, [r3, #48]	@ 0x30
 8005ea2:	e005      	b.n	8005eb0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005ea4:	6978      	ldr	r0, [r7, #20]
 8005ea6:	f001 ffad 	bl	8007e04 <vPortFree>
 8005eaa:	e001      	b.n	8005eb0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005eac:	2300      	movs	r3, #0
 8005eae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d017      	beq.n	8005ee6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005ebe:	88fa      	ldrh	r2, [r7, #6]
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	9303      	str	r3, [sp, #12]
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	9302      	str	r3, [sp, #8]
 8005ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eca:	9301      	str	r3, [sp, #4]
 8005ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ece:	9300      	str	r3, [sp, #0]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	68b9      	ldr	r1, [r7, #8]
 8005ed4:	68f8      	ldr	r0, [r7, #12]
 8005ed6:	f000 f80f 	bl	8005ef8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005eda:	69f8      	ldr	r0, [r7, #28]
 8005edc:	f000 f8b4 	bl	8006048 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	61bb      	str	r3, [r7, #24]
 8005ee4:	e002      	b.n	8005eec <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8005eea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005eec:	69bb      	ldr	r3, [r7, #24]
	}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3720      	adds	r7, #32
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
	...

08005ef8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b088      	sub	sp, #32
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	607a      	str	r2, [r7, #4]
 8005f04:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f08:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	461a      	mov	r2, r3
 8005f10:	21a5      	movs	r1, #165	@ 0xa5
 8005f12:	f002 fa12 	bl	800833a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f20:	3b01      	subs	r3, #1
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4413      	add	r3, r2
 8005f26:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	f023 0307 	bic.w	r3, r3, #7
 8005f2e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	f003 0307 	and.w	r3, r3, #7
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00b      	beq.n	8005f52 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f3e:	f383 8811 	msr	BASEPRI, r3
 8005f42:	f3bf 8f6f 	isb	sy
 8005f46:	f3bf 8f4f 	dsb	sy
 8005f4a:	617b      	str	r3, [r7, #20]
}
 8005f4c:	bf00      	nop
 8005f4e:	bf00      	nop
 8005f50:	e7fd      	b.n	8005f4e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d01f      	beq.n	8005f98 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f58:	2300      	movs	r3, #0
 8005f5a:	61fb      	str	r3, [r7, #28]
 8005f5c:	e012      	b.n	8005f84 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f5e:	68ba      	ldr	r2, [r7, #8]
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	4413      	add	r3, r2
 8005f64:	7819      	ldrb	r1, [r3, #0]
 8005f66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	3334      	adds	r3, #52	@ 0x34
 8005f6e:	460a      	mov	r2, r1
 8005f70:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	4413      	add	r3, r2
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d006      	beq.n	8005f8c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	3301      	adds	r3, #1
 8005f82:	61fb      	str	r3, [r7, #28]
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	2b0f      	cmp	r3, #15
 8005f88:	d9e9      	bls.n	8005f5e <prvInitialiseNewTask+0x66>
 8005f8a:	e000      	b.n	8005f8e <prvInitialiseNewTask+0x96>
			{
				break;
 8005f8c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005f96:	e003      	b.n	8005fa0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fa2:	2b06      	cmp	r3, #6
 8005fa4:	d901      	bls.n	8005faa <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005fa6:	2306      	movs	r3, #6
 8005fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005fae:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005fb4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb8:	2200      	movs	r2, #0
 8005fba:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fbe:	3304      	adds	r3, #4
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7fe fe63 	bl	8004c8c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc8:	3318      	adds	r3, #24
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7fe fe5e 	bl	8004c8c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fd4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fd8:	f1c3 0207 	rsb	r2, r3, #7
 8005fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fde:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fe4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff8:	334c      	adds	r3, #76	@ 0x4c
 8005ffa:	224c      	movs	r2, #76	@ 0x4c
 8005ffc:	2100      	movs	r1, #0
 8005ffe:	4618      	mov	r0, r3
 8006000:	f002 f99b 	bl	800833a <memset>
 8006004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006006:	4a0d      	ldr	r2, [pc, #52]	@ (800603c <prvInitialiseNewTask+0x144>)
 8006008:	651a      	str	r2, [r3, #80]	@ 0x50
 800600a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800600c:	4a0c      	ldr	r2, [pc, #48]	@ (8006040 <prvInitialiseNewTask+0x148>)
 800600e:	655a      	str	r2, [r3, #84]	@ 0x54
 8006010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006012:	4a0c      	ldr	r2, [pc, #48]	@ (8006044 <prvInitialiseNewTask+0x14c>)
 8006014:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006016:	683a      	ldr	r2, [r7, #0]
 8006018:	68f9      	ldr	r1, [r7, #12]
 800601a:	69b8      	ldr	r0, [r7, #24]
 800601c:	f001 fbcc 	bl	80077b8 <pxPortInitialiseStack>
 8006020:	4602      	mov	r2, r0
 8006022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006024:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006028:	2b00      	cmp	r3, #0
 800602a:	d002      	beq.n	8006032 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800602c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800602e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006030:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006032:	bf00      	nop
 8006034:	3720      	adds	r7, #32
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	200045b0 	.word	0x200045b0
 8006040:	20004618 	.word	0x20004618
 8006044:	20004680 	.word	0x20004680

08006048 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006050:	f001 fce2 	bl	8007a18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006054:	4b2a      	ldr	r3, [pc, #168]	@ (8006100 <prvAddNewTaskToReadyList+0xb8>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	3301      	adds	r3, #1
 800605a:	4a29      	ldr	r2, [pc, #164]	@ (8006100 <prvAddNewTaskToReadyList+0xb8>)
 800605c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800605e:	4b29      	ldr	r3, [pc, #164]	@ (8006104 <prvAddNewTaskToReadyList+0xbc>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d109      	bne.n	800607a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006066:	4a27      	ldr	r2, [pc, #156]	@ (8006104 <prvAddNewTaskToReadyList+0xbc>)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800606c:	4b24      	ldr	r3, [pc, #144]	@ (8006100 <prvAddNewTaskToReadyList+0xb8>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2b01      	cmp	r3, #1
 8006072:	d110      	bne.n	8006096 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006074:	f000 fcec 	bl	8006a50 <prvInitialiseTaskLists>
 8006078:	e00d      	b.n	8006096 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800607a:	4b23      	ldr	r3, [pc, #140]	@ (8006108 <prvAddNewTaskToReadyList+0xc0>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d109      	bne.n	8006096 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006082:	4b20      	ldr	r3, [pc, #128]	@ (8006104 <prvAddNewTaskToReadyList+0xbc>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800608c:	429a      	cmp	r2, r3
 800608e:	d802      	bhi.n	8006096 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006090:	4a1c      	ldr	r2, [pc, #112]	@ (8006104 <prvAddNewTaskToReadyList+0xbc>)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006096:	4b1d      	ldr	r3, [pc, #116]	@ (800610c <prvAddNewTaskToReadyList+0xc4>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	3301      	adds	r3, #1
 800609c:	4a1b      	ldr	r2, [pc, #108]	@ (800610c <prvAddNewTaskToReadyList+0xc4>)
 800609e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060a4:	2201      	movs	r2, #1
 80060a6:	409a      	lsls	r2, r3
 80060a8:	4b19      	ldr	r3, [pc, #100]	@ (8006110 <prvAddNewTaskToReadyList+0xc8>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	4a18      	ldr	r2, [pc, #96]	@ (8006110 <prvAddNewTaskToReadyList+0xc8>)
 80060b0:	6013      	str	r3, [r2, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060b6:	4613      	mov	r3, r2
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	4413      	add	r3, r2
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4a15      	ldr	r2, [pc, #84]	@ (8006114 <prvAddNewTaskToReadyList+0xcc>)
 80060c0:	441a      	add	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	3304      	adds	r3, #4
 80060c6:	4619      	mov	r1, r3
 80060c8:	4610      	mov	r0, r2
 80060ca:	f7fe fdec 	bl	8004ca6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80060ce:	f001 fcd5 	bl	8007a7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80060d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006108 <prvAddNewTaskToReadyList+0xc0>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00e      	beq.n	80060f8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80060da:	4b0a      	ldr	r3, [pc, #40]	@ (8006104 <prvAddNewTaskToReadyList+0xbc>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d207      	bcs.n	80060f8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80060e8:	4b0b      	ldr	r3, [pc, #44]	@ (8006118 <prvAddNewTaskToReadyList+0xd0>)
 80060ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060ee:	601a      	str	r2, [r3, #0]
 80060f0:	f3bf 8f4f 	dsb	sy
 80060f4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060f8:	bf00      	nop
 80060fa:	3708      	adds	r7, #8
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	20000838 	.word	0x20000838
 8006104:	20000738 	.word	0x20000738
 8006108:	20000844 	.word	0x20000844
 800610c:	20000854 	.word	0x20000854
 8006110:	20000840 	.word	0x20000840
 8006114:	2000073c 	.word	0x2000073c
 8006118:	e000ed04 	.word	0xe000ed04

0800611c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006124:	2300      	movs	r3, #0
 8006126:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d018      	beq.n	8006160 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800612e:	4b14      	ldr	r3, [pc, #80]	@ (8006180 <vTaskDelay+0x64>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00b      	beq.n	800614e <vTaskDelay+0x32>
	__asm volatile
 8006136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800613a:	f383 8811 	msr	BASEPRI, r3
 800613e:	f3bf 8f6f 	isb	sy
 8006142:	f3bf 8f4f 	dsb	sy
 8006146:	60bb      	str	r3, [r7, #8]
}
 8006148:	bf00      	nop
 800614a:	bf00      	nop
 800614c:	e7fd      	b.n	800614a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800614e:	f000 f88b 	bl	8006268 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006152:	2100      	movs	r1, #0
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 ff4f 	bl	8006ff8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800615a:	f000 f893 	bl	8006284 <xTaskResumeAll>
 800615e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d107      	bne.n	8006176 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006166:	4b07      	ldr	r3, [pc, #28]	@ (8006184 <vTaskDelay+0x68>)
 8006168:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800616c:	601a      	str	r2, [r3, #0]
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006176:	bf00      	nop
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	20000860 	.word	0x20000860
 8006184:	e000ed04 	.word	0xe000ed04

08006188 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b08a      	sub	sp, #40	@ 0x28
 800618c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800618e:	2300      	movs	r3, #0
 8006190:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006192:	2300      	movs	r3, #0
 8006194:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006196:	463a      	mov	r2, r7
 8006198:	1d39      	adds	r1, r7, #4
 800619a:	f107 0308 	add.w	r3, r7, #8
 800619e:	4618      	mov	r0, r3
 80061a0:	f7fa f9ee 	bl	8000580 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80061a4:	6839      	ldr	r1, [r7, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	68ba      	ldr	r2, [r7, #8]
 80061aa:	9202      	str	r2, [sp, #8]
 80061ac:	9301      	str	r3, [sp, #4]
 80061ae:	2300      	movs	r3, #0
 80061b0:	9300      	str	r3, [sp, #0]
 80061b2:	2300      	movs	r3, #0
 80061b4:	460a      	mov	r2, r1
 80061b6:	4924      	ldr	r1, [pc, #144]	@ (8006248 <vTaskStartScheduler+0xc0>)
 80061b8:	4824      	ldr	r0, [pc, #144]	@ (800624c <vTaskStartScheduler+0xc4>)
 80061ba:	f7ff fdf7 	bl	8005dac <xTaskCreateStatic>
 80061be:	4603      	mov	r3, r0
 80061c0:	4a23      	ldr	r2, [pc, #140]	@ (8006250 <vTaskStartScheduler+0xc8>)
 80061c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80061c4:	4b22      	ldr	r3, [pc, #136]	@ (8006250 <vTaskStartScheduler+0xc8>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d002      	beq.n	80061d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80061cc:	2301      	movs	r3, #1
 80061ce:	617b      	str	r3, [r7, #20]
 80061d0:	e001      	b.n	80061d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80061d2:	2300      	movs	r3, #0
 80061d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d102      	bne.n	80061e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80061dc:	f000 ff72 	bl	80070c4 <xTimerCreateTimerTask>
 80061e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d11b      	bne.n	8006220 <vTaskStartScheduler+0x98>
	__asm volatile
 80061e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ec:	f383 8811 	msr	BASEPRI, r3
 80061f0:	f3bf 8f6f 	isb	sy
 80061f4:	f3bf 8f4f 	dsb	sy
 80061f8:	613b      	str	r3, [r7, #16]
}
 80061fa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80061fc:	4b15      	ldr	r3, [pc, #84]	@ (8006254 <vTaskStartScheduler+0xcc>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	334c      	adds	r3, #76	@ 0x4c
 8006202:	4a15      	ldr	r2, [pc, #84]	@ (8006258 <vTaskStartScheduler+0xd0>)
 8006204:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006206:	4b15      	ldr	r3, [pc, #84]	@ (800625c <vTaskStartScheduler+0xd4>)
 8006208:	f04f 32ff 	mov.w	r2, #4294967295
 800620c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800620e:	4b14      	ldr	r3, [pc, #80]	@ (8006260 <vTaskStartScheduler+0xd8>)
 8006210:	2201      	movs	r2, #1
 8006212:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006214:	4b13      	ldr	r3, [pc, #76]	@ (8006264 <vTaskStartScheduler+0xdc>)
 8006216:	2200      	movs	r2, #0
 8006218:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800621a:	f001 fb59 	bl	80078d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800621e:	e00f      	b.n	8006240 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006226:	d10b      	bne.n	8006240 <vTaskStartScheduler+0xb8>
	__asm volatile
 8006228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800622c:	f383 8811 	msr	BASEPRI, r3
 8006230:	f3bf 8f6f 	isb	sy
 8006234:	f3bf 8f4f 	dsb	sy
 8006238:	60fb      	str	r3, [r7, #12]
}
 800623a:	bf00      	nop
 800623c:	bf00      	nop
 800623e:	e7fd      	b.n	800623c <vTaskStartScheduler+0xb4>
}
 8006240:	bf00      	nop
 8006242:	3718      	adds	r7, #24
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	08009810 	.word	0x08009810
 800624c:	08006a21 	.word	0x08006a21
 8006250:	2000085c 	.word	0x2000085c
 8006254:	20000738 	.word	0x20000738
 8006258:	2000001c 	.word	0x2000001c
 800625c:	20000858 	.word	0x20000858
 8006260:	20000844 	.word	0x20000844
 8006264:	2000083c 	.word	0x2000083c

08006268 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006268:	b480      	push	{r7}
 800626a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800626c:	4b04      	ldr	r3, [pc, #16]	@ (8006280 <vTaskSuspendAll+0x18>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	3301      	adds	r3, #1
 8006272:	4a03      	ldr	r2, [pc, #12]	@ (8006280 <vTaskSuspendAll+0x18>)
 8006274:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006276:	bf00      	nop
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr
 8006280:	20000860 	.word	0x20000860

08006284 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800628a:	2300      	movs	r3, #0
 800628c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800628e:	2300      	movs	r3, #0
 8006290:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006292:	4b42      	ldr	r3, [pc, #264]	@ (800639c <xTaskResumeAll+0x118>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d10b      	bne.n	80062b2 <xTaskResumeAll+0x2e>
	__asm volatile
 800629a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800629e:	f383 8811 	msr	BASEPRI, r3
 80062a2:	f3bf 8f6f 	isb	sy
 80062a6:	f3bf 8f4f 	dsb	sy
 80062aa:	603b      	str	r3, [r7, #0]
}
 80062ac:	bf00      	nop
 80062ae:	bf00      	nop
 80062b0:	e7fd      	b.n	80062ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80062b2:	f001 fbb1 	bl	8007a18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80062b6:	4b39      	ldr	r3, [pc, #228]	@ (800639c <xTaskResumeAll+0x118>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	3b01      	subs	r3, #1
 80062bc:	4a37      	ldr	r2, [pc, #220]	@ (800639c <xTaskResumeAll+0x118>)
 80062be:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062c0:	4b36      	ldr	r3, [pc, #216]	@ (800639c <xTaskResumeAll+0x118>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d161      	bne.n	800638c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80062c8:	4b35      	ldr	r3, [pc, #212]	@ (80063a0 <xTaskResumeAll+0x11c>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d05d      	beq.n	800638c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062d0:	e02e      	b.n	8006330 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062d2:	4b34      	ldr	r3, [pc, #208]	@ (80063a4 <xTaskResumeAll+0x120>)
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	3318      	adds	r3, #24
 80062de:	4618      	mov	r0, r3
 80062e0:	f7fe fd3e 	bl	8004d60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	3304      	adds	r3, #4
 80062e8:	4618      	mov	r0, r3
 80062ea:	f7fe fd39 	bl	8004d60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f2:	2201      	movs	r2, #1
 80062f4:	409a      	lsls	r2, r3
 80062f6:	4b2c      	ldr	r3, [pc, #176]	@ (80063a8 <xTaskResumeAll+0x124>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	4a2a      	ldr	r2, [pc, #168]	@ (80063a8 <xTaskResumeAll+0x124>)
 80062fe:	6013      	str	r3, [r2, #0]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006304:	4613      	mov	r3, r2
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	4413      	add	r3, r2
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	4a27      	ldr	r2, [pc, #156]	@ (80063ac <xTaskResumeAll+0x128>)
 800630e:	441a      	add	r2, r3
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	3304      	adds	r3, #4
 8006314:	4619      	mov	r1, r3
 8006316:	4610      	mov	r0, r2
 8006318:	f7fe fcc5 	bl	8004ca6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006320:	4b23      	ldr	r3, [pc, #140]	@ (80063b0 <xTaskResumeAll+0x12c>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006326:	429a      	cmp	r2, r3
 8006328:	d302      	bcc.n	8006330 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800632a:	4b22      	ldr	r3, [pc, #136]	@ (80063b4 <xTaskResumeAll+0x130>)
 800632c:	2201      	movs	r2, #1
 800632e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006330:	4b1c      	ldr	r3, [pc, #112]	@ (80063a4 <xTaskResumeAll+0x120>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d1cc      	bne.n	80062d2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d001      	beq.n	8006342 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800633e:	f000 fc63 	bl	8006c08 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006342:	4b1d      	ldr	r3, [pc, #116]	@ (80063b8 <xTaskResumeAll+0x134>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d010      	beq.n	8006370 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800634e:	f000 f847 	bl	80063e0 <xTaskIncrementTick>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d002      	beq.n	800635e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006358:	4b16      	ldr	r3, [pc, #88]	@ (80063b4 <xTaskResumeAll+0x130>)
 800635a:	2201      	movs	r2, #1
 800635c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	3b01      	subs	r3, #1
 8006362:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1f1      	bne.n	800634e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800636a:	4b13      	ldr	r3, [pc, #76]	@ (80063b8 <xTaskResumeAll+0x134>)
 800636c:	2200      	movs	r2, #0
 800636e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006370:	4b10      	ldr	r3, [pc, #64]	@ (80063b4 <xTaskResumeAll+0x130>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d009      	beq.n	800638c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006378:	2301      	movs	r3, #1
 800637a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800637c:	4b0f      	ldr	r3, [pc, #60]	@ (80063bc <xTaskResumeAll+0x138>)
 800637e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006382:	601a      	str	r2, [r3, #0]
 8006384:	f3bf 8f4f 	dsb	sy
 8006388:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800638c:	f001 fb76 	bl	8007a7c <vPortExitCritical>

	return xAlreadyYielded;
 8006390:	68bb      	ldr	r3, [r7, #8]
}
 8006392:	4618      	mov	r0, r3
 8006394:	3710      	adds	r7, #16
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	20000860 	.word	0x20000860
 80063a0:	20000838 	.word	0x20000838
 80063a4:	200007f8 	.word	0x200007f8
 80063a8:	20000840 	.word	0x20000840
 80063ac:	2000073c 	.word	0x2000073c
 80063b0:	20000738 	.word	0x20000738
 80063b4:	2000084c 	.word	0x2000084c
 80063b8:	20000848 	.word	0x20000848
 80063bc:	e000ed04 	.word	0xe000ed04

080063c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80063c6:	4b05      	ldr	r3, [pc, #20]	@ (80063dc <xTaskGetTickCount+0x1c>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80063cc:	687b      	ldr	r3, [r7, #4]
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	370c      	adds	r7, #12
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	2000083c 	.word	0x2000083c

080063e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b086      	sub	sp, #24
 80063e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80063e6:	2300      	movs	r3, #0
 80063e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063ea:	4b4f      	ldr	r3, [pc, #316]	@ (8006528 <xTaskIncrementTick+0x148>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	f040 808f 	bne.w	8006512 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80063f4:	4b4d      	ldr	r3, [pc, #308]	@ (800652c <xTaskIncrementTick+0x14c>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	3301      	adds	r3, #1
 80063fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80063fc:	4a4b      	ldr	r2, [pc, #300]	@ (800652c <xTaskIncrementTick+0x14c>)
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d121      	bne.n	800644c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006408:	4b49      	ldr	r3, [pc, #292]	@ (8006530 <xTaskIncrementTick+0x150>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00b      	beq.n	800642a <xTaskIncrementTick+0x4a>
	__asm volatile
 8006412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006416:	f383 8811 	msr	BASEPRI, r3
 800641a:	f3bf 8f6f 	isb	sy
 800641e:	f3bf 8f4f 	dsb	sy
 8006422:	603b      	str	r3, [r7, #0]
}
 8006424:	bf00      	nop
 8006426:	bf00      	nop
 8006428:	e7fd      	b.n	8006426 <xTaskIncrementTick+0x46>
 800642a:	4b41      	ldr	r3, [pc, #260]	@ (8006530 <xTaskIncrementTick+0x150>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	60fb      	str	r3, [r7, #12]
 8006430:	4b40      	ldr	r3, [pc, #256]	@ (8006534 <xTaskIncrementTick+0x154>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a3e      	ldr	r2, [pc, #248]	@ (8006530 <xTaskIncrementTick+0x150>)
 8006436:	6013      	str	r3, [r2, #0]
 8006438:	4a3e      	ldr	r2, [pc, #248]	@ (8006534 <xTaskIncrementTick+0x154>)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6013      	str	r3, [r2, #0]
 800643e:	4b3e      	ldr	r3, [pc, #248]	@ (8006538 <xTaskIncrementTick+0x158>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	3301      	adds	r3, #1
 8006444:	4a3c      	ldr	r2, [pc, #240]	@ (8006538 <xTaskIncrementTick+0x158>)
 8006446:	6013      	str	r3, [r2, #0]
 8006448:	f000 fbde 	bl	8006c08 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800644c:	4b3b      	ldr	r3, [pc, #236]	@ (800653c <xTaskIncrementTick+0x15c>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	693a      	ldr	r2, [r7, #16]
 8006452:	429a      	cmp	r2, r3
 8006454:	d348      	bcc.n	80064e8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006456:	4b36      	ldr	r3, [pc, #216]	@ (8006530 <xTaskIncrementTick+0x150>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d104      	bne.n	800646a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006460:	4b36      	ldr	r3, [pc, #216]	@ (800653c <xTaskIncrementTick+0x15c>)
 8006462:	f04f 32ff 	mov.w	r2, #4294967295
 8006466:	601a      	str	r2, [r3, #0]
					break;
 8006468:	e03e      	b.n	80064e8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800646a:	4b31      	ldr	r3, [pc, #196]	@ (8006530 <xTaskIncrementTick+0x150>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	429a      	cmp	r2, r3
 8006480:	d203      	bcs.n	800648a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006482:	4a2e      	ldr	r2, [pc, #184]	@ (800653c <xTaskIncrementTick+0x15c>)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006488:	e02e      	b.n	80064e8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	3304      	adds	r3, #4
 800648e:	4618      	mov	r0, r3
 8006490:	f7fe fc66 	bl	8004d60 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006498:	2b00      	cmp	r3, #0
 800649a:	d004      	beq.n	80064a6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	3318      	adds	r3, #24
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7fe fc5d 	bl	8004d60 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064aa:	2201      	movs	r2, #1
 80064ac:	409a      	lsls	r2, r3
 80064ae:	4b24      	ldr	r3, [pc, #144]	@ (8006540 <xTaskIncrementTick+0x160>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	4a22      	ldr	r2, [pc, #136]	@ (8006540 <xTaskIncrementTick+0x160>)
 80064b6:	6013      	str	r3, [r2, #0]
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064bc:	4613      	mov	r3, r2
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	4413      	add	r3, r2
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	4a1f      	ldr	r2, [pc, #124]	@ (8006544 <xTaskIncrementTick+0x164>)
 80064c6:	441a      	add	r2, r3
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	3304      	adds	r3, #4
 80064cc:	4619      	mov	r1, r3
 80064ce:	4610      	mov	r0, r2
 80064d0:	f7fe fbe9 	bl	8004ca6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064d8:	4b1b      	ldr	r3, [pc, #108]	@ (8006548 <xTaskIncrementTick+0x168>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064de:	429a      	cmp	r2, r3
 80064e0:	d3b9      	bcc.n	8006456 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80064e2:	2301      	movs	r3, #1
 80064e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064e6:	e7b6      	b.n	8006456 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80064e8:	4b17      	ldr	r3, [pc, #92]	@ (8006548 <xTaskIncrementTick+0x168>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064ee:	4915      	ldr	r1, [pc, #84]	@ (8006544 <xTaskIncrementTick+0x164>)
 80064f0:	4613      	mov	r3, r2
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	4413      	add	r3, r2
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	440b      	add	r3, r1
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d901      	bls.n	8006504 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006500:	2301      	movs	r3, #1
 8006502:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006504:	4b11      	ldr	r3, [pc, #68]	@ (800654c <xTaskIncrementTick+0x16c>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d007      	beq.n	800651c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800650c:	2301      	movs	r3, #1
 800650e:	617b      	str	r3, [r7, #20]
 8006510:	e004      	b.n	800651c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006512:	4b0f      	ldr	r3, [pc, #60]	@ (8006550 <xTaskIncrementTick+0x170>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	3301      	adds	r3, #1
 8006518:	4a0d      	ldr	r2, [pc, #52]	@ (8006550 <xTaskIncrementTick+0x170>)
 800651a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800651c:	697b      	ldr	r3, [r7, #20]
}
 800651e:	4618      	mov	r0, r3
 8006520:	3718      	adds	r7, #24
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	20000860 	.word	0x20000860
 800652c:	2000083c 	.word	0x2000083c
 8006530:	200007f0 	.word	0x200007f0
 8006534:	200007f4 	.word	0x200007f4
 8006538:	20000850 	.word	0x20000850
 800653c:	20000858 	.word	0x20000858
 8006540:	20000840 	.word	0x20000840
 8006544:	2000073c 	.word	0x2000073c
 8006548:	20000738 	.word	0x20000738
 800654c:	2000084c 	.word	0x2000084c
 8006550:	20000848 	.word	0x20000848

08006554 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b088      	sub	sp, #32
 8006558:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800655a:	4b3c      	ldr	r3, [pc, #240]	@ (800664c <vTaskSwitchContext+0xf8>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d003      	beq.n	800656a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006562:	4b3b      	ldr	r3, [pc, #236]	@ (8006650 <vTaskSwitchContext+0xfc>)
 8006564:	2201      	movs	r2, #1
 8006566:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006568:	e06c      	b.n	8006644 <vTaskSwitchContext+0xf0>
		xYieldPending = pdFALSE;
 800656a:	4b39      	ldr	r3, [pc, #228]	@ (8006650 <vTaskSwitchContext+0xfc>)
 800656c:	2200      	movs	r2, #0
 800656e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8006570:	4b38      	ldr	r3, [pc, #224]	@ (8006654 <vTaskSwitchContext+0x100>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006576:	61fb      	str	r3, [r7, #28]
 8006578:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800657c:	61bb      	str	r3, [r7, #24]
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	69ba      	ldr	r2, [r7, #24]
 8006584:	429a      	cmp	r2, r3
 8006586:	d111      	bne.n	80065ac <vTaskSwitchContext+0x58>
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	3304      	adds	r3, #4
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	69ba      	ldr	r2, [r7, #24]
 8006590:	429a      	cmp	r2, r3
 8006592:	d10b      	bne.n	80065ac <vTaskSwitchContext+0x58>
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	3308      	adds	r3, #8
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	69ba      	ldr	r2, [r7, #24]
 800659c:	429a      	cmp	r2, r3
 800659e:	d105      	bne.n	80065ac <vTaskSwitchContext+0x58>
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	330c      	adds	r3, #12
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	69ba      	ldr	r2, [r7, #24]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d008      	beq.n	80065be <vTaskSwitchContext+0x6a>
 80065ac:	4b29      	ldr	r3, [pc, #164]	@ (8006654 <vTaskSwitchContext+0x100>)
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	4b28      	ldr	r3, [pc, #160]	@ (8006654 <vTaskSwitchContext+0x100>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	3334      	adds	r3, #52	@ 0x34
 80065b6:	4619      	mov	r1, r3
 80065b8:	4610      	mov	r0, r2
 80065ba:	f7fa fa73 	bl	8000aa4 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065be:	4b26      	ldr	r3, [pc, #152]	@ (8006658 <vTaskSwitchContext+0x104>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	fab3 f383 	clz	r3, r3
 80065ca:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80065cc:	7afb      	ldrb	r3, [r7, #11]
 80065ce:	f1c3 031f 	rsb	r3, r3, #31
 80065d2:	617b      	str	r3, [r7, #20]
 80065d4:	4921      	ldr	r1, [pc, #132]	@ (800665c <vTaskSwitchContext+0x108>)
 80065d6:	697a      	ldr	r2, [r7, #20]
 80065d8:	4613      	mov	r3, r2
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	4413      	add	r3, r2
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	440b      	add	r3, r1
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10b      	bne.n	8006600 <vTaskSwitchContext+0xac>
	__asm volatile
 80065e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ec:	f383 8811 	msr	BASEPRI, r3
 80065f0:	f3bf 8f6f 	isb	sy
 80065f4:	f3bf 8f4f 	dsb	sy
 80065f8:	607b      	str	r3, [r7, #4]
}
 80065fa:	bf00      	nop
 80065fc:	bf00      	nop
 80065fe:	e7fd      	b.n	80065fc <vTaskSwitchContext+0xa8>
 8006600:	697a      	ldr	r2, [r7, #20]
 8006602:	4613      	mov	r3, r2
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	4413      	add	r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4a14      	ldr	r2, [pc, #80]	@ (800665c <vTaskSwitchContext+0x108>)
 800660c:	4413      	add	r3, r2
 800660e:	613b      	str	r3, [r7, #16]
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	685a      	ldr	r2, [r3, #4]
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	605a      	str	r2, [r3, #4]
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	685a      	ldr	r2, [r3, #4]
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	3308      	adds	r3, #8
 8006622:	429a      	cmp	r2, r3
 8006624:	d104      	bne.n	8006630 <vTaskSwitchContext+0xdc>
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	685a      	ldr	r2, [r3, #4]
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	605a      	str	r2, [r3, #4]
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	4a07      	ldr	r2, [pc, #28]	@ (8006654 <vTaskSwitchContext+0x100>)
 8006638:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800663a:	4b06      	ldr	r3, [pc, #24]	@ (8006654 <vTaskSwitchContext+0x100>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	334c      	adds	r3, #76	@ 0x4c
 8006640:	4a07      	ldr	r2, [pc, #28]	@ (8006660 <vTaskSwitchContext+0x10c>)
 8006642:	6013      	str	r3, [r2, #0]
}
 8006644:	bf00      	nop
 8006646:	3720      	adds	r7, #32
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}
 800664c:	20000860 	.word	0x20000860
 8006650:	2000084c 	.word	0x2000084c
 8006654:	20000738 	.word	0x20000738
 8006658:	20000840 	.word	0x20000840
 800665c:	2000073c 	.word	0x2000073c
 8006660:	2000001c 	.word	0x2000001c

08006664 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d10b      	bne.n	800668c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006678:	f383 8811 	msr	BASEPRI, r3
 800667c:	f3bf 8f6f 	isb	sy
 8006680:	f3bf 8f4f 	dsb	sy
 8006684:	60fb      	str	r3, [r7, #12]
}
 8006686:	bf00      	nop
 8006688:	bf00      	nop
 800668a:	e7fd      	b.n	8006688 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800668c:	4b07      	ldr	r3, [pc, #28]	@ (80066ac <vTaskPlaceOnEventList+0x48>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	3318      	adds	r3, #24
 8006692:	4619      	mov	r1, r3
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f7fe fb2a 	bl	8004cee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800669a:	2101      	movs	r1, #1
 800669c:	6838      	ldr	r0, [r7, #0]
 800669e:	f000 fcab 	bl	8006ff8 <prvAddCurrentTaskToDelayedList>
}
 80066a2:	bf00      	nop
 80066a4:	3710      	adds	r7, #16
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	20000738 	.word	0x20000738

080066b0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b086      	sub	sp, #24
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d10b      	bne.n	80066da <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 80066c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066c6:	f383 8811 	msr	BASEPRI, r3
 80066ca:	f3bf 8f6f 	isb	sy
 80066ce:	f3bf 8f4f 	dsb	sy
 80066d2:	617b      	str	r3, [r7, #20]
}
 80066d4:	bf00      	nop
 80066d6:	bf00      	nop
 80066d8:	e7fd      	b.n	80066d6 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80066da:	4b12      	ldr	r3, [pc, #72]	@ (8006724 <vTaskPlaceOnUnorderedEventList+0x74>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d10b      	bne.n	80066fa <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 80066e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e6:	f383 8811 	msr	BASEPRI, r3
 80066ea:	f3bf 8f6f 	isb	sy
 80066ee:	f3bf 8f4f 	dsb	sy
 80066f2:	613b      	str	r3, [r7, #16]
}
 80066f4:	bf00      	nop
 80066f6:	bf00      	nop
 80066f8:	e7fd      	b.n	80066f6 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80066fa:	4b0b      	ldr	r3, [pc, #44]	@ (8006728 <vTaskPlaceOnUnorderedEventList+0x78>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68ba      	ldr	r2, [r7, #8]
 8006700:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006704:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006706:	4b08      	ldr	r3, [pc, #32]	@ (8006728 <vTaskPlaceOnUnorderedEventList+0x78>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	3318      	adds	r3, #24
 800670c:	4619      	mov	r1, r3
 800670e:	68f8      	ldr	r0, [r7, #12]
 8006710:	f7fe fac9 	bl	8004ca6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006714:	2101      	movs	r1, #1
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 fc6e 	bl	8006ff8 <prvAddCurrentTaskToDelayedList>
}
 800671c:	bf00      	nop
 800671e:	3718      	adds	r7, #24
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}
 8006724:	20000860 	.word	0x20000860
 8006728:	20000738 	.word	0x20000738

0800672c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800672c:	b580      	push	{r7, lr}
 800672e:	b086      	sub	sp, #24
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d10b      	bne.n	8006756 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800673e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006742:	f383 8811 	msr	BASEPRI, r3
 8006746:	f3bf 8f6f 	isb	sy
 800674a:	f3bf 8f4f 	dsb	sy
 800674e:	617b      	str	r3, [r7, #20]
}
 8006750:	bf00      	nop
 8006752:	bf00      	nop
 8006754:	e7fd      	b.n	8006752 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006756:	4b0a      	ldr	r3, [pc, #40]	@ (8006780 <vTaskPlaceOnEventListRestricted+0x54>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	3318      	adds	r3, #24
 800675c:	4619      	mov	r1, r3
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f7fe faa1 	bl	8004ca6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d002      	beq.n	8006770 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800676a:	f04f 33ff 	mov.w	r3, #4294967295
 800676e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006770:	6879      	ldr	r1, [r7, #4]
 8006772:	68b8      	ldr	r0, [r7, #8]
 8006774:	f000 fc40 	bl	8006ff8 <prvAddCurrentTaskToDelayedList>
	}
 8006778:	bf00      	nop
 800677a:	3718      	adds	r7, #24
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	20000738 	.word	0x20000738

08006784 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b086      	sub	sp, #24
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d10b      	bne.n	80067b2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800679a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800679e:	f383 8811 	msr	BASEPRI, r3
 80067a2:	f3bf 8f6f 	isb	sy
 80067a6:	f3bf 8f4f 	dsb	sy
 80067aa:	60fb      	str	r3, [r7, #12]
}
 80067ac:	bf00      	nop
 80067ae:	bf00      	nop
 80067b0:	e7fd      	b.n	80067ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	3318      	adds	r3, #24
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7fe fad2 	bl	8004d60 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067bc:	4b1d      	ldr	r3, [pc, #116]	@ (8006834 <xTaskRemoveFromEventList+0xb0>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d11c      	bne.n	80067fe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	3304      	adds	r3, #4
 80067c8:	4618      	mov	r0, r3
 80067ca:	f7fe fac9 	bl	8004d60 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d2:	2201      	movs	r2, #1
 80067d4:	409a      	lsls	r2, r3
 80067d6:	4b18      	ldr	r3, [pc, #96]	@ (8006838 <xTaskRemoveFromEventList+0xb4>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4313      	orrs	r3, r2
 80067dc:	4a16      	ldr	r2, [pc, #88]	@ (8006838 <xTaskRemoveFromEventList+0xb4>)
 80067de:	6013      	str	r3, [r2, #0]
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067e4:	4613      	mov	r3, r2
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	4413      	add	r3, r2
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	4a13      	ldr	r2, [pc, #76]	@ (800683c <xTaskRemoveFromEventList+0xb8>)
 80067ee:	441a      	add	r2, r3
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	3304      	adds	r3, #4
 80067f4:	4619      	mov	r1, r3
 80067f6:	4610      	mov	r0, r2
 80067f8:	f7fe fa55 	bl	8004ca6 <vListInsertEnd>
 80067fc:	e005      	b.n	800680a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	3318      	adds	r3, #24
 8006802:	4619      	mov	r1, r3
 8006804:	480e      	ldr	r0, [pc, #56]	@ (8006840 <xTaskRemoveFromEventList+0xbc>)
 8006806:	f7fe fa4e 	bl	8004ca6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800680e:	4b0d      	ldr	r3, [pc, #52]	@ (8006844 <xTaskRemoveFromEventList+0xc0>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006814:	429a      	cmp	r2, r3
 8006816:	d905      	bls.n	8006824 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006818:	2301      	movs	r3, #1
 800681a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800681c:	4b0a      	ldr	r3, [pc, #40]	@ (8006848 <xTaskRemoveFromEventList+0xc4>)
 800681e:	2201      	movs	r2, #1
 8006820:	601a      	str	r2, [r3, #0]
 8006822:	e001      	b.n	8006828 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006824:	2300      	movs	r3, #0
 8006826:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006828:	697b      	ldr	r3, [r7, #20]
}
 800682a:	4618      	mov	r0, r3
 800682c:	3718      	adds	r7, #24
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	20000860 	.word	0x20000860
 8006838:	20000840 	.word	0x20000840
 800683c:	2000073c 	.word	0x2000073c
 8006840:	200007f8 	.word	0x200007f8
 8006844:	20000738 	.word	0x20000738
 8006848:	2000084c 	.word	0x2000084c

0800684c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b086      	sub	sp, #24
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8006856:	4b2a      	ldr	r3, [pc, #168]	@ (8006900 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d10b      	bne.n	8006876 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 800685e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006862:	f383 8811 	msr	BASEPRI, r3
 8006866:	f3bf 8f6f 	isb	sy
 800686a:	f3bf 8f4f 	dsb	sy
 800686e:	613b      	str	r3, [r7, #16]
}
 8006870:	bf00      	nop
 8006872:	bf00      	nop
 8006874:	e7fd      	b.n	8006872 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d10b      	bne.n	80068a4 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 800688c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006890:	f383 8811 	msr	BASEPRI, r3
 8006894:	f3bf 8f6f 	isb	sy
 8006898:	f3bf 8f4f 	dsb	sy
 800689c:	60fb      	str	r3, [r7, #12]
}
 800689e:	bf00      	nop
 80068a0:	bf00      	nop
 80068a2:	e7fd      	b.n	80068a0 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f7fe fa5b 	bl	8004d60 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	3304      	adds	r3, #4
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7fe fa56 	bl	8004d60 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b8:	2201      	movs	r2, #1
 80068ba:	409a      	lsls	r2, r3
 80068bc:	4b11      	ldr	r3, [pc, #68]	@ (8006904 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	4a10      	ldr	r2, [pc, #64]	@ (8006904 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80068c4:	6013      	str	r3, [r2, #0]
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068ca:	4613      	mov	r3, r2
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	4413      	add	r3, r2
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	4a0d      	ldr	r2, [pc, #52]	@ (8006908 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80068d4:	441a      	add	r2, r3
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	3304      	adds	r3, #4
 80068da:	4619      	mov	r1, r3
 80068dc:	4610      	mov	r0, r2
 80068de:	f7fe f9e2 	bl	8004ca6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068e6:	4b09      	ldr	r3, [pc, #36]	@ (800690c <vTaskRemoveFromUnorderedEventList+0xc0>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d902      	bls.n	80068f6 <vTaskRemoveFromUnorderedEventList+0xaa>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80068f0:	4b07      	ldr	r3, [pc, #28]	@ (8006910 <vTaskRemoveFromUnorderedEventList+0xc4>)
 80068f2:	2201      	movs	r2, #1
 80068f4:	601a      	str	r2, [r3, #0]
	}
}
 80068f6:	bf00      	nop
 80068f8:	3718      	adds	r7, #24
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	20000860 	.word	0x20000860
 8006904:	20000840 	.word	0x20000840
 8006908:	2000073c 	.word	0x2000073c
 800690c:	20000738 	.word	0x20000738
 8006910:	2000084c 	.word	0x2000084c

08006914 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800691c:	4b06      	ldr	r3, [pc, #24]	@ (8006938 <vTaskInternalSetTimeOutState+0x24>)
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006924:	4b05      	ldr	r3, [pc, #20]	@ (800693c <vTaskInternalSetTimeOutState+0x28>)
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	605a      	str	r2, [r3, #4]
}
 800692c:	bf00      	nop
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr
 8006938:	20000850 	.word	0x20000850
 800693c:	2000083c 	.word	0x2000083c

08006940 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b088      	sub	sp, #32
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d10b      	bne.n	8006968 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006954:	f383 8811 	msr	BASEPRI, r3
 8006958:	f3bf 8f6f 	isb	sy
 800695c:	f3bf 8f4f 	dsb	sy
 8006960:	613b      	str	r3, [r7, #16]
}
 8006962:	bf00      	nop
 8006964:	bf00      	nop
 8006966:	e7fd      	b.n	8006964 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d10b      	bne.n	8006986 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800696e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006972:	f383 8811 	msr	BASEPRI, r3
 8006976:	f3bf 8f6f 	isb	sy
 800697a:	f3bf 8f4f 	dsb	sy
 800697e:	60fb      	str	r3, [r7, #12]
}
 8006980:	bf00      	nop
 8006982:	bf00      	nop
 8006984:	e7fd      	b.n	8006982 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006986:	f001 f847 	bl	8007a18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800698a:	4b1d      	ldr	r3, [pc, #116]	@ (8006a00 <xTaskCheckForTimeOut+0xc0>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	69ba      	ldr	r2, [r7, #24]
 8006996:	1ad3      	subs	r3, r2, r3
 8006998:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069a2:	d102      	bne.n	80069aa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80069a4:	2300      	movs	r3, #0
 80069a6:	61fb      	str	r3, [r7, #28]
 80069a8:	e023      	b.n	80069f2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	4b15      	ldr	r3, [pc, #84]	@ (8006a04 <xTaskCheckForTimeOut+0xc4>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d007      	beq.n	80069c6 <xTaskCheckForTimeOut+0x86>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	69ba      	ldr	r2, [r7, #24]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d302      	bcc.n	80069c6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80069c0:	2301      	movs	r3, #1
 80069c2:	61fb      	str	r3, [r7, #28]
 80069c4:	e015      	b.n	80069f2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	697a      	ldr	r2, [r7, #20]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d20b      	bcs.n	80069e8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	1ad2      	subs	r2, r2, r3
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f7ff ff99 	bl	8006914 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80069e2:	2300      	movs	r3, #0
 80069e4:	61fb      	str	r3, [r7, #28]
 80069e6:	e004      	b.n	80069f2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	2200      	movs	r2, #0
 80069ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80069ee:	2301      	movs	r3, #1
 80069f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80069f2:	f001 f843 	bl	8007a7c <vPortExitCritical>

	return xReturn;
 80069f6:	69fb      	ldr	r3, [r7, #28]
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3720      	adds	r7, #32
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	2000083c 	.word	0x2000083c
 8006a04:	20000850 	.word	0x20000850

08006a08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006a08:	b480      	push	{r7}
 8006a0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006a0c:	4b03      	ldr	r3, [pc, #12]	@ (8006a1c <vTaskMissedYield+0x14>)
 8006a0e:	2201      	movs	r2, #1
 8006a10:	601a      	str	r2, [r3, #0]
}
 8006a12:	bf00      	nop
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr
 8006a1c:	2000084c 	.word	0x2000084c

08006a20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006a28:	f000 f852 	bl	8006ad0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006a2c:	4b06      	ldr	r3, [pc, #24]	@ (8006a48 <prvIdleTask+0x28>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d9f9      	bls.n	8006a28 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006a34:	4b05      	ldr	r3, [pc, #20]	@ (8006a4c <prvIdleTask+0x2c>)
 8006a36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a3a:	601a      	str	r2, [r3, #0]
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006a44:	e7f0      	b.n	8006a28 <prvIdleTask+0x8>
 8006a46:	bf00      	nop
 8006a48:	2000073c 	.word	0x2000073c
 8006a4c:	e000ed04 	.word	0xe000ed04

08006a50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a56:	2300      	movs	r3, #0
 8006a58:	607b      	str	r3, [r7, #4]
 8006a5a:	e00c      	b.n	8006a76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	4613      	mov	r3, r2
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	4413      	add	r3, r2
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	4a12      	ldr	r2, [pc, #72]	@ (8006ab0 <prvInitialiseTaskLists+0x60>)
 8006a68:	4413      	add	r3, r2
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7fe f8ee 	bl	8004c4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	3301      	adds	r3, #1
 8006a74:	607b      	str	r3, [r7, #4]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2b06      	cmp	r3, #6
 8006a7a:	d9ef      	bls.n	8006a5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006a7c:	480d      	ldr	r0, [pc, #52]	@ (8006ab4 <prvInitialiseTaskLists+0x64>)
 8006a7e:	f7fe f8e5 	bl	8004c4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006a82:	480d      	ldr	r0, [pc, #52]	@ (8006ab8 <prvInitialiseTaskLists+0x68>)
 8006a84:	f7fe f8e2 	bl	8004c4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006a88:	480c      	ldr	r0, [pc, #48]	@ (8006abc <prvInitialiseTaskLists+0x6c>)
 8006a8a:	f7fe f8df 	bl	8004c4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006a8e:	480c      	ldr	r0, [pc, #48]	@ (8006ac0 <prvInitialiseTaskLists+0x70>)
 8006a90:	f7fe f8dc 	bl	8004c4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006a94:	480b      	ldr	r0, [pc, #44]	@ (8006ac4 <prvInitialiseTaskLists+0x74>)
 8006a96:	f7fe f8d9 	bl	8004c4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8006ac8 <prvInitialiseTaskLists+0x78>)
 8006a9c:	4a05      	ldr	r2, [pc, #20]	@ (8006ab4 <prvInitialiseTaskLists+0x64>)
 8006a9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8006acc <prvInitialiseTaskLists+0x7c>)
 8006aa2:	4a05      	ldr	r2, [pc, #20]	@ (8006ab8 <prvInitialiseTaskLists+0x68>)
 8006aa4:	601a      	str	r2, [r3, #0]
}
 8006aa6:	bf00      	nop
 8006aa8:	3708      	adds	r7, #8
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	2000073c 	.word	0x2000073c
 8006ab4:	200007c8 	.word	0x200007c8
 8006ab8:	200007dc 	.word	0x200007dc
 8006abc:	200007f8 	.word	0x200007f8
 8006ac0:	2000080c 	.word	0x2000080c
 8006ac4:	20000824 	.word	0x20000824
 8006ac8:	200007f0 	.word	0x200007f0
 8006acc:	200007f4 	.word	0x200007f4

08006ad0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ad6:	e019      	b.n	8006b0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006ad8:	f000 ff9e 	bl	8007a18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006adc:	4b10      	ldr	r3, [pc, #64]	@ (8006b20 <prvCheckTasksWaitingTermination+0x50>)
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	3304      	adds	r3, #4
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f7fe f939 	bl	8004d60 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006aee:	4b0d      	ldr	r3, [pc, #52]	@ (8006b24 <prvCheckTasksWaitingTermination+0x54>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	3b01      	subs	r3, #1
 8006af4:	4a0b      	ldr	r2, [pc, #44]	@ (8006b24 <prvCheckTasksWaitingTermination+0x54>)
 8006af6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006af8:	4b0b      	ldr	r3, [pc, #44]	@ (8006b28 <prvCheckTasksWaitingTermination+0x58>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	3b01      	subs	r3, #1
 8006afe:	4a0a      	ldr	r2, [pc, #40]	@ (8006b28 <prvCheckTasksWaitingTermination+0x58>)
 8006b00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006b02:	f000 ffbb 	bl	8007a7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 f848 	bl	8006b9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b0c:	4b06      	ldr	r3, [pc, #24]	@ (8006b28 <prvCheckTasksWaitingTermination+0x58>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1e1      	bne.n	8006ad8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006b14:	bf00      	nop
 8006b16:	bf00      	nop
 8006b18:	3708      	adds	r7, #8
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	2000080c 	.word	0x2000080c
 8006b24:	20000838 	.word	0x20000838
 8006b28:	20000820 	.word	0x20000820

08006b2c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8006b34:	2300      	movs	r3, #0
 8006b36:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8006b38:	e005      	b.n	8006b46 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	607b      	str	r3, [r7, #4]
			ulCount++;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	3301      	adds	r3, #1
 8006b44:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	2ba5      	cmp	r3, #165	@ 0xa5
 8006b4c:	d0f5      	beq.n	8006b3a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	089b      	lsrs	r3, r3, #2
 8006b52:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	b29b      	uxth	r3, r3
	}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3714      	adds	r7, #20
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b086      	sub	sp, #24
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d102      	bne.n	8006b78 <uxTaskGetStackHighWaterMark+0x14>
 8006b72:	4b09      	ldr	r3, [pc, #36]	@ (8006b98 <uxTaskGetStackHighWaterMark+0x34>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	e000      	b.n	8006b7a <uxTaskGetStackHighWaterMark+0x16>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b80:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8006b82:	6938      	ldr	r0, [r7, #16]
 8006b84:	f7ff ffd2 	bl	8006b2c <prvTaskCheckFreeStackSpace>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
	}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3718      	adds	r7, #24
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	20000738 	.word	0x20000738

08006b9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	334c      	adds	r3, #76	@ 0x4c
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f001 fbdf 	bl	800836c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d108      	bne.n	8006bca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f001 f921 	bl	8007e04 <vPortFree>
				vPortFree( pxTCB );
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f001 f91e 	bl	8007e04 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006bc8:	e019      	b.n	8006bfe <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d103      	bne.n	8006bdc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f001 f915 	bl	8007e04 <vPortFree>
	}
 8006bda:	e010      	b.n	8006bfe <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d00b      	beq.n	8006bfe <prvDeleteTCB+0x62>
	__asm volatile
 8006be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bea:	f383 8811 	msr	BASEPRI, r3
 8006bee:	f3bf 8f6f 	isb	sy
 8006bf2:	f3bf 8f4f 	dsb	sy
 8006bf6:	60fb      	str	r3, [r7, #12]
}
 8006bf8:	bf00      	nop
 8006bfa:	bf00      	nop
 8006bfc:	e7fd      	b.n	8006bfa <prvDeleteTCB+0x5e>
	}
 8006bfe:	bf00      	nop
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
	...

08006c08 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8006c40 <prvResetNextTaskUnblockTime+0x38>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d104      	bne.n	8006c22 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006c18:	4b0a      	ldr	r3, [pc, #40]	@ (8006c44 <prvResetNextTaskUnblockTime+0x3c>)
 8006c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c1e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006c20:	e008      	b.n	8006c34 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c22:	4b07      	ldr	r3, [pc, #28]	@ (8006c40 <prvResetNextTaskUnblockTime+0x38>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	4a04      	ldr	r2, [pc, #16]	@ (8006c44 <prvResetNextTaskUnblockTime+0x3c>)
 8006c32:	6013      	str	r3, [r2, #0]
}
 8006c34:	bf00      	nop
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr
 8006c40:	200007f0 	.word	0x200007f0
 8006c44:	20000858 	.word	0x20000858

08006c48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8006c7c <xTaskGetSchedulerState+0x34>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d102      	bne.n	8006c5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006c56:	2301      	movs	r3, #1
 8006c58:	607b      	str	r3, [r7, #4]
 8006c5a:	e008      	b.n	8006c6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c5c:	4b08      	ldr	r3, [pc, #32]	@ (8006c80 <xTaskGetSchedulerState+0x38>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d102      	bne.n	8006c6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006c64:	2302      	movs	r3, #2
 8006c66:	607b      	str	r3, [r7, #4]
 8006c68:	e001      	b.n	8006c6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006c6e:	687b      	ldr	r3, [r7, #4]
	}
 8006c70:	4618      	mov	r0, r3
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr
 8006c7c:	20000844 	.word	0x20000844
 8006c80:	20000860 	.word	0x20000860

08006c84 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006c90:	2300      	movs	r3, #0
 8006c92:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d05e      	beq.n	8006d58 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c9e:	4b31      	ldr	r3, [pc, #196]	@ (8006d64 <xTaskPriorityInherit+0xe0>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d24e      	bcs.n	8006d46 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	699b      	ldr	r3, [r3, #24]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	db06      	blt.n	8006cbe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cb0:	4b2c      	ldr	r3, [pc, #176]	@ (8006d64 <xTaskPriorityInherit+0xe0>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cb6:	f1c3 0207 	rsb	r2, r3, #7
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	6959      	ldr	r1, [r3, #20]
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	4413      	add	r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	4a26      	ldr	r2, [pc, #152]	@ (8006d68 <xTaskPriorityInherit+0xe4>)
 8006cd0:	4413      	add	r3, r2
 8006cd2:	4299      	cmp	r1, r3
 8006cd4:	d12f      	bne.n	8006d36 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	3304      	adds	r3, #4
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f7fe f840 	bl	8004d60 <uxListRemove>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d10a      	bne.n	8006cfc <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cea:	2201      	movs	r2, #1
 8006cec:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf0:	43da      	mvns	r2, r3
 8006cf2:	4b1e      	ldr	r3, [pc, #120]	@ (8006d6c <xTaskPriorityInherit+0xe8>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	4a1c      	ldr	r2, [pc, #112]	@ (8006d6c <xTaskPriorityInherit+0xe8>)
 8006cfa:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006cfc:	4b19      	ldr	r3, [pc, #100]	@ (8006d64 <xTaskPriorityInherit+0xe0>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	409a      	lsls	r2, r3
 8006d0e:	4b17      	ldr	r3, [pc, #92]	@ (8006d6c <xTaskPriorityInherit+0xe8>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	4a15      	ldr	r2, [pc, #84]	@ (8006d6c <xTaskPriorityInherit+0xe8>)
 8006d16:	6013      	str	r3, [r2, #0]
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	4413      	add	r3, r2
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	4a10      	ldr	r2, [pc, #64]	@ (8006d68 <xTaskPriorityInherit+0xe4>)
 8006d26:	441a      	add	r2, r3
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	3304      	adds	r3, #4
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	4610      	mov	r0, r2
 8006d30:	f7fd ffb9 	bl	8004ca6 <vListInsertEnd>
 8006d34:	e004      	b.n	8006d40 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006d36:	4b0b      	ldr	r3, [pc, #44]	@ (8006d64 <xTaskPriorityInherit+0xe0>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006d40:	2301      	movs	r3, #1
 8006d42:	60fb      	str	r3, [r7, #12]
 8006d44:	e008      	b.n	8006d58 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d4a:	4b06      	ldr	r3, [pc, #24]	@ (8006d64 <xTaskPriorityInherit+0xe0>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d201      	bcs.n	8006d58 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006d54:	2301      	movs	r3, #1
 8006d56:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d58:	68fb      	ldr	r3, [r7, #12]
	}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3710      	adds	r7, #16
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	20000738 	.word	0x20000738
 8006d68:	2000073c 	.word	0x2000073c
 8006d6c:	20000840 	.word	0x20000840

08006d70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b086      	sub	sp, #24
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d070      	beq.n	8006e68 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006d86:	4b3b      	ldr	r3, [pc, #236]	@ (8006e74 <xTaskPriorityDisinherit+0x104>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	693a      	ldr	r2, [r7, #16]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d00b      	beq.n	8006da8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d94:	f383 8811 	msr	BASEPRI, r3
 8006d98:	f3bf 8f6f 	isb	sy
 8006d9c:	f3bf 8f4f 	dsb	sy
 8006da0:	60fb      	str	r3, [r7, #12]
}
 8006da2:	bf00      	nop
 8006da4:	bf00      	nop
 8006da6:	e7fd      	b.n	8006da4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d10b      	bne.n	8006dc8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006db4:	f383 8811 	msr	BASEPRI, r3
 8006db8:	f3bf 8f6f 	isb	sy
 8006dbc:	f3bf 8f4f 	dsb	sy
 8006dc0:	60bb      	str	r3, [r7, #8]
}
 8006dc2:	bf00      	nop
 8006dc4:	bf00      	nop
 8006dc6:	e7fd      	b.n	8006dc4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dcc:	1e5a      	subs	r2, r3, #1
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d044      	beq.n	8006e68 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d140      	bne.n	8006e68 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	3304      	adds	r3, #4
 8006dea:	4618      	mov	r0, r3
 8006dec:	f7fd ffb8 	bl	8004d60 <uxListRemove>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d115      	bne.n	8006e22 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dfa:	491f      	ldr	r1, [pc, #124]	@ (8006e78 <xTaskPriorityDisinherit+0x108>)
 8006dfc:	4613      	mov	r3, r2
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	4413      	add	r3, r2
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	440b      	add	r3, r1
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d10a      	bne.n	8006e22 <xTaskPriorityDisinherit+0xb2>
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e10:	2201      	movs	r2, #1
 8006e12:	fa02 f303 	lsl.w	r3, r2, r3
 8006e16:	43da      	mvns	r2, r3
 8006e18:	4b18      	ldr	r3, [pc, #96]	@ (8006e7c <xTaskPriorityDisinherit+0x10c>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	4a17      	ldr	r2, [pc, #92]	@ (8006e7c <xTaskPriorityDisinherit+0x10c>)
 8006e20:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e2e:	f1c3 0207 	rsb	r2, r3, #7
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	409a      	lsls	r2, r3
 8006e3e:	4b0f      	ldr	r3, [pc, #60]	@ (8006e7c <xTaskPriorityDisinherit+0x10c>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	4a0d      	ldr	r2, [pc, #52]	@ (8006e7c <xTaskPriorityDisinherit+0x10c>)
 8006e46:	6013      	str	r3, [r2, #0]
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	4413      	add	r3, r2
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	4a08      	ldr	r2, [pc, #32]	@ (8006e78 <xTaskPriorityDisinherit+0x108>)
 8006e56:	441a      	add	r2, r3
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	3304      	adds	r3, #4
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	4610      	mov	r0, r2
 8006e60:	f7fd ff21 	bl	8004ca6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006e64:	2301      	movs	r3, #1
 8006e66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e68:	697b      	ldr	r3, [r7, #20]
	}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3718      	adds	r7, #24
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	20000738 	.word	0x20000738
 8006e78:	2000073c 	.word	0x2000073c
 8006e7c:	20000840 	.word	0x20000840

08006e80 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b088      	sub	sp, #32
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d079      	beq.n	8006f8c <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d10b      	bne.n	8006eb8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea4:	f383 8811 	msr	BASEPRI, r3
 8006ea8:	f3bf 8f6f 	isb	sy
 8006eac:	f3bf 8f4f 	dsb	sy
 8006eb0:	60fb      	str	r3, [r7, #12]
}
 8006eb2:	bf00      	nop
 8006eb4:	bf00      	nop
 8006eb6:	e7fd      	b.n	8006eb4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ebc:	683a      	ldr	r2, [r7, #0]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d902      	bls.n	8006ec8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	61fb      	str	r3, [r7, #28]
 8006ec6:	e002      	b.n	8006ece <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ecc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ed2:	69fa      	ldr	r2, [r7, #28]
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d059      	beq.n	8006f8c <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006edc:	697a      	ldr	r2, [r7, #20]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d154      	bne.n	8006f8c <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006ee2:	4b2c      	ldr	r3, [pc, #176]	@ (8006f94 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	69ba      	ldr	r2, [r7, #24]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d10b      	bne.n	8006f04 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ef0:	f383 8811 	msr	BASEPRI, r3
 8006ef4:	f3bf 8f6f 	isb	sy
 8006ef8:	f3bf 8f4f 	dsb	sy
 8006efc:	60bb      	str	r3, [r7, #8]
}
 8006efe:	bf00      	nop
 8006f00:	bf00      	nop
 8006f02:	e7fd      	b.n	8006f00 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f08:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	69fa      	ldr	r2, [r7, #28]
 8006f0e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	699b      	ldr	r3, [r3, #24]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	db04      	blt.n	8006f22 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	f1c3 0207 	rsb	r2, r3, #7
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	6959      	ldr	r1, [r3, #20]
 8006f26:	693a      	ldr	r2, [r7, #16]
 8006f28:	4613      	mov	r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	4413      	add	r3, r2
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	4a19      	ldr	r2, [pc, #100]	@ (8006f98 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006f32:	4413      	add	r3, r2
 8006f34:	4299      	cmp	r1, r3
 8006f36:	d129      	bne.n	8006f8c <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	3304      	adds	r3, #4
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7fd ff0f 	bl	8004d60 <uxListRemove>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d10a      	bne.n	8006f5e <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f52:	43da      	mvns	r2, r3
 8006f54:	4b11      	ldr	r3, [pc, #68]	@ (8006f9c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4013      	ands	r3, r2
 8006f5a:	4a10      	ldr	r2, [pc, #64]	@ (8006f9c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006f5c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006f5e:	69bb      	ldr	r3, [r7, #24]
 8006f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f62:	2201      	movs	r2, #1
 8006f64:	409a      	lsls	r2, r3
 8006f66:	4b0d      	ldr	r3, [pc, #52]	@ (8006f9c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	4a0b      	ldr	r2, [pc, #44]	@ (8006f9c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006f6e:	6013      	str	r3, [r2, #0]
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f74:	4613      	mov	r3, r2
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	4413      	add	r3, r2
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	4a06      	ldr	r2, [pc, #24]	@ (8006f98 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006f7e:	441a      	add	r2, r3
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	3304      	adds	r3, #4
 8006f84:	4619      	mov	r1, r3
 8006f86:	4610      	mov	r0, r2
 8006f88:	f7fd fe8d 	bl	8004ca6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f8c:	bf00      	nop
 8006f8e:	3720      	adds	r7, #32
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	20000738 	.word	0x20000738
 8006f98:	2000073c 	.word	0x2000073c
 8006f9c:	20000840 	.word	0x20000840

08006fa0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8006fa6:	4b09      	ldr	r3, [pc, #36]	@ (8006fcc <uxTaskResetEventItemValue+0x2c>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	699b      	ldr	r3, [r3, #24]
 8006fac:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fae:	4b07      	ldr	r3, [pc, #28]	@ (8006fcc <uxTaskResetEventItemValue+0x2c>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fb4:	4b05      	ldr	r3, [pc, #20]	@ (8006fcc <uxTaskResetEventItemValue+0x2c>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f1c2 0207 	rsb	r2, r2, #7
 8006fbc:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8006fbe:	687b      	ldr	r3, [r7, #4]
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr
 8006fcc:	20000738 	.word	0x20000738

08006fd0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006fd0:	b480      	push	{r7}
 8006fd2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006fd4:	4b07      	ldr	r3, [pc, #28]	@ (8006ff4 <pvTaskIncrementMutexHeldCount+0x24>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d004      	beq.n	8006fe6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006fdc:	4b05      	ldr	r3, [pc, #20]	@ (8006ff4 <pvTaskIncrementMutexHeldCount+0x24>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006fe2:	3201      	adds	r2, #1
 8006fe4:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8006fe6:	4b03      	ldr	r3, [pc, #12]	@ (8006ff4 <pvTaskIncrementMutexHeldCount+0x24>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
	}
 8006fea:	4618      	mov	r0, r3
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr
 8006ff4:	20000738 	.word	0x20000738

08006ff8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007002:	4b29      	ldr	r3, [pc, #164]	@ (80070a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007008:	4b28      	ldr	r3, [pc, #160]	@ (80070ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	3304      	adds	r3, #4
 800700e:	4618      	mov	r0, r3
 8007010:	f7fd fea6 	bl	8004d60 <uxListRemove>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d10b      	bne.n	8007032 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800701a:	4b24      	ldr	r3, [pc, #144]	@ (80070ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007020:	2201      	movs	r2, #1
 8007022:	fa02 f303 	lsl.w	r3, r2, r3
 8007026:	43da      	mvns	r2, r3
 8007028:	4b21      	ldr	r3, [pc, #132]	@ (80070b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4013      	ands	r3, r2
 800702e:	4a20      	ldr	r2, [pc, #128]	@ (80070b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007030:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007038:	d10a      	bne.n	8007050 <prvAddCurrentTaskToDelayedList+0x58>
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d007      	beq.n	8007050 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007040:	4b1a      	ldr	r3, [pc, #104]	@ (80070ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	3304      	adds	r3, #4
 8007046:	4619      	mov	r1, r3
 8007048:	481a      	ldr	r0, [pc, #104]	@ (80070b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800704a:	f7fd fe2c 	bl	8004ca6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800704e:	e026      	b.n	800709e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4413      	add	r3, r2
 8007056:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007058:	4b14      	ldr	r3, [pc, #80]	@ (80070ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	68ba      	ldr	r2, [r7, #8]
 800705e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007060:	68ba      	ldr	r2, [r7, #8]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	429a      	cmp	r2, r3
 8007066:	d209      	bcs.n	800707c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007068:	4b13      	ldr	r3, [pc, #76]	@ (80070b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	4b0f      	ldr	r3, [pc, #60]	@ (80070ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	3304      	adds	r3, #4
 8007072:	4619      	mov	r1, r3
 8007074:	4610      	mov	r0, r2
 8007076:	f7fd fe3a 	bl	8004cee <vListInsert>
}
 800707a:	e010      	b.n	800709e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800707c:	4b0f      	ldr	r3, [pc, #60]	@ (80070bc <prvAddCurrentTaskToDelayedList+0xc4>)
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	4b0a      	ldr	r3, [pc, #40]	@ (80070ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	3304      	adds	r3, #4
 8007086:	4619      	mov	r1, r3
 8007088:	4610      	mov	r0, r2
 800708a:	f7fd fe30 	bl	8004cee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800708e:	4b0c      	ldr	r3, [pc, #48]	@ (80070c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	68ba      	ldr	r2, [r7, #8]
 8007094:	429a      	cmp	r2, r3
 8007096:	d202      	bcs.n	800709e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007098:	4a09      	ldr	r2, [pc, #36]	@ (80070c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	6013      	str	r3, [r2, #0]
}
 800709e:	bf00      	nop
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	2000083c 	.word	0x2000083c
 80070ac:	20000738 	.word	0x20000738
 80070b0:	20000840 	.word	0x20000840
 80070b4:	20000824 	.word	0x20000824
 80070b8:	200007f4 	.word	0x200007f4
 80070bc:	200007f0 	.word	0x200007f0
 80070c0:	20000858 	.word	0x20000858

080070c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b08a      	sub	sp, #40	@ 0x28
 80070c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80070ca:	2300      	movs	r3, #0
 80070cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80070ce:	f000 fb13 	bl	80076f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80070d2:	4b1d      	ldr	r3, [pc, #116]	@ (8007148 <xTimerCreateTimerTask+0x84>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d021      	beq.n	800711e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80070da:	2300      	movs	r3, #0
 80070dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80070de:	2300      	movs	r3, #0
 80070e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80070e2:	1d3a      	adds	r2, r7, #4
 80070e4:	f107 0108 	add.w	r1, r7, #8
 80070e8:	f107 030c 	add.w	r3, r7, #12
 80070ec:	4618      	mov	r0, r3
 80070ee:	f7f9 fa61 	bl	80005b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80070f2:	6879      	ldr	r1, [r7, #4]
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	9202      	str	r2, [sp, #8]
 80070fa:	9301      	str	r3, [sp, #4]
 80070fc:	2306      	movs	r3, #6
 80070fe:	9300      	str	r3, [sp, #0]
 8007100:	2300      	movs	r3, #0
 8007102:	460a      	mov	r2, r1
 8007104:	4911      	ldr	r1, [pc, #68]	@ (800714c <xTimerCreateTimerTask+0x88>)
 8007106:	4812      	ldr	r0, [pc, #72]	@ (8007150 <xTimerCreateTimerTask+0x8c>)
 8007108:	f7fe fe50 	bl	8005dac <xTaskCreateStatic>
 800710c:	4603      	mov	r3, r0
 800710e:	4a11      	ldr	r2, [pc, #68]	@ (8007154 <xTimerCreateTimerTask+0x90>)
 8007110:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007112:	4b10      	ldr	r3, [pc, #64]	@ (8007154 <xTimerCreateTimerTask+0x90>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d001      	beq.n	800711e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800711a:	2301      	movs	r3, #1
 800711c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d10b      	bne.n	800713c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007128:	f383 8811 	msr	BASEPRI, r3
 800712c:	f3bf 8f6f 	isb	sy
 8007130:	f3bf 8f4f 	dsb	sy
 8007134:	613b      	str	r3, [r7, #16]
}
 8007136:	bf00      	nop
 8007138:	bf00      	nop
 800713a:	e7fd      	b.n	8007138 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800713c:	697b      	ldr	r3, [r7, #20]
}
 800713e:	4618      	mov	r0, r3
 8007140:	3718      	adds	r7, #24
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	20000894 	.word	0x20000894
 800714c:	08009818 	.word	0x08009818
 8007150:	08007291 	.word	0x08007291
 8007154:	20000898 	.word	0x20000898

08007158 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b08a      	sub	sp, #40	@ 0x28
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	607a      	str	r2, [r7, #4]
 8007164:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007166:	2300      	movs	r3, #0
 8007168:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d10b      	bne.n	8007188 <xTimerGenericCommand+0x30>
	__asm volatile
 8007170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007174:	f383 8811 	msr	BASEPRI, r3
 8007178:	f3bf 8f6f 	isb	sy
 800717c:	f3bf 8f4f 	dsb	sy
 8007180:	623b      	str	r3, [r7, #32]
}
 8007182:	bf00      	nop
 8007184:	bf00      	nop
 8007186:	e7fd      	b.n	8007184 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007188:	4b19      	ldr	r3, [pc, #100]	@ (80071f0 <xTimerGenericCommand+0x98>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d02a      	beq.n	80071e6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	2b05      	cmp	r3, #5
 80071a0:	dc18      	bgt.n	80071d4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80071a2:	f7ff fd51 	bl	8006c48 <xTaskGetSchedulerState>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d109      	bne.n	80071c0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80071ac:	4b10      	ldr	r3, [pc, #64]	@ (80071f0 <xTimerGenericCommand+0x98>)
 80071ae:	6818      	ldr	r0, [r3, #0]
 80071b0:	f107 0110 	add.w	r1, r7, #16
 80071b4:	2300      	movs	r3, #0
 80071b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071b8:	f7fd ff8a 	bl	80050d0 <xQueueGenericSend>
 80071bc:	6278      	str	r0, [r7, #36]	@ 0x24
 80071be:	e012      	b.n	80071e6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80071c0:	4b0b      	ldr	r3, [pc, #44]	@ (80071f0 <xTimerGenericCommand+0x98>)
 80071c2:	6818      	ldr	r0, [r3, #0]
 80071c4:	f107 0110 	add.w	r1, r7, #16
 80071c8:	2300      	movs	r3, #0
 80071ca:	2200      	movs	r2, #0
 80071cc:	f7fd ff80 	bl	80050d0 <xQueueGenericSend>
 80071d0:	6278      	str	r0, [r7, #36]	@ 0x24
 80071d2:	e008      	b.n	80071e6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80071d4:	4b06      	ldr	r3, [pc, #24]	@ (80071f0 <xTimerGenericCommand+0x98>)
 80071d6:	6818      	ldr	r0, [r3, #0]
 80071d8:	f107 0110 	add.w	r1, r7, #16
 80071dc:	2300      	movs	r3, #0
 80071de:	683a      	ldr	r2, [r7, #0]
 80071e0:	f7fe f878 	bl	80052d4 <xQueueGenericSendFromISR>
 80071e4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80071e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3728      	adds	r7, #40	@ 0x28
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	20000894 	.word	0x20000894

080071f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b088      	sub	sp, #32
 80071f8:	af02      	add	r7, sp, #8
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071fe:	4b23      	ldr	r3, [pc, #140]	@ (800728c <prvProcessExpiredTimer+0x98>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	3304      	adds	r3, #4
 800720c:	4618      	mov	r0, r3
 800720e:	f7fd fda7 	bl	8004d60 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007218:	f003 0304 	and.w	r3, r3, #4
 800721c:	2b00      	cmp	r3, #0
 800721e:	d023      	beq.n	8007268 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	699a      	ldr	r2, [r3, #24]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	18d1      	adds	r1, r2, r3
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	683a      	ldr	r2, [r7, #0]
 800722c:	6978      	ldr	r0, [r7, #20]
 800722e:	f000 f8d5 	bl	80073dc <prvInsertTimerInActiveList>
 8007232:	4603      	mov	r3, r0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d020      	beq.n	800727a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007238:	2300      	movs	r3, #0
 800723a:	9300      	str	r3, [sp, #0]
 800723c:	2300      	movs	r3, #0
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	2100      	movs	r1, #0
 8007242:	6978      	ldr	r0, [r7, #20]
 8007244:	f7ff ff88 	bl	8007158 <xTimerGenericCommand>
 8007248:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d114      	bne.n	800727a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007254:	f383 8811 	msr	BASEPRI, r3
 8007258:	f3bf 8f6f 	isb	sy
 800725c:	f3bf 8f4f 	dsb	sy
 8007260:	60fb      	str	r3, [r7, #12]
}
 8007262:	bf00      	nop
 8007264:	bf00      	nop
 8007266:	e7fd      	b.n	8007264 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800726e:	f023 0301 	bic.w	r3, r3, #1
 8007272:	b2da      	uxtb	r2, r3
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	6a1b      	ldr	r3, [r3, #32]
 800727e:	6978      	ldr	r0, [r7, #20]
 8007280:	4798      	blx	r3
}
 8007282:	bf00      	nop
 8007284:	3718      	adds	r7, #24
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	2000088c 	.word	0x2000088c

08007290 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007298:	f107 0308 	add.w	r3, r7, #8
 800729c:	4618      	mov	r0, r3
 800729e:	f000 f859 	bl	8007354 <prvGetNextExpireTime>
 80072a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	4619      	mov	r1, r3
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f000 f805 	bl	80072b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80072ae:	f000 f8d7 	bl	8007460 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80072b2:	bf00      	nop
 80072b4:	e7f0      	b.n	8007298 <prvTimerTask+0x8>
	...

080072b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80072c2:	f7fe ffd1 	bl	8006268 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80072c6:	f107 0308 	add.w	r3, r7, #8
 80072ca:	4618      	mov	r0, r3
 80072cc:	f000 f866 	bl	800739c <prvSampleTimeNow>
 80072d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d130      	bne.n	800733a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d10a      	bne.n	80072f4 <prvProcessTimerOrBlockTask+0x3c>
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d806      	bhi.n	80072f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80072e6:	f7fe ffcd 	bl	8006284 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80072ea:	68f9      	ldr	r1, [r7, #12]
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f7ff ff81 	bl	80071f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80072f2:	e024      	b.n	800733e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d008      	beq.n	800730c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80072fa:	4b13      	ldr	r3, [pc, #76]	@ (8007348 <prvProcessTimerOrBlockTask+0x90>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d101      	bne.n	8007308 <prvProcessTimerOrBlockTask+0x50>
 8007304:	2301      	movs	r3, #1
 8007306:	e000      	b.n	800730a <prvProcessTimerOrBlockTask+0x52>
 8007308:	2300      	movs	r3, #0
 800730a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800730c:	4b0f      	ldr	r3, [pc, #60]	@ (800734c <prvProcessTimerOrBlockTask+0x94>)
 800730e:	6818      	ldr	r0, [r3, #0]
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	1ad3      	subs	r3, r2, r3
 8007316:	683a      	ldr	r2, [r7, #0]
 8007318:	4619      	mov	r1, r3
 800731a:	f7fe fd13 	bl	8005d44 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800731e:	f7fe ffb1 	bl	8006284 <xTaskResumeAll>
 8007322:	4603      	mov	r3, r0
 8007324:	2b00      	cmp	r3, #0
 8007326:	d10a      	bne.n	800733e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007328:	4b09      	ldr	r3, [pc, #36]	@ (8007350 <prvProcessTimerOrBlockTask+0x98>)
 800732a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800732e:	601a      	str	r2, [r3, #0]
 8007330:	f3bf 8f4f 	dsb	sy
 8007334:	f3bf 8f6f 	isb	sy
}
 8007338:	e001      	b.n	800733e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800733a:	f7fe ffa3 	bl	8006284 <xTaskResumeAll>
}
 800733e:	bf00      	nop
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop
 8007348:	20000890 	.word	0x20000890
 800734c:	20000894 	.word	0x20000894
 8007350:	e000ed04 	.word	0xe000ed04

08007354 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007354:	b480      	push	{r7}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800735c:	4b0e      	ldr	r3, [pc, #56]	@ (8007398 <prvGetNextExpireTime+0x44>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d101      	bne.n	800736a <prvGetNextExpireTime+0x16>
 8007366:	2201      	movs	r2, #1
 8007368:	e000      	b.n	800736c <prvGetNextExpireTime+0x18>
 800736a:	2200      	movs	r2, #0
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d105      	bne.n	8007384 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007378:	4b07      	ldr	r3, [pc, #28]	@ (8007398 <prvGetNextExpireTime+0x44>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	60fb      	str	r3, [r7, #12]
 8007382:	e001      	b.n	8007388 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007384:	2300      	movs	r3, #0
 8007386:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007388:	68fb      	ldr	r3, [r7, #12]
}
 800738a:	4618      	mov	r0, r3
 800738c:	3714      	adds	r7, #20
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr
 8007396:	bf00      	nop
 8007398:	2000088c 	.word	0x2000088c

0800739c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80073a4:	f7ff f80c 	bl	80063c0 <xTaskGetTickCount>
 80073a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80073aa:	4b0b      	ldr	r3, [pc, #44]	@ (80073d8 <prvSampleTimeNow+0x3c>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68fa      	ldr	r2, [r7, #12]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d205      	bcs.n	80073c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80073b4:	f000 f93a 	bl	800762c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2201      	movs	r2, #1
 80073bc:	601a      	str	r2, [r3, #0]
 80073be:	e002      	b.n	80073c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80073c6:	4a04      	ldr	r2, [pc, #16]	@ (80073d8 <prvSampleTimeNow+0x3c>)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80073cc:	68fb      	ldr	r3, [r7, #12]
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	2000089c 	.word	0x2000089c

080073dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b086      	sub	sp, #24
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]
 80073e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80073ea:	2300      	movs	r3, #0
 80073ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	68ba      	ldr	r2, [r7, #8]
 80073f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	68fa      	ldr	r2, [r7, #12]
 80073f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80073fa:	68ba      	ldr	r2, [r7, #8]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	429a      	cmp	r2, r3
 8007400:	d812      	bhi.n	8007428 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	1ad2      	subs	r2, r2, r3
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	699b      	ldr	r3, [r3, #24]
 800740c:	429a      	cmp	r2, r3
 800740e:	d302      	bcc.n	8007416 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007410:	2301      	movs	r3, #1
 8007412:	617b      	str	r3, [r7, #20]
 8007414:	e01b      	b.n	800744e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007416:	4b10      	ldr	r3, [pc, #64]	@ (8007458 <prvInsertTimerInActiveList+0x7c>)
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	3304      	adds	r3, #4
 800741e:	4619      	mov	r1, r3
 8007420:	4610      	mov	r0, r2
 8007422:	f7fd fc64 	bl	8004cee <vListInsert>
 8007426:	e012      	b.n	800744e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	429a      	cmp	r2, r3
 800742e:	d206      	bcs.n	800743e <prvInsertTimerInActiveList+0x62>
 8007430:	68ba      	ldr	r2, [r7, #8]
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	429a      	cmp	r2, r3
 8007436:	d302      	bcc.n	800743e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007438:	2301      	movs	r3, #1
 800743a:	617b      	str	r3, [r7, #20]
 800743c:	e007      	b.n	800744e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800743e:	4b07      	ldr	r3, [pc, #28]	@ (800745c <prvInsertTimerInActiveList+0x80>)
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	3304      	adds	r3, #4
 8007446:	4619      	mov	r1, r3
 8007448:	4610      	mov	r0, r2
 800744a:	f7fd fc50 	bl	8004cee <vListInsert>
		}
	}

	return xProcessTimerNow;
 800744e:	697b      	ldr	r3, [r7, #20]
}
 8007450:	4618      	mov	r0, r3
 8007452:	3718      	adds	r7, #24
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	20000890 	.word	0x20000890
 800745c:	2000088c 	.word	0x2000088c

08007460 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b08e      	sub	sp, #56	@ 0x38
 8007464:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007466:	e0ce      	b.n	8007606 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2b00      	cmp	r3, #0
 800746c:	da19      	bge.n	80074a2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800746e:	1d3b      	adds	r3, r7, #4
 8007470:	3304      	adds	r3, #4
 8007472:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007476:	2b00      	cmp	r3, #0
 8007478:	d10b      	bne.n	8007492 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800747a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800747e:	f383 8811 	msr	BASEPRI, r3
 8007482:	f3bf 8f6f 	isb	sy
 8007486:	f3bf 8f4f 	dsb	sy
 800748a:	61fb      	str	r3, [r7, #28]
}
 800748c:	bf00      	nop
 800748e:	bf00      	nop
 8007490:	e7fd      	b.n	800748e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007498:	6850      	ldr	r0, [r2, #4]
 800749a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800749c:	6892      	ldr	r2, [r2, #8]
 800749e:	4611      	mov	r1, r2
 80074a0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	f2c0 80ae 	blt.w	8007606 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80074ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074b0:	695b      	ldr	r3, [r3, #20]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d004      	beq.n	80074c0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074b8:	3304      	adds	r3, #4
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7fd fc50 	bl	8004d60 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80074c0:	463b      	mov	r3, r7
 80074c2:	4618      	mov	r0, r3
 80074c4:	f7ff ff6a 	bl	800739c <prvSampleTimeNow>
 80074c8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2b09      	cmp	r3, #9
 80074ce:	f200 8097 	bhi.w	8007600 <prvProcessReceivedCommands+0x1a0>
 80074d2:	a201      	add	r2, pc, #4	@ (adr r2, 80074d8 <prvProcessReceivedCommands+0x78>)
 80074d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d8:	08007501 	.word	0x08007501
 80074dc:	08007501 	.word	0x08007501
 80074e0:	08007501 	.word	0x08007501
 80074e4:	08007577 	.word	0x08007577
 80074e8:	0800758b 	.word	0x0800758b
 80074ec:	080075d7 	.word	0x080075d7
 80074f0:	08007501 	.word	0x08007501
 80074f4:	08007501 	.word	0x08007501
 80074f8:	08007577 	.word	0x08007577
 80074fc:	0800758b 	.word	0x0800758b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007502:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007506:	f043 0301 	orr.w	r3, r3, #1
 800750a:	b2da      	uxtb	r2, r3
 800750c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800750e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007512:	68ba      	ldr	r2, [r7, #8]
 8007514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007516:	699b      	ldr	r3, [r3, #24]
 8007518:	18d1      	adds	r1, r2, r3
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800751e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007520:	f7ff ff5c 	bl	80073dc <prvInsertTimerInActiveList>
 8007524:	4603      	mov	r3, r0
 8007526:	2b00      	cmp	r3, #0
 8007528:	d06c      	beq.n	8007604 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800752a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800752c:	6a1b      	ldr	r3, [r3, #32]
 800752e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007530:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007534:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007538:	f003 0304 	and.w	r3, r3, #4
 800753c:	2b00      	cmp	r3, #0
 800753e:	d061      	beq.n	8007604 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007540:	68ba      	ldr	r2, [r7, #8]
 8007542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007544:	699b      	ldr	r3, [r3, #24]
 8007546:	441a      	add	r2, r3
 8007548:	2300      	movs	r3, #0
 800754a:	9300      	str	r3, [sp, #0]
 800754c:	2300      	movs	r3, #0
 800754e:	2100      	movs	r1, #0
 8007550:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007552:	f7ff fe01 	bl	8007158 <xTimerGenericCommand>
 8007556:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007558:	6a3b      	ldr	r3, [r7, #32]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d152      	bne.n	8007604 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800755e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007562:	f383 8811 	msr	BASEPRI, r3
 8007566:	f3bf 8f6f 	isb	sy
 800756a:	f3bf 8f4f 	dsb	sy
 800756e:	61bb      	str	r3, [r7, #24]
}
 8007570:	bf00      	nop
 8007572:	bf00      	nop
 8007574:	e7fd      	b.n	8007572 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007578:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800757c:	f023 0301 	bic.w	r3, r3, #1
 8007580:	b2da      	uxtb	r2, r3
 8007582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007584:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8007588:	e03d      	b.n	8007606 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800758a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800758c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007590:	f043 0301 	orr.w	r3, r3, #1
 8007594:	b2da      	uxtb	r2, r3
 8007596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007598:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075a0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80075a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075a4:	699b      	ldr	r3, [r3, #24]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d10b      	bne.n	80075c2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80075aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ae:	f383 8811 	msr	BASEPRI, r3
 80075b2:	f3bf 8f6f 	isb	sy
 80075b6:	f3bf 8f4f 	dsb	sy
 80075ba:	617b      	str	r3, [r7, #20]
}
 80075bc:	bf00      	nop
 80075be:	bf00      	nop
 80075c0:	e7fd      	b.n	80075be <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80075c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075c4:	699a      	ldr	r2, [r3, #24]
 80075c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c8:	18d1      	adds	r1, r2, r3
 80075ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075d0:	f7ff ff04 	bl	80073dc <prvInsertTimerInActiveList>
					break;
 80075d4:	e017      	b.n	8007606 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80075d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075d8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80075dc:	f003 0302 	and.w	r3, r3, #2
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d103      	bne.n	80075ec <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80075e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075e6:	f000 fc0d 	bl	8007e04 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80075ea:	e00c      	b.n	8007606 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80075ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80075f2:	f023 0301 	bic.w	r3, r3, #1
 80075f6:	b2da      	uxtb	r2, r3
 80075f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 80075fe:	e002      	b.n	8007606 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007600:	bf00      	nop
 8007602:	e000      	b.n	8007606 <prvProcessReceivedCommands+0x1a6>
					break;
 8007604:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007606:	4b08      	ldr	r3, [pc, #32]	@ (8007628 <prvProcessReceivedCommands+0x1c8>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	1d39      	adds	r1, r7, #4
 800760c:	2200      	movs	r2, #0
 800760e:	4618      	mov	r0, r3
 8007610:	f7fd ff8e 	bl	8005530 <xQueueReceive>
 8007614:	4603      	mov	r3, r0
 8007616:	2b00      	cmp	r3, #0
 8007618:	f47f af26 	bne.w	8007468 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800761c:	bf00      	nop
 800761e:	bf00      	nop
 8007620:	3730      	adds	r7, #48	@ 0x30
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	20000894 	.word	0x20000894

0800762c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b088      	sub	sp, #32
 8007630:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007632:	e049      	b.n	80076c8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007634:	4b2e      	ldr	r3, [pc, #184]	@ (80076f0 <prvSwitchTimerLists+0xc4>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800763e:	4b2c      	ldr	r3, [pc, #176]	@ (80076f0 <prvSwitchTimerLists+0xc4>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	3304      	adds	r3, #4
 800764c:	4618      	mov	r0, r3
 800764e:	f7fd fb87 	bl	8004d60 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	68f8      	ldr	r0, [r7, #12]
 8007658:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007660:	f003 0304 	and.w	r3, r3, #4
 8007664:	2b00      	cmp	r3, #0
 8007666:	d02f      	beq.n	80076c8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	699b      	ldr	r3, [r3, #24]
 800766c:	693a      	ldr	r2, [r7, #16]
 800766e:	4413      	add	r3, r2
 8007670:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007672:	68ba      	ldr	r2, [r7, #8]
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	429a      	cmp	r2, r3
 8007678:	d90e      	bls.n	8007698 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	68ba      	ldr	r2, [r7, #8]
 800767e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	68fa      	ldr	r2, [r7, #12]
 8007684:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007686:	4b1a      	ldr	r3, [pc, #104]	@ (80076f0 <prvSwitchTimerLists+0xc4>)
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	3304      	adds	r3, #4
 800768e:	4619      	mov	r1, r3
 8007690:	4610      	mov	r0, r2
 8007692:	f7fd fb2c 	bl	8004cee <vListInsert>
 8007696:	e017      	b.n	80076c8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007698:	2300      	movs	r3, #0
 800769a:	9300      	str	r3, [sp, #0]
 800769c:	2300      	movs	r3, #0
 800769e:	693a      	ldr	r2, [r7, #16]
 80076a0:	2100      	movs	r1, #0
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	f7ff fd58 	bl	8007158 <xTimerGenericCommand>
 80076a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d10b      	bne.n	80076c8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80076b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076b4:	f383 8811 	msr	BASEPRI, r3
 80076b8:	f3bf 8f6f 	isb	sy
 80076bc:	f3bf 8f4f 	dsb	sy
 80076c0:	603b      	str	r3, [r7, #0]
}
 80076c2:	bf00      	nop
 80076c4:	bf00      	nop
 80076c6:	e7fd      	b.n	80076c4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80076c8:	4b09      	ldr	r3, [pc, #36]	@ (80076f0 <prvSwitchTimerLists+0xc4>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d1b0      	bne.n	8007634 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80076d2:	4b07      	ldr	r3, [pc, #28]	@ (80076f0 <prvSwitchTimerLists+0xc4>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80076d8:	4b06      	ldr	r3, [pc, #24]	@ (80076f4 <prvSwitchTimerLists+0xc8>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a04      	ldr	r2, [pc, #16]	@ (80076f0 <prvSwitchTimerLists+0xc4>)
 80076de:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80076e0:	4a04      	ldr	r2, [pc, #16]	@ (80076f4 <prvSwitchTimerLists+0xc8>)
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	6013      	str	r3, [r2, #0]
}
 80076e6:	bf00      	nop
 80076e8:	3718      	adds	r7, #24
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop
 80076f0:	2000088c 	.word	0x2000088c
 80076f4:	20000890 	.word	0x20000890

080076f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80076fe:	f000 f98b 	bl	8007a18 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007702:	4b15      	ldr	r3, [pc, #84]	@ (8007758 <prvCheckForValidListAndQueue+0x60>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d120      	bne.n	800774c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800770a:	4814      	ldr	r0, [pc, #80]	@ (800775c <prvCheckForValidListAndQueue+0x64>)
 800770c:	f7fd fa9e 	bl	8004c4c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007710:	4813      	ldr	r0, [pc, #76]	@ (8007760 <prvCheckForValidListAndQueue+0x68>)
 8007712:	f7fd fa9b 	bl	8004c4c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007716:	4b13      	ldr	r3, [pc, #76]	@ (8007764 <prvCheckForValidListAndQueue+0x6c>)
 8007718:	4a10      	ldr	r2, [pc, #64]	@ (800775c <prvCheckForValidListAndQueue+0x64>)
 800771a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800771c:	4b12      	ldr	r3, [pc, #72]	@ (8007768 <prvCheckForValidListAndQueue+0x70>)
 800771e:	4a10      	ldr	r2, [pc, #64]	@ (8007760 <prvCheckForValidListAndQueue+0x68>)
 8007720:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007722:	2300      	movs	r3, #0
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	4b11      	ldr	r3, [pc, #68]	@ (800776c <prvCheckForValidListAndQueue+0x74>)
 8007728:	4a11      	ldr	r2, [pc, #68]	@ (8007770 <prvCheckForValidListAndQueue+0x78>)
 800772a:	2110      	movs	r1, #16
 800772c:	200a      	movs	r0, #10
 800772e:	f7fd fbab 	bl	8004e88 <xQueueGenericCreateStatic>
 8007732:	4603      	mov	r3, r0
 8007734:	4a08      	ldr	r2, [pc, #32]	@ (8007758 <prvCheckForValidListAndQueue+0x60>)
 8007736:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007738:	4b07      	ldr	r3, [pc, #28]	@ (8007758 <prvCheckForValidListAndQueue+0x60>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d005      	beq.n	800774c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007740:	4b05      	ldr	r3, [pc, #20]	@ (8007758 <prvCheckForValidListAndQueue+0x60>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	490b      	ldr	r1, [pc, #44]	@ (8007774 <prvCheckForValidListAndQueue+0x7c>)
 8007746:	4618      	mov	r0, r3
 8007748:	f7fe fad2 	bl	8005cf0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800774c:	f000 f996 	bl	8007a7c <vPortExitCritical>
}
 8007750:	bf00      	nop
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	20000894 	.word	0x20000894
 800775c:	20000864 	.word	0x20000864
 8007760:	20000878 	.word	0x20000878
 8007764:	2000088c 	.word	0x2000088c
 8007768:	20000890 	.word	0x20000890
 800776c:	20000940 	.word	0x20000940
 8007770:	200008a0 	.word	0x200008a0
 8007774:	08009820 	.word	0x08009820

08007778 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007778:	b580      	push	{r7, lr}
 800777a:	b08a      	sub	sp, #40	@ 0x28
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	607a      	str	r2, [r7, #4]
 8007784:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8007786:	f06f 0301 	mvn.w	r3, #1
 800778a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007798:	4b06      	ldr	r3, [pc, #24]	@ (80077b4 <xTimerPendFunctionCallFromISR+0x3c>)
 800779a:	6818      	ldr	r0, [r3, #0]
 800779c:	f107 0114 	add.w	r1, r7, #20
 80077a0:	2300      	movs	r3, #0
 80077a2:	683a      	ldr	r2, [r7, #0]
 80077a4:	f7fd fd96 	bl	80052d4 <xQueueGenericSendFromISR>
 80077a8:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80077aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3728      	adds	r7, #40	@ 0x28
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	20000894 	.word	0x20000894

080077b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80077b8:	b480      	push	{r7}
 80077ba:	b085      	sub	sp, #20
 80077bc:	af00      	add	r7, sp, #0
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	3b04      	subs	r3, #4
 80077c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80077d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	3b04      	subs	r3, #4
 80077d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	f023 0201 	bic.w	r2, r3, #1
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	3b04      	subs	r3, #4
 80077e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80077e8:	4a0c      	ldr	r2, [pc, #48]	@ (800781c <pxPortInitialiseStack+0x64>)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	3b14      	subs	r3, #20
 80077f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	3b04      	subs	r3, #4
 80077fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f06f 0202 	mvn.w	r2, #2
 8007806:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	3b20      	subs	r3, #32
 800780c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800780e:	68fb      	ldr	r3, [r7, #12]
}
 8007810:	4618      	mov	r0, r3
 8007812:	3714      	adds	r7, #20
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr
 800781c:	08007821 	.word	0x08007821

08007820 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007820:	b480      	push	{r7}
 8007822:	b085      	sub	sp, #20
 8007824:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007826:	2300      	movs	r3, #0
 8007828:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800782a:	4b13      	ldr	r3, [pc, #76]	@ (8007878 <prvTaskExitError+0x58>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007832:	d00b      	beq.n	800784c <prvTaskExitError+0x2c>
	__asm volatile
 8007834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007838:	f383 8811 	msr	BASEPRI, r3
 800783c:	f3bf 8f6f 	isb	sy
 8007840:	f3bf 8f4f 	dsb	sy
 8007844:	60fb      	str	r3, [r7, #12]
}
 8007846:	bf00      	nop
 8007848:	bf00      	nop
 800784a:	e7fd      	b.n	8007848 <prvTaskExitError+0x28>
	__asm volatile
 800784c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007850:	f383 8811 	msr	BASEPRI, r3
 8007854:	f3bf 8f6f 	isb	sy
 8007858:	f3bf 8f4f 	dsb	sy
 800785c:	60bb      	str	r3, [r7, #8]
}
 800785e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007860:	bf00      	nop
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d0fc      	beq.n	8007862 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007868:	bf00      	nop
 800786a:	bf00      	nop
 800786c:	3714      	adds	r7, #20
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	2000000c 	.word	0x2000000c
 800787c:	00000000 	.word	0x00000000

08007880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007880:	4b07      	ldr	r3, [pc, #28]	@ (80078a0 <pxCurrentTCBConst2>)
 8007882:	6819      	ldr	r1, [r3, #0]
 8007884:	6808      	ldr	r0, [r1, #0]
 8007886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800788a:	f380 8809 	msr	PSP, r0
 800788e:	f3bf 8f6f 	isb	sy
 8007892:	f04f 0000 	mov.w	r0, #0
 8007896:	f380 8811 	msr	BASEPRI, r0
 800789a:	4770      	bx	lr
 800789c:	f3af 8000 	nop.w

080078a0 <pxCurrentTCBConst2>:
 80078a0:	20000738 	.word	0x20000738
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80078a4:	bf00      	nop
 80078a6:	bf00      	nop

080078a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80078a8:	4808      	ldr	r0, [pc, #32]	@ (80078cc <prvPortStartFirstTask+0x24>)
 80078aa:	6800      	ldr	r0, [r0, #0]
 80078ac:	6800      	ldr	r0, [r0, #0]
 80078ae:	f380 8808 	msr	MSP, r0
 80078b2:	f04f 0000 	mov.w	r0, #0
 80078b6:	f380 8814 	msr	CONTROL, r0
 80078ba:	b662      	cpsie	i
 80078bc:	b661      	cpsie	f
 80078be:	f3bf 8f4f 	dsb	sy
 80078c2:	f3bf 8f6f 	isb	sy
 80078c6:	df00      	svc	0
 80078c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80078ca:	bf00      	nop
 80078cc:	e000ed08 	.word	0xe000ed08

080078d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b086      	sub	sp, #24
 80078d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80078d6:	4b47      	ldr	r3, [pc, #284]	@ (80079f4 <xPortStartScheduler+0x124>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a47      	ldr	r2, [pc, #284]	@ (80079f8 <xPortStartScheduler+0x128>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d10b      	bne.n	80078f8 <xPortStartScheduler+0x28>
	__asm volatile
 80078e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078e4:	f383 8811 	msr	BASEPRI, r3
 80078e8:	f3bf 8f6f 	isb	sy
 80078ec:	f3bf 8f4f 	dsb	sy
 80078f0:	613b      	str	r3, [r7, #16]
}
 80078f2:	bf00      	nop
 80078f4:	bf00      	nop
 80078f6:	e7fd      	b.n	80078f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80078f8:	4b3e      	ldr	r3, [pc, #248]	@ (80079f4 <xPortStartScheduler+0x124>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a3f      	ldr	r2, [pc, #252]	@ (80079fc <xPortStartScheduler+0x12c>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d10b      	bne.n	800791a <xPortStartScheduler+0x4a>
	__asm volatile
 8007902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007906:	f383 8811 	msr	BASEPRI, r3
 800790a:	f3bf 8f6f 	isb	sy
 800790e:	f3bf 8f4f 	dsb	sy
 8007912:	60fb      	str	r3, [r7, #12]
}
 8007914:	bf00      	nop
 8007916:	bf00      	nop
 8007918:	e7fd      	b.n	8007916 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800791a:	4b39      	ldr	r3, [pc, #228]	@ (8007a00 <xPortStartScheduler+0x130>)
 800791c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	b2db      	uxtb	r3, r3
 8007924:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	22ff      	movs	r2, #255	@ 0xff
 800792a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	b2db      	uxtb	r3, r3
 8007932:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007934:	78fb      	ldrb	r3, [r7, #3]
 8007936:	b2db      	uxtb	r3, r3
 8007938:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800793c:	b2da      	uxtb	r2, r3
 800793e:	4b31      	ldr	r3, [pc, #196]	@ (8007a04 <xPortStartScheduler+0x134>)
 8007940:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007942:	4b31      	ldr	r3, [pc, #196]	@ (8007a08 <xPortStartScheduler+0x138>)
 8007944:	2207      	movs	r2, #7
 8007946:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007948:	e009      	b.n	800795e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800794a:	4b2f      	ldr	r3, [pc, #188]	@ (8007a08 <xPortStartScheduler+0x138>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	3b01      	subs	r3, #1
 8007950:	4a2d      	ldr	r2, [pc, #180]	@ (8007a08 <xPortStartScheduler+0x138>)
 8007952:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007954:	78fb      	ldrb	r3, [r7, #3]
 8007956:	b2db      	uxtb	r3, r3
 8007958:	005b      	lsls	r3, r3, #1
 800795a:	b2db      	uxtb	r3, r3
 800795c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800795e:	78fb      	ldrb	r3, [r7, #3]
 8007960:	b2db      	uxtb	r3, r3
 8007962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007966:	2b80      	cmp	r3, #128	@ 0x80
 8007968:	d0ef      	beq.n	800794a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800796a:	4b27      	ldr	r3, [pc, #156]	@ (8007a08 <xPortStartScheduler+0x138>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f1c3 0307 	rsb	r3, r3, #7
 8007972:	2b04      	cmp	r3, #4
 8007974:	d00b      	beq.n	800798e <xPortStartScheduler+0xbe>
	__asm volatile
 8007976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800797a:	f383 8811 	msr	BASEPRI, r3
 800797e:	f3bf 8f6f 	isb	sy
 8007982:	f3bf 8f4f 	dsb	sy
 8007986:	60bb      	str	r3, [r7, #8]
}
 8007988:	bf00      	nop
 800798a:	bf00      	nop
 800798c:	e7fd      	b.n	800798a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800798e:	4b1e      	ldr	r3, [pc, #120]	@ (8007a08 <xPortStartScheduler+0x138>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	021b      	lsls	r3, r3, #8
 8007994:	4a1c      	ldr	r2, [pc, #112]	@ (8007a08 <xPortStartScheduler+0x138>)
 8007996:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007998:	4b1b      	ldr	r3, [pc, #108]	@ (8007a08 <xPortStartScheduler+0x138>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80079a0:	4a19      	ldr	r2, [pc, #100]	@ (8007a08 <xPortStartScheduler+0x138>)
 80079a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	b2da      	uxtb	r2, r3
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80079ac:	4b17      	ldr	r3, [pc, #92]	@ (8007a0c <xPortStartScheduler+0x13c>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a16      	ldr	r2, [pc, #88]	@ (8007a0c <xPortStartScheduler+0x13c>)
 80079b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80079b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80079b8:	4b14      	ldr	r3, [pc, #80]	@ (8007a0c <xPortStartScheduler+0x13c>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a13      	ldr	r2, [pc, #76]	@ (8007a0c <xPortStartScheduler+0x13c>)
 80079be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80079c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80079c4:	f000 f8da 	bl	8007b7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80079c8:	4b11      	ldr	r3, [pc, #68]	@ (8007a10 <xPortStartScheduler+0x140>)
 80079ca:	2200      	movs	r2, #0
 80079cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80079ce:	f000 f8f9 	bl	8007bc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80079d2:	4b10      	ldr	r3, [pc, #64]	@ (8007a14 <xPortStartScheduler+0x144>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a0f      	ldr	r2, [pc, #60]	@ (8007a14 <xPortStartScheduler+0x144>)
 80079d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80079dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80079de:	f7ff ff63 	bl	80078a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80079e2:	f7fe fdb7 	bl	8006554 <vTaskSwitchContext>
	prvTaskExitError();
 80079e6:	f7ff ff1b 	bl	8007820 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80079ea:	2300      	movs	r3, #0
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3718      	adds	r7, #24
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	e000ed00 	.word	0xe000ed00
 80079f8:	410fc271 	.word	0x410fc271
 80079fc:	410fc270 	.word	0x410fc270
 8007a00:	e000e400 	.word	0xe000e400
 8007a04:	20000988 	.word	0x20000988
 8007a08:	2000098c 	.word	0x2000098c
 8007a0c:	e000ed20 	.word	0xe000ed20
 8007a10:	2000000c 	.word	0x2000000c
 8007a14:	e000ef34 	.word	0xe000ef34

08007a18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a22:	f383 8811 	msr	BASEPRI, r3
 8007a26:	f3bf 8f6f 	isb	sy
 8007a2a:	f3bf 8f4f 	dsb	sy
 8007a2e:	607b      	str	r3, [r7, #4]
}
 8007a30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007a32:	4b10      	ldr	r3, [pc, #64]	@ (8007a74 <vPortEnterCritical+0x5c>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	3301      	adds	r3, #1
 8007a38:	4a0e      	ldr	r2, [pc, #56]	@ (8007a74 <vPortEnterCritical+0x5c>)
 8007a3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8007a74 <vPortEnterCritical+0x5c>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d110      	bne.n	8007a66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007a44:	4b0c      	ldr	r3, [pc, #48]	@ (8007a78 <vPortEnterCritical+0x60>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00b      	beq.n	8007a66 <vPortEnterCritical+0x4e>
	__asm volatile
 8007a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a52:	f383 8811 	msr	BASEPRI, r3
 8007a56:	f3bf 8f6f 	isb	sy
 8007a5a:	f3bf 8f4f 	dsb	sy
 8007a5e:	603b      	str	r3, [r7, #0]
}
 8007a60:	bf00      	nop
 8007a62:	bf00      	nop
 8007a64:	e7fd      	b.n	8007a62 <vPortEnterCritical+0x4a>
	}
}
 8007a66:	bf00      	nop
 8007a68:	370c      	adds	r7, #12
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr
 8007a72:	bf00      	nop
 8007a74:	2000000c 	.word	0x2000000c
 8007a78:	e000ed04 	.word	0xe000ed04

08007a7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007a82:	4b12      	ldr	r3, [pc, #72]	@ (8007acc <vPortExitCritical+0x50>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d10b      	bne.n	8007aa2 <vPortExitCritical+0x26>
	__asm volatile
 8007a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a8e:	f383 8811 	msr	BASEPRI, r3
 8007a92:	f3bf 8f6f 	isb	sy
 8007a96:	f3bf 8f4f 	dsb	sy
 8007a9a:	607b      	str	r3, [r7, #4]
}
 8007a9c:	bf00      	nop
 8007a9e:	bf00      	nop
 8007aa0:	e7fd      	b.n	8007a9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8007acc <vPortExitCritical+0x50>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	3b01      	subs	r3, #1
 8007aa8:	4a08      	ldr	r2, [pc, #32]	@ (8007acc <vPortExitCritical+0x50>)
 8007aaa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007aac:	4b07      	ldr	r3, [pc, #28]	@ (8007acc <vPortExitCritical+0x50>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d105      	bne.n	8007ac0 <vPortExitCritical+0x44>
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	f383 8811 	msr	BASEPRI, r3
}
 8007abe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007ac0:	bf00      	nop
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr
 8007acc:	2000000c 	.word	0x2000000c

08007ad0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007ad0:	f3ef 8009 	mrs	r0, PSP
 8007ad4:	f3bf 8f6f 	isb	sy
 8007ad8:	4b15      	ldr	r3, [pc, #84]	@ (8007b30 <pxCurrentTCBConst>)
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	f01e 0f10 	tst.w	lr, #16
 8007ae0:	bf08      	it	eq
 8007ae2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007ae6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aea:	6010      	str	r0, [r2, #0]
 8007aec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007af0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007af4:	f380 8811 	msr	BASEPRI, r0
 8007af8:	f3bf 8f4f 	dsb	sy
 8007afc:	f3bf 8f6f 	isb	sy
 8007b00:	f7fe fd28 	bl	8006554 <vTaskSwitchContext>
 8007b04:	f04f 0000 	mov.w	r0, #0
 8007b08:	f380 8811 	msr	BASEPRI, r0
 8007b0c:	bc09      	pop	{r0, r3}
 8007b0e:	6819      	ldr	r1, [r3, #0]
 8007b10:	6808      	ldr	r0, [r1, #0]
 8007b12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b16:	f01e 0f10 	tst.w	lr, #16
 8007b1a:	bf08      	it	eq
 8007b1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007b20:	f380 8809 	msr	PSP, r0
 8007b24:	f3bf 8f6f 	isb	sy
 8007b28:	4770      	bx	lr
 8007b2a:	bf00      	nop
 8007b2c:	f3af 8000 	nop.w

08007b30 <pxCurrentTCBConst>:
 8007b30:	20000738 	.word	0x20000738
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007b34:	bf00      	nop
 8007b36:	bf00      	nop

08007b38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b42:	f383 8811 	msr	BASEPRI, r3
 8007b46:	f3bf 8f6f 	isb	sy
 8007b4a:	f3bf 8f4f 	dsb	sy
 8007b4e:	607b      	str	r3, [r7, #4]
}
 8007b50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007b52:	f7fe fc45 	bl	80063e0 <xTaskIncrementTick>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d003      	beq.n	8007b64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007b5c:	4b06      	ldr	r3, [pc, #24]	@ (8007b78 <SysTick_Handler+0x40>)
 8007b5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b62:	601a      	str	r2, [r3, #0]
 8007b64:	2300      	movs	r3, #0
 8007b66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	f383 8811 	msr	BASEPRI, r3
}
 8007b6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007b70:	bf00      	nop
 8007b72:	3708      	adds	r7, #8
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	e000ed04 	.word	0xe000ed04

08007b7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007b80:	4b0b      	ldr	r3, [pc, #44]	@ (8007bb0 <vPortSetupTimerInterrupt+0x34>)
 8007b82:	2200      	movs	r2, #0
 8007b84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007b86:	4b0b      	ldr	r3, [pc, #44]	@ (8007bb4 <vPortSetupTimerInterrupt+0x38>)
 8007b88:	2200      	movs	r2, #0
 8007b8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8007bb8 <vPortSetupTimerInterrupt+0x3c>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a0a      	ldr	r2, [pc, #40]	@ (8007bbc <vPortSetupTimerInterrupt+0x40>)
 8007b92:	fba2 2303 	umull	r2, r3, r2, r3
 8007b96:	099b      	lsrs	r3, r3, #6
 8007b98:	4a09      	ldr	r2, [pc, #36]	@ (8007bc0 <vPortSetupTimerInterrupt+0x44>)
 8007b9a:	3b01      	subs	r3, #1
 8007b9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007b9e:	4b04      	ldr	r3, [pc, #16]	@ (8007bb0 <vPortSetupTimerInterrupt+0x34>)
 8007ba0:	2207      	movs	r2, #7
 8007ba2:	601a      	str	r2, [r3, #0]
}
 8007ba4:	bf00      	nop
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr
 8007bae:	bf00      	nop
 8007bb0:	e000e010 	.word	0xe000e010
 8007bb4:	e000e018 	.word	0xe000e018
 8007bb8:	20000000 	.word	0x20000000
 8007bbc:	10624dd3 	.word	0x10624dd3
 8007bc0:	e000e014 	.word	0xe000e014

08007bc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007bc4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007bd4 <vPortEnableVFP+0x10>
 8007bc8:	6801      	ldr	r1, [r0, #0]
 8007bca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007bce:	6001      	str	r1, [r0, #0]
 8007bd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007bd2:	bf00      	nop
 8007bd4:	e000ed88 	.word	0xe000ed88

08007bd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007bd8:	b480      	push	{r7}
 8007bda:	b085      	sub	sp, #20
 8007bdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007bde:	f3ef 8305 	mrs	r3, IPSR
 8007be2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2b0f      	cmp	r3, #15
 8007be8:	d915      	bls.n	8007c16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007bea:	4a18      	ldr	r2, [pc, #96]	@ (8007c4c <vPortValidateInterruptPriority+0x74>)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	4413      	add	r3, r2
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007bf4:	4b16      	ldr	r3, [pc, #88]	@ (8007c50 <vPortValidateInterruptPriority+0x78>)
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	7afa      	ldrb	r2, [r7, #11]
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d20b      	bcs.n	8007c16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c02:	f383 8811 	msr	BASEPRI, r3
 8007c06:	f3bf 8f6f 	isb	sy
 8007c0a:	f3bf 8f4f 	dsb	sy
 8007c0e:	607b      	str	r3, [r7, #4]
}
 8007c10:	bf00      	nop
 8007c12:	bf00      	nop
 8007c14:	e7fd      	b.n	8007c12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007c16:	4b0f      	ldr	r3, [pc, #60]	@ (8007c54 <vPortValidateInterruptPriority+0x7c>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8007c58 <vPortValidateInterruptPriority+0x80>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d90b      	bls.n	8007c3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c2a:	f383 8811 	msr	BASEPRI, r3
 8007c2e:	f3bf 8f6f 	isb	sy
 8007c32:	f3bf 8f4f 	dsb	sy
 8007c36:	603b      	str	r3, [r7, #0]
}
 8007c38:	bf00      	nop
 8007c3a:	bf00      	nop
 8007c3c:	e7fd      	b.n	8007c3a <vPortValidateInterruptPriority+0x62>
	}
 8007c3e:	bf00      	nop
 8007c40:	3714      	adds	r7, #20
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	e000e3f0 	.word	0xe000e3f0
 8007c50:	20000988 	.word	0x20000988
 8007c54:	e000ed0c 	.word	0xe000ed0c
 8007c58:	2000098c 	.word	0x2000098c

08007c5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b08a      	sub	sp, #40	@ 0x28
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007c64:	2300      	movs	r3, #0
 8007c66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007c68:	f7fe fafe 	bl	8006268 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007c6c:	4b5f      	ldr	r3, [pc, #380]	@ (8007dec <pvPortMalloc+0x190>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d101      	bne.n	8007c78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007c74:	f000 f942 	bl	8007efc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007c78:	4b5d      	ldr	r3, [pc, #372]	@ (8007df0 <pvPortMalloc+0x194>)
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4013      	ands	r3, r2
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f040 8095 	bne.w	8007db0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d01e      	beq.n	8007cca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007c8c:	2208      	movs	r2, #8
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4413      	add	r3, r2
 8007c92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f003 0307 	and.w	r3, r3, #7
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d015      	beq.n	8007cca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f023 0307 	bic.w	r3, r3, #7
 8007ca4:	3308      	adds	r3, #8
 8007ca6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f003 0307 	and.w	r3, r3, #7
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00b      	beq.n	8007cca <pvPortMalloc+0x6e>
	__asm volatile
 8007cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cb6:	f383 8811 	msr	BASEPRI, r3
 8007cba:	f3bf 8f6f 	isb	sy
 8007cbe:	f3bf 8f4f 	dsb	sy
 8007cc2:	617b      	str	r3, [r7, #20]
}
 8007cc4:	bf00      	nop
 8007cc6:	bf00      	nop
 8007cc8:	e7fd      	b.n	8007cc6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d06f      	beq.n	8007db0 <pvPortMalloc+0x154>
 8007cd0:	4b48      	ldr	r3, [pc, #288]	@ (8007df4 <pvPortMalloc+0x198>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d86a      	bhi.n	8007db0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007cda:	4b47      	ldr	r3, [pc, #284]	@ (8007df8 <pvPortMalloc+0x19c>)
 8007cdc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007cde:	4b46      	ldr	r3, [pc, #280]	@ (8007df8 <pvPortMalloc+0x19c>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ce4:	e004      	b.n	8007cf0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d903      	bls.n	8007d02 <pvPortMalloc+0xa6>
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d1f1      	bne.n	8007ce6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007d02:	4b3a      	ldr	r3, [pc, #232]	@ (8007dec <pvPortMalloc+0x190>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d051      	beq.n	8007db0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007d0c:	6a3b      	ldr	r3, [r7, #32]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	2208      	movs	r2, #8
 8007d12:	4413      	add	r3, r2
 8007d14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	6a3b      	ldr	r3, [r7, #32]
 8007d1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d20:	685a      	ldr	r2, [r3, #4]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	1ad2      	subs	r2, r2, r3
 8007d26:	2308      	movs	r3, #8
 8007d28:	005b      	lsls	r3, r3, #1
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d920      	bls.n	8007d70 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007d2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4413      	add	r3, r2
 8007d34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	f003 0307 	and.w	r3, r3, #7
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d00b      	beq.n	8007d58 <pvPortMalloc+0xfc>
	__asm volatile
 8007d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d44:	f383 8811 	msr	BASEPRI, r3
 8007d48:	f3bf 8f6f 	isb	sy
 8007d4c:	f3bf 8f4f 	dsb	sy
 8007d50:	613b      	str	r3, [r7, #16]
}
 8007d52:	bf00      	nop
 8007d54:	bf00      	nop
 8007d56:	e7fd      	b.n	8007d54 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d5a:	685a      	ldr	r2, [r3, #4]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	1ad2      	subs	r2, r2, r3
 8007d60:	69bb      	ldr	r3, [r7, #24]
 8007d62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007d6a:	69b8      	ldr	r0, [r7, #24]
 8007d6c:	f000 f928 	bl	8007fc0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007d70:	4b20      	ldr	r3, [pc, #128]	@ (8007df4 <pvPortMalloc+0x198>)
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	1ad3      	subs	r3, r2, r3
 8007d7a:	4a1e      	ldr	r2, [pc, #120]	@ (8007df4 <pvPortMalloc+0x198>)
 8007d7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007d7e:	4b1d      	ldr	r3, [pc, #116]	@ (8007df4 <pvPortMalloc+0x198>)
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	4b1e      	ldr	r3, [pc, #120]	@ (8007dfc <pvPortMalloc+0x1a0>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d203      	bcs.n	8007d92 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8007df4 <pvPortMalloc+0x198>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a1b      	ldr	r2, [pc, #108]	@ (8007dfc <pvPortMalloc+0x1a0>)
 8007d90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d94:	685a      	ldr	r2, [r3, #4]
 8007d96:	4b16      	ldr	r3, [pc, #88]	@ (8007df0 <pvPortMalloc+0x194>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	431a      	orrs	r2, r3
 8007d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da2:	2200      	movs	r2, #0
 8007da4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007da6:	4b16      	ldr	r3, [pc, #88]	@ (8007e00 <pvPortMalloc+0x1a4>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	3301      	adds	r3, #1
 8007dac:	4a14      	ldr	r2, [pc, #80]	@ (8007e00 <pvPortMalloc+0x1a4>)
 8007dae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007db0:	f7fe fa68 	bl	8006284 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d101      	bne.n	8007dbe <pvPortMalloc+0x162>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8007dba:	f7f8 fe81 	bl	8000ac0 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	f003 0307 	and.w	r3, r3, #7
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00b      	beq.n	8007de0 <pvPortMalloc+0x184>
	__asm volatile
 8007dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dcc:	f383 8811 	msr	BASEPRI, r3
 8007dd0:	f3bf 8f6f 	isb	sy
 8007dd4:	f3bf 8f4f 	dsb	sy
 8007dd8:	60fb      	str	r3, [r7, #12]
}
 8007dda:	bf00      	nop
 8007ddc:	bf00      	nop
 8007dde:	e7fd      	b.n	8007ddc <pvPortMalloc+0x180>
	return pvReturn;
 8007de0:	69fb      	ldr	r3, [r7, #28]
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3728      	adds	r7, #40	@ 0x28
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	20004598 	.word	0x20004598
 8007df0:	200045ac 	.word	0x200045ac
 8007df4:	2000459c 	.word	0x2000459c
 8007df8:	20004590 	.word	0x20004590
 8007dfc:	200045a0 	.word	0x200045a0
 8007e00:	200045a4 	.word	0x200045a4

08007e04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b086      	sub	sp, #24
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d04f      	beq.n	8007eb6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007e16:	2308      	movs	r3, #8
 8007e18:	425b      	negs	r3, r3
 8007e1a:	697a      	ldr	r2, [r7, #20]
 8007e1c:	4413      	add	r3, r2
 8007e1e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	685a      	ldr	r2, [r3, #4]
 8007e28:	4b25      	ldr	r3, [pc, #148]	@ (8007ec0 <vPortFree+0xbc>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4013      	ands	r3, r2
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d10b      	bne.n	8007e4a <vPortFree+0x46>
	__asm volatile
 8007e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e36:	f383 8811 	msr	BASEPRI, r3
 8007e3a:	f3bf 8f6f 	isb	sy
 8007e3e:	f3bf 8f4f 	dsb	sy
 8007e42:	60fb      	str	r3, [r7, #12]
}
 8007e44:	bf00      	nop
 8007e46:	bf00      	nop
 8007e48:	e7fd      	b.n	8007e46 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00b      	beq.n	8007e6a <vPortFree+0x66>
	__asm volatile
 8007e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e56:	f383 8811 	msr	BASEPRI, r3
 8007e5a:	f3bf 8f6f 	isb	sy
 8007e5e:	f3bf 8f4f 	dsb	sy
 8007e62:	60bb      	str	r3, [r7, #8]
}
 8007e64:	bf00      	nop
 8007e66:	bf00      	nop
 8007e68:	e7fd      	b.n	8007e66 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	685a      	ldr	r2, [r3, #4]
 8007e6e:	4b14      	ldr	r3, [pc, #80]	@ (8007ec0 <vPortFree+0xbc>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4013      	ands	r3, r2
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d01e      	beq.n	8007eb6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d11a      	bne.n	8007eb6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	685a      	ldr	r2, [r3, #4]
 8007e84:	4b0e      	ldr	r3, [pc, #56]	@ (8007ec0 <vPortFree+0xbc>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	43db      	mvns	r3, r3
 8007e8a:	401a      	ands	r2, r3
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007e90:	f7fe f9ea 	bl	8006268 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	685a      	ldr	r2, [r3, #4]
 8007e98:	4b0a      	ldr	r3, [pc, #40]	@ (8007ec4 <vPortFree+0xc0>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4413      	add	r3, r2
 8007e9e:	4a09      	ldr	r2, [pc, #36]	@ (8007ec4 <vPortFree+0xc0>)
 8007ea0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007ea2:	6938      	ldr	r0, [r7, #16]
 8007ea4:	f000 f88c 	bl	8007fc0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007ea8:	4b07      	ldr	r3, [pc, #28]	@ (8007ec8 <vPortFree+0xc4>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	3301      	adds	r3, #1
 8007eae:	4a06      	ldr	r2, [pc, #24]	@ (8007ec8 <vPortFree+0xc4>)
 8007eb0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007eb2:	f7fe f9e7 	bl	8006284 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007eb6:	bf00      	nop
 8007eb8:	3718      	adds	r7, #24
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	200045ac 	.word	0x200045ac
 8007ec4:	2000459c 	.word	0x2000459c
 8007ec8:	200045a8 	.word	0x200045a8

08007ecc <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8007ecc:	b480      	push	{r7}
 8007ece:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8007ed0:	4b03      	ldr	r3, [pc, #12]	@ (8007ee0 <xPortGetFreeHeapSize+0x14>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr
 8007ede:	bf00      	nop
 8007ee0:	2000459c 	.word	0x2000459c

08007ee4 <xPortGetMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	af00      	add	r7, sp, #0
	return xMinimumEverFreeBytesRemaining;
 8007ee8:	4b03      	ldr	r3, [pc, #12]	@ (8007ef8 <xPortGetMinimumEverFreeHeapSize+0x14>)
 8007eea:	681b      	ldr	r3, [r3, #0]
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr
 8007ef6:	bf00      	nop
 8007ef8:	200045a0 	.word	0x200045a0

08007efc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007efc:	b480      	push	{r7}
 8007efe:	b085      	sub	sp, #20
 8007f00:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007f02:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007f06:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007f08:	4b27      	ldr	r3, [pc, #156]	@ (8007fa8 <prvHeapInit+0xac>)
 8007f0a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f003 0307 	and.w	r3, r3, #7
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00c      	beq.n	8007f30 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	3307      	adds	r3, #7
 8007f1a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f023 0307 	bic.w	r3, r3, #7
 8007f22:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007f24:	68ba      	ldr	r2, [r7, #8]
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	1ad3      	subs	r3, r2, r3
 8007f2a:	4a1f      	ldr	r2, [pc, #124]	@ (8007fa8 <prvHeapInit+0xac>)
 8007f2c:	4413      	add	r3, r2
 8007f2e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f34:	4a1d      	ldr	r2, [pc, #116]	@ (8007fac <prvHeapInit+0xb0>)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007f3a:	4b1c      	ldr	r3, [pc, #112]	@ (8007fac <prvHeapInit+0xb0>)
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	68ba      	ldr	r2, [r7, #8]
 8007f44:	4413      	add	r3, r2
 8007f46:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007f48:	2208      	movs	r2, #8
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	1a9b      	subs	r3, r3, r2
 8007f4e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f023 0307 	bic.w	r3, r3, #7
 8007f56:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	4a15      	ldr	r2, [pc, #84]	@ (8007fb0 <prvHeapInit+0xb4>)
 8007f5c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007f5e:	4b14      	ldr	r3, [pc, #80]	@ (8007fb0 <prvHeapInit+0xb4>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	2200      	movs	r2, #0
 8007f64:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007f66:	4b12      	ldr	r3, [pc, #72]	@ (8007fb0 <prvHeapInit+0xb4>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	68fa      	ldr	r2, [r7, #12]
 8007f76:	1ad2      	subs	r2, r2, r3
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8007fb0 <prvHeapInit+0xb4>)
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	4a0a      	ldr	r2, [pc, #40]	@ (8007fb4 <prvHeapInit+0xb8>)
 8007f8a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	4a09      	ldr	r2, [pc, #36]	@ (8007fb8 <prvHeapInit+0xbc>)
 8007f92:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007f94:	4b09      	ldr	r3, [pc, #36]	@ (8007fbc <prvHeapInit+0xc0>)
 8007f96:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007f9a:	601a      	str	r2, [r3, #0]
}
 8007f9c:	bf00      	nop
 8007f9e:	3714      	adds	r7, #20
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr
 8007fa8:	20000990 	.word	0x20000990
 8007fac:	20004590 	.word	0x20004590
 8007fb0:	20004598 	.word	0x20004598
 8007fb4:	200045a0 	.word	0x200045a0
 8007fb8:	2000459c 	.word	0x2000459c
 8007fbc:	200045ac 	.word	0x200045ac

08007fc0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b085      	sub	sp, #20
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007fc8:	4b28      	ldr	r3, [pc, #160]	@ (800806c <prvInsertBlockIntoFreeList+0xac>)
 8007fca:	60fb      	str	r3, [r7, #12]
 8007fcc:	e002      	b.n	8007fd4 <prvInsertBlockIntoFreeList+0x14>
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	60fb      	str	r3, [r7, #12]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d8f7      	bhi.n	8007fce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	68ba      	ldr	r2, [r7, #8]
 8007fe8:	4413      	add	r3, r2
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d108      	bne.n	8008002 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	685a      	ldr	r2, [r3, #4]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	441a      	add	r2, r3
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	68ba      	ldr	r2, [r7, #8]
 800800c:	441a      	add	r2, r3
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	429a      	cmp	r2, r3
 8008014:	d118      	bne.n	8008048 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	4b15      	ldr	r3, [pc, #84]	@ (8008070 <prvInsertBlockIntoFreeList+0xb0>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	429a      	cmp	r2, r3
 8008020:	d00d      	beq.n	800803e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	685a      	ldr	r2, [r3, #4]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	441a      	add	r2, r3
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	601a      	str	r2, [r3, #0]
 800803c:	e008      	b.n	8008050 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800803e:	4b0c      	ldr	r3, [pc, #48]	@ (8008070 <prvInsertBlockIntoFreeList+0xb0>)
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	601a      	str	r2, [r3, #0]
 8008046:	e003      	b.n	8008050 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008050:	68fa      	ldr	r2, [r7, #12]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	429a      	cmp	r2, r3
 8008056:	d002      	beq.n	800805e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800805e:	bf00      	nop
 8008060:	3714      	adds	r7, #20
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop
 800806c:	20004590 	.word	0x20004590
 8008070:	20004598 	.word	0x20004598

08008074 <rand>:
 8008074:	4b16      	ldr	r3, [pc, #88]	@ (80080d0 <rand+0x5c>)
 8008076:	b510      	push	{r4, lr}
 8008078:	681c      	ldr	r4, [r3, #0]
 800807a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800807c:	b9b3      	cbnz	r3, 80080ac <rand+0x38>
 800807e:	2018      	movs	r0, #24
 8008080:	f000 faac 	bl	80085dc <malloc>
 8008084:	4602      	mov	r2, r0
 8008086:	6320      	str	r0, [r4, #48]	@ 0x30
 8008088:	b920      	cbnz	r0, 8008094 <rand+0x20>
 800808a:	4b12      	ldr	r3, [pc, #72]	@ (80080d4 <rand+0x60>)
 800808c:	4812      	ldr	r0, [pc, #72]	@ (80080d8 <rand+0x64>)
 800808e:	2152      	movs	r1, #82	@ 0x52
 8008090:	f000 fa3c 	bl	800850c <__assert_func>
 8008094:	4911      	ldr	r1, [pc, #68]	@ (80080dc <rand+0x68>)
 8008096:	4b12      	ldr	r3, [pc, #72]	@ (80080e0 <rand+0x6c>)
 8008098:	e9c0 1300 	strd	r1, r3, [r0]
 800809c:	4b11      	ldr	r3, [pc, #68]	@ (80080e4 <rand+0x70>)
 800809e:	6083      	str	r3, [r0, #8]
 80080a0:	230b      	movs	r3, #11
 80080a2:	8183      	strh	r3, [r0, #12]
 80080a4:	2100      	movs	r1, #0
 80080a6:	2001      	movs	r0, #1
 80080a8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80080ac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80080ae:	480e      	ldr	r0, [pc, #56]	@ (80080e8 <rand+0x74>)
 80080b0:	690b      	ldr	r3, [r1, #16]
 80080b2:	694c      	ldr	r4, [r1, #20]
 80080b4:	4a0d      	ldr	r2, [pc, #52]	@ (80080ec <rand+0x78>)
 80080b6:	4358      	muls	r0, r3
 80080b8:	fb02 0004 	mla	r0, r2, r4, r0
 80080bc:	fba3 3202 	umull	r3, r2, r3, r2
 80080c0:	3301      	adds	r3, #1
 80080c2:	eb40 0002 	adc.w	r0, r0, r2
 80080c6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80080ca:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80080ce:	bd10      	pop	{r4, pc}
 80080d0:	2000001c 	.word	0x2000001c
 80080d4:	08009840 	.word	0x08009840
 80080d8:	08009857 	.word	0x08009857
 80080dc:	abcd330e 	.word	0xabcd330e
 80080e0:	e66d1234 	.word	0xe66d1234
 80080e4:	0005deec 	.word	0x0005deec
 80080e8:	5851f42d 	.word	0x5851f42d
 80080ec:	4c957f2d 	.word	0x4c957f2d

080080f0 <std>:
 80080f0:	2300      	movs	r3, #0
 80080f2:	b510      	push	{r4, lr}
 80080f4:	4604      	mov	r4, r0
 80080f6:	e9c0 3300 	strd	r3, r3, [r0]
 80080fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80080fe:	6083      	str	r3, [r0, #8]
 8008100:	8181      	strh	r1, [r0, #12]
 8008102:	6643      	str	r3, [r0, #100]	@ 0x64
 8008104:	81c2      	strh	r2, [r0, #14]
 8008106:	6183      	str	r3, [r0, #24]
 8008108:	4619      	mov	r1, r3
 800810a:	2208      	movs	r2, #8
 800810c:	305c      	adds	r0, #92	@ 0x5c
 800810e:	f000 f914 	bl	800833a <memset>
 8008112:	4b0d      	ldr	r3, [pc, #52]	@ (8008148 <std+0x58>)
 8008114:	6263      	str	r3, [r4, #36]	@ 0x24
 8008116:	4b0d      	ldr	r3, [pc, #52]	@ (800814c <std+0x5c>)
 8008118:	62a3      	str	r3, [r4, #40]	@ 0x28
 800811a:	4b0d      	ldr	r3, [pc, #52]	@ (8008150 <std+0x60>)
 800811c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800811e:	4b0d      	ldr	r3, [pc, #52]	@ (8008154 <std+0x64>)
 8008120:	6323      	str	r3, [r4, #48]	@ 0x30
 8008122:	4b0d      	ldr	r3, [pc, #52]	@ (8008158 <std+0x68>)
 8008124:	6224      	str	r4, [r4, #32]
 8008126:	429c      	cmp	r4, r3
 8008128:	d006      	beq.n	8008138 <std+0x48>
 800812a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800812e:	4294      	cmp	r4, r2
 8008130:	d002      	beq.n	8008138 <std+0x48>
 8008132:	33d0      	adds	r3, #208	@ 0xd0
 8008134:	429c      	cmp	r4, r3
 8008136:	d105      	bne.n	8008144 <std+0x54>
 8008138:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800813c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008140:	f000 b9ca 	b.w	80084d8 <__retarget_lock_init_recursive>
 8008144:	bd10      	pop	{r4, pc}
 8008146:	bf00      	nop
 8008148:	080082b5 	.word	0x080082b5
 800814c:	080082d7 	.word	0x080082d7
 8008150:	0800830f 	.word	0x0800830f
 8008154:	08008333 	.word	0x08008333
 8008158:	200045b0 	.word	0x200045b0

0800815c <stdio_exit_handler>:
 800815c:	4a02      	ldr	r2, [pc, #8]	@ (8008168 <stdio_exit_handler+0xc>)
 800815e:	4903      	ldr	r1, [pc, #12]	@ (800816c <stdio_exit_handler+0x10>)
 8008160:	4803      	ldr	r0, [pc, #12]	@ (8008170 <stdio_exit_handler+0x14>)
 8008162:	f000 b869 	b.w	8008238 <_fwalk_sglue>
 8008166:	bf00      	nop
 8008168:	20000010 	.word	0x20000010
 800816c:	08008e1d 	.word	0x08008e1d
 8008170:	20000020 	.word	0x20000020

08008174 <cleanup_stdio>:
 8008174:	6841      	ldr	r1, [r0, #4]
 8008176:	4b0c      	ldr	r3, [pc, #48]	@ (80081a8 <cleanup_stdio+0x34>)
 8008178:	4299      	cmp	r1, r3
 800817a:	b510      	push	{r4, lr}
 800817c:	4604      	mov	r4, r0
 800817e:	d001      	beq.n	8008184 <cleanup_stdio+0x10>
 8008180:	f000 fe4c 	bl	8008e1c <_fflush_r>
 8008184:	68a1      	ldr	r1, [r4, #8]
 8008186:	4b09      	ldr	r3, [pc, #36]	@ (80081ac <cleanup_stdio+0x38>)
 8008188:	4299      	cmp	r1, r3
 800818a:	d002      	beq.n	8008192 <cleanup_stdio+0x1e>
 800818c:	4620      	mov	r0, r4
 800818e:	f000 fe45 	bl	8008e1c <_fflush_r>
 8008192:	68e1      	ldr	r1, [r4, #12]
 8008194:	4b06      	ldr	r3, [pc, #24]	@ (80081b0 <cleanup_stdio+0x3c>)
 8008196:	4299      	cmp	r1, r3
 8008198:	d004      	beq.n	80081a4 <cleanup_stdio+0x30>
 800819a:	4620      	mov	r0, r4
 800819c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081a0:	f000 be3c 	b.w	8008e1c <_fflush_r>
 80081a4:	bd10      	pop	{r4, pc}
 80081a6:	bf00      	nop
 80081a8:	200045b0 	.word	0x200045b0
 80081ac:	20004618 	.word	0x20004618
 80081b0:	20004680 	.word	0x20004680

080081b4 <global_stdio_init.part.0>:
 80081b4:	b510      	push	{r4, lr}
 80081b6:	4b0b      	ldr	r3, [pc, #44]	@ (80081e4 <global_stdio_init.part.0+0x30>)
 80081b8:	4c0b      	ldr	r4, [pc, #44]	@ (80081e8 <global_stdio_init.part.0+0x34>)
 80081ba:	4a0c      	ldr	r2, [pc, #48]	@ (80081ec <global_stdio_init.part.0+0x38>)
 80081bc:	601a      	str	r2, [r3, #0]
 80081be:	4620      	mov	r0, r4
 80081c0:	2200      	movs	r2, #0
 80081c2:	2104      	movs	r1, #4
 80081c4:	f7ff ff94 	bl	80080f0 <std>
 80081c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80081cc:	2201      	movs	r2, #1
 80081ce:	2109      	movs	r1, #9
 80081d0:	f7ff ff8e 	bl	80080f0 <std>
 80081d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80081d8:	2202      	movs	r2, #2
 80081da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081de:	2112      	movs	r1, #18
 80081e0:	f7ff bf86 	b.w	80080f0 <std>
 80081e4:	200046e8 	.word	0x200046e8
 80081e8:	200045b0 	.word	0x200045b0
 80081ec:	0800815d 	.word	0x0800815d

080081f0 <__sfp_lock_acquire>:
 80081f0:	4801      	ldr	r0, [pc, #4]	@ (80081f8 <__sfp_lock_acquire+0x8>)
 80081f2:	f000 b972 	b.w	80084da <__retarget_lock_acquire_recursive>
 80081f6:	bf00      	nop
 80081f8:	200046f1 	.word	0x200046f1

080081fc <__sfp_lock_release>:
 80081fc:	4801      	ldr	r0, [pc, #4]	@ (8008204 <__sfp_lock_release+0x8>)
 80081fe:	f000 b96d 	b.w	80084dc <__retarget_lock_release_recursive>
 8008202:	bf00      	nop
 8008204:	200046f1 	.word	0x200046f1

08008208 <__sinit>:
 8008208:	b510      	push	{r4, lr}
 800820a:	4604      	mov	r4, r0
 800820c:	f7ff fff0 	bl	80081f0 <__sfp_lock_acquire>
 8008210:	6a23      	ldr	r3, [r4, #32]
 8008212:	b11b      	cbz	r3, 800821c <__sinit+0x14>
 8008214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008218:	f7ff bff0 	b.w	80081fc <__sfp_lock_release>
 800821c:	4b04      	ldr	r3, [pc, #16]	@ (8008230 <__sinit+0x28>)
 800821e:	6223      	str	r3, [r4, #32]
 8008220:	4b04      	ldr	r3, [pc, #16]	@ (8008234 <__sinit+0x2c>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d1f5      	bne.n	8008214 <__sinit+0xc>
 8008228:	f7ff ffc4 	bl	80081b4 <global_stdio_init.part.0>
 800822c:	e7f2      	b.n	8008214 <__sinit+0xc>
 800822e:	bf00      	nop
 8008230:	08008175 	.word	0x08008175
 8008234:	200046e8 	.word	0x200046e8

08008238 <_fwalk_sglue>:
 8008238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800823c:	4607      	mov	r7, r0
 800823e:	4688      	mov	r8, r1
 8008240:	4614      	mov	r4, r2
 8008242:	2600      	movs	r6, #0
 8008244:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008248:	f1b9 0901 	subs.w	r9, r9, #1
 800824c:	d505      	bpl.n	800825a <_fwalk_sglue+0x22>
 800824e:	6824      	ldr	r4, [r4, #0]
 8008250:	2c00      	cmp	r4, #0
 8008252:	d1f7      	bne.n	8008244 <_fwalk_sglue+0xc>
 8008254:	4630      	mov	r0, r6
 8008256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800825a:	89ab      	ldrh	r3, [r5, #12]
 800825c:	2b01      	cmp	r3, #1
 800825e:	d907      	bls.n	8008270 <_fwalk_sglue+0x38>
 8008260:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008264:	3301      	adds	r3, #1
 8008266:	d003      	beq.n	8008270 <_fwalk_sglue+0x38>
 8008268:	4629      	mov	r1, r5
 800826a:	4638      	mov	r0, r7
 800826c:	47c0      	blx	r8
 800826e:	4306      	orrs	r6, r0
 8008270:	3568      	adds	r5, #104	@ 0x68
 8008272:	e7e9      	b.n	8008248 <_fwalk_sglue+0x10>

08008274 <siprintf>:
 8008274:	b40e      	push	{r1, r2, r3}
 8008276:	b500      	push	{lr}
 8008278:	b09c      	sub	sp, #112	@ 0x70
 800827a:	ab1d      	add	r3, sp, #116	@ 0x74
 800827c:	9002      	str	r0, [sp, #8]
 800827e:	9006      	str	r0, [sp, #24]
 8008280:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008284:	4809      	ldr	r0, [pc, #36]	@ (80082ac <siprintf+0x38>)
 8008286:	9107      	str	r1, [sp, #28]
 8008288:	9104      	str	r1, [sp, #16]
 800828a:	4909      	ldr	r1, [pc, #36]	@ (80082b0 <siprintf+0x3c>)
 800828c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008290:	9105      	str	r1, [sp, #20]
 8008292:	6800      	ldr	r0, [r0, #0]
 8008294:	9301      	str	r3, [sp, #4]
 8008296:	a902      	add	r1, sp, #8
 8008298:	f000 fab2 	bl	8008800 <_svfiprintf_r>
 800829c:	9b02      	ldr	r3, [sp, #8]
 800829e:	2200      	movs	r2, #0
 80082a0:	701a      	strb	r2, [r3, #0]
 80082a2:	b01c      	add	sp, #112	@ 0x70
 80082a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80082a8:	b003      	add	sp, #12
 80082aa:	4770      	bx	lr
 80082ac:	2000001c 	.word	0x2000001c
 80082b0:	ffff0208 	.word	0xffff0208

080082b4 <__sread>:
 80082b4:	b510      	push	{r4, lr}
 80082b6:	460c      	mov	r4, r1
 80082b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082bc:	f000 f8be 	bl	800843c <_read_r>
 80082c0:	2800      	cmp	r0, #0
 80082c2:	bfab      	itete	ge
 80082c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80082c6:	89a3      	ldrhlt	r3, [r4, #12]
 80082c8:	181b      	addge	r3, r3, r0
 80082ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80082ce:	bfac      	ite	ge
 80082d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80082d2:	81a3      	strhlt	r3, [r4, #12]
 80082d4:	bd10      	pop	{r4, pc}

080082d6 <__swrite>:
 80082d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082da:	461f      	mov	r7, r3
 80082dc:	898b      	ldrh	r3, [r1, #12]
 80082de:	05db      	lsls	r3, r3, #23
 80082e0:	4605      	mov	r5, r0
 80082e2:	460c      	mov	r4, r1
 80082e4:	4616      	mov	r6, r2
 80082e6:	d505      	bpl.n	80082f4 <__swrite+0x1e>
 80082e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082ec:	2302      	movs	r3, #2
 80082ee:	2200      	movs	r2, #0
 80082f0:	f000 f892 	bl	8008418 <_lseek_r>
 80082f4:	89a3      	ldrh	r3, [r4, #12]
 80082f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80082fe:	81a3      	strh	r3, [r4, #12]
 8008300:	4632      	mov	r2, r6
 8008302:	463b      	mov	r3, r7
 8008304:	4628      	mov	r0, r5
 8008306:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800830a:	f000 b8a9 	b.w	8008460 <_write_r>

0800830e <__sseek>:
 800830e:	b510      	push	{r4, lr}
 8008310:	460c      	mov	r4, r1
 8008312:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008316:	f000 f87f 	bl	8008418 <_lseek_r>
 800831a:	1c43      	adds	r3, r0, #1
 800831c:	89a3      	ldrh	r3, [r4, #12]
 800831e:	bf15      	itete	ne
 8008320:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008322:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008326:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800832a:	81a3      	strheq	r3, [r4, #12]
 800832c:	bf18      	it	ne
 800832e:	81a3      	strhne	r3, [r4, #12]
 8008330:	bd10      	pop	{r4, pc}

08008332 <__sclose>:
 8008332:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008336:	f000 b809 	b.w	800834c <_close_r>

0800833a <memset>:
 800833a:	4402      	add	r2, r0
 800833c:	4603      	mov	r3, r0
 800833e:	4293      	cmp	r3, r2
 8008340:	d100      	bne.n	8008344 <memset+0xa>
 8008342:	4770      	bx	lr
 8008344:	f803 1b01 	strb.w	r1, [r3], #1
 8008348:	e7f9      	b.n	800833e <memset+0x4>
	...

0800834c <_close_r>:
 800834c:	b538      	push	{r3, r4, r5, lr}
 800834e:	4d06      	ldr	r5, [pc, #24]	@ (8008368 <_close_r+0x1c>)
 8008350:	2300      	movs	r3, #0
 8008352:	4604      	mov	r4, r0
 8008354:	4608      	mov	r0, r1
 8008356:	602b      	str	r3, [r5, #0]
 8008358:	f7f9 f92c 	bl	80015b4 <_close>
 800835c:	1c43      	adds	r3, r0, #1
 800835e:	d102      	bne.n	8008366 <_close_r+0x1a>
 8008360:	682b      	ldr	r3, [r5, #0]
 8008362:	b103      	cbz	r3, 8008366 <_close_r+0x1a>
 8008364:	6023      	str	r3, [r4, #0]
 8008366:	bd38      	pop	{r3, r4, r5, pc}
 8008368:	200046ec 	.word	0x200046ec

0800836c <_reclaim_reent>:
 800836c:	4b29      	ldr	r3, [pc, #164]	@ (8008414 <_reclaim_reent+0xa8>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4283      	cmp	r3, r0
 8008372:	b570      	push	{r4, r5, r6, lr}
 8008374:	4604      	mov	r4, r0
 8008376:	d04b      	beq.n	8008410 <_reclaim_reent+0xa4>
 8008378:	69c3      	ldr	r3, [r0, #28]
 800837a:	b1ab      	cbz	r3, 80083a8 <_reclaim_reent+0x3c>
 800837c:	68db      	ldr	r3, [r3, #12]
 800837e:	b16b      	cbz	r3, 800839c <_reclaim_reent+0x30>
 8008380:	2500      	movs	r5, #0
 8008382:	69e3      	ldr	r3, [r4, #28]
 8008384:	68db      	ldr	r3, [r3, #12]
 8008386:	5959      	ldr	r1, [r3, r5]
 8008388:	2900      	cmp	r1, #0
 800838a:	d13b      	bne.n	8008404 <_reclaim_reent+0x98>
 800838c:	3504      	adds	r5, #4
 800838e:	2d80      	cmp	r5, #128	@ 0x80
 8008390:	d1f7      	bne.n	8008382 <_reclaim_reent+0x16>
 8008392:	69e3      	ldr	r3, [r4, #28]
 8008394:	4620      	mov	r0, r4
 8008396:	68d9      	ldr	r1, [r3, #12]
 8008398:	f000 f8d6 	bl	8008548 <_free_r>
 800839c:	69e3      	ldr	r3, [r4, #28]
 800839e:	6819      	ldr	r1, [r3, #0]
 80083a0:	b111      	cbz	r1, 80083a8 <_reclaim_reent+0x3c>
 80083a2:	4620      	mov	r0, r4
 80083a4:	f000 f8d0 	bl	8008548 <_free_r>
 80083a8:	6961      	ldr	r1, [r4, #20]
 80083aa:	b111      	cbz	r1, 80083b2 <_reclaim_reent+0x46>
 80083ac:	4620      	mov	r0, r4
 80083ae:	f000 f8cb 	bl	8008548 <_free_r>
 80083b2:	69e1      	ldr	r1, [r4, #28]
 80083b4:	b111      	cbz	r1, 80083bc <_reclaim_reent+0x50>
 80083b6:	4620      	mov	r0, r4
 80083b8:	f000 f8c6 	bl	8008548 <_free_r>
 80083bc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80083be:	b111      	cbz	r1, 80083c6 <_reclaim_reent+0x5a>
 80083c0:	4620      	mov	r0, r4
 80083c2:	f000 f8c1 	bl	8008548 <_free_r>
 80083c6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80083c8:	b111      	cbz	r1, 80083d0 <_reclaim_reent+0x64>
 80083ca:	4620      	mov	r0, r4
 80083cc:	f000 f8bc 	bl	8008548 <_free_r>
 80083d0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80083d2:	b111      	cbz	r1, 80083da <_reclaim_reent+0x6e>
 80083d4:	4620      	mov	r0, r4
 80083d6:	f000 f8b7 	bl	8008548 <_free_r>
 80083da:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80083dc:	b111      	cbz	r1, 80083e4 <_reclaim_reent+0x78>
 80083de:	4620      	mov	r0, r4
 80083e0:	f000 f8b2 	bl	8008548 <_free_r>
 80083e4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80083e6:	b111      	cbz	r1, 80083ee <_reclaim_reent+0x82>
 80083e8:	4620      	mov	r0, r4
 80083ea:	f000 f8ad 	bl	8008548 <_free_r>
 80083ee:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80083f0:	b111      	cbz	r1, 80083f8 <_reclaim_reent+0x8c>
 80083f2:	4620      	mov	r0, r4
 80083f4:	f000 f8a8 	bl	8008548 <_free_r>
 80083f8:	6a23      	ldr	r3, [r4, #32]
 80083fa:	b14b      	cbz	r3, 8008410 <_reclaim_reent+0xa4>
 80083fc:	4620      	mov	r0, r4
 80083fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008402:	4718      	bx	r3
 8008404:	680e      	ldr	r6, [r1, #0]
 8008406:	4620      	mov	r0, r4
 8008408:	f000 f89e 	bl	8008548 <_free_r>
 800840c:	4631      	mov	r1, r6
 800840e:	e7bb      	b.n	8008388 <_reclaim_reent+0x1c>
 8008410:	bd70      	pop	{r4, r5, r6, pc}
 8008412:	bf00      	nop
 8008414:	2000001c 	.word	0x2000001c

08008418 <_lseek_r>:
 8008418:	b538      	push	{r3, r4, r5, lr}
 800841a:	4d07      	ldr	r5, [pc, #28]	@ (8008438 <_lseek_r+0x20>)
 800841c:	4604      	mov	r4, r0
 800841e:	4608      	mov	r0, r1
 8008420:	4611      	mov	r1, r2
 8008422:	2200      	movs	r2, #0
 8008424:	602a      	str	r2, [r5, #0]
 8008426:	461a      	mov	r2, r3
 8008428:	f7f9 f8eb 	bl	8001602 <_lseek>
 800842c:	1c43      	adds	r3, r0, #1
 800842e:	d102      	bne.n	8008436 <_lseek_r+0x1e>
 8008430:	682b      	ldr	r3, [r5, #0]
 8008432:	b103      	cbz	r3, 8008436 <_lseek_r+0x1e>
 8008434:	6023      	str	r3, [r4, #0]
 8008436:	bd38      	pop	{r3, r4, r5, pc}
 8008438:	200046ec 	.word	0x200046ec

0800843c <_read_r>:
 800843c:	b538      	push	{r3, r4, r5, lr}
 800843e:	4d07      	ldr	r5, [pc, #28]	@ (800845c <_read_r+0x20>)
 8008440:	4604      	mov	r4, r0
 8008442:	4608      	mov	r0, r1
 8008444:	4611      	mov	r1, r2
 8008446:	2200      	movs	r2, #0
 8008448:	602a      	str	r2, [r5, #0]
 800844a:	461a      	mov	r2, r3
 800844c:	f7f9 f879 	bl	8001542 <_read>
 8008450:	1c43      	adds	r3, r0, #1
 8008452:	d102      	bne.n	800845a <_read_r+0x1e>
 8008454:	682b      	ldr	r3, [r5, #0]
 8008456:	b103      	cbz	r3, 800845a <_read_r+0x1e>
 8008458:	6023      	str	r3, [r4, #0]
 800845a:	bd38      	pop	{r3, r4, r5, pc}
 800845c:	200046ec 	.word	0x200046ec

08008460 <_write_r>:
 8008460:	b538      	push	{r3, r4, r5, lr}
 8008462:	4d07      	ldr	r5, [pc, #28]	@ (8008480 <_write_r+0x20>)
 8008464:	4604      	mov	r4, r0
 8008466:	4608      	mov	r0, r1
 8008468:	4611      	mov	r1, r2
 800846a:	2200      	movs	r2, #0
 800846c:	602a      	str	r2, [r5, #0]
 800846e:	461a      	mov	r2, r3
 8008470:	f7f9 f884 	bl	800157c <_write>
 8008474:	1c43      	adds	r3, r0, #1
 8008476:	d102      	bne.n	800847e <_write_r+0x1e>
 8008478:	682b      	ldr	r3, [r5, #0]
 800847a:	b103      	cbz	r3, 800847e <_write_r+0x1e>
 800847c:	6023      	str	r3, [r4, #0]
 800847e:	bd38      	pop	{r3, r4, r5, pc}
 8008480:	200046ec 	.word	0x200046ec

08008484 <__errno>:
 8008484:	4b01      	ldr	r3, [pc, #4]	@ (800848c <__errno+0x8>)
 8008486:	6818      	ldr	r0, [r3, #0]
 8008488:	4770      	bx	lr
 800848a:	bf00      	nop
 800848c:	2000001c 	.word	0x2000001c

08008490 <__libc_init_array>:
 8008490:	b570      	push	{r4, r5, r6, lr}
 8008492:	4d0d      	ldr	r5, [pc, #52]	@ (80084c8 <__libc_init_array+0x38>)
 8008494:	4c0d      	ldr	r4, [pc, #52]	@ (80084cc <__libc_init_array+0x3c>)
 8008496:	1b64      	subs	r4, r4, r5
 8008498:	10a4      	asrs	r4, r4, #2
 800849a:	2600      	movs	r6, #0
 800849c:	42a6      	cmp	r6, r4
 800849e:	d109      	bne.n	80084b4 <__libc_init_array+0x24>
 80084a0:	4d0b      	ldr	r5, [pc, #44]	@ (80084d0 <__libc_init_array+0x40>)
 80084a2:	4c0c      	ldr	r4, [pc, #48]	@ (80084d4 <__libc_init_array+0x44>)
 80084a4:	f000 fff8 	bl	8009498 <_init>
 80084a8:	1b64      	subs	r4, r4, r5
 80084aa:	10a4      	asrs	r4, r4, #2
 80084ac:	2600      	movs	r6, #0
 80084ae:	42a6      	cmp	r6, r4
 80084b0:	d105      	bne.n	80084be <__libc_init_array+0x2e>
 80084b2:	bd70      	pop	{r4, r5, r6, pc}
 80084b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80084b8:	4798      	blx	r3
 80084ba:	3601      	adds	r6, #1
 80084bc:	e7ee      	b.n	800849c <__libc_init_array+0xc>
 80084be:	f855 3b04 	ldr.w	r3, [r5], #4
 80084c2:	4798      	blx	r3
 80084c4:	3601      	adds	r6, #1
 80084c6:	e7f2      	b.n	80084ae <__libc_init_array+0x1e>
 80084c8:	08009928 	.word	0x08009928
 80084cc:	08009928 	.word	0x08009928
 80084d0:	08009928 	.word	0x08009928
 80084d4:	0800992c 	.word	0x0800992c

080084d8 <__retarget_lock_init_recursive>:
 80084d8:	4770      	bx	lr

080084da <__retarget_lock_acquire_recursive>:
 80084da:	4770      	bx	lr

080084dc <__retarget_lock_release_recursive>:
 80084dc:	4770      	bx	lr

080084de <strcpy>:
 80084de:	4603      	mov	r3, r0
 80084e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084e4:	f803 2b01 	strb.w	r2, [r3], #1
 80084e8:	2a00      	cmp	r2, #0
 80084ea:	d1f9      	bne.n	80084e0 <strcpy+0x2>
 80084ec:	4770      	bx	lr

080084ee <memcpy>:
 80084ee:	440a      	add	r2, r1
 80084f0:	4291      	cmp	r1, r2
 80084f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80084f6:	d100      	bne.n	80084fa <memcpy+0xc>
 80084f8:	4770      	bx	lr
 80084fa:	b510      	push	{r4, lr}
 80084fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008500:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008504:	4291      	cmp	r1, r2
 8008506:	d1f9      	bne.n	80084fc <memcpy+0xe>
 8008508:	bd10      	pop	{r4, pc}
	...

0800850c <__assert_func>:
 800850c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800850e:	4614      	mov	r4, r2
 8008510:	461a      	mov	r2, r3
 8008512:	4b09      	ldr	r3, [pc, #36]	@ (8008538 <__assert_func+0x2c>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4605      	mov	r5, r0
 8008518:	68d8      	ldr	r0, [r3, #12]
 800851a:	b954      	cbnz	r4, 8008532 <__assert_func+0x26>
 800851c:	4b07      	ldr	r3, [pc, #28]	@ (800853c <__assert_func+0x30>)
 800851e:	461c      	mov	r4, r3
 8008520:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008524:	9100      	str	r1, [sp, #0]
 8008526:	462b      	mov	r3, r5
 8008528:	4905      	ldr	r1, [pc, #20]	@ (8008540 <__assert_func+0x34>)
 800852a:	f000 fc9f 	bl	8008e6c <fiprintf>
 800852e:	f000 fcd9 	bl	8008ee4 <abort>
 8008532:	4b04      	ldr	r3, [pc, #16]	@ (8008544 <__assert_func+0x38>)
 8008534:	e7f4      	b.n	8008520 <__assert_func+0x14>
 8008536:	bf00      	nop
 8008538:	2000001c 	.word	0x2000001c
 800853c:	080098ea 	.word	0x080098ea
 8008540:	080098bc 	.word	0x080098bc
 8008544:	080098af 	.word	0x080098af

08008548 <_free_r>:
 8008548:	b538      	push	{r3, r4, r5, lr}
 800854a:	4605      	mov	r5, r0
 800854c:	2900      	cmp	r1, #0
 800854e:	d041      	beq.n	80085d4 <_free_r+0x8c>
 8008550:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008554:	1f0c      	subs	r4, r1, #4
 8008556:	2b00      	cmp	r3, #0
 8008558:	bfb8      	it	lt
 800855a:	18e4      	addlt	r4, r4, r3
 800855c:	f000 f8e8 	bl	8008730 <__malloc_lock>
 8008560:	4a1d      	ldr	r2, [pc, #116]	@ (80085d8 <_free_r+0x90>)
 8008562:	6813      	ldr	r3, [r2, #0]
 8008564:	b933      	cbnz	r3, 8008574 <_free_r+0x2c>
 8008566:	6063      	str	r3, [r4, #4]
 8008568:	6014      	str	r4, [r2, #0]
 800856a:	4628      	mov	r0, r5
 800856c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008570:	f000 b8e4 	b.w	800873c <__malloc_unlock>
 8008574:	42a3      	cmp	r3, r4
 8008576:	d908      	bls.n	800858a <_free_r+0x42>
 8008578:	6820      	ldr	r0, [r4, #0]
 800857a:	1821      	adds	r1, r4, r0
 800857c:	428b      	cmp	r3, r1
 800857e:	bf01      	itttt	eq
 8008580:	6819      	ldreq	r1, [r3, #0]
 8008582:	685b      	ldreq	r3, [r3, #4]
 8008584:	1809      	addeq	r1, r1, r0
 8008586:	6021      	streq	r1, [r4, #0]
 8008588:	e7ed      	b.n	8008566 <_free_r+0x1e>
 800858a:	461a      	mov	r2, r3
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	b10b      	cbz	r3, 8008594 <_free_r+0x4c>
 8008590:	42a3      	cmp	r3, r4
 8008592:	d9fa      	bls.n	800858a <_free_r+0x42>
 8008594:	6811      	ldr	r1, [r2, #0]
 8008596:	1850      	adds	r0, r2, r1
 8008598:	42a0      	cmp	r0, r4
 800859a:	d10b      	bne.n	80085b4 <_free_r+0x6c>
 800859c:	6820      	ldr	r0, [r4, #0]
 800859e:	4401      	add	r1, r0
 80085a0:	1850      	adds	r0, r2, r1
 80085a2:	4283      	cmp	r3, r0
 80085a4:	6011      	str	r1, [r2, #0]
 80085a6:	d1e0      	bne.n	800856a <_free_r+0x22>
 80085a8:	6818      	ldr	r0, [r3, #0]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	6053      	str	r3, [r2, #4]
 80085ae:	4408      	add	r0, r1
 80085b0:	6010      	str	r0, [r2, #0]
 80085b2:	e7da      	b.n	800856a <_free_r+0x22>
 80085b4:	d902      	bls.n	80085bc <_free_r+0x74>
 80085b6:	230c      	movs	r3, #12
 80085b8:	602b      	str	r3, [r5, #0]
 80085ba:	e7d6      	b.n	800856a <_free_r+0x22>
 80085bc:	6820      	ldr	r0, [r4, #0]
 80085be:	1821      	adds	r1, r4, r0
 80085c0:	428b      	cmp	r3, r1
 80085c2:	bf04      	itt	eq
 80085c4:	6819      	ldreq	r1, [r3, #0]
 80085c6:	685b      	ldreq	r3, [r3, #4]
 80085c8:	6063      	str	r3, [r4, #4]
 80085ca:	bf04      	itt	eq
 80085cc:	1809      	addeq	r1, r1, r0
 80085ce:	6021      	streq	r1, [r4, #0]
 80085d0:	6054      	str	r4, [r2, #4]
 80085d2:	e7ca      	b.n	800856a <_free_r+0x22>
 80085d4:	bd38      	pop	{r3, r4, r5, pc}
 80085d6:	bf00      	nop
 80085d8:	200046f8 	.word	0x200046f8

080085dc <malloc>:
 80085dc:	4b02      	ldr	r3, [pc, #8]	@ (80085e8 <malloc+0xc>)
 80085de:	4601      	mov	r1, r0
 80085e0:	6818      	ldr	r0, [r3, #0]
 80085e2:	f000 b825 	b.w	8008630 <_malloc_r>
 80085e6:	bf00      	nop
 80085e8:	2000001c 	.word	0x2000001c

080085ec <sbrk_aligned>:
 80085ec:	b570      	push	{r4, r5, r6, lr}
 80085ee:	4e0f      	ldr	r6, [pc, #60]	@ (800862c <sbrk_aligned+0x40>)
 80085f0:	460c      	mov	r4, r1
 80085f2:	6831      	ldr	r1, [r6, #0]
 80085f4:	4605      	mov	r5, r0
 80085f6:	b911      	cbnz	r1, 80085fe <sbrk_aligned+0x12>
 80085f8:	f000 fc64 	bl	8008ec4 <_sbrk_r>
 80085fc:	6030      	str	r0, [r6, #0]
 80085fe:	4621      	mov	r1, r4
 8008600:	4628      	mov	r0, r5
 8008602:	f000 fc5f 	bl	8008ec4 <_sbrk_r>
 8008606:	1c43      	adds	r3, r0, #1
 8008608:	d103      	bne.n	8008612 <sbrk_aligned+0x26>
 800860a:	f04f 34ff 	mov.w	r4, #4294967295
 800860e:	4620      	mov	r0, r4
 8008610:	bd70      	pop	{r4, r5, r6, pc}
 8008612:	1cc4      	adds	r4, r0, #3
 8008614:	f024 0403 	bic.w	r4, r4, #3
 8008618:	42a0      	cmp	r0, r4
 800861a:	d0f8      	beq.n	800860e <sbrk_aligned+0x22>
 800861c:	1a21      	subs	r1, r4, r0
 800861e:	4628      	mov	r0, r5
 8008620:	f000 fc50 	bl	8008ec4 <_sbrk_r>
 8008624:	3001      	adds	r0, #1
 8008626:	d1f2      	bne.n	800860e <sbrk_aligned+0x22>
 8008628:	e7ef      	b.n	800860a <sbrk_aligned+0x1e>
 800862a:	bf00      	nop
 800862c:	200046f4 	.word	0x200046f4

08008630 <_malloc_r>:
 8008630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008634:	1ccd      	adds	r5, r1, #3
 8008636:	f025 0503 	bic.w	r5, r5, #3
 800863a:	3508      	adds	r5, #8
 800863c:	2d0c      	cmp	r5, #12
 800863e:	bf38      	it	cc
 8008640:	250c      	movcc	r5, #12
 8008642:	2d00      	cmp	r5, #0
 8008644:	4606      	mov	r6, r0
 8008646:	db01      	blt.n	800864c <_malloc_r+0x1c>
 8008648:	42a9      	cmp	r1, r5
 800864a:	d904      	bls.n	8008656 <_malloc_r+0x26>
 800864c:	230c      	movs	r3, #12
 800864e:	6033      	str	r3, [r6, #0]
 8008650:	2000      	movs	r0, #0
 8008652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008656:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800872c <_malloc_r+0xfc>
 800865a:	f000 f869 	bl	8008730 <__malloc_lock>
 800865e:	f8d8 3000 	ldr.w	r3, [r8]
 8008662:	461c      	mov	r4, r3
 8008664:	bb44      	cbnz	r4, 80086b8 <_malloc_r+0x88>
 8008666:	4629      	mov	r1, r5
 8008668:	4630      	mov	r0, r6
 800866a:	f7ff ffbf 	bl	80085ec <sbrk_aligned>
 800866e:	1c43      	adds	r3, r0, #1
 8008670:	4604      	mov	r4, r0
 8008672:	d158      	bne.n	8008726 <_malloc_r+0xf6>
 8008674:	f8d8 4000 	ldr.w	r4, [r8]
 8008678:	4627      	mov	r7, r4
 800867a:	2f00      	cmp	r7, #0
 800867c:	d143      	bne.n	8008706 <_malloc_r+0xd6>
 800867e:	2c00      	cmp	r4, #0
 8008680:	d04b      	beq.n	800871a <_malloc_r+0xea>
 8008682:	6823      	ldr	r3, [r4, #0]
 8008684:	4639      	mov	r1, r7
 8008686:	4630      	mov	r0, r6
 8008688:	eb04 0903 	add.w	r9, r4, r3
 800868c:	f000 fc1a 	bl	8008ec4 <_sbrk_r>
 8008690:	4581      	cmp	r9, r0
 8008692:	d142      	bne.n	800871a <_malloc_r+0xea>
 8008694:	6821      	ldr	r1, [r4, #0]
 8008696:	1a6d      	subs	r5, r5, r1
 8008698:	4629      	mov	r1, r5
 800869a:	4630      	mov	r0, r6
 800869c:	f7ff ffa6 	bl	80085ec <sbrk_aligned>
 80086a0:	3001      	adds	r0, #1
 80086a2:	d03a      	beq.n	800871a <_malloc_r+0xea>
 80086a4:	6823      	ldr	r3, [r4, #0]
 80086a6:	442b      	add	r3, r5
 80086a8:	6023      	str	r3, [r4, #0]
 80086aa:	f8d8 3000 	ldr.w	r3, [r8]
 80086ae:	685a      	ldr	r2, [r3, #4]
 80086b0:	bb62      	cbnz	r2, 800870c <_malloc_r+0xdc>
 80086b2:	f8c8 7000 	str.w	r7, [r8]
 80086b6:	e00f      	b.n	80086d8 <_malloc_r+0xa8>
 80086b8:	6822      	ldr	r2, [r4, #0]
 80086ba:	1b52      	subs	r2, r2, r5
 80086bc:	d420      	bmi.n	8008700 <_malloc_r+0xd0>
 80086be:	2a0b      	cmp	r2, #11
 80086c0:	d917      	bls.n	80086f2 <_malloc_r+0xc2>
 80086c2:	1961      	adds	r1, r4, r5
 80086c4:	42a3      	cmp	r3, r4
 80086c6:	6025      	str	r5, [r4, #0]
 80086c8:	bf18      	it	ne
 80086ca:	6059      	strne	r1, [r3, #4]
 80086cc:	6863      	ldr	r3, [r4, #4]
 80086ce:	bf08      	it	eq
 80086d0:	f8c8 1000 	streq.w	r1, [r8]
 80086d4:	5162      	str	r2, [r4, r5]
 80086d6:	604b      	str	r3, [r1, #4]
 80086d8:	4630      	mov	r0, r6
 80086da:	f000 f82f 	bl	800873c <__malloc_unlock>
 80086de:	f104 000b 	add.w	r0, r4, #11
 80086e2:	1d23      	adds	r3, r4, #4
 80086e4:	f020 0007 	bic.w	r0, r0, #7
 80086e8:	1ac2      	subs	r2, r0, r3
 80086ea:	bf1c      	itt	ne
 80086ec:	1a1b      	subne	r3, r3, r0
 80086ee:	50a3      	strne	r3, [r4, r2]
 80086f0:	e7af      	b.n	8008652 <_malloc_r+0x22>
 80086f2:	6862      	ldr	r2, [r4, #4]
 80086f4:	42a3      	cmp	r3, r4
 80086f6:	bf0c      	ite	eq
 80086f8:	f8c8 2000 	streq.w	r2, [r8]
 80086fc:	605a      	strne	r2, [r3, #4]
 80086fe:	e7eb      	b.n	80086d8 <_malloc_r+0xa8>
 8008700:	4623      	mov	r3, r4
 8008702:	6864      	ldr	r4, [r4, #4]
 8008704:	e7ae      	b.n	8008664 <_malloc_r+0x34>
 8008706:	463c      	mov	r4, r7
 8008708:	687f      	ldr	r7, [r7, #4]
 800870a:	e7b6      	b.n	800867a <_malloc_r+0x4a>
 800870c:	461a      	mov	r2, r3
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	42a3      	cmp	r3, r4
 8008712:	d1fb      	bne.n	800870c <_malloc_r+0xdc>
 8008714:	2300      	movs	r3, #0
 8008716:	6053      	str	r3, [r2, #4]
 8008718:	e7de      	b.n	80086d8 <_malloc_r+0xa8>
 800871a:	230c      	movs	r3, #12
 800871c:	6033      	str	r3, [r6, #0]
 800871e:	4630      	mov	r0, r6
 8008720:	f000 f80c 	bl	800873c <__malloc_unlock>
 8008724:	e794      	b.n	8008650 <_malloc_r+0x20>
 8008726:	6005      	str	r5, [r0, #0]
 8008728:	e7d6      	b.n	80086d8 <_malloc_r+0xa8>
 800872a:	bf00      	nop
 800872c:	200046f8 	.word	0x200046f8

08008730 <__malloc_lock>:
 8008730:	4801      	ldr	r0, [pc, #4]	@ (8008738 <__malloc_lock+0x8>)
 8008732:	f7ff bed2 	b.w	80084da <__retarget_lock_acquire_recursive>
 8008736:	bf00      	nop
 8008738:	200046f0 	.word	0x200046f0

0800873c <__malloc_unlock>:
 800873c:	4801      	ldr	r0, [pc, #4]	@ (8008744 <__malloc_unlock+0x8>)
 800873e:	f7ff becd 	b.w	80084dc <__retarget_lock_release_recursive>
 8008742:	bf00      	nop
 8008744:	200046f0 	.word	0x200046f0

08008748 <__ssputs_r>:
 8008748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800874c:	688e      	ldr	r6, [r1, #8]
 800874e:	461f      	mov	r7, r3
 8008750:	42be      	cmp	r6, r7
 8008752:	680b      	ldr	r3, [r1, #0]
 8008754:	4682      	mov	sl, r0
 8008756:	460c      	mov	r4, r1
 8008758:	4690      	mov	r8, r2
 800875a:	d82d      	bhi.n	80087b8 <__ssputs_r+0x70>
 800875c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008760:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008764:	d026      	beq.n	80087b4 <__ssputs_r+0x6c>
 8008766:	6965      	ldr	r5, [r4, #20]
 8008768:	6909      	ldr	r1, [r1, #16]
 800876a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800876e:	eba3 0901 	sub.w	r9, r3, r1
 8008772:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008776:	1c7b      	adds	r3, r7, #1
 8008778:	444b      	add	r3, r9
 800877a:	106d      	asrs	r5, r5, #1
 800877c:	429d      	cmp	r5, r3
 800877e:	bf38      	it	cc
 8008780:	461d      	movcc	r5, r3
 8008782:	0553      	lsls	r3, r2, #21
 8008784:	d527      	bpl.n	80087d6 <__ssputs_r+0x8e>
 8008786:	4629      	mov	r1, r5
 8008788:	f7ff ff52 	bl	8008630 <_malloc_r>
 800878c:	4606      	mov	r6, r0
 800878e:	b360      	cbz	r0, 80087ea <__ssputs_r+0xa2>
 8008790:	6921      	ldr	r1, [r4, #16]
 8008792:	464a      	mov	r2, r9
 8008794:	f7ff feab 	bl	80084ee <memcpy>
 8008798:	89a3      	ldrh	r3, [r4, #12]
 800879a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800879e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087a2:	81a3      	strh	r3, [r4, #12]
 80087a4:	6126      	str	r6, [r4, #16]
 80087a6:	6165      	str	r5, [r4, #20]
 80087a8:	444e      	add	r6, r9
 80087aa:	eba5 0509 	sub.w	r5, r5, r9
 80087ae:	6026      	str	r6, [r4, #0]
 80087b0:	60a5      	str	r5, [r4, #8]
 80087b2:	463e      	mov	r6, r7
 80087b4:	42be      	cmp	r6, r7
 80087b6:	d900      	bls.n	80087ba <__ssputs_r+0x72>
 80087b8:	463e      	mov	r6, r7
 80087ba:	6820      	ldr	r0, [r4, #0]
 80087bc:	4632      	mov	r2, r6
 80087be:	4641      	mov	r1, r8
 80087c0:	f000 fb66 	bl	8008e90 <memmove>
 80087c4:	68a3      	ldr	r3, [r4, #8]
 80087c6:	1b9b      	subs	r3, r3, r6
 80087c8:	60a3      	str	r3, [r4, #8]
 80087ca:	6823      	ldr	r3, [r4, #0]
 80087cc:	4433      	add	r3, r6
 80087ce:	6023      	str	r3, [r4, #0]
 80087d0:	2000      	movs	r0, #0
 80087d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087d6:	462a      	mov	r2, r5
 80087d8:	f000 fb8b 	bl	8008ef2 <_realloc_r>
 80087dc:	4606      	mov	r6, r0
 80087de:	2800      	cmp	r0, #0
 80087e0:	d1e0      	bne.n	80087a4 <__ssputs_r+0x5c>
 80087e2:	6921      	ldr	r1, [r4, #16]
 80087e4:	4650      	mov	r0, sl
 80087e6:	f7ff feaf 	bl	8008548 <_free_r>
 80087ea:	230c      	movs	r3, #12
 80087ec:	f8ca 3000 	str.w	r3, [sl]
 80087f0:	89a3      	ldrh	r3, [r4, #12]
 80087f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087f6:	81a3      	strh	r3, [r4, #12]
 80087f8:	f04f 30ff 	mov.w	r0, #4294967295
 80087fc:	e7e9      	b.n	80087d2 <__ssputs_r+0x8a>
	...

08008800 <_svfiprintf_r>:
 8008800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008804:	4698      	mov	r8, r3
 8008806:	898b      	ldrh	r3, [r1, #12]
 8008808:	061b      	lsls	r3, r3, #24
 800880a:	b09d      	sub	sp, #116	@ 0x74
 800880c:	4607      	mov	r7, r0
 800880e:	460d      	mov	r5, r1
 8008810:	4614      	mov	r4, r2
 8008812:	d510      	bpl.n	8008836 <_svfiprintf_r+0x36>
 8008814:	690b      	ldr	r3, [r1, #16]
 8008816:	b973      	cbnz	r3, 8008836 <_svfiprintf_r+0x36>
 8008818:	2140      	movs	r1, #64	@ 0x40
 800881a:	f7ff ff09 	bl	8008630 <_malloc_r>
 800881e:	6028      	str	r0, [r5, #0]
 8008820:	6128      	str	r0, [r5, #16]
 8008822:	b930      	cbnz	r0, 8008832 <_svfiprintf_r+0x32>
 8008824:	230c      	movs	r3, #12
 8008826:	603b      	str	r3, [r7, #0]
 8008828:	f04f 30ff 	mov.w	r0, #4294967295
 800882c:	b01d      	add	sp, #116	@ 0x74
 800882e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008832:	2340      	movs	r3, #64	@ 0x40
 8008834:	616b      	str	r3, [r5, #20]
 8008836:	2300      	movs	r3, #0
 8008838:	9309      	str	r3, [sp, #36]	@ 0x24
 800883a:	2320      	movs	r3, #32
 800883c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008840:	f8cd 800c 	str.w	r8, [sp, #12]
 8008844:	2330      	movs	r3, #48	@ 0x30
 8008846:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80089e4 <_svfiprintf_r+0x1e4>
 800884a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800884e:	f04f 0901 	mov.w	r9, #1
 8008852:	4623      	mov	r3, r4
 8008854:	469a      	mov	sl, r3
 8008856:	f813 2b01 	ldrb.w	r2, [r3], #1
 800885a:	b10a      	cbz	r2, 8008860 <_svfiprintf_r+0x60>
 800885c:	2a25      	cmp	r2, #37	@ 0x25
 800885e:	d1f9      	bne.n	8008854 <_svfiprintf_r+0x54>
 8008860:	ebba 0b04 	subs.w	fp, sl, r4
 8008864:	d00b      	beq.n	800887e <_svfiprintf_r+0x7e>
 8008866:	465b      	mov	r3, fp
 8008868:	4622      	mov	r2, r4
 800886a:	4629      	mov	r1, r5
 800886c:	4638      	mov	r0, r7
 800886e:	f7ff ff6b 	bl	8008748 <__ssputs_r>
 8008872:	3001      	adds	r0, #1
 8008874:	f000 80a7 	beq.w	80089c6 <_svfiprintf_r+0x1c6>
 8008878:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800887a:	445a      	add	r2, fp
 800887c:	9209      	str	r2, [sp, #36]	@ 0x24
 800887e:	f89a 3000 	ldrb.w	r3, [sl]
 8008882:	2b00      	cmp	r3, #0
 8008884:	f000 809f 	beq.w	80089c6 <_svfiprintf_r+0x1c6>
 8008888:	2300      	movs	r3, #0
 800888a:	f04f 32ff 	mov.w	r2, #4294967295
 800888e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008892:	f10a 0a01 	add.w	sl, sl, #1
 8008896:	9304      	str	r3, [sp, #16]
 8008898:	9307      	str	r3, [sp, #28]
 800889a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800889e:	931a      	str	r3, [sp, #104]	@ 0x68
 80088a0:	4654      	mov	r4, sl
 80088a2:	2205      	movs	r2, #5
 80088a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088a8:	484e      	ldr	r0, [pc, #312]	@ (80089e4 <_svfiprintf_r+0x1e4>)
 80088aa:	f7f7 fca1 	bl	80001f0 <memchr>
 80088ae:	9a04      	ldr	r2, [sp, #16]
 80088b0:	b9d8      	cbnz	r0, 80088ea <_svfiprintf_r+0xea>
 80088b2:	06d0      	lsls	r0, r2, #27
 80088b4:	bf44      	itt	mi
 80088b6:	2320      	movmi	r3, #32
 80088b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088bc:	0711      	lsls	r1, r2, #28
 80088be:	bf44      	itt	mi
 80088c0:	232b      	movmi	r3, #43	@ 0x2b
 80088c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088c6:	f89a 3000 	ldrb.w	r3, [sl]
 80088ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80088cc:	d015      	beq.n	80088fa <_svfiprintf_r+0xfa>
 80088ce:	9a07      	ldr	r2, [sp, #28]
 80088d0:	4654      	mov	r4, sl
 80088d2:	2000      	movs	r0, #0
 80088d4:	f04f 0c0a 	mov.w	ip, #10
 80088d8:	4621      	mov	r1, r4
 80088da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088de:	3b30      	subs	r3, #48	@ 0x30
 80088e0:	2b09      	cmp	r3, #9
 80088e2:	d94b      	bls.n	800897c <_svfiprintf_r+0x17c>
 80088e4:	b1b0      	cbz	r0, 8008914 <_svfiprintf_r+0x114>
 80088e6:	9207      	str	r2, [sp, #28]
 80088e8:	e014      	b.n	8008914 <_svfiprintf_r+0x114>
 80088ea:	eba0 0308 	sub.w	r3, r0, r8
 80088ee:	fa09 f303 	lsl.w	r3, r9, r3
 80088f2:	4313      	orrs	r3, r2
 80088f4:	9304      	str	r3, [sp, #16]
 80088f6:	46a2      	mov	sl, r4
 80088f8:	e7d2      	b.n	80088a0 <_svfiprintf_r+0xa0>
 80088fa:	9b03      	ldr	r3, [sp, #12]
 80088fc:	1d19      	adds	r1, r3, #4
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	9103      	str	r1, [sp, #12]
 8008902:	2b00      	cmp	r3, #0
 8008904:	bfbb      	ittet	lt
 8008906:	425b      	neglt	r3, r3
 8008908:	f042 0202 	orrlt.w	r2, r2, #2
 800890c:	9307      	strge	r3, [sp, #28]
 800890e:	9307      	strlt	r3, [sp, #28]
 8008910:	bfb8      	it	lt
 8008912:	9204      	strlt	r2, [sp, #16]
 8008914:	7823      	ldrb	r3, [r4, #0]
 8008916:	2b2e      	cmp	r3, #46	@ 0x2e
 8008918:	d10a      	bne.n	8008930 <_svfiprintf_r+0x130>
 800891a:	7863      	ldrb	r3, [r4, #1]
 800891c:	2b2a      	cmp	r3, #42	@ 0x2a
 800891e:	d132      	bne.n	8008986 <_svfiprintf_r+0x186>
 8008920:	9b03      	ldr	r3, [sp, #12]
 8008922:	1d1a      	adds	r2, r3, #4
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	9203      	str	r2, [sp, #12]
 8008928:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800892c:	3402      	adds	r4, #2
 800892e:	9305      	str	r3, [sp, #20]
 8008930:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80089f4 <_svfiprintf_r+0x1f4>
 8008934:	7821      	ldrb	r1, [r4, #0]
 8008936:	2203      	movs	r2, #3
 8008938:	4650      	mov	r0, sl
 800893a:	f7f7 fc59 	bl	80001f0 <memchr>
 800893e:	b138      	cbz	r0, 8008950 <_svfiprintf_r+0x150>
 8008940:	9b04      	ldr	r3, [sp, #16]
 8008942:	eba0 000a 	sub.w	r0, r0, sl
 8008946:	2240      	movs	r2, #64	@ 0x40
 8008948:	4082      	lsls	r2, r0
 800894a:	4313      	orrs	r3, r2
 800894c:	3401      	adds	r4, #1
 800894e:	9304      	str	r3, [sp, #16]
 8008950:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008954:	4824      	ldr	r0, [pc, #144]	@ (80089e8 <_svfiprintf_r+0x1e8>)
 8008956:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800895a:	2206      	movs	r2, #6
 800895c:	f7f7 fc48 	bl	80001f0 <memchr>
 8008960:	2800      	cmp	r0, #0
 8008962:	d036      	beq.n	80089d2 <_svfiprintf_r+0x1d2>
 8008964:	4b21      	ldr	r3, [pc, #132]	@ (80089ec <_svfiprintf_r+0x1ec>)
 8008966:	bb1b      	cbnz	r3, 80089b0 <_svfiprintf_r+0x1b0>
 8008968:	9b03      	ldr	r3, [sp, #12]
 800896a:	3307      	adds	r3, #7
 800896c:	f023 0307 	bic.w	r3, r3, #7
 8008970:	3308      	adds	r3, #8
 8008972:	9303      	str	r3, [sp, #12]
 8008974:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008976:	4433      	add	r3, r6
 8008978:	9309      	str	r3, [sp, #36]	@ 0x24
 800897a:	e76a      	b.n	8008852 <_svfiprintf_r+0x52>
 800897c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008980:	460c      	mov	r4, r1
 8008982:	2001      	movs	r0, #1
 8008984:	e7a8      	b.n	80088d8 <_svfiprintf_r+0xd8>
 8008986:	2300      	movs	r3, #0
 8008988:	3401      	adds	r4, #1
 800898a:	9305      	str	r3, [sp, #20]
 800898c:	4619      	mov	r1, r3
 800898e:	f04f 0c0a 	mov.w	ip, #10
 8008992:	4620      	mov	r0, r4
 8008994:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008998:	3a30      	subs	r2, #48	@ 0x30
 800899a:	2a09      	cmp	r2, #9
 800899c:	d903      	bls.n	80089a6 <_svfiprintf_r+0x1a6>
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d0c6      	beq.n	8008930 <_svfiprintf_r+0x130>
 80089a2:	9105      	str	r1, [sp, #20]
 80089a4:	e7c4      	b.n	8008930 <_svfiprintf_r+0x130>
 80089a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80089aa:	4604      	mov	r4, r0
 80089ac:	2301      	movs	r3, #1
 80089ae:	e7f0      	b.n	8008992 <_svfiprintf_r+0x192>
 80089b0:	ab03      	add	r3, sp, #12
 80089b2:	9300      	str	r3, [sp, #0]
 80089b4:	462a      	mov	r2, r5
 80089b6:	4b0e      	ldr	r3, [pc, #56]	@ (80089f0 <_svfiprintf_r+0x1f0>)
 80089b8:	a904      	add	r1, sp, #16
 80089ba:	4638      	mov	r0, r7
 80089bc:	f3af 8000 	nop.w
 80089c0:	1c42      	adds	r2, r0, #1
 80089c2:	4606      	mov	r6, r0
 80089c4:	d1d6      	bne.n	8008974 <_svfiprintf_r+0x174>
 80089c6:	89ab      	ldrh	r3, [r5, #12]
 80089c8:	065b      	lsls	r3, r3, #25
 80089ca:	f53f af2d 	bmi.w	8008828 <_svfiprintf_r+0x28>
 80089ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80089d0:	e72c      	b.n	800882c <_svfiprintf_r+0x2c>
 80089d2:	ab03      	add	r3, sp, #12
 80089d4:	9300      	str	r3, [sp, #0]
 80089d6:	462a      	mov	r2, r5
 80089d8:	4b05      	ldr	r3, [pc, #20]	@ (80089f0 <_svfiprintf_r+0x1f0>)
 80089da:	a904      	add	r1, sp, #16
 80089dc:	4638      	mov	r0, r7
 80089de:	f000 f879 	bl	8008ad4 <_printf_i>
 80089e2:	e7ed      	b.n	80089c0 <_svfiprintf_r+0x1c0>
 80089e4:	080098eb 	.word	0x080098eb
 80089e8:	080098f5 	.word	0x080098f5
 80089ec:	00000000 	.word	0x00000000
 80089f0:	08008749 	.word	0x08008749
 80089f4:	080098f1 	.word	0x080098f1

080089f8 <_printf_common>:
 80089f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089fc:	4616      	mov	r6, r2
 80089fe:	4698      	mov	r8, r3
 8008a00:	688a      	ldr	r2, [r1, #8]
 8008a02:	690b      	ldr	r3, [r1, #16]
 8008a04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	bfb8      	it	lt
 8008a0c:	4613      	movlt	r3, r2
 8008a0e:	6033      	str	r3, [r6, #0]
 8008a10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008a14:	4607      	mov	r7, r0
 8008a16:	460c      	mov	r4, r1
 8008a18:	b10a      	cbz	r2, 8008a1e <_printf_common+0x26>
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	6033      	str	r3, [r6, #0]
 8008a1e:	6823      	ldr	r3, [r4, #0]
 8008a20:	0699      	lsls	r1, r3, #26
 8008a22:	bf42      	ittt	mi
 8008a24:	6833      	ldrmi	r3, [r6, #0]
 8008a26:	3302      	addmi	r3, #2
 8008a28:	6033      	strmi	r3, [r6, #0]
 8008a2a:	6825      	ldr	r5, [r4, #0]
 8008a2c:	f015 0506 	ands.w	r5, r5, #6
 8008a30:	d106      	bne.n	8008a40 <_printf_common+0x48>
 8008a32:	f104 0a19 	add.w	sl, r4, #25
 8008a36:	68e3      	ldr	r3, [r4, #12]
 8008a38:	6832      	ldr	r2, [r6, #0]
 8008a3a:	1a9b      	subs	r3, r3, r2
 8008a3c:	42ab      	cmp	r3, r5
 8008a3e:	dc26      	bgt.n	8008a8e <_printf_common+0x96>
 8008a40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008a44:	6822      	ldr	r2, [r4, #0]
 8008a46:	3b00      	subs	r3, #0
 8008a48:	bf18      	it	ne
 8008a4a:	2301      	movne	r3, #1
 8008a4c:	0692      	lsls	r2, r2, #26
 8008a4e:	d42b      	bmi.n	8008aa8 <_printf_common+0xb0>
 8008a50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008a54:	4641      	mov	r1, r8
 8008a56:	4638      	mov	r0, r7
 8008a58:	47c8      	blx	r9
 8008a5a:	3001      	adds	r0, #1
 8008a5c:	d01e      	beq.n	8008a9c <_printf_common+0xa4>
 8008a5e:	6823      	ldr	r3, [r4, #0]
 8008a60:	6922      	ldr	r2, [r4, #16]
 8008a62:	f003 0306 	and.w	r3, r3, #6
 8008a66:	2b04      	cmp	r3, #4
 8008a68:	bf02      	ittt	eq
 8008a6a:	68e5      	ldreq	r5, [r4, #12]
 8008a6c:	6833      	ldreq	r3, [r6, #0]
 8008a6e:	1aed      	subeq	r5, r5, r3
 8008a70:	68a3      	ldr	r3, [r4, #8]
 8008a72:	bf0c      	ite	eq
 8008a74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a78:	2500      	movne	r5, #0
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	bfc4      	itt	gt
 8008a7e:	1a9b      	subgt	r3, r3, r2
 8008a80:	18ed      	addgt	r5, r5, r3
 8008a82:	2600      	movs	r6, #0
 8008a84:	341a      	adds	r4, #26
 8008a86:	42b5      	cmp	r5, r6
 8008a88:	d11a      	bne.n	8008ac0 <_printf_common+0xc8>
 8008a8a:	2000      	movs	r0, #0
 8008a8c:	e008      	b.n	8008aa0 <_printf_common+0xa8>
 8008a8e:	2301      	movs	r3, #1
 8008a90:	4652      	mov	r2, sl
 8008a92:	4641      	mov	r1, r8
 8008a94:	4638      	mov	r0, r7
 8008a96:	47c8      	blx	r9
 8008a98:	3001      	adds	r0, #1
 8008a9a:	d103      	bne.n	8008aa4 <_printf_common+0xac>
 8008a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aa4:	3501      	adds	r5, #1
 8008aa6:	e7c6      	b.n	8008a36 <_printf_common+0x3e>
 8008aa8:	18e1      	adds	r1, r4, r3
 8008aaa:	1c5a      	adds	r2, r3, #1
 8008aac:	2030      	movs	r0, #48	@ 0x30
 8008aae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008ab2:	4422      	add	r2, r4
 8008ab4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008ab8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008abc:	3302      	adds	r3, #2
 8008abe:	e7c7      	b.n	8008a50 <_printf_common+0x58>
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	4622      	mov	r2, r4
 8008ac4:	4641      	mov	r1, r8
 8008ac6:	4638      	mov	r0, r7
 8008ac8:	47c8      	blx	r9
 8008aca:	3001      	adds	r0, #1
 8008acc:	d0e6      	beq.n	8008a9c <_printf_common+0xa4>
 8008ace:	3601      	adds	r6, #1
 8008ad0:	e7d9      	b.n	8008a86 <_printf_common+0x8e>
	...

08008ad4 <_printf_i>:
 8008ad4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ad8:	7e0f      	ldrb	r7, [r1, #24]
 8008ada:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008adc:	2f78      	cmp	r7, #120	@ 0x78
 8008ade:	4691      	mov	r9, r2
 8008ae0:	4680      	mov	r8, r0
 8008ae2:	460c      	mov	r4, r1
 8008ae4:	469a      	mov	sl, r3
 8008ae6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008aea:	d807      	bhi.n	8008afc <_printf_i+0x28>
 8008aec:	2f62      	cmp	r7, #98	@ 0x62
 8008aee:	d80a      	bhi.n	8008b06 <_printf_i+0x32>
 8008af0:	2f00      	cmp	r7, #0
 8008af2:	f000 80d2 	beq.w	8008c9a <_printf_i+0x1c6>
 8008af6:	2f58      	cmp	r7, #88	@ 0x58
 8008af8:	f000 80b9 	beq.w	8008c6e <_printf_i+0x19a>
 8008afc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008b04:	e03a      	b.n	8008b7c <_printf_i+0xa8>
 8008b06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008b0a:	2b15      	cmp	r3, #21
 8008b0c:	d8f6      	bhi.n	8008afc <_printf_i+0x28>
 8008b0e:	a101      	add	r1, pc, #4	@ (adr r1, 8008b14 <_printf_i+0x40>)
 8008b10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b14:	08008b6d 	.word	0x08008b6d
 8008b18:	08008b81 	.word	0x08008b81
 8008b1c:	08008afd 	.word	0x08008afd
 8008b20:	08008afd 	.word	0x08008afd
 8008b24:	08008afd 	.word	0x08008afd
 8008b28:	08008afd 	.word	0x08008afd
 8008b2c:	08008b81 	.word	0x08008b81
 8008b30:	08008afd 	.word	0x08008afd
 8008b34:	08008afd 	.word	0x08008afd
 8008b38:	08008afd 	.word	0x08008afd
 8008b3c:	08008afd 	.word	0x08008afd
 8008b40:	08008c81 	.word	0x08008c81
 8008b44:	08008bab 	.word	0x08008bab
 8008b48:	08008c3b 	.word	0x08008c3b
 8008b4c:	08008afd 	.word	0x08008afd
 8008b50:	08008afd 	.word	0x08008afd
 8008b54:	08008ca3 	.word	0x08008ca3
 8008b58:	08008afd 	.word	0x08008afd
 8008b5c:	08008bab 	.word	0x08008bab
 8008b60:	08008afd 	.word	0x08008afd
 8008b64:	08008afd 	.word	0x08008afd
 8008b68:	08008c43 	.word	0x08008c43
 8008b6c:	6833      	ldr	r3, [r6, #0]
 8008b6e:	1d1a      	adds	r2, r3, #4
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	6032      	str	r2, [r6, #0]
 8008b74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	e09d      	b.n	8008cbc <_printf_i+0x1e8>
 8008b80:	6833      	ldr	r3, [r6, #0]
 8008b82:	6820      	ldr	r0, [r4, #0]
 8008b84:	1d19      	adds	r1, r3, #4
 8008b86:	6031      	str	r1, [r6, #0]
 8008b88:	0606      	lsls	r6, r0, #24
 8008b8a:	d501      	bpl.n	8008b90 <_printf_i+0xbc>
 8008b8c:	681d      	ldr	r5, [r3, #0]
 8008b8e:	e003      	b.n	8008b98 <_printf_i+0xc4>
 8008b90:	0645      	lsls	r5, r0, #25
 8008b92:	d5fb      	bpl.n	8008b8c <_printf_i+0xb8>
 8008b94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008b98:	2d00      	cmp	r5, #0
 8008b9a:	da03      	bge.n	8008ba4 <_printf_i+0xd0>
 8008b9c:	232d      	movs	r3, #45	@ 0x2d
 8008b9e:	426d      	negs	r5, r5
 8008ba0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ba4:	4859      	ldr	r0, [pc, #356]	@ (8008d0c <_printf_i+0x238>)
 8008ba6:	230a      	movs	r3, #10
 8008ba8:	e011      	b.n	8008bce <_printf_i+0xfa>
 8008baa:	6821      	ldr	r1, [r4, #0]
 8008bac:	6833      	ldr	r3, [r6, #0]
 8008bae:	0608      	lsls	r0, r1, #24
 8008bb0:	f853 5b04 	ldr.w	r5, [r3], #4
 8008bb4:	d402      	bmi.n	8008bbc <_printf_i+0xe8>
 8008bb6:	0649      	lsls	r1, r1, #25
 8008bb8:	bf48      	it	mi
 8008bba:	b2ad      	uxthmi	r5, r5
 8008bbc:	2f6f      	cmp	r7, #111	@ 0x6f
 8008bbe:	4853      	ldr	r0, [pc, #332]	@ (8008d0c <_printf_i+0x238>)
 8008bc0:	6033      	str	r3, [r6, #0]
 8008bc2:	bf14      	ite	ne
 8008bc4:	230a      	movne	r3, #10
 8008bc6:	2308      	moveq	r3, #8
 8008bc8:	2100      	movs	r1, #0
 8008bca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008bce:	6866      	ldr	r6, [r4, #4]
 8008bd0:	60a6      	str	r6, [r4, #8]
 8008bd2:	2e00      	cmp	r6, #0
 8008bd4:	bfa2      	ittt	ge
 8008bd6:	6821      	ldrge	r1, [r4, #0]
 8008bd8:	f021 0104 	bicge.w	r1, r1, #4
 8008bdc:	6021      	strge	r1, [r4, #0]
 8008bde:	b90d      	cbnz	r5, 8008be4 <_printf_i+0x110>
 8008be0:	2e00      	cmp	r6, #0
 8008be2:	d04b      	beq.n	8008c7c <_printf_i+0x1a8>
 8008be4:	4616      	mov	r6, r2
 8008be6:	fbb5 f1f3 	udiv	r1, r5, r3
 8008bea:	fb03 5711 	mls	r7, r3, r1, r5
 8008bee:	5dc7      	ldrb	r7, [r0, r7]
 8008bf0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008bf4:	462f      	mov	r7, r5
 8008bf6:	42bb      	cmp	r3, r7
 8008bf8:	460d      	mov	r5, r1
 8008bfa:	d9f4      	bls.n	8008be6 <_printf_i+0x112>
 8008bfc:	2b08      	cmp	r3, #8
 8008bfe:	d10b      	bne.n	8008c18 <_printf_i+0x144>
 8008c00:	6823      	ldr	r3, [r4, #0]
 8008c02:	07df      	lsls	r7, r3, #31
 8008c04:	d508      	bpl.n	8008c18 <_printf_i+0x144>
 8008c06:	6923      	ldr	r3, [r4, #16]
 8008c08:	6861      	ldr	r1, [r4, #4]
 8008c0a:	4299      	cmp	r1, r3
 8008c0c:	bfde      	ittt	le
 8008c0e:	2330      	movle	r3, #48	@ 0x30
 8008c10:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008c14:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008c18:	1b92      	subs	r2, r2, r6
 8008c1a:	6122      	str	r2, [r4, #16]
 8008c1c:	f8cd a000 	str.w	sl, [sp]
 8008c20:	464b      	mov	r3, r9
 8008c22:	aa03      	add	r2, sp, #12
 8008c24:	4621      	mov	r1, r4
 8008c26:	4640      	mov	r0, r8
 8008c28:	f7ff fee6 	bl	80089f8 <_printf_common>
 8008c2c:	3001      	adds	r0, #1
 8008c2e:	d14a      	bne.n	8008cc6 <_printf_i+0x1f2>
 8008c30:	f04f 30ff 	mov.w	r0, #4294967295
 8008c34:	b004      	add	sp, #16
 8008c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c3a:	6823      	ldr	r3, [r4, #0]
 8008c3c:	f043 0320 	orr.w	r3, r3, #32
 8008c40:	6023      	str	r3, [r4, #0]
 8008c42:	4833      	ldr	r0, [pc, #204]	@ (8008d10 <_printf_i+0x23c>)
 8008c44:	2778      	movs	r7, #120	@ 0x78
 8008c46:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008c4a:	6823      	ldr	r3, [r4, #0]
 8008c4c:	6831      	ldr	r1, [r6, #0]
 8008c4e:	061f      	lsls	r7, r3, #24
 8008c50:	f851 5b04 	ldr.w	r5, [r1], #4
 8008c54:	d402      	bmi.n	8008c5c <_printf_i+0x188>
 8008c56:	065f      	lsls	r7, r3, #25
 8008c58:	bf48      	it	mi
 8008c5a:	b2ad      	uxthmi	r5, r5
 8008c5c:	6031      	str	r1, [r6, #0]
 8008c5e:	07d9      	lsls	r1, r3, #31
 8008c60:	bf44      	itt	mi
 8008c62:	f043 0320 	orrmi.w	r3, r3, #32
 8008c66:	6023      	strmi	r3, [r4, #0]
 8008c68:	b11d      	cbz	r5, 8008c72 <_printf_i+0x19e>
 8008c6a:	2310      	movs	r3, #16
 8008c6c:	e7ac      	b.n	8008bc8 <_printf_i+0xf4>
 8008c6e:	4827      	ldr	r0, [pc, #156]	@ (8008d0c <_printf_i+0x238>)
 8008c70:	e7e9      	b.n	8008c46 <_printf_i+0x172>
 8008c72:	6823      	ldr	r3, [r4, #0]
 8008c74:	f023 0320 	bic.w	r3, r3, #32
 8008c78:	6023      	str	r3, [r4, #0]
 8008c7a:	e7f6      	b.n	8008c6a <_printf_i+0x196>
 8008c7c:	4616      	mov	r6, r2
 8008c7e:	e7bd      	b.n	8008bfc <_printf_i+0x128>
 8008c80:	6833      	ldr	r3, [r6, #0]
 8008c82:	6825      	ldr	r5, [r4, #0]
 8008c84:	6961      	ldr	r1, [r4, #20]
 8008c86:	1d18      	adds	r0, r3, #4
 8008c88:	6030      	str	r0, [r6, #0]
 8008c8a:	062e      	lsls	r6, r5, #24
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	d501      	bpl.n	8008c94 <_printf_i+0x1c0>
 8008c90:	6019      	str	r1, [r3, #0]
 8008c92:	e002      	b.n	8008c9a <_printf_i+0x1c6>
 8008c94:	0668      	lsls	r0, r5, #25
 8008c96:	d5fb      	bpl.n	8008c90 <_printf_i+0x1bc>
 8008c98:	8019      	strh	r1, [r3, #0]
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	6123      	str	r3, [r4, #16]
 8008c9e:	4616      	mov	r6, r2
 8008ca0:	e7bc      	b.n	8008c1c <_printf_i+0x148>
 8008ca2:	6833      	ldr	r3, [r6, #0]
 8008ca4:	1d1a      	adds	r2, r3, #4
 8008ca6:	6032      	str	r2, [r6, #0]
 8008ca8:	681e      	ldr	r6, [r3, #0]
 8008caa:	6862      	ldr	r2, [r4, #4]
 8008cac:	2100      	movs	r1, #0
 8008cae:	4630      	mov	r0, r6
 8008cb0:	f7f7 fa9e 	bl	80001f0 <memchr>
 8008cb4:	b108      	cbz	r0, 8008cba <_printf_i+0x1e6>
 8008cb6:	1b80      	subs	r0, r0, r6
 8008cb8:	6060      	str	r0, [r4, #4]
 8008cba:	6863      	ldr	r3, [r4, #4]
 8008cbc:	6123      	str	r3, [r4, #16]
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008cc4:	e7aa      	b.n	8008c1c <_printf_i+0x148>
 8008cc6:	6923      	ldr	r3, [r4, #16]
 8008cc8:	4632      	mov	r2, r6
 8008cca:	4649      	mov	r1, r9
 8008ccc:	4640      	mov	r0, r8
 8008cce:	47d0      	blx	sl
 8008cd0:	3001      	adds	r0, #1
 8008cd2:	d0ad      	beq.n	8008c30 <_printf_i+0x15c>
 8008cd4:	6823      	ldr	r3, [r4, #0]
 8008cd6:	079b      	lsls	r3, r3, #30
 8008cd8:	d413      	bmi.n	8008d02 <_printf_i+0x22e>
 8008cda:	68e0      	ldr	r0, [r4, #12]
 8008cdc:	9b03      	ldr	r3, [sp, #12]
 8008cde:	4298      	cmp	r0, r3
 8008ce0:	bfb8      	it	lt
 8008ce2:	4618      	movlt	r0, r3
 8008ce4:	e7a6      	b.n	8008c34 <_printf_i+0x160>
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	4632      	mov	r2, r6
 8008cea:	4649      	mov	r1, r9
 8008cec:	4640      	mov	r0, r8
 8008cee:	47d0      	blx	sl
 8008cf0:	3001      	adds	r0, #1
 8008cf2:	d09d      	beq.n	8008c30 <_printf_i+0x15c>
 8008cf4:	3501      	adds	r5, #1
 8008cf6:	68e3      	ldr	r3, [r4, #12]
 8008cf8:	9903      	ldr	r1, [sp, #12]
 8008cfa:	1a5b      	subs	r3, r3, r1
 8008cfc:	42ab      	cmp	r3, r5
 8008cfe:	dcf2      	bgt.n	8008ce6 <_printf_i+0x212>
 8008d00:	e7eb      	b.n	8008cda <_printf_i+0x206>
 8008d02:	2500      	movs	r5, #0
 8008d04:	f104 0619 	add.w	r6, r4, #25
 8008d08:	e7f5      	b.n	8008cf6 <_printf_i+0x222>
 8008d0a:	bf00      	nop
 8008d0c:	080098fc 	.word	0x080098fc
 8008d10:	0800990d 	.word	0x0800990d

08008d14 <__sflush_r>:
 8008d14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d1c:	0716      	lsls	r6, r2, #28
 8008d1e:	4605      	mov	r5, r0
 8008d20:	460c      	mov	r4, r1
 8008d22:	d454      	bmi.n	8008dce <__sflush_r+0xba>
 8008d24:	684b      	ldr	r3, [r1, #4]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	dc02      	bgt.n	8008d30 <__sflush_r+0x1c>
 8008d2a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	dd48      	ble.n	8008dc2 <__sflush_r+0xae>
 8008d30:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008d32:	2e00      	cmp	r6, #0
 8008d34:	d045      	beq.n	8008dc2 <__sflush_r+0xae>
 8008d36:	2300      	movs	r3, #0
 8008d38:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008d3c:	682f      	ldr	r7, [r5, #0]
 8008d3e:	6a21      	ldr	r1, [r4, #32]
 8008d40:	602b      	str	r3, [r5, #0]
 8008d42:	d030      	beq.n	8008da6 <__sflush_r+0x92>
 8008d44:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008d46:	89a3      	ldrh	r3, [r4, #12]
 8008d48:	0759      	lsls	r1, r3, #29
 8008d4a:	d505      	bpl.n	8008d58 <__sflush_r+0x44>
 8008d4c:	6863      	ldr	r3, [r4, #4]
 8008d4e:	1ad2      	subs	r2, r2, r3
 8008d50:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008d52:	b10b      	cbz	r3, 8008d58 <__sflush_r+0x44>
 8008d54:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008d56:	1ad2      	subs	r2, r2, r3
 8008d58:	2300      	movs	r3, #0
 8008d5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008d5c:	6a21      	ldr	r1, [r4, #32]
 8008d5e:	4628      	mov	r0, r5
 8008d60:	47b0      	blx	r6
 8008d62:	1c43      	adds	r3, r0, #1
 8008d64:	89a3      	ldrh	r3, [r4, #12]
 8008d66:	d106      	bne.n	8008d76 <__sflush_r+0x62>
 8008d68:	6829      	ldr	r1, [r5, #0]
 8008d6a:	291d      	cmp	r1, #29
 8008d6c:	d82b      	bhi.n	8008dc6 <__sflush_r+0xb2>
 8008d6e:	4a2a      	ldr	r2, [pc, #168]	@ (8008e18 <__sflush_r+0x104>)
 8008d70:	410a      	asrs	r2, r1
 8008d72:	07d6      	lsls	r6, r2, #31
 8008d74:	d427      	bmi.n	8008dc6 <__sflush_r+0xb2>
 8008d76:	2200      	movs	r2, #0
 8008d78:	6062      	str	r2, [r4, #4]
 8008d7a:	04d9      	lsls	r1, r3, #19
 8008d7c:	6922      	ldr	r2, [r4, #16]
 8008d7e:	6022      	str	r2, [r4, #0]
 8008d80:	d504      	bpl.n	8008d8c <__sflush_r+0x78>
 8008d82:	1c42      	adds	r2, r0, #1
 8008d84:	d101      	bne.n	8008d8a <__sflush_r+0x76>
 8008d86:	682b      	ldr	r3, [r5, #0]
 8008d88:	b903      	cbnz	r3, 8008d8c <__sflush_r+0x78>
 8008d8a:	6560      	str	r0, [r4, #84]	@ 0x54
 8008d8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008d8e:	602f      	str	r7, [r5, #0]
 8008d90:	b1b9      	cbz	r1, 8008dc2 <__sflush_r+0xae>
 8008d92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008d96:	4299      	cmp	r1, r3
 8008d98:	d002      	beq.n	8008da0 <__sflush_r+0x8c>
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	f7ff fbd4 	bl	8008548 <_free_r>
 8008da0:	2300      	movs	r3, #0
 8008da2:	6363      	str	r3, [r4, #52]	@ 0x34
 8008da4:	e00d      	b.n	8008dc2 <__sflush_r+0xae>
 8008da6:	2301      	movs	r3, #1
 8008da8:	4628      	mov	r0, r5
 8008daa:	47b0      	blx	r6
 8008dac:	4602      	mov	r2, r0
 8008dae:	1c50      	adds	r0, r2, #1
 8008db0:	d1c9      	bne.n	8008d46 <__sflush_r+0x32>
 8008db2:	682b      	ldr	r3, [r5, #0]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d0c6      	beq.n	8008d46 <__sflush_r+0x32>
 8008db8:	2b1d      	cmp	r3, #29
 8008dba:	d001      	beq.n	8008dc0 <__sflush_r+0xac>
 8008dbc:	2b16      	cmp	r3, #22
 8008dbe:	d11e      	bne.n	8008dfe <__sflush_r+0xea>
 8008dc0:	602f      	str	r7, [r5, #0]
 8008dc2:	2000      	movs	r0, #0
 8008dc4:	e022      	b.n	8008e0c <__sflush_r+0xf8>
 8008dc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008dca:	b21b      	sxth	r3, r3
 8008dcc:	e01b      	b.n	8008e06 <__sflush_r+0xf2>
 8008dce:	690f      	ldr	r7, [r1, #16]
 8008dd0:	2f00      	cmp	r7, #0
 8008dd2:	d0f6      	beq.n	8008dc2 <__sflush_r+0xae>
 8008dd4:	0793      	lsls	r3, r2, #30
 8008dd6:	680e      	ldr	r6, [r1, #0]
 8008dd8:	bf08      	it	eq
 8008dda:	694b      	ldreq	r3, [r1, #20]
 8008ddc:	600f      	str	r7, [r1, #0]
 8008dde:	bf18      	it	ne
 8008de0:	2300      	movne	r3, #0
 8008de2:	eba6 0807 	sub.w	r8, r6, r7
 8008de6:	608b      	str	r3, [r1, #8]
 8008de8:	f1b8 0f00 	cmp.w	r8, #0
 8008dec:	dde9      	ble.n	8008dc2 <__sflush_r+0xae>
 8008dee:	6a21      	ldr	r1, [r4, #32]
 8008df0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008df2:	4643      	mov	r3, r8
 8008df4:	463a      	mov	r2, r7
 8008df6:	4628      	mov	r0, r5
 8008df8:	47b0      	blx	r6
 8008dfa:	2800      	cmp	r0, #0
 8008dfc:	dc08      	bgt.n	8008e10 <__sflush_r+0xfc>
 8008dfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e06:	81a3      	strh	r3, [r4, #12]
 8008e08:	f04f 30ff 	mov.w	r0, #4294967295
 8008e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e10:	4407      	add	r7, r0
 8008e12:	eba8 0800 	sub.w	r8, r8, r0
 8008e16:	e7e7      	b.n	8008de8 <__sflush_r+0xd4>
 8008e18:	dfbffffe 	.word	0xdfbffffe

08008e1c <_fflush_r>:
 8008e1c:	b538      	push	{r3, r4, r5, lr}
 8008e1e:	690b      	ldr	r3, [r1, #16]
 8008e20:	4605      	mov	r5, r0
 8008e22:	460c      	mov	r4, r1
 8008e24:	b913      	cbnz	r3, 8008e2c <_fflush_r+0x10>
 8008e26:	2500      	movs	r5, #0
 8008e28:	4628      	mov	r0, r5
 8008e2a:	bd38      	pop	{r3, r4, r5, pc}
 8008e2c:	b118      	cbz	r0, 8008e36 <_fflush_r+0x1a>
 8008e2e:	6a03      	ldr	r3, [r0, #32]
 8008e30:	b90b      	cbnz	r3, 8008e36 <_fflush_r+0x1a>
 8008e32:	f7ff f9e9 	bl	8008208 <__sinit>
 8008e36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d0f3      	beq.n	8008e26 <_fflush_r+0xa>
 8008e3e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008e40:	07d0      	lsls	r0, r2, #31
 8008e42:	d404      	bmi.n	8008e4e <_fflush_r+0x32>
 8008e44:	0599      	lsls	r1, r3, #22
 8008e46:	d402      	bmi.n	8008e4e <_fflush_r+0x32>
 8008e48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e4a:	f7ff fb46 	bl	80084da <__retarget_lock_acquire_recursive>
 8008e4e:	4628      	mov	r0, r5
 8008e50:	4621      	mov	r1, r4
 8008e52:	f7ff ff5f 	bl	8008d14 <__sflush_r>
 8008e56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008e58:	07da      	lsls	r2, r3, #31
 8008e5a:	4605      	mov	r5, r0
 8008e5c:	d4e4      	bmi.n	8008e28 <_fflush_r+0xc>
 8008e5e:	89a3      	ldrh	r3, [r4, #12]
 8008e60:	059b      	lsls	r3, r3, #22
 8008e62:	d4e1      	bmi.n	8008e28 <_fflush_r+0xc>
 8008e64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e66:	f7ff fb39 	bl	80084dc <__retarget_lock_release_recursive>
 8008e6a:	e7dd      	b.n	8008e28 <_fflush_r+0xc>

08008e6c <fiprintf>:
 8008e6c:	b40e      	push	{r1, r2, r3}
 8008e6e:	b503      	push	{r0, r1, lr}
 8008e70:	4601      	mov	r1, r0
 8008e72:	ab03      	add	r3, sp, #12
 8008e74:	4805      	ldr	r0, [pc, #20]	@ (8008e8c <fiprintf+0x20>)
 8008e76:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e7a:	6800      	ldr	r0, [r0, #0]
 8008e7c:	9301      	str	r3, [sp, #4]
 8008e7e:	f000 f88f 	bl	8008fa0 <_vfiprintf_r>
 8008e82:	b002      	add	sp, #8
 8008e84:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e88:	b003      	add	sp, #12
 8008e8a:	4770      	bx	lr
 8008e8c:	2000001c 	.word	0x2000001c

08008e90 <memmove>:
 8008e90:	4288      	cmp	r0, r1
 8008e92:	b510      	push	{r4, lr}
 8008e94:	eb01 0402 	add.w	r4, r1, r2
 8008e98:	d902      	bls.n	8008ea0 <memmove+0x10>
 8008e9a:	4284      	cmp	r4, r0
 8008e9c:	4623      	mov	r3, r4
 8008e9e:	d807      	bhi.n	8008eb0 <memmove+0x20>
 8008ea0:	1e43      	subs	r3, r0, #1
 8008ea2:	42a1      	cmp	r1, r4
 8008ea4:	d008      	beq.n	8008eb8 <memmove+0x28>
 8008ea6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008eaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008eae:	e7f8      	b.n	8008ea2 <memmove+0x12>
 8008eb0:	4402      	add	r2, r0
 8008eb2:	4601      	mov	r1, r0
 8008eb4:	428a      	cmp	r2, r1
 8008eb6:	d100      	bne.n	8008eba <memmove+0x2a>
 8008eb8:	bd10      	pop	{r4, pc}
 8008eba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ebe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ec2:	e7f7      	b.n	8008eb4 <memmove+0x24>

08008ec4 <_sbrk_r>:
 8008ec4:	b538      	push	{r3, r4, r5, lr}
 8008ec6:	4d06      	ldr	r5, [pc, #24]	@ (8008ee0 <_sbrk_r+0x1c>)
 8008ec8:	2300      	movs	r3, #0
 8008eca:	4604      	mov	r4, r0
 8008ecc:	4608      	mov	r0, r1
 8008ece:	602b      	str	r3, [r5, #0]
 8008ed0:	f7f8 fba4 	bl	800161c <_sbrk>
 8008ed4:	1c43      	adds	r3, r0, #1
 8008ed6:	d102      	bne.n	8008ede <_sbrk_r+0x1a>
 8008ed8:	682b      	ldr	r3, [r5, #0]
 8008eda:	b103      	cbz	r3, 8008ede <_sbrk_r+0x1a>
 8008edc:	6023      	str	r3, [r4, #0]
 8008ede:	bd38      	pop	{r3, r4, r5, pc}
 8008ee0:	200046ec 	.word	0x200046ec

08008ee4 <abort>:
 8008ee4:	b508      	push	{r3, lr}
 8008ee6:	2006      	movs	r0, #6
 8008ee8:	f000 fa2e 	bl	8009348 <raise>
 8008eec:	2001      	movs	r0, #1
 8008eee:	f7f8 fb1d 	bl	800152c <_exit>

08008ef2 <_realloc_r>:
 8008ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ef6:	4680      	mov	r8, r0
 8008ef8:	4615      	mov	r5, r2
 8008efa:	460c      	mov	r4, r1
 8008efc:	b921      	cbnz	r1, 8008f08 <_realloc_r+0x16>
 8008efe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f02:	4611      	mov	r1, r2
 8008f04:	f7ff bb94 	b.w	8008630 <_malloc_r>
 8008f08:	b92a      	cbnz	r2, 8008f16 <_realloc_r+0x24>
 8008f0a:	f7ff fb1d 	bl	8008548 <_free_r>
 8008f0e:	2400      	movs	r4, #0
 8008f10:	4620      	mov	r0, r4
 8008f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f16:	f000 fa33 	bl	8009380 <_malloc_usable_size_r>
 8008f1a:	4285      	cmp	r5, r0
 8008f1c:	4606      	mov	r6, r0
 8008f1e:	d802      	bhi.n	8008f26 <_realloc_r+0x34>
 8008f20:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008f24:	d8f4      	bhi.n	8008f10 <_realloc_r+0x1e>
 8008f26:	4629      	mov	r1, r5
 8008f28:	4640      	mov	r0, r8
 8008f2a:	f7ff fb81 	bl	8008630 <_malloc_r>
 8008f2e:	4607      	mov	r7, r0
 8008f30:	2800      	cmp	r0, #0
 8008f32:	d0ec      	beq.n	8008f0e <_realloc_r+0x1c>
 8008f34:	42b5      	cmp	r5, r6
 8008f36:	462a      	mov	r2, r5
 8008f38:	4621      	mov	r1, r4
 8008f3a:	bf28      	it	cs
 8008f3c:	4632      	movcs	r2, r6
 8008f3e:	f7ff fad6 	bl	80084ee <memcpy>
 8008f42:	4621      	mov	r1, r4
 8008f44:	4640      	mov	r0, r8
 8008f46:	f7ff faff 	bl	8008548 <_free_r>
 8008f4a:	463c      	mov	r4, r7
 8008f4c:	e7e0      	b.n	8008f10 <_realloc_r+0x1e>

08008f4e <__sfputc_r>:
 8008f4e:	6893      	ldr	r3, [r2, #8]
 8008f50:	3b01      	subs	r3, #1
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	b410      	push	{r4}
 8008f56:	6093      	str	r3, [r2, #8]
 8008f58:	da08      	bge.n	8008f6c <__sfputc_r+0x1e>
 8008f5a:	6994      	ldr	r4, [r2, #24]
 8008f5c:	42a3      	cmp	r3, r4
 8008f5e:	db01      	blt.n	8008f64 <__sfputc_r+0x16>
 8008f60:	290a      	cmp	r1, #10
 8008f62:	d103      	bne.n	8008f6c <__sfputc_r+0x1e>
 8008f64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f68:	f000 b932 	b.w	80091d0 <__swbuf_r>
 8008f6c:	6813      	ldr	r3, [r2, #0]
 8008f6e:	1c58      	adds	r0, r3, #1
 8008f70:	6010      	str	r0, [r2, #0]
 8008f72:	7019      	strb	r1, [r3, #0]
 8008f74:	4608      	mov	r0, r1
 8008f76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <__sfputs_r>:
 8008f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f7e:	4606      	mov	r6, r0
 8008f80:	460f      	mov	r7, r1
 8008f82:	4614      	mov	r4, r2
 8008f84:	18d5      	adds	r5, r2, r3
 8008f86:	42ac      	cmp	r4, r5
 8008f88:	d101      	bne.n	8008f8e <__sfputs_r+0x12>
 8008f8a:	2000      	movs	r0, #0
 8008f8c:	e007      	b.n	8008f9e <__sfputs_r+0x22>
 8008f8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f92:	463a      	mov	r2, r7
 8008f94:	4630      	mov	r0, r6
 8008f96:	f7ff ffda 	bl	8008f4e <__sfputc_r>
 8008f9a:	1c43      	adds	r3, r0, #1
 8008f9c:	d1f3      	bne.n	8008f86 <__sfputs_r+0xa>
 8008f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008fa0 <_vfiprintf_r>:
 8008fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fa4:	460d      	mov	r5, r1
 8008fa6:	b09d      	sub	sp, #116	@ 0x74
 8008fa8:	4614      	mov	r4, r2
 8008faa:	4698      	mov	r8, r3
 8008fac:	4606      	mov	r6, r0
 8008fae:	b118      	cbz	r0, 8008fb8 <_vfiprintf_r+0x18>
 8008fb0:	6a03      	ldr	r3, [r0, #32]
 8008fb2:	b90b      	cbnz	r3, 8008fb8 <_vfiprintf_r+0x18>
 8008fb4:	f7ff f928 	bl	8008208 <__sinit>
 8008fb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008fba:	07d9      	lsls	r1, r3, #31
 8008fbc:	d405      	bmi.n	8008fca <_vfiprintf_r+0x2a>
 8008fbe:	89ab      	ldrh	r3, [r5, #12]
 8008fc0:	059a      	lsls	r2, r3, #22
 8008fc2:	d402      	bmi.n	8008fca <_vfiprintf_r+0x2a>
 8008fc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008fc6:	f7ff fa88 	bl	80084da <__retarget_lock_acquire_recursive>
 8008fca:	89ab      	ldrh	r3, [r5, #12]
 8008fcc:	071b      	lsls	r3, r3, #28
 8008fce:	d501      	bpl.n	8008fd4 <_vfiprintf_r+0x34>
 8008fd0:	692b      	ldr	r3, [r5, #16]
 8008fd2:	b99b      	cbnz	r3, 8008ffc <_vfiprintf_r+0x5c>
 8008fd4:	4629      	mov	r1, r5
 8008fd6:	4630      	mov	r0, r6
 8008fd8:	f000 f938 	bl	800924c <__swsetup_r>
 8008fdc:	b170      	cbz	r0, 8008ffc <_vfiprintf_r+0x5c>
 8008fde:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008fe0:	07dc      	lsls	r4, r3, #31
 8008fe2:	d504      	bpl.n	8008fee <_vfiprintf_r+0x4e>
 8008fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fe8:	b01d      	add	sp, #116	@ 0x74
 8008fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fee:	89ab      	ldrh	r3, [r5, #12]
 8008ff0:	0598      	lsls	r0, r3, #22
 8008ff2:	d4f7      	bmi.n	8008fe4 <_vfiprintf_r+0x44>
 8008ff4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ff6:	f7ff fa71 	bl	80084dc <__retarget_lock_release_recursive>
 8008ffa:	e7f3      	b.n	8008fe4 <_vfiprintf_r+0x44>
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	9309      	str	r3, [sp, #36]	@ 0x24
 8009000:	2320      	movs	r3, #32
 8009002:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009006:	f8cd 800c 	str.w	r8, [sp, #12]
 800900a:	2330      	movs	r3, #48	@ 0x30
 800900c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80091bc <_vfiprintf_r+0x21c>
 8009010:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009014:	f04f 0901 	mov.w	r9, #1
 8009018:	4623      	mov	r3, r4
 800901a:	469a      	mov	sl, r3
 800901c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009020:	b10a      	cbz	r2, 8009026 <_vfiprintf_r+0x86>
 8009022:	2a25      	cmp	r2, #37	@ 0x25
 8009024:	d1f9      	bne.n	800901a <_vfiprintf_r+0x7a>
 8009026:	ebba 0b04 	subs.w	fp, sl, r4
 800902a:	d00b      	beq.n	8009044 <_vfiprintf_r+0xa4>
 800902c:	465b      	mov	r3, fp
 800902e:	4622      	mov	r2, r4
 8009030:	4629      	mov	r1, r5
 8009032:	4630      	mov	r0, r6
 8009034:	f7ff ffa2 	bl	8008f7c <__sfputs_r>
 8009038:	3001      	adds	r0, #1
 800903a:	f000 80a7 	beq.w	800918c <_vfiprintf_r+0x1ec>
 800903e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009040:	445a      	add	r2, fp
 8009042:	9209      	str	r2, [sp, #36]	@ 0x24
 8009044:	f89a 3000 	ldrb.w	r3, [sl]
 8009048:	2b00      	cmp	r3, #0
 800904a:	f000 809f 	beq.w	800918c <_vfiprintf_r+0x1ec>
 800904e:	2300      	movs	r3, #0
 8009050:	f04f 32ff 	mov.w	r2, #4294967295
 8009054:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009058:	f10a 0a01 	add.w	sl, sl, #1
 800905c:	9304      	str	r3, [sp, #16]
 800905e:	9307      	str	r3, [sp, #28]
 8009060:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009064:	931a      	str	r3, [sp, #104]	@ 0x68
 8009066:	4654      	mov	r4, sl
 8009068:	2205      	movs	r2, #5
 800906a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800906e:	4853      	ldr	r0, [pc, #332]	@ (80091bc <_vfiprintf_r+0x21c>)
 8009070:	f7f7 f8be 	bl	80001f0 <memchr>
 8009074:	9a04      	ldr	r2, [sp, #16]
 8009076:	b9d8      	cbnz	r0, 80090b0 <_vfiprintf_r+0x110>
 8009078:	06d1      	lsls	r1, r2, #27
 800907a:	bf44      	itt	mi
 800907c:	2320      	movmi	r3, #32
 800907e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009082:	0713      	lsls	r3, r2, #28
 8009084:	bf44      	itt	mi
 8009086:	232b      	movmi	r3, #43	@ 0x2b
 8009088:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800908c:	f89a 3000 	ldrb.w	r3, [sl]
 8009090:	2b2a      	cmp	r3, #42	@ 0x2a
 8009092:	d015      	beq.n	80090c0 <_vfiprintf_r+0x120>
 8009094:	9a07      	ldr	r2, [sp, #28]
 8009096:	4654      	mov	r4, sl
 8009098:	2000      	movs	r0, #0
 800909a:	f04f 0c0a 	mov.w	ip, #10
 800909e:	4621      	mov	r1, r4
 80090a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090a4:	3b30      	subs	r3, #48	@ 0x30
 80090a6:	2b09      	cmp	r3, #9
 80090a8:	d94b      	bls.n	8009142 <_vfiprintf_r+0x1a2>
 80090aa:	b1b0      	cbz	r0, 80090da <_vfiprintf_r+0x13a>
 80090ac:	9207      	str	r2, [sp, #28]
 80090ae:	e014      	b.n	80090da <_vfiprintf_r+0x13a>
 80090b0:	eba0 0308 	sub.w	r3, r0, r8
 80090b4:	fa09 f303 	lsl.w	r3, r9, r3
 80090b8:	4313      	orrs	r3, r2
 80090ba:	9304      	str	r3, [sp, #16]
 80090bc:	46a2      	mov	sl, r4
 80090be:	e7d2      	b.n	8009066 <_vfiprintf_r+0xc6>
 80090c0:	9b03      	ldr	r3, [sp, #12]
 80090c2:	1d19      	adds	r1, r3, #4
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	9103      	str	r1, [sp, #12]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	bfbb      	ittet	lt
 80090cc:	425b      	neglt	r3, r3
 80090ce:	f042 0202 	orrlt.w	r2, r2, #2
 80090d2:	9307      	strge	r3, [sp, #28]
 80090d4:	9307      	strlt	r3, [sp, #28]
 80090d6:	bfb8      	it	lt
 80090d8:	9204      	strlt	r2, [sp, #16]
 80090da:	7823      	ldrb	r3, [r4, #0]
 80090dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80090de:	d10a      	bne.n	80090f6 <_vfiprintf_r+0x156>
 80090e0:	7863      	ldrb	r3, [r4, #1]
 80090e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80090e4:	d132      	bne.n	800914c <_vfiprintf_r+0x1ac>
 80090e6:	9b03      	ldr	r3, [sp, #12]
 80090e8:	1d1a      	adds	r2, r3, #4
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	9203      	str	r2, [sp, #12]
 80090ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80090f2:	3402      	adds	r4, #2
 80090f4:	9305      	str	r3, [sp, #20]
 80090f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80091cc <_vfiprintf_r+0x22c>
 80090fa:	7821      	ldrb	r1, [r4, #0]
 80090fc:	2203      	movs	r2, #3
 80090fe:	4650      	mov	r0, sl
 8009100:	f7f7 f876 	bl	80001f0 <memchr>
 8009104:	b138      	cbz	r0, 8009116 <_vfiprintf_r+0x176>
 8009106:	9b04      	ldr	r3, [sp, #16]
 8009108:	eba0 000a 	sub.w	r0, r0, sl
 800910c:	2240      	movs	r2, #64	@ 0x40
 800910e:	4082      	lsls	r2, r0
 8009110:	4313      	orrs	r3, r2
 8009112:	3401      	adds	r4, #1
 8009114:	9304      	str	r3, [sp, #16]
 8009116:	f814 1b01 	ldrb.w	r1, [r4], #1
 800911a:	4829      	ldr	r0, [pc, #164]	@ (80091c0 <_vfiprintf_r+0x220>)
 800911c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009120:	2206      	movs	r2, #6
 8009122:	f7f7 f865 	bl	80001f0 <memchr>
 8009126:	2800      	cmp	r0, #0
 8009128:	d03f      	beq.n	80091aa <_vfiprintf_r+0x20a>
 800912a:	4b26      	ldr	r3, [pc, #152]	@ (80091c4 <_vfiprintf_r+0x224>)
 800912c:	bb1b      	cbnz	r3, 8009176 <_vfiprintf_r+0x1d6>
 800912e:	9b03      	ldr	r3, [sp, #12]
 8009130:	3307      	adds	r3, #7
 8009132:	f023 0307 	bic.w	r3, r3, #7
 8009136:	3308      	adds	r3, #8
 8009138:	9303      	str	r3, [sp, #12]
 800913a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800913c:	443b      	add	r3, r7
 800913e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009140:	e76a      	b.n	8009018 <_vfiprintf_r+0x78>
 8009142:	fb0c 3202 	mla	r2, ip, r2, r3
 8009146:	460c      	mov	r4, r1
 8009148:	2001      	movs	r0, #1
 800914a:	e7a8      	b.n	800909e <_vfiprintf_r+0xfe>
 800914c:	2300      	movs	r3, #0
 800914e:	3401      	adds	r4, #1
 8009150:	9305      	str	r3, [sp, #20]
 8009152:	4619      	mov	r1, r3
 8009154:	f04f 0c0a 	mov.w	ip, #10
 8009158:	4620      	mov	r0, r4
 800915a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800915e:	3a30      	subs	r2, #48	@ 0x30
 8009160:	2a09      	cmp	r2, #9
 8009162:	d903      	bls.n	800916c <_vfiprintf_r+0x1cc>
 8009164:	2b00      	cmp	r3, #0
 8009166:	d0c6      	beq.n	80090f6 <_vfiprintf_r+0x156>
 8009168:	9105      	str	r1, [sp, #20]
 800916a:	e7c4      	b.n	80090f6 <_vfiprintf_r+0x156>
 800916c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009170:	4604      	mov	r4, r0
 8009172:	2301      	movs	r3, #1
 8009174:	e7f0      	b.n	8009158 <_vfiprintf_r+0x1b8>
 8009176:	ab03      	add	r3, sp, #12
 8009178:	9300      	str	r3, [sp, #0]
 800917a:	462a      	mov	r2, r5
 800917c:	4b12      	ldr	r3, [pc, #72]	@ (80091c8 <_vfiprintf_r+0x228>)
 800917e:	a904      	add	r1, sp, #16
 8009180:	4630      	mov	r0, r6
 8009182:	f3af 8000 	nop.w
 8009186:	4607      	mov	r7, r0
 8009188:	1c78      	adds	r0, r7, #1
 800918a:	d1d6      	bne.n	800913a <_vfiprintf_r+0x19a>
 800918c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800918e:	07d9      	lsls	r1, r3, #31
 8009190:	d405      	bmi.n	800919e <_vfiprintf_r+0x1fe>
 8009192:	89ab      	ldrh	r3, [r5, #12]
 8009194:	059a      	lsls	r2, r3, #22
 8009196:	d402      	bmi.n	800919e <_vfiprintf_r+0x1fe>
 8009198:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800919a:	f7ff f99f 	bl	80084dc <__retarget_lock_release_recursive>
 800919e:	89ab      	ldrh	r3, [r5, #12]
 80091a0:	065b      	lsls	r3, r3, #25
 80091a2:	f53f af1f 	bmi.w	8008fe4 <_vfiprintf_r+0x44>
 80091a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80091a8:	e71e      	b.n	8008fe8 <_vfiprintf_r+0x48>
 80091aa:	ab03      	add	r3, sp, #12
 80091ac:	9300      	str	r3, [sp, #0]
 80091ae:	462a      	mov	r2, r5
 80091b0:	4b05      	ldr	r3, [pc, #20]	@ (80091c8 <_vfiprintf_r+0x228>)
 80091b2:	a904      	add	r1, sp, #16
 80091b4:	4630      	mov	r0, r6
 80091b6:	f7ff fc8d 	bl	8008ad4 <_printf_i>
 80091ba:	e7e4      	b.n	8009186 <_vfiprintf_r+0x1e6>
 80091bc:	080098eb 	.word	0x080098eb
 80091c0:	080098f5 	.word	0x080098f5
 80091c4:	00000000 	.word	0x00000000
 80091c8:	08008f7d 	.word	0x08008f7d
 80091cc:	080098f1 	.word	0x080098f1

080091d0 <__swbuf_r>:
 80091d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091d2:	460e      	mov	r6, r1
 80091d4:	4614      	mov	r4, r2
 80091d6:	4605      	mov	r5, r0
 80091d8:	b118      	cbz	r0, 80091e2 <__swbuf_r+0x12>
 80091da:	6a03      	ldr	r3, [r0, #32]
 80091dc:	b90b      	cbnz	r3, 80091e2 <__swbuf_r+0x12>
 80091de:	f7ff f813 	bl	8008208 <__sinit>
 80091e2:	69a3      	ldr	r3, [r4, #24]
 80091e4:	60a3      	str	r3, [r4, #8]
 80091e6:	89a3      	ldrh	r3, [r4, #12]
 80091e8:	071a      	lsls	r2, r3, #28
 80091ea:	d501      	bpl.n	80091f0 <__swbuf_r+0x20>
 80091ec:	6923      	ldr	r3, [r4, #16]
 80091ee:	b943      	cbnz	r3, 8009202 <__swbuf_r+0x32>
 80091f0:	4621      	mov	r1, r4
 80091f2:	4628      	mov	r0, r5
 80091f4:	f000 f82a 	bl	800924c <__swsetup_r>
 80091f8:	b118      	cbz	r0, 8009202 <__swbuf_r+0x32>
 80091fa:	f04f 37ff 	mov.w	r7, #4294967295
 80091fe:	4638      	mov	r0, r7
 8009200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009202:	6823      	ldr	r3, [r4, #0]
 8009204:	6922      	ldr	r2, [r4, #16]
 8009206:	1a98      	subs	r0, r3, r2
 8009208:	6963      	ldr	r3, [r4, #20]
 800920a:	b2f6      	uxtb	r6, r6
 800920c:	4283      	cmp	r3, r0
 800920e:	4637      	mov	r7, r6
 8009210:	dc05      	bgt.n	800921e <__swbuf_r+0x4e>
 8009212:	4621      	mov	r1, r4
 8009214:	4628      	mov	r0, r5
 8009216:	f7ff fe01 	bl	8008e1c <_fflush_r>
 800921a:	2800      	cmp	r0, #0
 800921c:	d1ed      	bne.n	80091fa <__swbuf_r+0x2a>
 800921e:	68a3      	ldr	r3, [r4, #8]
 8009220:	3b01      	subs	r3, #1
 8009222:	60a3      	str	r3, [r4, #8]
 8009224:	6823      	ldr	r3, [r4, #0]
 8009226:	1c5a      	adds	r2, r3, #1
 8009228:	6022      	str	r2, [r4, #0]
 800922a:	701e      	strb	r6, [r3, #0]
 800922c:	6962      	ldr	r2, [r4, #20]
 800922e:	1c43      	adds	r3, r0, #1
 8009230:	429a      	cmp	r2, r3
 8009232:	d004      	beq.n	800923e <__swbuf_r+0x6e>
 8009234:	89a3      	ldrh	r3, [r4, #12]
 8009236:	07db      	lsls	r3, r3, #31
 8009238:	d5e1      	bpl.n	80091fe <__swbuf_r+0x2e>
 800923a:	2e0a      	cmp	r6, #10
 800923c:	d1df      	bne.n	80091fe <__swbuf_r+0x2e>
 800923e:	4621      	mov	r1, r4
 8009240:	4628      	mov	r0, r5
 8009242:	f7ff fdeb 	bl	8008e1c <_fflush_r>
 8009246:	2800      	cmp	r0, #0
 8009248:	d0d9      	beq.n	80091fe <__swbuf_r+0x2e>
 800924a:	e7d6      	b.n	80091fa <__swbuf_r+0x2a>

0800924c <__swsetup_r>:
 800924c:	b538      	push	{r3, r4, r5, lr}
 800924e:	4b29      	ldr	r3, [pc, #164]	@ (80092f4 <__swsetup_r+0xa8>)
 8009250:	4605      	mov	r5, r0
 8009252:	6818      	ldr	r0, [r3, #0]
 8009254:	460c      	mov	r4, r1
 8009256:	b118      	cbz	r0, 8009260 <__swsetup_r+0x14>
 8009258:	6a03      	ldr	r3, [r0, #32]
 800925a:	b90b      	cbnz	r3, 8009260 <__swsetup_r+0x14>
 800925c:	f7fe ffd4 	bl	8008208 <__sinit>
 8009260:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009264:	0719      	lsls	r1, r3, #28
 8009266:	d422      	bmi.n	80092ae <__swsetup_r+0x62>
 8009268:	06da      	lsls	r2, r3, #27
 800926a:	d407      	bmi.n	800927c <__swsetup_r+0x30>
 800926c:	2209      	movs	r2, #9
 800926e:	602a      	str	r2, [r5, #0]
 8009270:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009274:	81a3      	strh	r3, [r4, #12]
 8009276:	f04f 30ff 	mov.w	r0, #4294967295
 800927a:	e033      	b.n	80092e4 <__swsetup_r+0x98>
 800927c:	0758      	lsls	r0, r3, #29
 800927e:	d512      	bpl.n	80092a6 <__swsetup_r+0x5a>
 8009280:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009282:	b141      	cbz	r1, 8009296 <__swsetup_r+0x4a>
 8009284:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009288:	4299      	cmp	r1, r3
 800928a:	d002      	beq.n	8009292 <__swsetup_r+0x46>
 800928c:	4628      	mov	r0, r5
 800928e:	f7ff f95b 	bl	8008548 <_free_r>
 8009292:	2300      	movs	r3, #0
 8009294:	6363      	str	r3, [r4, #52]	@ 0x34
 8009296:	89a3      	ldrh	r3, [r4, #12]
 8009298:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800929c:	81a3      	strh	r3, [r4, #12]
 800929e:	2300      	movs	r3, #0
 80092a0:	6063      	str	r3, [r4, #4]
 80092a2:	6923      	ldr	r3, [r4, #16]
 80092a4:	6023      	str	r3, [r4, #0]
 80092a6:	89a3      	ldrh	r3, [r4, #12]
 80092a8:	f043 0308 	orr.w	r3, r3, #8
 80092ac:	81a3      	strh	r3, [r4, #12]
 80092ae:	6923      	ldr	r3, [r4, #16]
 80092b0:	b94b      	cbnz	r3, 80092c6 <__swsetup_r+0x7a>
 80092b2:	89a3      	ldrh	r3, [r4, #12]
 80092b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80092b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092bc:	d003      	beq.n	80092c6 <__swsetup_r+0x7a>
 80092be:	4621      	mov	r1, r4
 80092c0:	4628      	mov	r0, r5
 80092c2:	f000 f88b 	bl	80093dc <__smakebuf_r>
 80092c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092ca:	f013 0201 	ands.w	r2, r3, #1
 80092ce:	d00a      	beq.n	80092e6 <__swsetup_r+0x9a>
 80092d0:	2200      	movs	r2, #0
 80092d2:	60a2      	str	r2, [r4, #8]
 80092d4:	6962      	ldr	r2, [r4, #20]
 80092d6:	4252      	negs	r2, r2
 80092d8:	61a2      	str	r2, [r4, #24]
 80092da:	6922      	ldr	r2, [r4, #16]
 80092dc:	b942      	cbnz	r2, 80092f0 <__swsetup_r+0xa4>
 80092de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80092e2:	d1c5      	bne.n	8009270 <__swsetup_r+0x24>
 80092e4:	bd38      	pop	{r3, r4, r5, pc}
 80092e6:	0799      	lsls	r1, r3, #30
 80092e8:	bf58      	it	pl
 80092ea:	6962      	ldrpl	r2, [r4, #20]
 80092ec:	60a2      	str	r2, [r4, #8]
 80092ee:	e7f4      	b.n	80092da <__swsetup_r+0x8e>
 80092f0:	2000      	movs	r0, #0
 80092f2:	e7f7      	b.n	80092e4 <__swsetup_r+0x98>
 80092f4:	2000001c 	.word	0x2000001c

080092f8 <_raise_r>:
 80092f8:	291f      	cmp	r1, #31
 80092fa:	b538      	push	{r3, r4, r5, lr}
 80092fc:	4605      	mov	r5, r0
 80092fe:	460c      	mov	r4, r1
 8009300:	d904      	bls.n	800930c <_raise_r+0x14>
 8009302:	2316      	movs	r3, #22
 8009304:	6003      	str	r3, [r0, #0]
 8009306:	f04f 30ff 	mov.w	r0, #4294967295
 800930a:	bd38      	pop	{r3, r4, r5, pc}
 800930c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800930e:	b112      	cbz	r2, 8009316 <_raise_r+0x1e>
 8009310:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009314:	b94b      	cbnz	r3, 800932a <_raise_r+0x32>
 8009316:	4628      	mov	r0, r5
 8009318:	f000 f830 	bl	800937c <_getpid_r>
 800931c:	4622      	mov	r2, r4
 800931e:	4601      	mov	r1, r0
 8009320:	4628      	mov	r0, r5
 8009322:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009326:	f000 b817 	b.w	8009358 <_kill_r>
 800932a:	2b01      	cmp	r3, #1
 800932c:	d00a      	beq.n	8009344 <_raise_r+0x4c>
 800932e:	1c59      	adds	r1, r3, #1
 8009330:	d103      	bne.n	800933a <_raise_r+0x42>
 8009332:	2316      	movs	r3, #22
 8009334:	6003      	str	r3, [r0, #0]
 8009336:	2001      	movs	r0, #1
 8009338:	e7e7      	b.n	800930a <_raise_r+0x12>
 800933a:	2100      	movs	r1, #0
 800933c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009340:	4620      	mov	r0, r4
 8009342:	4798      	blx	r3
 8009344:	2000      	movs	r0, #0
 8009346:	e7e0      	b.n	800930a <_raise_r+0x12>

08009348 <raise>:
 8009348:	4b02      	ldr	r3, [pc, #8]	@ (8009354 <raise+0xc>)
 800934a:	4601      	mov	r1, r0
 800934c:	6818      	ldr	r0, [r3, #0]
 800934e:	f7ff bfd3 	b.w	80092f8 <_raise_r>
 8009352:	bf00      	nop
 8009354:	2000001c 	.word	0x2000001c

08009358 <_kill_r>:
 8009358:	b538      	push	{r3, r4, r5, lr}
 800935a:	4d07      	ldr	r5, [pc, #28]	@ (8009378 <_kill_r+0x20>)
 800935c:	2300      	movs	r3, #0
 800935e:	4604      	mov	r4, r0
 8009360:	4608      	mov	r0, r1
 8009362:	4611      	mov	r1, r2
 8009364:	602b      	str	r3, [r5, #0]
 8009366:	f7f8 f8d1 	bl	800150c <_kill>
 800936a:	1c43      	adds	r3, r0, #1
 800936c:	d102      	bne.n	8009374 <_kill_r+0x1c>
 800936e:	682b      	ldr	r3, [r5, #0]
 8009370:	b103      	cbz	r3, 8009374 <_kill_r+0x1c>
 8009372:	6023      	str	r3, [r4, #0]
 8009374:	bd38      	pop	{r3, r4, r5, pc}
 8009376:	bf00      	nop
 8009378:	200046ec 	.word	0x200046ec

0800937c <_getpid_r>:
 800937c:	f7f8 b8be 	b.w	80014fc <_getpid>

08009380 <_malloc_usable_size_r>:
 8009380:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009384:	1f18      	subs	r0, r3, #4
 8009386:	2b00      	cmp	r3, #0
 8009388:	bfbc      	itt	lt
 800938a:	580b      	ldrlt	r3, [r1, r0]
 800938c:	18c0      	addlt	r0, r0, r3
 800938e:	4770      	bx	lr

08009390 <__swhatbuf_r>:
 8009390:	b570      	push	{r4, r5, r6, lr}
 8009392:	460c      	mov	r4, r1
 8009394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009398:	2900      	cmp	r1, #0
 800939a:	b096      	sub	sp, #88	@ 0x58
 800939c:	4615      	mov	r5, r2
 800939e:	461e      	mov	r6, r3
 80093a0:	da0d      	bge.n	80093be <__swhatbuf_r+0x2e>
 80093a2:	89a3      	ldrh	r3, [r4, #12]
 80093a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80093a8:	f04f 0100 	mov.w	r1, #0
 80093ac:	bf14      	ite	ne
 80093ae:	2340      	movne	r3, #64	@ 0x40
 80093b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80093b4:	2000      	movs	r0, #0
 80093b6:	6031      	str	r1, [r6, #0]
 80093b8:	602b      	str	r3, [r5, #0]
 80093ba:	b016      	add	sp, #88	@ 0x58
 80093bc:	bd70      	pop	{r4, r5, r6, pc}
 80093be:	466a      	mov	r2, sp
 80093c0:	f000 f848 	bl	8009454 <_fstat_r>
 80093c4:	2800      	cmp	r0, #0
 80093c6:	dbec      	blt.n	80093a2 <__swhatbuf_r+0x12>
 80093c8:	9901      	ldr	r1, [sp, #4]
 80093ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80093ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80093d2:	4259      	negs	r1, r3
 80093d4:	4159      	adcs	r1, r3
 80093d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80093da:	e7eb      	b.n	80093b4 <__swhatbuf_r+0x24>

080093dc <__smakebuf_r>:
 80093dc:	898b      	ldrh	r3, [r1, #12]
 80093de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093e0:	079d      	lsls	r5, r3, #30
 80093e2:	4606      	mov	r6, r0
 80093e4:	460c      	mov	r4, r1
 80093e6:	d507      	bpl.n	80093f8 <__smakebuf_r+0x1c>
 80093e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80093ec:	6023      	str	r3, [r4, #0]
 80093ee:	6123      	str	r3, [r4, #16]
 80093f0:	2301      	movs	r3, #1
 80093f2:	6163      	str	r3, [r4, #20]
 80093f4:	b003      	add	sp, #12
 80093f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093f8:	ab01      	add	r3, sp, #4
 80093fa:	466a      	mov	r2, sp
 80093fc:	f7ff ffc8 	bl	8009390 <__swhatbuf_r>
 8009400:	9f00      	ldr	r7, [sp, #0]
 8009402:	4605      	mov	r5, r0
 8009404:	4639      	mov	r1, r7
 8009406:	4630      	mov	r0, r6
 8009408:	f7ff f912 	bl	8008630 <_malloc_r>
 800940c:	b948      	cbnz	r0, 8009422 <__smakebuf_r+0x46>
 800940e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009412:	059a      	lsls	r2, r3, #22
 8009414:	d4ee      	bmi.n	80093f4 <__smakebuf_r+0x18>
 8009416:	f023 0303 	bic.w	r3, r3, #3
 800941a:	f043 0302 	orr.w	r3, r3, #2
 800941e:	81a3      	strh	r3, [r4, #12]
 8009420:	e7e2      	b.n	80093e8 <__smakebuf_r+0xc>
 8009422:	89a3      	ldrh	r3, [r4, #12]
 8009424:	6020      	str	r0, [r4, #0]
 8009426:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800942a:	81a3      	strh	r3, [r4, #12]
 800942c:	9b01      	ldr	r3, [sp, #4]
 800942e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009432:	b15b      	cbz	r3, 800944c <__smakebuf_r+0x70>
 8009434:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009438:	4630      	mov	r0, r6
 800943a:	f000 f81d 	bl	8009478 <_isatty_r>
 800943e:	b128      	cbz	r0, 800944c <__smakebuf_r+0x70>
 8009440:	89a3      	ldrh	r3, [r4, #12]
 8009442:	f023 0303 	bic.w	r3, r3, #3
 8009446:	f043 0301 	orr.w	r3, r3, #1
 800944a:	81a3      	strh	r3, [r4, #12]
 800944c:	89a3      	ldrh	r3, [r4, #12]
 800944e:	431d      	orrs	r5, r3
 8009450:	81a5      	strh	r5, [r4, #12]
 8009452:	e7cf      	b.n	80093f4 <__smakebuf_r+0x18>

08009454 <_fstat_r>:
 8009454:	b538      	push	{r3, r4, r5, lr}
 8009456:	4d07      	ldr	r5, [pc, #28]	@ (8009474 <_fstat_r+0x20>)
 8009458:	2300      	movs	r3, #0
 800945a:	4604      	mov	r4, r0
 800945c:	4608      	mov	r0, r1
 800945e:	4611      	mov	r1, r2
 8009460:	602b      	str	r3, [r5, #0]
 8009462:	f7f8 f8b3 	bl	80015cc <_fstat>
 8009466:	1c43      	adds	r3, r0, #1
 8009468:	d102      	bne.n	8009470 <_fstat_r+0x1c>
 800946a:	682b      	ldr	r3, [r5, #0]
 800946c:	b103      	cbz	r3, 8009470 <_fstat_r+0x1c>
 800946e:	6023      	str	r3, [r4, #0]
 8009470:	bd38      	pop	{r3, r4, r5, pc}
 8009472:	bf00      	nop
 8009474:	200046ec 	.word	0x200046ec

08009478 <_isatty_r>:
 8009478:	b538      	push	{r3, r4, r5, lr}
 800947a:	4d06      	ldr	r5, [pc, #24]	@ (8009494 <_isatty_r+0x1c>)
 800947c:	2300      	movs	r3, #0
 800947e:	4604      	mov	r4, r0
 8009480:	4608      	mov	r0, r1
 8009482:	602b      	str	r3, [r5, #0]
 8009484:	f7f8 f8b2 	bl	80015ec <_isatty>
 8009488:	1c43      	adds	r3, r0, #1
 800948a:	d102      	bne.n	8009492 <_isatty_r+0x1a>
 800948c:	682b      	ldr	r3, [r5, #0]
 800948e:	b103      	cbz	r3, 8009492 <_isatty_r+0x1a>
 8009490:	6023      	str	r3, [r4, #0]
 8009492:	bd38      	pop	{r3, r4, r5, pc}
 8009494:	200046ec 	.word	0x200046ec

08009498 <_init>:
 8009498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800949a:	bf00      	nop
 800949c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800949e:	bc08      	pop	{r3}
 80094a0:	469e      	mov	lr, r3
 80094a2:	4770      	bx	lr

080094a4 <_fini>:
 80094a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094a6:	bf00      	nop
 80094a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094aa:	bc08      	pop	{r3}
 80094ac:	469e      	mov	lr, r3
 80094ae:	4770      	bx	lr
