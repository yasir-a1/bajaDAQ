
canproj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fc0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  08009160  08009160  0000a160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095d0  080095d0  0000b06c  2**0
                  CONTENTS
  4 .ARM          00000008  080095d0  080095d0  0000a5d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095d8  080095d8  0000b06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095d8  080095d8  0000a5d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080095dc  080095dc  0000a5dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080095e0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004690  2000006c  0800964c  0000b06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200046fc  0800964c  0000b6fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b847  00000000  00000000  0000b09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f4e  00000000  00000000  000268e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001790  00000000  00000000  0002a838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001242  00000000  00000000  0002bfc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa43  00000000  00000000  0002d20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a67b  00000000  00000000  00047c4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1be5  00000000  00000000  000622c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00103ead  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006da8  00000000  00000000  00103ef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0010ac98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009148 	.word	0x08009148

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08009148 	.word	0x08009148

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	4a07      	ldr	r2, [pc, #28]	@ (80005ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000590:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	4a06      	ldr	r2, [pc, #24]	@ (80005b0 <vApplicationGetIdleTaskMemory+0x30>)
 8000596:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2280      	movs	r2, #128	@ 0x80
 800059c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000088 	.word	0x20000088
 80005b0:	20000128 	.word	0x20000128

080005b4 <vApplicationGetTimerTaskMemory>:

//No idea what this doe, but needed for xEventGroupSetBitsFromISR
void vApplicationGetTimerTaskMemory(StaticTask_t **ppxTimerTaskTCBBuffer,
                                    StackType_t **ppxTimerTaskStackBuffer,
                                    uint32_t *pulTimerTaskStackSize)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;              // Provide TCB memory
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	4a07      	ldr	r2, [pc, #28]	@ (80005e0 <vApplicationGetTimerTaskMemory+0x2c>)
 80005c4:	601a      	str	r2, [r3, #0]
    *ppxTimerTaskStackBuffer = xTimerStack;               // Provide stack memory
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	4a06      	ldr	r2, [pc, #24]	@ (80005e4 <vApplicationGetTimerTaskMemory+0x30>)
 80005ca:	601a      	str	r2, [r3, #0]
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH; // Provide stack size
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2280      	movs	r2, #128	@ 0x80
 80005d0:	601a      	str	r2, [r3, #0]
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	20000400 	.word	0x20000400
 80005e4:	200004a0 	.word	0x200004a0

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b5b0      	push	{r4, r5, r7, lr}
 80005ea:	b09e      	sub	sp, #120	@ 0x78
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ee:	f001 f851 	bl	8001694 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f2:	f000 f89d 	bl	8000730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f6:	f000 f98d 	bl	8000914 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005fa:	f000 f961 	bl	80008c0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80005fe:	f000 f929 	bl	8000854 <MX_SPI1_Init>
  MX_RTC_Init();
 8000602:	f000 f901 	bl	8000808 <MX_RTC_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of uartMutex */
  osMutexDef(uartMutex);
 8000606:	2300      	movs	r3, #0
 8000608:	673b      	str	r3, [r7, #112]	@ 0x70
 800060a:	2300      	movs	r3, #0
 800060c:	677b      	str	r3, [r7, #116]	@ 0x74
  uartMutexHandle = osMutexCreate(osMutex(uartMutex));
 800060e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000612:	4618      	mov	r0, r3
 8000614:	f003 ff0a 	bl	800442c <osMutexCreate>
 8000618:	4603      	mov	r3, r0
 800061a:	4a37      	ldr	r2, [pc, #220]	@ (80006f8 <main+0x110>)
 800061c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  messageToRead = xEventGroupCreate();
 800061e:	f003 ffa1 	bl	8004564 <xEventGroupCreate>
 8000622:	4603      	mov	r3, r0
 8000624:	4a35      	ldr	r2, [pc, #212]	@ (80006fc <main+0x114>)
 8000626:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  MessageQueueHandle = xQueueCreate(5, sizeof(MessageCAN*));
 8000628:	2200      	movs	r2, #0
 800062a:	2104      	movs	r1, #4
 800062c:	2005      	movs	r0, #5
 800062e:	f004 fb14 	bl	8004c5a <xQueueGenericCreate>
 8000632:	4603      	mov	r3, r0
 8000634:	4a32      	ldr	r2, [pc, #200]	@ (8000700 <main+0x118>)
 8000636:	6013      	str	r3, [r2, #0]

  if (MessageQueueHandle == 0){
 8000638:	4b31      	ldr	r3, [pc, #196]	@ (8000700 <main+0x118>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d104      	bne.n	800064a <main+0x62>
	  print("Error Creating Queue");
 8000640:	4830      	ldr	r0, [pc, #192]	@ (8000704 <main+0x11c>)
 8000642:	f000 fa2d 	bl	8000aa0 <print>
	  Error_Handler();
 8000646:	f000 fd8f 	bl	8001168 <Error_Handler>
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 800064a:	4b2f      	ldr	r3, [pc, #188]	@ (8000708 <main+0x120>)
 800064c:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8000650:	461d      	mov	r5, r3
 8000652:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000654:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000656:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800065a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800065e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000662:	2100      	movs	r1, #0
 8000664:	4618      	mov	r0, r3
 8000666:	f003 fe6e 	bl	8004346 <osThreadCreate>
 800066a:	4603      	mov	r3, r0
 800066c:	4a27      	ldr	r2, [pc, #156]	@ (800070c <main+0x124>)
 800066e:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityAboveNormal, 0, 512);
 8000670:	4b27      	ldr	r3, [pc, #156]	@ (8000710 <main+0x128>)
 8000672:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000676:	461d      	mov	r5, r3
 8000678:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800067a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800067c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000680:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000684:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f003 fe5b 	bl	8004346 <osThreadCreate>
 8000690:	4603      	mov	r3, r0
 8000692:	4a20      	ldr	r2, [pc, #128]	@ (8000714 <main+0x12c>)
 8000694:	6013      	str	r3, [r2, #0]

  /* definition and creation of sdCardMsgPost */
  osThreadDef(sdCardMsgPost, StartTask03, osPriorityAboveNormal, 0, 512);
 8000696:	4b20      	ldr	r3, [pc, #128]	@ (8000718 <main+0x130>)
 8000698:	f107 041c 	add.w	r4, r7, #28
 800069c:	461d      	mov	r5, r3
 800069e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sdCardMsgPostHandle = osThreadCreate(osThread(sdCardMsgPost), NULL);
 80006aa:	f107 031c 	add.w	r3, r7, #28
 80006ae:	2100      	movs	r1, #0
 80006b0:	4618      	mov	r0, r3
 80006b2:	f003 fe48 	bl	8004346 <osThreadCreate>
 80006b6:	4603      	mov	r3, r0
 80006b8:	4a18      	ldr	r2, [pc, #96]	@ (800071c <main+0x134>)
 80006ba:	6013      	str	r3, [r2, #0]

  /* definition and creation of messageAvailabl */
  osThreadDef(messageAvailabl, StartTask04, osPriorityAboveNormal, 0, 256);
 80006bc:	4b18      	ldr	r3, [pc, #96]	@ (8000720 <main+0x138>)
 80006be:	463c      	mov	r4, r7
 80006c0:	461d      	mov	r5, r3
 80006c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  messageAvailablHandle = osThreadCreate(osThread(messageAvailabl), NULL);
 80006ce:	463b      	mov	r3, r7
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f003 fe37 	bl	8004346 <osThreadCreate>
 80006d8:	4603      	mov	r3, r0
 80006da:	4a12      	ldr	r2, [pc, #72]	@ (8000724 <main+0x13c>)
 80006dc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  print("MCP2515 init Started");
 80006de:	4812      	ldr	r0, [pc, #72]	@ (8000728 <main+0x140>)
 80006e0:	f000 f9de 	bl	8000aa0 <print>
  mcp2515init();
 80006e4:	f000 fab0 	bl	8000c48 <mcp2515init>
  print("Program Started");  /* USER CODE END RTOS_THREADS */
 80006e8:	4810      	ldr	r0, [pc, #64]	@ (800072c <main+0x144>)
 80006ea:	f000 f9d9 	bl	8000aa0 <print>

  /* Start scheduler */
  osKernelStart();
 80006ee:	f003 fe23 	bl	8004338 <osKernelStart>





  while (1)
 80006f2:	bf00      	nop
 80006f4:	e7fd      	b.n	80006f2 <main+0x10a>
 80006f6:	bf00      	nop
 80006f8:	200003f8 	.word	0x200003f8
 80006fc:	200003fc 	.word	0x200003fc
 8000700:	200006a4 	.word	0x200006a4
 8000704:	08009160 	.word	0x08009160
 8000708:	080091ac 	.word	0x080091ac
 800070c:	200003e8 	.word	0x200003e8
 8000710:	080091d4 	.word	0x080091d4
 8000714:	200003ec 	.word	0x200003ec
 8000718:	08009200 	.word	0x08009200
 800071c:	200003f0 	.word	0x200003f0
 8000720:	0800922c 	.word	0x0800922c
 8000724:	200003f4 	.word	0x200003f4
 8000728:	08009178 	.word	0x08009178
 800072c:	08009190 	.word	0x08009190

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b094      	sub	sp, #80	@ 0x50
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 0320 	add.w	r3, r7, #32
 800073a:	2230      	movs	r2, #48	@ 0x30
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f007 fc53 	bl	8007fea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	4b29      	ldr	r3, [pc, #164]	@ (8000800 <SystemClock_Config+0xd0>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800075c:	4a28      	ldr	r2, [pc, #160]	@ (8000800 <SystemClock_Config+0xd0>)
 800075e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000762:	6413      	str	r3, [r2, #64]	@ 0x40
 8000764:	4b26      	ldr	r3, [pc, #152]	@ (8000800 <SystemClock_Config+0xd0>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000768:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000770:	2300      	movs	r3, #0
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	4b23      	ldr	r3, [pc, #140]	@ (8000804 <SystemClock_Config+0xd4>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a22      	ldr	r2, [pc, #136]	@ (8000804 <SystemClock_Config+0xd4>)
 800077a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800077e:	6013      	str	r3, [r2, #0]
 8000780:	4b20      	ldr	r3, [pc, #128]	@ (8000804 <SystemClock_Config+0xd4>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800078c:	230a      	movs	r3, #10
 800078e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000790:	2301      	movs	r3, #1
 8000792:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000794:	2310      	movs	r3, #16
 8000796:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000798:	2301      	movs	r3, #1
 800079a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079c:	2302      	movs	r3, #2
 800079e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a0:	2300      	movs	r3, #0
 80007a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007a4:	2310      	movs	r3, #16
 80007a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007a8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80007ac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007ae:	2304      	movs	r3, #4
 80007b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007b2:	2304      	movs	r3, #4
 80007b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b6:	f107 0320 	add.w	r3, r7, #32
 80007ba:	4618      	mov	r0, r3
 80007bc:	f001 fa80 	bl	8001cc0 <HAL_RCC_OscConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007c6:	f000 fccf 	bl	8001168 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ca:	230f      	movs	r3, #15
 80007cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ce:	2302      	movs	r3, #2
 80007d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007e0:	f107 030c 	add.w	r3, r7, #12
 80007e4:	2102      	movs	r1, #2
 80007e6:	4618      	mov	r0, r3
 80007e8:	f001 fce2 	bl	80021b0 <HAL_RCC_ClockConfig>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007f2:	f000 fcb9 	bl	8001168 <Error_Handler>
  }
}
 80007f6:	bf00      	nop
 80007f8:	3750      	adds	r7, #80	@ 0x50
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800
 8000804:	40007000 	.word	0x40007000

08000808 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800080c:	4b0f      	ldr	r3, [pc, #60]	@ (800084c <MX_RTC_Init+0x44>)
 800080e:	4a10      	ldr	r2, [pc, #64]	@ (8000850 <MX_RTC_Init+0x48>)
 8000810:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000812:	4b0e      	ldr	r3, [pc, #56]	@ (800084c <MX_RTC_Init+0x44>)
 8000814:	2200      	movs	r2, #0
 8000816:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000818:	4b0c      	ldr	r3, [pc, #48]	@ (800084c <MX_RTC_Init+0x44>)
 800081a:	227f      	movs	r2, #127	@ 0x7f
 800081c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800081e:	4b0b      	ldr	r3, [pc, #44]	@ (800084c <MX_RTC_Init+0x44>)
 8000820:	22ff      	movs	r2, #255	@ 0xff
 8000822:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000824:	4b09      	ldr	r3, [pc, #36]	@ (800084c <MX_RTC_Init+0x44>)
 8000826:	2200      	movs	r2, #0
 8000828:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800082a:	4b08      	ldr	r3, [pc, #32]	@ (800084c <MX_RTC_Init+0x44>)
 800082c:	2200      	movs	r2, #0
 800082e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000830:	4b06      	ldr	r3, [pc, #24]	@ (800084c <MX_RTC_Init+0x44>)
 8000832:	2200      	movs	r2, #0
 8000834:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000836:	4805      	ldr	r0, [pc, #20]	@ (800084c <MX_RTC_Init+0x44>)
 8000838:	f001 fffc 	bl	8002834 <HAL_RTC_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000842:	f000 fc91 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000328 	.word	0x20000328
 8000850:	40002800 	.word	0x40002800

08000854 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000858:	4b17      	ldr	r3, [pc, #92]	@ (80008b8 <MX_SPI1_Init+0x64>)
 800085a:	4a18      	ldr	r2, [pc, #96]	@ (80008bc <MX_SPI1_Init+0x68>)
 800085c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800085e:	4b16      	ldr	r3, [pc, #88]	@ (80008b8 <MX_SPI1_Init+0x64>)
 8000860:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000864:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000866:	4b14      	ldr	r3, [pc, #80]	@ (80008b8 <MX_SPI1_Init+0x64>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800086c:	4b12      	ldr	r3, [pc, #72]	@ (80008b8 <MX_SPI1_Init+0x64>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000872:	4b11      	ldr	r3, [pc, #68]	@ (80008b8 <MX_SPI1_Init+0x64>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000878:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <MX_SPI1_Init+0x64>)
 800087a:	2200      	movs	r2, #0
 800087c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800087e:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <MX_SPI1_Init+0x64>)
 8000880:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000884:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000886:	4b0c      	ldr	r3, [pc, #48]	@ (80008b8 <MX_SPI1_Init+0x64>)
 8000888:	2220      	movs	r2, #32
 800088a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800088c:	4b0a      	ldr	r3, [pc, #40]	@ (80008b8 <MX_SPI1_Init+0x64>)
 800088e:	2200      	movs	r2, #0
 8000890:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000892:	4b09      	ldr	r3, [pc, #36]	@ (80008b8 <MX_SPI1_Init+0x64>)
 8000894:	2200      	movs	r2, #0
 8000896:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000898:	4b07      	ldr	r3, [pc, #28]	@ (80008b8 <MX_SPI1_Init+0x64>)
 800089a:	2200      	movs	r2, #0
 800089c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800089e:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <MX_SPI1_Init+0x64>)
 80008a0:	220a      	movs	r2, #10
 80008a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008a4:	4804      	ldr	r0, [pc, #16]	@ (80008b8 <MX_SPI1_Init+0x64>)
 80008a6:	f002 f8cb 	bl	8002a40 <HAL_SPI_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008b0:	f000 fc5a 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000348 	.word	0x20000348
 80008bc:	40013000 	.word	0x40013000

080008c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008c4:	4b11      	ldr	r3, [pc, #68]	@ (800090c <MX_USART2_UART_Init+0x4c>)
 80008c6:	4a12      	ldr	r2, [pc, #72]	@ (8000910 <MX_USART2_UART_Init+0x50>)
 80008c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ca:	4b10      	ldr	r3, [pc, #64]	@ (800090c <MX_USART2_UART_Init+0x4c>)
 80008cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	@ (800090c <MX_USART2_UART_Init+0x4c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	@ (800090c <MX_USART2_UART_Init+0x4c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008de:	4b0b      	ldr	r3, [pc, #44]	@ (800090c <MX_USART2_UART_Init+0x4c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008e4:	4b09      	ldr	r3, [pc, #36]	@ (800090c <MX_USART2_UART_Init+0x4c>)
 80008e6:	220c      	movs	r2, #12
 80008e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ea:	4b08      	ldr	r3, [pc, #32]	@ (800090c <MX_USART2_UART_Init+0x4c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f0:	4b06      	ldr	r3, [pc, #24]	@ (800090c <MX_USART2_UART_Init+0x4c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008f6:	4805      	ldr	r0, [pc, #20]	@ (800090c <MX_USART2_UART_Init+0x4c>)
 80008f8:	f003 f8e8 	bl	8003acc <HAL_UART_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000902:	f000 fc31 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	200003a0 	.word	0x200003a0
 8000910:	40004400 	.word	0x40004400

08000914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08a      	sub	sp, #40	@ 0x28
 8000918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]
 800092e:	4b3a      	ldr	r3, [pc, #232]	@ (8000a18 <MX_GPIO_Init+0x104>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	4a39      	ldr	r2, [pc, #228]	@ (8000a18 <MX_GPIO_Init+0x104>)
 8000934:	f043 0304 	orr.w	r3, r3, #4
 8000938:	6313      	str	r3, [r2, #48]	@ 0x30
 800093a:	4b37      	ldr	r3, [pc, #220]	@ (8000a18 <MX_GPIO_Init+0x104>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	f003 0304 	and.w	r3, r3, #4
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	4b33      	ldr	r3, [pc, #204]	@ (8000a18 <MX_GPIO_Init+0x104>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	4a32      	ldr	r2, [pc, #200]	@ (8000a18 <MX_GPIO_Init+0x104>)
 8000950:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000954:	6313      	str	r3, [r2, #48]	@ 0x30
 8000956:	4b30      	ldr	r3, [pc, #192]	@ (8000a18 <MX_GPIO_Init+0x104>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	4b2c      	ldr	r3, [pc, #176]	@ (8000a18 <MX_GPIO_Init+0x104>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	4a2b      	ldr	r2, [pc, #172]	@ (8000a18 <MX_GPIO_Init+0x104>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6313      	str	r3, [r2, #48]	@ 0x30
 8000972:	4b29      	ldr	r3, [pc, #164]	@ (8000a18 <MX_GPIO_Init+0x104>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	60bb      	str	r3, [r7, #8]
 800097c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	4b25      	ldr	r3, [pc, #148]	@ (8000a18 <MX_GPIO_Init+0x104>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	4a24      	ldr	r2, [pc, #144]	@ (8000a18 <MX_GPIO_Init+0x104>)
 8000988:	f043 0302 	orr.w	r3, r3, #2
 800098c:	6313      	str	r3, [r2, #48]	@ 0x30
 800098e:	4b22      	ldr	r3, [pc, #136]	@ (8000a18 <MX_GPIO_Init+0x104>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	f003 0302 	and.w	r3, r3, #2
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	2140      	movs	r1, #64	@ 0x40
 800099e:	481f      	ldr	r0, [pc, #124]	@ (8000a1c <MX_GPIO_Init+0x108>)
 80009a0:	f001 f95c 	bl	8001c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Btn_Int_Pin */
  GPIO_InitStruct.Pin = Btn_Int_Pin;
 80009a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009aa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Btn_Int_GPIO_Port, &GPIO_InitStruct);
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	4619      	mov	r1, r3
 80009ba:	4819      	ldr	r0, [pc, #100]	@ (8000a20 <MX_GPIO_Init+0x10c>)
 80009bc:	f000 ffb2 	bl	8001924 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_INT_Pin */
  GPIO_InitStruct.Pin = CAN_INT_Pin;
 80009c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ca:	2301      	movs	r3, #1
 80009cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CAN_INT_GPIO_Port, &GPIO_InitStruct);
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	4619      	mov	r1, r3
 80009d4:	4813      	ldr	r0, [pc, #76]	@ (8000a24 <MX_GPIO_Init+0x110>)
 80009d6:	f000 ffa5 	bl	8001924 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80009da:	2340      	movs	r3, #64	@ 0x40
 80009dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009de:	2301      	movs	r3, #1
 80009e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80009ea:	f107 0314 	add.w	r3, r7, #20
 80009ee:	4619      	mov	r1, r3
 80009f0:	480a      	ldr	r0, [pc, #40]	@ (8000a1c <MX_GPIO_Init+0x108>)
 80009f2:	f000 ff97 	bl	8001924 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2105      	movs	r1, #5
 80009fa:	2028      	movs	r0, #40	@ 0x28
 80009fc:	f000 ff68 	bl	80018d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a00:	2028      	movs	r0, #40	@ 0x28
 8000a02:	f000 ff81 	bl	8001908 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000a06:	2201      	movs	r2, #1
 8000a08:	2140      	movs	r1, #64	@ 0x40
 8000a0a:	4804      	ldr	r0, [pc, #16]	@ (8000a1c <MX_GPIO_Init+0x108>)
 8000a0c:	f001 f926 	bl	8001c5c <HAL_GPIO_WritePin>

/* USER CODE END MX_GPIO_Init_2 */
}
 8000a10:	bf00      	nop
 8000a12:	3728      	adds	r7, #40	@ 0x28
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40020400 	.word	0x40020400
 8000a20:	40020800 	.word	0x40020800
 8000a24:	40020000 	.word	0x40020000

08000a28 <LogStackUsage>:

/* USER CODE BEGIN 4 */

void LogStackUsage(const char* taskName, osThreadId thread_id) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	6039      	str	r1, [r7, #0]
    // Cast CMSIS-RTOS thread ID to FreeRTOS TaskHandle_t
    TaskHandle_t freertosTaskHandle = (TaskHandle_t)thread_id;
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	617b      	str	r3, [r7, #20]

    // Get the high water mark (minimum unused stack) in words
    UBaseType_t highWaterMark = uxTaskGetStackHighWaterMark(freertosTaskHandle);
 8000a36:	6978      	ldr	r0, [r7, #20]
 8000a38:	f005 ff00 	bl	800683c <uxTaskGetStackHighWaterMark>
 8000a3c:	6138      	str	r0, [r7, #16]

    // Convert remaining stack from words to bytes
    uint32_t remainingStackBytes = highWaterMark * sizeof(StackType_t);
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	60fb      	str	r3, [r7, #12]

    // Prepare the log message
    char *buffer;
    buffer = pvPortMalloc(100 * (sizeof(char)));
 8000a44:	2064      	movs	r0, #100	@ 0x64
 8000a46:	f006 ff79 	bl	800793c <pvPortMalloc>
 8000a4a:	60b8      	str	r0, [r7, #8]
    sprintf(buffer, "%s Remaining Stack: %lu bytes", taskName, (unsigned long)remainingStackBytes);
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	4906      	ldr	r1, [pc, #24]	@ (8000a6c <LogStackUsage+0x44>)
 8000a52:	68b8      	ldr	r0, [r7, #8]
 8000a54:	f007 fa66 	bl	8007f24 <siprintf>
    vPortFree(buffer);
 8000a58:	68b8      	ldr	r0, [r7, #8]
 8000a5a:	f007 f843 	bl	8007ae4 <vPortFree>

    // Log via UART
    print(buffer);
 8000a5e:	68b8      	ldr	r0, [r7, #8]
 8000a60:	f000 f81e 	bl	8000aa0 <print>
}
 8000a64:	bf00      	nop
 8000a66:	3718      	adds	r7, #24
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	08009248 	.word	0x08009248

08000a70 <vApplicationStackOverflowHook>:
}



void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
   print("Stack Overflow");
 8000a7a:	4803      	ldr	r0, [pc, #12]	@ (8000a88 <vApplicationStackOverflowHook+0x18>)
 8000a7c:	f000 f810 	bl	8000aa0 <print>
}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	08009294 	.word	0x08009294

08000a8c <vApplicationMallocFailedHook>:


void vApplicationMallocFailedHook(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
   print("Malloc Failed");
 8000a90:	4802      	ldr	r0, [pc, #8]	@ (8000a9c <vApplicationMallocFailedHook+0x10>)
 8000a92:	f000 f805 	bl	8000aa0 <print>
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	080092a4 	.word	0x080092a4

08000aa0 <print>:


void print(const char* buffer) {
 8000aa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000aa4:	b087      	sub	sp, #28
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
    // Calculate the string length
	if (osMutexWait(uartMutexHandle, osWaitForever) == osOK){
 8000aaa:	4b2e      	ldr	r3, [pc, #184]	@ (8000b64 <print+0xc4>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f003 fcd2 	bl	800445c <osMutexWait>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d14d      	bne.n	8000b5a <print+0xba>
 8000abe:	466b      	mov	r3, sp
 8000ac0:	461e      	mov	r6, r3
    size_t length = strlen(buffer);
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f7ff fb8c 	bl	80001e0 <strlen>
 8000ac8:	6178      	str	r0, [r7, #20]

    // Add space for the new line and carriage return
    char tempBuffer[length + 3]; // Original string + '\r' + '\n' + null terminator
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	1cd9      	adds	r1, r3, #3
 8000ace:	460b      	mov	r3, r1
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	4688      	mov	r8, r1
 8000ad8:	4699      	mov	r9, r3
 8000ada:	f04f 0200 	mov.w	r2, #0
 8000ade:	f04f 0300 	mov.w	r3, #0
 8000ae2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000ae6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000aea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000aee:	2300      	movs	r3, #0
 8000af0:	460c      	mov	r4, r1
 8000af2:	461d      	mov	r5, r3
 8000af4:	f04f 0200 	mov.w	r2, #0
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	00eb      	lsls	r3, r5, #3
 8000afe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000b02:	00e2      	lsls	r2, r4, #3
 8000b04:	1dcb      	adds	r3, r1, #7
 8000b06:	08db      	lsrs	r3, r3, #3
 8000b08:	00db      	lsls	r3, r3, #3
 8000b0a:	ebad 0d03 	sub.w	sp, sp, r3
 8000b0e:	466b      	mov	r3, sp
 8000b10:	3300      	adds	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]

    // Copy the original string into the temporary buffer
    strcpy(tempBuffer, buffer);
 8000b14:	6879      	ldr	r1, [r7, #4]
 8000b16:	68f8      	ldr	r0, [r7, #12]
 8000b18:	f007 fb39 	bl	800818e <strcpy>

    // Append the new line and carriage return
    tempBuffer[length] = '\r';     // Carriage return
 8000b1c:	68fa      	ldr	r2, [r7, #12]
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	4413      	add	r3, r2
 8000b22:	220d      	movs	r2, #13
 8000b24:	701a      	strb	r2, [r3, #0]
    tempBuffer[length + 1] = '\n'; // New line
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	68fa      	ldr	r2, [r7, #12]
 8000b2c:	210a      	movs	r1, #10
 8000b2e:	54d1      	strb	r1, [r2, r3]
    tempBuffer[length + 2] = '\0'; // Null terminator
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	3302      	adds	r3, #2
 8000b34:	68fa      	ldr	r2, [r7, #12]
 8000b36:	2100      	movs	r1, #0
 8000b38:	54d1      	strb	r1, [r2, r3]

    // Transmit the modified string over UART
    HAL_UART_Transmit(&huart2, (uint8_t*)tempBuffer, strlen(tempBuffer), 100);
 8000b3a:	68f8      	ldr	r0, [r7, #12]
 8000b3c:	f7ff fb50 	bl	80001e0 <strlen>
 8000b40:	4603      	mov	r3, r0
 8000b42:	b29a      	uxth	r2, r3
 8000b44:	2364      	movs	r3, #100	@ 0x64
 8000b46:	68f9      	ldr	r1, [r7, #12]
 8000b48:	4807      	ldr	r0, [pc, #28]	@ (8000b68 <print+0xc8>)
 8000b4a:	f003 f80f 	bl	8003b6c <HAL_UART_Transmit>
    osMutexRelease(uartMutexHandle);
 8000b4e:	4b05      	ldr	r3, [pc, #20]	@ (8000b64 <print+0xc4>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4618      	mov	r0, r3
 8000b54:	f003 fcd0 	bl	80044f8 <osMutexRelease>
 8000b58:	46b5      	mov	sp, r6
	}

}
 8000b5a:	bf00      	nop
 8000b5c:	371c      	adds	r7, #28
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000b64:	200003f8 	.word	0x200003f8
 8000b68:	200003a0 	.word	0x200003a0

08000b6c <mcp2515writeRegister>:

void mcp2515writeRegister(uint8_t address, uint8_t data){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	460a      	mov	r2, r1
 8000b76:	71fb      	strb	r3, [r7, #7]
 8000b78:	4613      	mov	r3, r2
 8000b7a:	71bb      	strb	r3, [r7, #6]

	uint8_t txBuffer[3] = {0x02, address, data};
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	733b      	strb	r3, [r7, #12]
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	737b      	strb	r3, [r7, #13]
 8000b84:	79bb      	ldrb	r3, [r7, #6]
 8000b86:	73bb      	strb	r3, [r7, #14]

	SPI1_CS_LOW();
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2140      	movs	r1, #64	@ 0x40
 8000b8c:	4809      	ldr	r0, [pc, #36]	@ (8000bb4 <mcp2515writeRegister+0x48>)
 8000b8e:	f001 f865 	bl	8001c5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, txBuffer, sizeof(txBuffer), 100);
 8000b92:	f107 010c 	add.w	r1, r7, #12
 8000b96:	2364      	movs	r3, #100	@ 0x64
 8000b98:	2203      	movs	r2, #3
 8000b9a:	4807      	ldr	r0, [pc, #28]	@ (8000bb8 <mcp2515writeRegister+0x4c>)
 8000b9c:	f001 ffd9 	bl	8002b52 <HAL_SPI_Transmit>
	SPI1_CS_HIGH();
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	2140      	movs	r1, #64	@ 0x40
 8000ba4:	4803      	ldr	r0, [pc, #12]	@ (8000bb4 <mcp2515writeRegister+0x48>)
 8000ba6:	f001 f859 	bl	8001c5c <HAL_GPIO_WritePin>
}
 8000baa:	bf00      	nop
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40020400 	.word	0x40020400
 8000bb8:	20000348 	.word	0x20000348

08000bbc <mcp2515readRegister>:


uint8_t mcp2515readRegister(uint8_t address){
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af02      	add	r7, sp, #8
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]

	uint8_t txBuffer[3] = {0x03, address, 0xFF};
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	733b      	strb	r3, [r7, #12]
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	737b      	strb	r3, [r7, #13]
 8000bce:	23ff      	movs	r3, #255	@ 0xff
 8000bd0:	73bb      	strb	r3, [r7, #14]
	uint8_t rxBuffer[3] = {0};
 8000bd2:	4b12      	ldr	r3, [pc, #72]	@ (8000c1c <mcp2515readRegister+0x60>)
 8000bd4:	881b      	ldrh	r3, [r3, #0]
 8000bd6:	813b      	strh	r3, [r7, #8]
 8000bd8:	2300      	movs	r3, #0
 8000bda:	72bb      	strb	r3, [r7, #10]

	HAL_StatusTypeDef status;

	SPI1_CS_LOW();
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2140      	movs	r1, #64	@ 0x40
 8000be0:	480f      	ldr	r0, [pc, #60]	@ (8000c20 <mcp2515readRegister+0x64>)
 8000be2:	f001 f83b 	bl	8001c5c <HAL_GPIO_WritePin>
    status = HAL_SPI_TransmitReceive(&hspi1, txBuffer, rxBuffer, sizeof(txBuffer), 100);
 8000be6:	f107 0208 	add.w	r2, r7, #8
 8000bea:	f107 010c 	add.w	r1, r7, #12
 8000bee:	2364      	movs	r3, #100	@ 0x64
 8000bf0:	9300      	str	r3, [sp, #0]
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	480b      	ldr	r0, [pc, #44]	@ (8000c24 <mcp2515readRegister+0x68>)
 8000bf6:	f002 fa09 	bl	800300c <HAL_SPI_TransmitReceive>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	73fb      	strb	r3, [r7, #15]
	SPI1_CS_HIGH();
 8000bfe:	2201      	movs	r2, #1
 8000c00:	2140      	movs	r1, #64	@ 0x40
 8000c02:	4807      	ldr	r0, [pc, #28]	@ (8000c20 <mcp2515readRegister+0x64>)
 8000c04:	f001 f82a 	bl	8001c5c <HAL_GPIO_WritePin>

	if(status != HAL_OK){
 8000c08:	7bfb      	ldrb	r3, [r7, #15]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <mcp2515readRegister+0x56>

		Error_Handler();
 8000c0e:	f000 faab 	bl	8001168 <Error_Handler>
	}
	return rxBuffer[2];
 8000c12:	7abb      	ldrb	r3, [r7, #10]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3710      	adds	r7, #16
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	080092b4 	.word	0x080092b4
 8000c20:	40020400 	.word	0x40020400
 8000c24:	20000348 	.word	0x20000348

08000c28 <mcp2515setTiming>:
    return timeValue;
}



void mcp2515setTiming(void){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
	// Example configuration for 500 kbps with 8 MHz oscillator
	// Calculate CNF1, CNF2, CNF3 using the MCP2515 datasheet
	mcp2515writeRegister(0x2A, 0x00); // CNF1: SJW=1, BRP=0
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	202a      	movs	r0, #42	@ 0x2a
 8000c30:	f7ff ff9c 	bl	8000b6c <mcp2515writeRegister>
	mcp2515writeRegister(0x29, 0x90); // CNF2: BTLMODE=1, SAM=0, PHSEG1=3, PRSEG=1
 8000c34:	2190      	movs	r1, #144	@ 0x90
 8000c36:	2029      	movs	r0, #41	@ 0x29
 8000c38:	f7ff ff98 	bl	8000b6c <mcp2515writeRegister>
	mcp2515writeRegister(0x28, 0x02); // CNF3: SOF=0, WAKFIL=0, PHSEG2=3
 8000c3c:	2102      	movs	r1, #2
 8000c3e:	2028      	movs	r0, #40	@ 0x28
 8000c40:	f7ff ff94 	bl	8000b6c <mcp2515writeRegister>
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <mcp2515init>:
	mcp2515readRegister(0x0F);


}

void mcp2515init(void){
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0

	uint8_t resetOP[1] = {0xC0};
 8000c4e:	23c0      	movs	r3, #192	@ 0xc0
 8000c50:	703b      	strb	r3, [r7, #0]
	uint8_t status = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	71fb      	strb	r3, [r7, #7]
	SPI1_CS_HIGH();
 8000c56:	2201      	movs	r2, #1
 8000c58:	2140      	movs	r1, #64	@ 0x40
 8000c5a:	4826      	ldr	r0, [pc, #152]	@ (8000cf4 <mcp2515init+0xac>)
 8000c5c:	f000 fffe 	bl	8001c5c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000c60:	200a      	movs	r0, #10
 8000c62:	f000 fd59 	bl	8001718 <HAL_Delay>

	mcp2515setTiming();
 8000c66:	f7ff ffdf 	bl	8000c28 <mcp2515setTiming>

	//Transmission to reset device
	SPI1_CS_LOW();
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2140      	movs	r1, #64	@ 0x40
 8000c6e:	4821      	ldr	r0, [pc, #132]	@ (8000cf4 <mcp2515init+0xac>)
 8000c70:	f000 fff4 	bl	8001c5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, resetOP, sizeof(resetOP), 100);
 8000c74:	4639      	mov	r1, r7
 8000c76:	2364      	movs	r3, #100	@ 0x64
 8000c78:	2201      	movs	r2, #1
 8000c7a:	481f      	ldr	r0, [pc, #124]	@ (8000cf8 <mcp2515init+0xb0>)
 8000c7c:	f001 ff69 	bl	8002b52 <HAL_SPI_Transmit>
	SPI1_CS_HIGH();
 8000c80:	2201      	movs	r2, #1
 8000c82:	2140      	movs	r1, #64	@ 0x40
 8000c84:	481b      	ldr	r0, [pc, #108]	@ (8000cf4 <mcp2515init+0xac>)
 8000c86:	f000 ffe9 	bl	8001c5c <HAL_GPIO_WritePin>

	HAL_Delay(1);
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	f000 fd44 	bl	8001718 <HAL_Delay>
	//Set to configuration Mode
	mcp2515writeRegister(0x0F,0x80);
 8000c90:	2180      	movs	r1, #128	@ 0x80
 8000c92:	200f      	movs	r0, #15
 8000c94:	f7ff ff6a 	bl	8000b6c <mcp2515writeRegister>

	//Read back to confirm config mode
	uint8_t configResult = mcp2515readRegister(0x0E);
 8000c98:	200e      	movs	r0, #14
 8000c9a:	f7ff ff8f 	bl	8000bbc <mcp2515readRegister>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71bb      	strb	r3, [r7, #6]

	if (configResult != 0x80){
 8000ca2:	79bb      	ldrb	r3, [r7, #6]
 8000ca4:	2b80      	cmp	r3, #128	@ 0x80
 8000ca6:	d001      	beq.n	8000cac <mcp2515init+0x64>
		Error_Handler();
 8000ca8:	f000 fa5e 	bl	8001168 <Error_Handler>

	}
	//Write into the receive 0 buffer to receive any message coming through
	mcp2515writeRegister(0x60, 0x60);
 8000cac:	2160      	movs	r1, #96	@ 0x60
 8000cae:	2060      	movs	r0, #96	@ 0x60
 8000cb0:	f7ff ff5c 	bl	8000b6c <mcp2515writeRegister>

	uint8_t	buffer0ConfigResult = mcp2515readRegister(0x60);
 8000cb4:	2060      	movs	r0, #96	@ 0x60
 8000cb6:	f7ff ff81 	bl	8000bbc <mcp2515readRegister>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	717b      	strb	r3, [r7, #5]
//			Error_Handler();
//		}

	//Set register to accept any message

	HAL_Delay(10);
 8000cbe:	200a      	movs	r0, #10
 8000cc0:	f000 fd2a 	bl	8001718 <HAL_Delay>
	//Write CAN status register into Normal Operation mode
	mcp2515writeRegister(0x0F,0x00);
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	200f      	movs	r0, #15
 8000cc8:	f7ff ff50 	bl	8000b6c <mcp2515writeRegister>
	HAL_Delay(10);
 8000ccc:	200a      	movs	r0, #10
 8000cce:	f000 fd23 	bl	8001718 <HAL_Delay>

	//Read CAN status register to confirm normal operation mode
	uint8_t resultAfter = mcp2515readRegister(0x0E);
 8000cd2:	200e      	movs	r0, #14
 8000cd4:	f7ff ff72 	bl	8000bbc <mcp2515readRegister>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	713b      	strb	r3, [r7, #4]

	if (resultAfter != 0x00){
 8000cdc:	793b      	ldrb	r3, [r7, #4]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <mcp2515init+0x9e>
		Error_Handler();
 8000ce2:	f000 fa41 	bl	8001168 <Error_Handler>
	}

	HAL_Delay (10);
 8000ce6:	200a      	movs	r0, #10
 8000ce8:	f000 fd16 	bl	8001718 <HAL_Delay>
}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40020400 	.word	0x40020400
 8000cf8:	20000348 	.word	0x20000348

08000cfc <mcp2515messageAvailable>:

void mcp2515messageAvailable(void){
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0

	GPIO_PinState status;
	GPIO_PinState status1;


	status = HAL_GPIO_ReadPin(CAN_INT_GPIO_Port, CAN_INT_Pin);
 8000d02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d06:	4811      	ldr	r0, [pc, #68]	@ (8000d4c <mcp2515messageAvailable+0x50>)
 8000d08:	f000 ff90 	bl	8001c2c <HAL_GPIO_ReadPin>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	71fb      	strb	r3, [r7, #7]
	//Set the Interrupt flag from the RX0IF
	mcp2515writeRegister(0x2B, 0x01);
 8000d10:	2101      	movs	r1, #1
 8000d12:	202b      	movs	r0, #43	@ 0x2b
 8000d14:	f7ff ff2a 	bl	8000b6c <mcp2515writeRegister>



	//read the result from the Interrupt enable register at RX0IE
	uint8_t result = mcp2515readRegister(0x2B);
 8000d18:	202b      	movs	r0, #43	@ 0x2b
 8000d1a:	f7ff ff4f 	bl	8000bbc <mcp2515readRegister>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71bb      	strb	r3, [r7, #6]
	result = mcp2515readRegister(0x0C);
 8000d22:	200c      	movs	r0, #12
 8000d24:	f7ff ff4a 	bl	8000bbc <mcp2515readRegister>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	71bb      	strb	r3, [r7, #6]
	mcp2515writeRegister(0x2C, 0x01);
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	202c      	movs	r0, #44	@ 0x2c
 8000d30:	f7ff ff1c 	bl	8000b6c <mcp2515writeRegister>

	if (result != 0x01){
		//Error_Handler();
	}

	status1 = HAL_GPIO_ReadPin(CAN_INT_GPIO_Port, CAN_INT_Pin);
 8000d34:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d38:	4804      	ldr	r0, [pc, #16]	@ (8000d4c <mcp2515messageAvailable+0x50>)
 8000d3a:	f000 ff77 	bl	8001c2c <HAL_GPIO_ReadPin>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	717b      	strb	r3, [r7, #5]

}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40020000 	.word	0x40020000

08000d50 <mcp2515readMessage>:


void mcp2515readMessage(bool random, uint8_t fixedData){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08c      	sub	sp, #48	@ 0x30
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	460a      	mov	r2, r1
 8000d5a:	71fb      	strb	r3, [r7, #7]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	71bb      	strb	r3, [r7, #6]
	//Use this function to take the message and transform it into a readable CAN message packet to be read

	//Use the recevice function and return a random number in place of of it. Clears register as well

	//Sanity check for GPIO pin
	GPIO_PinState status = HAL_GPIO_ReadPin(CAN_INT_GPIO_Port, CAN_INT_Pin);
 8000d60:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d64:	485c      	ldr	r0, [pc, #368]	@ (8000ed8 <mcp2515readMessage+0x188>)
 8000d66:	f000 ff61 	bl	8001c2c <HAL_GPIO_ReadPin>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (status == GPIO_PIN_RESET){
 8000d70:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	f040 80a5 	bne.w	8000ec4 <mcp2515readMessage+0x174>
		uint8_t readRXB0[1] = {0x90};
 8000d7a:	2390      	movs	r3, #144	@ 0x90
 8000d7c:	f887 3020 	strb.w	r3, [r7, #32]
		uint8_t RXB0Buffer[14] = {0};
 8000d80:	2300      	movs	r3, #0
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	811a      	strh	r2, [r3, #8]
		uint16_t RXB0Data[1] = {0};
 8000d90:	2300      	movs	r3, #0
 8000d92:	81bb      	strh	r3, [r7, #12]

		//Clear RXB0
		mcp2515writeRegister(0x2C, 0x00);
 8000d94:	2100      	movs	r1, #0
 8000d96:	202c      	movs	r0, #44	@ 0x2c
 8000d98:	f7ff fee8 	bl	8000b6c <mcp2515writeRegister>

		SPI1_CS_LOW();
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2140      	movs	r1, #64	@ 0x40
 8000da0:	484e      	ldr	r0, [pc, #312]	@ (8000edc <mcp2515readMessage+0x18c>)
 8000da2:	f000 ff5b 	bl	8001c5c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, readRXB0, 1, 100);
 8000da6:	f107 0120 	add.w	r1, r7, #32
 8000daa:	2364      	movs	r3, #100	@ 0x64
 8000dac:	2201      	movs	r2, #1
 8000dae:	484c      	ldr	r0, [pc, #304]	@ (8000ee0 <mcp2515readMessage+0x190>)
 8000db0:	f001 fecf 	bl	8002b52 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, RXB0Buffer, 14, 100);
 8000db4:	f107 0110 	add.w	r1, r7, #16
 8000db8:	2364      	movs	r3, #100	@ 0x64
 8000dba:	220e      	movs	r2, #14
 8000dbc:	4848      	ldr	r0, [pc, #288]	@ (8000ee0 <mcp2515readMessage+0x190>)
 8000dbe:	f002 f80c 	bl	8002dda <HAL_SPI_Receive>
		SPI1_CS_HIGH();
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	2140      	movs	r1, #64	@ 0x40
 8000dc6:	4845      	ldr	r0, [pc, #276]	@ (8000edc <mcp2515readMessage+0x18c>)
 8000dc8:	f000 ff48 	bl	8001c5c <HAL_GPIO_WritePin>

		//Returns data of the message, can be random or fixed for testing
		if (random == true){
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d010      	beq.n	8000df4 <mcp2515readMessage+0xa4>
			RXB0Data[0] = rand() % (255);
 8000dd2:	f006 ffa7 	bl	8007d24 <rand>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	4b42      	ldr	r3, [pc, #264]	@ (8000ee4 <mcp2515readMessage+0x194>)
 8000dda:	fb83 1302 	smull	r1, r3, r3, r2
 8000dde:	4413      	add	r3, r2
 8000de0:	11d9      	asrs	r1, r3, #7
 8000de2:	17d3      	asrs	r3, r2, #31
 8000de4:	1ac9      	subs	r1, r1, r3
 8000de6:	460b      	mov	r3, r1
 8000de8:	021b      	lsls	r3, r3, #8
 8000dea:	1a5b      	subs	r3, r3, r1
 8000dec:	1ad1      	subs	r1, r2, r3
 8000dee:	b28b      	uxth	r3, r1
 8000df0:	81bb      	strh	r3, [r7, #12]
 8000df2:	e002      	b.n	8000dfa <mcp2515readMessage+0xaa>
		}
		else{

			RXB0Data[0] = fixedData;
 8000df4:	79bb      	ldrb	r3, [r7, #6]
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	81bb      	strh	r3, [r7, #12]
		}

		//uint16_t timestamp = Timestamp();
		counter += 1;
 8000dfa:	4b3b      	ldr	r3, [pc, #236]	@ (8000ee8 <mcp2515readMessage+0x198>)
 8000dfc:	881b      	ldrh	r3, [r3, #0]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	4b39      	ldr	r3, [pc, #228]	@ (8000ee8 <mcp2515readMessage+0x198>)
 8000e04:	801a      	strh	r2, [r3, #0]


		//Create Pointer to the MessageCAN Struct
		MessageCAN *ptrToStruct;

		ptrToStruct = pvPortMalloc(sizeof(MessageCAN)); //Returns Object not address
 8000e06:	200c      	movs	r0, #12
 8000e08:	f006 fd98 	bl	800793c <pvPortMalloc>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	60bb      	str	r3, [r7, #8]
		if (ptrToStruct == NULL) {
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d104      	bne.n	8000e20 <mcp2515readMessage+0xd0>
		    print("Memory allocation failed for can msg");
 8000e16:	4835      	ldr	r0, [pc, #212]	@ (8000eec <mcp2515readMessage+0x19c>)
 8000e18:	f7ff fe42 	bl	8000aa0 <print>
		    Error_Handler();
 8000e1c:	f000 f9a4 	bl	8001168 <Error_Handler>
		}

		ptrToStruct->canID = 0x35;
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	2235      	movs	r2, #53	@ 0x35
 8000e24:	701a      	strb	r2, [r3, #0]
		ptrToStruct->data = RXB0Data[0];  //DOES NOT DECAY TO POINTER because of [0]
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	89ba      	ldrh	r2, [r7, #12]
 8000e2a:	805a      	strh	r2, [r3, #2]
		ptrToStruct->		timeStamp = counter;
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	4a2e      	ldr	r2, [pc, #184]	@ (8000ee8 <mcp2515readMessage+0x198>)
 8000e30:	8812      	ldrh	r2, [r2, #0]
 8000e32:	809a      	strh	r2, [r3, #4]
		ptrToStruct->sensorName = "Temp Sensor";
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	4a2e      	ldr	r2, [pc, #184]	@ (8000ef0 <mcp2515readMessage+0x1a0>)
 8000e38:	609a      	str	r2, [r3, #8]

		//Send to QUeue
		if (xQueueSend(MessageQueueHandle, &ptrToStruct, portMAX_DELAY) == pdPASS)
 8000e3a:	4b2e      	ldr	r3, [pc, #184]	@ (8000ef4 <mcp2515readMessage+0x1a4>)
 8000e3c:	6818      	ldr	r0, [r3, #0]
 8000e3e:	f107 0108 	add.w	r1, r7, #8
 8000e42:	2300      	movs	r3, #0
 8000e44:	f04f 32ff 	mov.w	r2, #4294967295
 8000e48:	f003 ffae 	bl	8004da8 <xQueueGenericSend>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d103      	bne.n	8000e5a <mcp2515readMessage+0x10a>
		{
			print("Message in Queue");
 8000e52:	4829      	ldr	r0, [pc, #164]	@ (8000ef8 <mcp2515readMessage+0x1a8>)
 8000e54:	f7ff fe24 	bl	8000aa0 <print>
 8000e58:	e006      	b.n	8000e68 <mcp2515readMessage+0x118>
		}
		else{

			vPortFree(ptrToStruct);
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f006 fe41 	bl	8007ae4 <vPortFree>
			print("Failed to put message in Queue");
 8000e62:	4826      	ldr	r0, [pc, #152]	@ (8000efc <mcp2515readMessage+0x1ac>)
 8000e64:	f7ff fe1c 	bl	8000aa0 <print>
		}

		uint32_t MsgInQueue = uxQueueSpacesAvailable(MessageQueueHandle);
 8000e68:	4b22      	ldr	r3, [pc, #136]	@ (8000ef4 <mcp2515readMessage+0x1a4>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f004 fc5e 	bl	800572e <uxQueueSpacesAvailable>
 8000e72:	62b8      	str	r0, [r7, #40]	@ 0x28

		char *ptr;
		ptr = pvPortMalloc(100 * sizeof(char));
 8000e74:	2064      	movs	r0, #100	@ 0x64
 8000e76:	f006 fd61 	bl	800793c <pvPortMalloc>
 8000e7a:	6278      	str	r0, [r7, #36]	@ 0x24
		if (ptr == NULL) {
 8000e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d104      	bne.n	8000e8c <mcp2515readMessage+0x13c>
				    print("Memory allocation failed for msg in queue number");
 8000e82:	481f      	ldr	r0, [pc, #124]	@ (8000f00 <mcp2515readMessage+0x1b0>)
 8000e84:	f7ff fe0c 	bl	8000aa0 <print>
				    Error_Handler();
 8000e88:	f000 f96e 	bl	8001168 <Error_Handler>
				}
		sprintf(ptr, "Number of spaces in Queue: %u", MsgInQueue);
 8000e8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000e8e:	491d      	ldr	r1, [pc, #116]	@ (8000f04 <mcp2515readMessage+0x1b4>)
 8000e90:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000e92:	f007 f847 	bl	8007f24 <siprintf>
		print(ptr);
 8000e96:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000e98:	f7ff fe02 	bl	8000aa0 <print>
		vPortFree(ptr);
 8000e9c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000e9e:	f006 fe21 	bl	8007ae4 <vPortFree>
		ptr = NULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	627b      	str	r3, [r7, #36]	@ 0x24
//		sprintf(ptrr, "Data: %u from Sensor: %s", ptrToStruct->data, ptrToStruct->sensorName);
//		print(ptrr);
//		vPortFree(ptrr);
//		ptrr = NULL;

		if (MsgInQueue == 0){    //
 8000ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d110      	bne.n	8000ece <mcp2515readMessage+0x17e>

			print("Queue is Full");
 8000eac:	4816      	ldr	r0, [pc, #88]	@ (8000f08 <mcp2515readMessage+0x1b8>)
 8000eae:	f7ff fdf7 	bl	8000aa0 <print>
			xEventGroupSetBits(messageToRead, EVENT_BIT_3);
 8000eb2:	4b16      	ldr	r3, [pc, #88]	@ (8000f0c <mcp2515readMessage+0x1bc>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2108      	movs	r1, #8
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f003 fc78 	bl	80047ae <xEventGroupSetBits>
			osThreadYield();
 8000ebe:	f003 fa8f 	bl	80043e0 <osThreadYield>
	else{
		print("no message in buffer, should not happen error");
		Error_Handler();
	}

}
 8000ec2:	e004      	b.n	8000ece <mcp2515readMessage+0x17e>
		print("no message in buffer, should not happen error");
 8000ec4:	4812      	ldr	r0, [pc, #72]	@ (8000f10 <mcp2515readMessage+0x1c0>)
 8000ec6:	f7ff fdeb 	bl	8000aa0 <print>
		Error_Handler();
 8000eca:	f000 f94d 	bl	8001168 <Error_Handler>
}
 8000ece:	bf00      	nop
 8000ed0:	3730      	adds	r7, #48	@ 0x30
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40020000 	.word	0x40020000
 8000edc:	40020400 	.word	0x40020400
 8000ee0:	20000348 	.word	0x20000348
 8000ee4:	80808081 	.word	0x80808081
 8000ee8:	200006a0 	.word	0x200006a0
 8000eec:	080092b8 	.word	0x080092b8
 8000ef0:	080092e0 	.word	0x080092e0
 8000ef4:	200006a4 	.word	0x200006a4
 8000ef8:	080092ec 	.word	0x080092ec
 8000efc:	08009300 	.word	0x08009300
 8000f00:	08009320 	.word	0x08009320
 8000f04:	08009354 	.word	0x08009354
 8000f08:	08009374 	.word	0x08009374
 8000f0c:	200003fc 	.word	0x200003fc
 8000f10:	08009384 	.word	0x08009384

08000f14 <sdCardMsgPost>:

void sdCardMsgPost(void){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af02      	add	r7, sp, #8
	 * Free all memory as messages are processed
	 */



	if (uxQueueSpacesAvailable(MessageQueueHandle) == 0){
 8000f1a:	4b23      	ldr	r3, [pc, #140]	@ (8000fa8 <sdCardMsgPost+0x94>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f004 fc05 	bl	800572e <uxQueueSpacesAvailable>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d13a      	bne.n	8000fa0 <sdCardMsgPost+0x8c>

		MessageCAN *ptrToRxMsg;
		char *ptr;

		while(uxQueueMessagesWaiting(MessageQueueHandle) != 0){			//     ////Make this a for loop for sizeof messages waiting
 8000f2a:	e031      	b.n	8000f90 <sdCardMsgPost+0x7c>

			print("In SD Msg post function");
 8000f2c:	481f      	ldr	r0, [pc, #124]	@ (8000fac <sdCardMsgPost+0x98>)
 8000f2e:	f7ff fdb7 	bl	8000aa0 <print>

			if (xQueueReceive(MessageQueueHandle, &ptrToRxMsg, portMAX_DELAY) == pdPASS ){
 8000f32:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa8 <sdCardMsgPost+0x94>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4639      	mov	r1, r7
 8000f38:	f04f 32ff 	mov.w	r2, #4294967295
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f004 f963 	bl	8005208 <xQueueReceive>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d123      	bne.n	8000f90 <sdCardMsgPost+0x7c>

				ptr = pvPortMalloc(100 * sizeof(char));
 8000f48:	2064      	movs	r0, #100	@ 0x64
 8000f4a:	f006 fcf7 	bl	800793c <pvPortMalloc>
 8000f4e:	6078      	str	r0, [r7, #4]
				if (ptr == NULL) {
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d104      	bne.n	8000f60 <sdCardMsgPost+0x4c>
							print("Memory allocation failed for sd card msg");
 8000f56:	4816      	ldr	r0, [pc, #88]	@ (8000fb0 <sdCardMsgPost+0x9c>)
 8000f58:	f7ff fda2 	bl	8000aa0 <print>
							Error_Handler();
 8000f5c:	f000 f904 	bl	8001168 <Error_Handler>
				}
				sprintf (ptr, "Received Data: %u at Time: %u from %s", ptrToRxMsg->data, ptrToRxMsg->timeStamp, ptrToRxMsg->sensorName);
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	885b      	ldrh	r3, [r3, #2]
 8000f64:	461a      	mov	r2, r3
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	889b      	ldrh	r3, [r3, #4]
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	460b      	mov	r3, r1
 8000f74:	490f      	ldr	r1, [pc, #60]	@ (8000fb4 <sdCardMsgPost+0xa0>)
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f006 ffd4 	bl	8007f24 <siprintf>
				print(ptr);
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f7ff fd8f 	bl	8000aa0 <print>
				vPortFree(ptr);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f006 fdae 	bl	8007ae4 <vPortFree>
				vPortFree(ptrToRxMsg);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f006 fdaa 	bl	8007ae4 <vPortFree>
		while(uxQueueMessagesWaiting(MessageQueueHandle) != 0){			//     ////Make this a for loop for sizeof messages waiting
 8000f90:	4b05      	ldr	r3, [pc, #20]	@ (8000fa8 <sdCardMsgPost+0x94>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f004 fbab 	bl	80056f0 <uxQueueMessagesWaiting>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d1c5      	bne.n	8000f2c <sdCardMsgPost+0x18>
			}

		}
	}
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	200006a4 	.word	0x200006a4
 8000fac:	080093b4 	.word	0x080093b4
 8000fb0:	080093cc 	.word	0x080093cc
 8000fb4:	080093f8 	.word	0x080093f8

08000fb8 <HAL_GPIO_EXTI_Callback>:
	return;
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	80fb      	strh	r3, [r7, #6]


	UNUSED(GPIO_Pin);
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
	xEventGroupSetBitsFromISR(messageToRead, EVENT_BIT_1, &xHigherPriorityTaskWoken);
 8000fc6:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <HAL_GPIO_EXTI_Callback+0x28>)
 8000fc8:	6819      	ldr	r1, [r3, #0]
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	2202      	movs	r2, #2
 8000fd0:	4804      	ldr	r0, [pc, #16]	@ (8000fe4 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000fd2:	f006 fa3d 	bl	8007450 <xTimerPendFunctionCallFromISR>
}
 8000fd6:	bf00      	nop
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200003fc 	.word	0x200003fc
 8000fe4:	080048c7 	.word	0x080048c7

08000fe8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    //print("Idle Task");
    //LogStackUsage("Idle Task", defaultTaskHandle);
    //HeapMonitorTask();
    osDelay(1000);
 8000ff0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ff4:	f003 fa06 	bl	8004404 <osDelay>
 8000ff8:	e7fa      	b.n	8000ff0 <StartDefaultTask+0x8>
	...

08000ffc <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af02      	add	r7, sp, #8
 8001002:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  //print("Task 2 Entered");
	  EventBits_t uxBits = xEventGroupWaitBits(messageToRead, EVENT_BIT_2, pdTRUE, pdTRUE, portMAX_DELAY);
 8001004:	4b10      	ldr	r3, [pc, #64]	@ (8001048 <StartTask02+0x4c>)
 8001006:	6818      	ldr	r0, [r3, #0]
 8001008:	f04f 33ff 	mov.w	r3, #4294967295
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	2301      	movs	r3, #1
 8001010:	2201      	movs	r2, #1
 8001012:	2104      	movs	r1, #4
 8001014:	f003 fac0 	bl	8004598 <xEventGroupWaitBits>
 8001018:	60f8      	str	r0, [r7, #12]
	  //if (ux)
	  print("Task Started");
 800101a:	480c      	ldr	r0, [pc, #48]	@ (800104c <StartTask02+0x50>)
 800101c:	f7ff fd40 	bl	8000aa0 <print>
      mcp2515readMessage(false, 100);
 8001020:	2164      	movs	r1, #100	@ 0x64
 8001022:	2000      	movs	r0, #0
 8001024:	f7ff fe94 	bl	8000d50 <mcp2515readMessage>
      EventBits_t currentBits = xEventGroupGetBits(messageToRead);  //DEBUG
 8001028:	4b07      	ldr	r3, [pc, #28]	@ (8001048 <StartTask02+0x4c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2100      	movs	r1, #0
 800102e:	4618      	mov	r0, r3
 8001030:	f003 fb84 	bl	800473c <xEventGroupClearBits>
 8001034:	60b8      	str	r0, [r7, #8]
      LogStackUsage("Read Message Task", myTask02Handle);
 8001036:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <StartTask02+0x54>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4619      	mov	r1, r3
 800103c:	4805      	ldr	r0, [pc, #20]	@ (8001054 <StartTask02+0x58>)
 800103e:	f7ff fcf3 	bl	8000a28 <LogStackUsage>
  {
 8001042:	bf00      	nop
 8001044:	e7de      	b.n	8001004 <StartTask02+0x8>
 8001046:	bf00      	nop
 8001048:	200003fc 	.word	0x200003fc
 800104c:	08009420 	.word	0x08009420
 8001050:	200003ec 	.word	0x200003ec
 8001054:	08009430 	.word	0x08009430

08001058 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af02      	add	r7, sp, #8
 800105e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	 //print("Task 3 Entered");
	 EventBits_t uxBits = xEventGroupWaitBits(messageToRead, EVENT_BIT_3, pdTRUE, pdTRUE, portMAX_DELAY); //Or change to IF QueueFull == true then ELSE osYield();
 8001060:	4b15      	ldr	r3, [pc, #84]	@ (80010b8 <StartTask03+0x60>)
 8001062:	6818      	ldr	r0, [r3, #0]
 8001064:	f04f 33ff 	mov.w	r3, #4294967295
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	2301      	movs	r3, #1
 800106c:	2201      	movs	r2, #1
 800106e:	2108      	movs	r1, #8
 8001070:	f003 fa92 	bl	8004598 <xEventGroupWaitBits>
 8001074:	60f8      	str	r0, [r7, #12]
	 print("Task 3 Started");
 8001076:	4811      	ldr	r0, [pc, #68]	@ (80010bc <StartTask03+0x64>)
 8001078:	f7ff fd12 	bl	8000aa0 <print>
	 sdCardMsgPost();
 800107c:	f7ff ff4a 	bl	8000f14 <sdCardMsgPost>
	 xEventGroupSetBits(messageToRead, EVENT_BIT_0);
 8001080:	4b0d      	ldr	r3, [pc, #52]	@ (80010b8 <StartTask03+0x60>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f003 fb91 	bl	80047ae <xEventGroupSetBits>
	 EventBits_t currentBits = xEventGroupGetBits(messageToRead);
 800108c:	4b0a      	ldr	r3, [pc, #40]	@ (80010b8 <StartTask03+0x60>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f003 fb52 	bl	800473c <xEventGroupClearBits>
 8001098:	60b8      	str	r0, [r7, #8]
	 if (currentBits == 0x04){
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	2b04      	cmp	r3, #4
 800109e:	d104      	bne.n	80010aa <StartTask03+0x52>
		 print("Bits not reset for event flag");
 80010a0:	4807      	ldr	r0, [pc, #28]	@ (80010c0 <StartTask03+0x68>)
 80010a2:	f7ff fcfd 	bl	8000aa0 <print>
		 Error_Handler();
 80010a6:	f000 f85f 	bl	8001168 <Error_Handler>
	 }
     LogStackUsage("SD Card message Post", sdCardMsgPostHandle);
 80010aa:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <StartTask03+0x6c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4619      	mov	r1, r3
 80010b0:	4805      	ldr	r0, [pc, #20]	@ (80010c8 <StartTask03+0x70>)
 80010b2:	f7ff fcb9 	bl	8000a28 <LogStackUsage>
  {
 80010b6:	e7d3      	b.n	8001060 <StartTask03+0x8>
 80010b8:	200003fc 	.word	0x200003fc
 80010bc:	08009444 	.word	0x08009444
 80010c0:	08009454 	.word	0x08009454
 80010c4:	200003f0 	.word	0x200003f0
 80010c8:	08009474 	.word	0x08009474

080010cc <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af02      	add	r7, sp, #8
 80010d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
	  EventBits_t uxBits = xEventGroupWaitBits(messageToRead, EVENT_BIT_1, pdTRUE, pdTRUE, portMAX_DELAY);
 80010d4:	4b17      	ldr	r3, [pc, #92]	@ (8001134 <StartTask04+0x68>)
 80010d6:	6818      	ldr	r0, [r3, #0]
 80010d8:	f04f 33ff 	mov.w	r3, #4294967295
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2301      	movs	r3, #1
 80010e0:	2201      	movs	r2, #1
 80010e2:	2102      	movs	r1, #2
 80010e4:	f003 fa58 	bl	8004598 <xEventGroupWaitBits>
 80010e8:	60f8      	str	r0, [r7, #12]
	  print("Task 4 started");
 80010ea:	4813      	ldr	r0, [pc, #76]	@ (8001138 <StartTask04+0x6c>)
 80010ec:	f7ff fcd8 	bl	8000aa0 <print>
	  mcp2515messageAvailable();
 80010f0:	f7ff fe04 	bl	8000cfc <mcp2515messageAvailable>
	  EventBits_t currentBits = xEventGroupGetBits(messageToRead);
 80010f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001134 <StartTask04+0x68>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f003 fb1e 	bl	800473c <xEventGroupClearBits>
 8001100:	60b8      	str	r0, [r7, #8]
	  uxBits = xEventGroupSetBits(messageToRead, EVENT_BIT_2);
 8001102:	4b0c      	ldr	r3, [pc, #48]	@ (8001134 <StartTask04+0x68>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2104      	movs	r1, #4
 8001108:	4618      	mov	r0, r3
 800110a:	f003 fb50 	bl	80047ae <xEventGroupSetBits>
 800110e:	60f8      	str	r0, [r7, #12]
	  currentBits = xEventGroupGetBits(messageToRead);
 8001110:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <StartTask04+0x68>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f003 fb10 	bl	800473c <xEventGroupClearBits>
 800111c:	60b8      	str	r0, [r7, #8]
      LogStackUsage("Avialable Message Task", messageAvailablHandle);
 800111e:	4b07      	ldr	r3, [pc, #28]	@ (800113c <StartTask04+0x70>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4619      	mov	r1, r3
 8001124:	4806      	ldr	r0, [pc, #24]	@ (8001140 <StartTask04+0x74>)
 8001126:	f7ff fc7f 	bl	8000a28 <LogStackUsage>
	  osDelay(50);
 800112a:	2032      	movs	r0, #50	@ 0x32
 800112c:	f003 f96a 	bl	8004404 <osDelay>
  {
 8001130:	bf00      	nop
 8001132:	e7cf      	b.n	80010d4 <StartTask04+0x8>
 8001134:	200003fc 	.word	0x200003fc
 8001138:	0800948c 	.word	0x0800948c
 800113c:	200003f4 	.word	0x200003f4
 8001140:	0800949c 	.word	0x0800949c

08001144 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a04      	ldr	r2, [pc, #16]	@ (8001164 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d101      	bne.n	800115a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001156:	f000 fabf 	bl	80016d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40010000 	.word	0x40010000

08001168 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800116c:	b672      	cpsid	i
}
 800116e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();


  while (1)
 8001170:	bf00      	nop
 8001172:	e7fd      	b.n	8001170 <Error_Handler+0x8>

08001174 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	607b      	str	r3, [r7, #4]
 800117e:	4b12      	ldr	r3, [pc, #72]	@ (80011c8 <HAL_MspInit+0x54>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001182:	4a11      	ldr	r2, [pc, #68]	@ (80011c8 <HAL_MspInit+0x54>)
 8001184:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001188:	6453      	str	r3, [r2, #68]	@ 0x44
 800118a:	4b0f      	ldr	r3, [pc, #60]	@ (80011c8 <HAL_MspInit+0x54>)
 800118c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800118e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	603b      	str	r3, [r7, #0]
 800119a:	4b0b      	ldr	r3, [pc, #44]	@ (80011c8 <HAL_MspInit+0x54>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119e:	4a0a      	ldr	r2, [pc, #40]	@ (80011c8 <HAL_MspInit+0x54>)
 80011a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011a6:	4b08      	ldr	r3, [pc, #32]	@ (80011c8 <HAL_MspInit+0x54>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ae:	603b      	str	r3, [r7, #0]
 80011b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011b2:	2200      	movs	r2, #0
 80011b4:	210f      	movs	r1, #15
 80011b6:	f06f 0001 	mvn.w	r0, #1
 80011ba:	f000 fb89 	bl	80018d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40023800 	.word	0x40023800

080011cc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b088      	sub	sp, #32
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011d4:	f107 0308 	add.w	r3, r7, #8
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
 80011e4:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a0c      	ldr	r2, [pc, #48]	@ (800121c <HAL_RTC_MspInit+0x50>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d111      	bne.n	8001214 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80011f0:	2302      	movs	r3, #2
 80011f2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80011f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011f8:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011fa:	f107 0308 	add.w	r3, r7, #8
 80011fe:	4618      	mov	r0, r3
 8001200:	f001 fa28 	bl	8002654 <HAL_RCCEx_PeriphCLKConfig>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800120a:	f7ff ffad 	bl	8001168 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800120e:	4b04      	ldr	r3, [pc, #16]	@ (8001220 <HAL_RTC_MspInit+0x54>)
 8001210:	2201      	movs	r2, #1
 8001212:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001214:	bf00      	nop
 8001216:	3720      	adds	r7, #32
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40002800 	.word	0x40002800
 8001220:	42470e3c 	.word	0x42470e3c

08001224 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08a      	sub	sp, #40	@ 0x28
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a19      	ldr	r2, [pc, #100]	@ (80012a8 <HAL_SPI_MspInit+0x84>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d12b      	bne.n	800129e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
 800124a:	4b18      	ldr	r3, [pc, #96]	@ (80012ac <HAL_SPI_MspInit+0x88>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800124e:	4a17      	ldr	r2, [pc, #92]	@ (80012ac <HAL_SPI_MspInit+0x88>)
 8001250:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001254:	6453      	str	r3, [r2, #68]	@ 0x44
 8001256:	4b15      	ldr	r3, [pc, #84]	@ (80012ac <HAL_SPI_MspInit+0x88>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	4b11      	ldr	r3, [pc, #68]	@ (80012ac <HAL_SPI_MspInit+0x88>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	4a10      	ldr	r2, [pc, #64]	@ (80012ac <HAL_SPI_MspInit+0x88>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6313      	str	r3, [r2, #48]	@ 0x30
 8001272:	4b0e      	ldr	r3, [pc, #56]	@ (80012ac <HAL_SPI_MspInit+0x88>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800127e:	23e0      	movs	r3, #224	@ 0xe0
 8001280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001282:	2302      	movs	r3, #2
 8001284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128a:	2303      	movs	r3, #3
 800128c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800128e:	2305      	movs	r3, #5
 8001290:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	4619      	mov	r1, r3
 8001298:	4805      	ldr	r0, [pc, #20]	@ (80012b0 <HAL_SPI_MspInit+0x8c>)
 800129a:	f000 fb43 	bl	8001924 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800129e:	bf00      	nop
 80012a0:	3728      	adds	r7, #40	@ 0x28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40013000 	.word	0x40013000
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40020000 	.word	0x40020000

080012b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	@ 0x28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a19      	ldr	r2, [pc, #100]	@ (8001338 <HAL_UART_MspInit+0x84>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d12b      	bne.n	800132e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	4b18      	ldr	r3, [pc, #96]	@ (800133c <HAL_UART_MspInit+0x88>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012de:	4a17      	ldr	r2, [pc, #92]	@ (800133c <HAL_UART_MspInit+0x88>)
 80012e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012e6:	4b15      	ldr	r3, [pc, #84]	@ (800133c <HAL_UART_MspInit+0x88>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	4b11      	ldr	r3, [pc, #68]	@ (800133c <HAL_UART_MspInit+0x88>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	4a10      	ldr	r2, [pc, #64]	@ (800133c <HAL_UART_MspInit+0x88>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6313      	str	r3, [r2, #48]	@ 0x30
 8001302:	4b0e      	ldr	r3, [pc, #56]	@ (800133c <HAL_UART_MspInit+0x88>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800130e:	230c      	movs	r3, #12
 8001310:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001312:	2302      	movs	r3, #2
 8001314:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131a:	2303      	movs	r3, #3
 800131c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800131e:	2307      	movs	r3, #7
 8001320:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	4619      	mov	r1, r3
 8001328:	4805      	ldr	r0, [pc, #20]	@ (8001340 <HAL_UART_MspInit+0x8c>)
 800132a:	f000 fafb 	bl	8001924 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800132e:	bf00      	nop
 8001330:	3728      	adds	r7, #40	@ 0x28
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40004400 	.word	0x40004400
 800133c:	40023800 	.word	0x40023800
 8001340:	40020000 	.word	0x40020000

08001344 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08c      	sub	sp, #48	@ 0x30
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800134c:	2300      	movs	r3, #0
 800134e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001350:	2300      	movs	r3, #0
 8001352:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001354:	2300      	movs	r3, #0
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	4b2e      	ldr	r3, [pc, #184]	@ (8001414 <HAL_InitTick+0xd0>)
 800135a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800135c:	4a2d      	ldr	r2, [pc, #180]	@ (8001414 <HAL_InitTick+0xd0>)
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	6453      	str	r3, [r2, #68]	@ 0x44
 8001364:	4b2b      	ldr	r3, [pc, #172]	@ (8001414 <HAL_InitTick+0xd0>)
 8001366:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001370:	f107 020c 	add.w	r2, r7, #12
 8001374:	f107 0310 	add.w	r3, r7, #16
 8001378:	4611      	mov	r1, r2
 800137a:	4618      	mov	r0, r3
 800137c:	f001 f938 	bl	80025f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001380:	f001 f922 	bl	80025c8 <HAL_RCC_GetPCLK2Freq>
 8001384:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001388:	4a23      	ldr	r2, [pc, #140]	@ (8001418 <HAL_InitTick+0xd4>)
 800138a:	fba2 2303 	umull	r2, r3, r2, r3
 800138e:	0c9b      	lsrs	r3, r3, #18
 8001390:	3b01      	subs	r3, #1
 8001392:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001394:	4b21      	ldr	r3, [pc, #132]	@ (800141c <HAL_InitTick+0xd8>)
 8001396:	4a22      	ldr	r2, [pc, #136]	@ (8001420 <HAL_InitTick+0xdc>)
 8001398:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800139a:	4b20      	ldr	r3, [pc, #128]	@ (800141c <HAL_InitTick+0xd8>)
 800139c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013a0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80013a2:	4a1e      	ldr	r2, [pc, #120]	@ (800141c <HAL_InitTick+0xd8>)
 80013a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80013a8:	4b1c      	ldr	r3, [pc, #112]	@ (800141c <HAL_InitTick+0xd8>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ae:	4b1b      	ldr	r3, [pc, #108]	@ (800141c <HAL_InitTick+0xd8>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b4:	4b19      	ldr	r3, [pc, #100]	@ (800141c <HAL_InitTick+0xd8>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80013ba:	4818      	ldr	r0, [pc, #96]	@ (800141c <HAL_InitTick+0xd8>)
 80013bc:	f002 f912 	bl	80035e4 <HAL_TIM_Base_Init>
 80013c0:	4603      	mov	r3, r0
 80013c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80013c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d11b      	bne.n	8001406 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80013ce:	4813      	ldr	r0, [pc, #76]	@ (800141c <HAL_InitTick+0xd8>)
 80013d0:	f002 f962 	bl	8003698 <HAL_TIM_Base_Start_IT>
 80013d4:	4603      	mov	r3, r0
 80013d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80013da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d111      	bne.n	8001406 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80013e2:	2019      	movs	r0, #25
 80013e4:	f000 fa90 	bl	8001908 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b0f      	cmp	r3, #15
 80013ec:	d808      	bhi.n	8001400 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80013ee:	2200      	movs	r2, #0
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	2019      	movs	r0, #25
 80013f4:	f000 fa6c 	bl	80018d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001424 <HAL_InitTick+0xe0>)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	e002      	b.n	8001406 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001406:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800140a:	4618      	mov	r0, r3
 800140c:	3730      	adds	r7, #48	@ 0x30
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40023800 	.word	0x40023800
 8001418:	431bde83 	.word	0x431bde83
 800141c:	200006a8 	.word	0x200006a8
 8001420:	40010000 	.word	0x40010000
 8001424:	20000004 	.word	0x20000004

08001428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800142c:	bf00      	nop
 800142e:	e7fd      	b.n	800142c <NMI_Handler+0x4>

08001430 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	print("Hard Fault");
 8001434:	4802      	ldr	r0, [pc, #8]	@ (8001440 <HardFault_Handler+0x10>)
 8001436:	f7ff fb33 	bl	8000aa0 <print>

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800143a:	bf00      	nop
 800143c:	e7fd      	b.n	800143a <HardFault_Handler+0xa>
 800143e:	bf00      	nop
 8001440:	080094b4 	.word	0x080094b4

08001444 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001448:	bf00      	nop
 800144a:	e7fd      	b.n	8001448 <MemManage_Handler+0x4>

0800144c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001450:	bf00      	nop
 8001452:	e7fd      	b.n	8001450 <BusFault_Handler+0x4>

08001454 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001458:	bf00      	nop
 800145a:	e7fd      	b.n	8001458 <UsageFault_Handler+0x4>

0800145c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
	...

0800146c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001470:	4802      	ldr	r0, [pc, #8]	@ (800147c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001472:	f002 f973 	bl	800375c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	200006a8 	.word	0x200006a8

08001480 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Btn_Int_Pin);
 8001484:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001488:	f000 fc02 	bl	8001c90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}

08001490 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return 1;
 8001494:	2301      	movs	r3, #1
}
 8001496:	4618      	mov	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <_kill>:

int _kill(int pid, int sig)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014aa:	f006 fe43 	bl	8008134 <__errno>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2216      	movs	r2, #22
 80014b2:	601a      	str	r2, [r3, #0]
  return -1;
 80014b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <_exit>:

void _exit (int status)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014c8:	f04f 31ff 	mov.w	r1, #4294967295
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff ffe7 	bl	80014a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014d2:	bf00      	nop
 80014d4:	e7fd      	b.n	80014d2 <_exit+0x12>

080014d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b086      	sub	sp, #24
 80014da:	af00      	add	r7, sp, #0
 80014dc:	60f8      	str	r0, [r7, #12]
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e2:	2300      	movs	r3, #0
 80014e4:	617b      	str	r3, [r7, #20]
 80014e6:	e00a      	b.n	80014fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014e8:	f3af 8000 	nop.w
 80014ec:	4601      	mov	r1, r0
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	1c5a      	adds	r2, r3, #1
 80014f2:	60ba      	str	r2, [r7, #8]
 80014f4:	b2ca      	uxtb	r2, r1
 80014f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	3301      	adds	r3, #1
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	697a      	ldr	r2, [r7, #20]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	429a      	cmp	r2, r3
 8001504:	dbf0      	blt.n	80014e8 <_read+0x12>
  }

  return len;
 8001506:	687b      	ldr	r3, [r7, #4]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	e009      	b.n	8001536 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	1c5a      	adds	r2, r3, #1
 8001526:	60ba      	str	r2, [r7, #8]
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	3301      	adds	r3, #1
 8001534:	617b      	str	r3, [r7, #20]
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	429a      	cmp	r2, r3
 800153c:	dbf1      	blt.n	8001522 <_write+0x12>
  }
  return len;
 800153e:	687b      	ldr	r3, [r7, #4]
}
 8001540:	4618      	mov	r0, r3
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <_close>:

int _close(int file)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001550:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001554:	4618      	mov	r0, r3
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001570:	605a      	str	r2, [r3, #4]
  return 0;
 8001572:	2300      	movs	r3, #0
}
 8001574:	4618      	mov	r0, r3
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <_isatty>:

int _isatty(int file)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001588:	2301      	movs	r3, #1
}
 800158a:	4618      	mov	r0, r3
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001596:	b480      	push	{r7}
 8001598:	b085      	sub	sp, #20
 800159a:	af00      	add	r7, sp, #0
 800159c:	60f8      	str	r0, [r7, #12]
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015b8:	4a14      	ldr	r2, [pc, #80]	@ (800160c <_sbrk+0x5c>)
 80015ba:	4b15      	ldr	r3, [pc, #84]	@ (8001610 <_sbrk+0x60>)
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015c4:	4b13      	ldr	r3, [pc, #76]	@ (8001614 <_sbrk+0x64>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d102      	bne.n	80015d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015cc:	4b11      	ldr	r3, [pc, #68]	@ (8001614 <_sbrk+0x64>)
 80015ce:	4a12      	ldr	r2, [pc, #72]	@ (8001618 <_sbrk+0x68>)
 80015d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015d2:	4b10      	ldr	r3, [pc, #64]	@ (8001614 <_sbrk+0x64>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d207      	bcs.n	80015f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015e0:	f006 fda8 	bl	8008134 <__errno>
 80015e4:	4603      	mov	r3, r0
 80015e6:	220c      	movs	r2, #12
 80015e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ea:	f04f 33ff 	mov.w	r3, #4294967295
 80015ee:	e009      	b.n	8001604 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015f0:	4b08      	ldr	r3, [pc, #32]	@ (8001614 <_sbrk+0x64>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015f6:	4b07      	ldr	r3, [pc, #28]	@ (8001614 <_sbrk+0x64>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4413      	add	r3, r2
 80015fe:	4a05      	ldr	r2, [pc, #20]	@ (8001614 <_sbrk+0x64>)
 8001600:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001602:	68fb      	ldr	r3, [r7, #12]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20020000 	.word	0x20020000
 8001610:	00000400 	.word	0x00000400
 8001614:	200006f0 	.word	0x200006f0
 8001618:	20004700 	.word	0x20004700

0800161c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001620:	4b06      	ldr	r3, [pc, #24]	@ (800163c <SystemInit+0x20>)
 8001622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001626:	4a05      	ldr	r2, [pc, #20]	@ (800163c <SystemInit+0x20>)
 8001628:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800162c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack    		 /* set stack pointer */
 8001640:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001678 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001644:	f7ff ffea 	bl	800161c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001648:	480c      	ldr	r0, [pc, #48]	@ (800167c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800164a:	490d      	ldr	r1, [pc, #52]	@ (8001680 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800164c:	4a0d      	ldr	r2, [pc, #52]	@ (8001684 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800164e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001650:	e002      	b.n	8001658 <LoopCopyDataInit>

08001652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001656:	3304      	adds	r3, #4

08001658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800165a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800165c:	d3f9      	bcc.n	8001652 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800165e:	4a0a      	ldr	r2, [pc, #40]	@ (8001688 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001660:	4c0a      	ldr	r4, [pc, #40]	@ (800168c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001664:	e001      	b.n	800166a <LoopFillZerobss>

08001666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001668:	3204      	adds	r2, #4

0800166a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800166a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800166c:	d3fb      	bcc.n	8001666 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800166e:	f006 fd67 	bl	8008140 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001672:	f7fe ffb9 	bl	80005e8 <main>
  bx  lr    
 8001676:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001678:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800167c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001680:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001684:	080095e0 	.word	0x080095e0
  ldr r2, =_sbss
 8001688:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800168c:	200046fc 	.word	0x200046fc

08001690 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001690:	e7fe      	b.n	8001690 <ADC_IRQHandler>
	...

08001694 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001698:	4b0e      	ldr	r3, [pc, #56]	@ (80016d4 <HAL_Init+0x40>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a0d      	ldr	r2, [pc, #52]	@ (80016d4 <HAL_Init+0x40>)
 800169e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016a4:	4b0b      	ldr	r3, [pc, #44]	@ (80016d4 <HAL_Init+0x40>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a0a      	ldr	r2, [pc, #40]	@ (80016d4 <HAL_Init+0x40>)
 80016aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016b0:	4b08      	ldr	r3, [pc, #32]	@ (80016d4 <HAL_Init+0x40>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a07      	ldr	r2, [pc, #28]	@ (80016d4 <HAL_Init+0x40>)
 80016b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016bc:	2003      	movs	r0, #3
 80016be:	f000 f8fc 	bl	80018ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016c2:	200f      	movs	r0, #15
 80016c4:	f7ff fe3e 	bl	8001344 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016c8:	f7ff fd54 	bl	8001174 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40023c00 	.word	0x40023c00

080016d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016dc:	4b06      	ldr	r3, [pc, #24]	@ (80016f8 <HAL_IncTick+0x20>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	461a      	mov	r2, r3
 80016e2:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <HAL_IncTick+0x24>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4413      	add	r3, r2
 80016e8:	4a04      	ldr	r2, [pc, #16]	@ (80016fc <HAL_IncTick+0x24>)
 80016ea:	6013      	str	r3, [r2, #0]
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	20000008 	.word	0x20000008
 80016fc:	200006f4 	.word	0x200006f4

08001700 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return uwTick;
 8001704:	4b03      	ldr	r3, [pc, #12]	@ (8001714 <HAL_GetTick+0x14>)
 8001706:	681b      	ldr	r3, [r3, #0]
}
 8001708:	4618      	mov	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	200006f4 	.word	0x200006f4

08001718 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001720:	f7ff ffee 	bl	8001700 <HAL_GetTick>
 8001724:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001730:	d005      	beq.n	800173e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001732:	4b0a      	ldr	r3, [pc, #40]	@ (800175c <HAL_Delay+0x44>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4413      	add	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800173e:	bf00      	nop
 8001740:	f7ff ffde 	bl	8001700 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	429a      	cmp	r2, r3
 800174e:	d8f7      	bhi.n	8001740 <HAL_Delay+0x28>
  {
  }
}
 8001750:	bf00      	nop
 8001752:	bf00      	nop
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000008 	.word	0x20000008

08001760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001770:	4b0c      	ldr	r3, [pc, #48]	@ (80017a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800177c:	4013      	ands	r3, r2
 800177e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001788:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800178c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001792:	4a04      	ldr	r2, [pc, #16]	@ (80017a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	60d3      	str	r3, [r2, #12]
}
 8001798:	bf00      	nop
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017ac:	4b04      	ldr	r3, [pc, #16]	@ (80017c0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	0a1b      	lsrs	r3, r3, #8
 80017b2:	f003 0307 	and.w	r3, r3, #7
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	db0b      	blt.n	80017ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	f003 021f 	and.w	r2, r3, #31
 80017dc:	4907      	ldr	r1, [pc, #28]	@ (80017fc <__NVIC_EnableIRQ+0x38>)
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	095b      	lsrs	r3, r3, #5
 80017e4:	2001      	movs	r0, #1
 80017e6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	e000e100 	.word	0xe000e100

08001800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	6039      	str	r1, [r7, #0]
 800180a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800180c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001810:	2b00      	cmp	r3, #0
 8001812:	db0a      	blt.n	800182a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	b2da      	uxtb	r2, r3
 8001818:	490c      	ldr	r1, [pc, #48]	@ (800184c <__NVIC_SetPriority+0x4c>)
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	0112      	lsls	r2, r2, #4
 8001820:	b2d2      	uxtb	r2, r2
 8001822:	440b      	add	r3, r1
 8001824:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001828:	e00a      	b.n	8001840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	b2da      	uxtb	r2, r3
 800182e:	4908      	ldr	r1, [pc, #32]	@ (8001850 <__NVIC_SetPriority+0x50>)
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	f003 030f 	and.w	r3, r3, #15
 8001836:	3b04      	subs	r3, #4
 8001838:	0112      	lsls	r2, r2, #4
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	440b      	add	r3, r1
 800183e:	761a      	strb	r2, [r3, #24]
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000e100 	.word	0xe000e100
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001854:	b480      	push	{r7}
 8001856:	b089      	sub	sp, #36	@ 0x24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f1c3 0307 	rsb	r3, r3, #7
 800186e:	2b04      	cmp	r3, #4
 8001870:	bf28      	it	cs
 8001872:	2304      	movcs	r3, #4
 8001874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3304      	adds	r3, #4
 800187a:	2b06      	cmp	r3, #6
 800187c:	d902      	bls.n	8001884 <NVIC_EncodePriority+0x30>
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3b03      	subs	r3, #3
 8001882:	e000      	b.n	8001886 <NVIC_EncodePriority+0x32>
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001888:	f04f 32ff 	mov.w	r2, #4294967295
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43da      	mvns	r2, r3
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	401a      	ands	r2, r3
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800189c:	f04f 31ff 	mov.w	r1, #4294967295
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	fa01 f303 	lsl.w	r3, r1, r3
 80018a6:	43d9      	mvns	r1, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ac:	4313      	orrs	r3, r2
         );
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3724      	adds	r7, #36	@ 0x24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff ff4c 	bl	8001760 <__NVIC_SetPriorityGrouping>
}
 80018c8:	bf00      	nop
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
 80018dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018e2:	f7ff ff61 	bl	80017a8 <__NVIC_GetPriorityGrouping>
 80018e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	68b9      	ldr	r1, [r7, #8]
 80018ec:	6978      	ldr	r0, [r7, #20]
 80018ee:	f7ff ffb1 	bl	8001854 <NVIC_EncodePriority>
 80018f2:	4602      	mov	r2, r0
 80018f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018f8:	4611      	mov	r1, r2
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff ff80 	bl	8001800 <__NVIC_SetPriority>
}
 8001900:	bf00      	nop
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff ff54 	bl	80017c4 <__NVIC_EnableIRQ>
}
 800191c:	bf00      	nop
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001924:	b480      	push	{r7}
 8001926:	b089      	sub	sp, #36	@ 0x24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001932:	2300      	movs	r3, #0
 8001934:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001936:	2300      	movs	r3, #0
 8001938:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800193a:	2300      	movs	r3, #0
 800193c:	61fb      	str	r3, [r7, #28]
 800193e:	e159      	b.n	8001bf4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001940:	2201      	movs	r2, #1
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	697a      	ldr	r2, [r7, #20]
 8001950:	4013      	ands	r3, r2
 8001952:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	429a      	cmp	r2, r3
 800195a:	f040 8148 	bne.w	8001bee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f003 0303 	and.w	r3, r3, #3
 8001966:	2b01      	cmp	r3, #1
 8001968:	d005      	beq.n	8001976 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001972:	2b02      	cmp	r3, #2
 8001974:	d130      	bne.n	80019d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	2203      	movs	r2, #3
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43db      	mvns	r3, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4013      	ands	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	68da      	ldr	r2, [r3, #12]
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4313      	orrs	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019ac:	2201      	movs	r2, #1
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4013      	ands	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	091b      	lsrs	r3, r3, #4
 80019c2:	f003 0201 	and.w	r2, r3, #1
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	2b03      	cmp	r3, #3
 80019e2:	d017      	beq.n	8001a14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	2203      	movs	r2, #3
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f003 0303 	and.w	r3, r3, #3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d123      	bne.n	8001a68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	08da      	lsrs	r2, r3, #3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3208      	adds	r2, #8
 8001a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	220f      	movs	r2, #15
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4013      	ands	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	691a      	ldr	r2, [r3, #16]
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	08da      	lsrs	r2, r3, #3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	3208      	adds	r2, #8
 8001a62:	69b9      	ldr	r1, [r7, #24]
 8001a64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	2203      	movs	r2, #3
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 0203 	and.w	r2, r3, #3
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 80a2 	beq.w	8001bee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	4b57      	ldr	r3, [pc, #348]	@ (8001c0c <HAL_GPIO_Init+0x2e8>)
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab2:	4a56      	ldr	r2, [pc, #344]	@ (8001c0c <HAL_GPIO_Init+0x2e8>)
 8001ab4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ab8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aba:	4b54      	ldr	r3, [pc, #336]	@ (8001c0c <HAL_GPIO_Init+0x2e8>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001abe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ac6:	4a52      	ldr	r2, [pc, #328]	@ (8001c10 <HAL_GPIO_Init+0x2ec>)
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	089b      	lsrs	r3, r3, #2
 8001acc:	3302      	adds	r3, #2
 8001ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	220f      	movs	r2, #15
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a49      	ldr	r2, [pc, #292]	@ (8001c14 <HAL_GPIO_Init+0x2f0>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d019      	beq.n	8001b26 <HAL_GPIO_Init+0x202>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a48      	ldr	r2, [pc, #288]	@ (8001c18 <HAL_GPIO_Init+0x2f4>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d013      	beq.n	8001b22 <HAL_GPIO_Init+0x1fe>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a47      	ldr	r2, [pc, #284]	@ (8001c1c <HAL_GPIO_Init+0x2f8>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d00d      	beq.n	8001b1e <HAL_GPIO_Init+0x1fa>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a46      	ldr	r2, [pc, #280]	@ (8001c20 <HAL_GPIO_Init+0x2fc>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d007      	beq.n	8001b1a <HAL_GPIO_Init+0x1f6>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a45      	ldr	r2, [pc, #276]	@ (8001c24 <HAL_GPIO_Init+0x300>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d101      	bne.n	8001b16 <HAL_GPIO_Init+0x1f2>
 8001b12:	2304      	movs	r3, #4
 8001b14:	e008      	b.n	8001b28 <HAL_GPIO_Init+0x204>
 8001b16:	2307      	movs	r3, #7
 8001b18:	e006      	b.n	8001b28 <HAL_GPIO_Init+0x204>
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e004      	b.n	8001b28 <HAL_GPIO_Init+0x204>
 8001b1e:	2302      	movs	r3, #2
 8001b20:	e002      	b.n	8001b28 <HAL_GPIO_Init+0x204>
 8001b22:	2301      	movs	r3, #1
 8001b24:	e000      	b.n	8001b28 <HAL_GPIO_Init+0x204>
 8001b26:	2300      	movs	r3, #0
 8001b28:	69fa      	ldr	r2, [r7, #28]
 8001b2a:	f002 0203 	and.w	r2, r2, #3
 8001b2e:	0092      	lsls	r2, r2, #2
 8001b30:	4093      	lsls	r3, r2
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b38:	4935      	ldr	r1, [pc, #212]	@ (8001c10 <HAL_GPIO_Init+0x2ec>)
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	089b      	lsrs	r3, r3, #2
 8001b3e:	3302      	adds	r3, #2
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b46:	4b38      	ldr	r3, [pc, #224]	@ (8001c28 <HAL_GPIO_Init+0x304>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4013      	ands	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d003      	beq.n	8001b6a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b6a:	4a2f      	ldr	r2, [pc, #188]	@ (8001c28 <HAL_GPIO_Init+0x304>)
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b70:	4b2d      	ldr	r3, [pc, #180]	@ (8001c28 <HAL_GPIO_Init+0x304>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b94:	4a24      	ldr	r2, [pc, #144]	@ (8001c28 <HAL_GPIO_Init+0x304>)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b9a:	4b23      	ldr	r3, [pc, #140]	@ (8001c28 <HAL_GPIO_Init+0x304>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bbe:	4a1a      	ldr	r2, [pc, #104]	@ (8001c28 <HAL_GPIO_Init+0x304>)
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bc4:	4b18      	ldr	r3, [pc, #96]	@ (8001c28 <HAL_GPIO_Init+0x304>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d003      	beq.n	8001be8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001be8:	4a0f      	ldr	r2, [pc, #60]	@ (8001c28 <HAL_GPIO_Init+0x304>)
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	61fb      	str	r3, [r7, #28]
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	2b0f      	cmp	r3, #15
 8001bf8:	f67f aea2 	bls.w	8001940 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bfc:	bf00      	nop
 8001bfe:	bf00      	nop
 8001c00:	3724      	adds	r7, #36	@ 0x24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40013800 	.word	0x40013800
 8001c14:	40020000 	.word	0x40020000
 8001c18:	40020400 	.word	0x40020400
 8001c1c:	40020800 	.word	0x40020800
 8001c20:	40020c00 	.word	0x40020c00
 8001c24:	40021000 	.word	0x40021000
 8001c28:	40013c00 	.word	0x40013c00

08001c2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691a      	ldr	r2, [r3, #16]
 8001c3c:	887b      	ldrh	r3, [r7, #2]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d002      	beq.n	8001c4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c44:	2301      	movs	r3, #1
 8001c46:	73fb      	strb	r3, [r7, #15]
 8001c48:	e001      	b.n	8001c4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	807b      	strh	r3, [r7, #2]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c6c:	787b      	ldrb	r3, [r7, #1]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c72:	887a      	ldrh	r2, [r7, #2]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c78:	e003      	b.n	8001c82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c7a:	887b      	ldrh	r3, [r7, #2]
 8001c7c:	041a      	lsls	r2, r3, #16
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	619a      	str	r2, [r3, #24]
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
	...

08001c90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001c9a:	4b08      	ldr	r3, [pc, #32]	@ (8001cbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c9c:	695a      	ldr	r2, [r3, #20]
 8001c9e:	88fb      	ldrh	r3, [r7, #6]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d006      	beq.n	8001cb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ca6:	4a05      	ldr	r2, [pc, #20]	@ (8001cbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ca8:	88fb      	ldrh	r3, [r7, #6]
 8001caa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cac:	88fb      	ldrh	r3, [r7, #6]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff f982 	bl	8000fb8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40013c00 	.word	0x40013c00

08001cc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e267      	b.n	80021a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d075      	beq.n	8001dca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001cde:	4b88      	ldr	r3, [pc, #544]	@ (8001f00 <HAL_RCC_OscConfig+0x240>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 030c 	and.w	r3, r3, #12
 8001ce6:	2b04      	cmp	r3, #4
 8001ce8:	d00c      	beq.n	8001d04 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cea:	4b85      	ldr	r3, [pc, #532]	@ (8001f00 <HAL_RCC_OscConfig+0x240>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001cf2:	2b08      	cmp	r3, #8
 8001cf4:	d112      	bne.n	8001d1c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cf6:	4b82      	ldr	r3, [pc, #520]	@ (8001f00 <HAL_RCC_OscConfig+0x240>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cfe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d02:	d10b      	bne.n	8001d1c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d04:	4b7e      	ldr	r3, [pc, #504]	@ (8001f00 <HAL_RCC_OscConfig+0x240>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d05b      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x108>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d157      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e242      	b.n	80021a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d24:	d106      	bne.n	8001d34 <HAL_RCC_OscConfig+0x74>
 8001d26:	4b76      	ldr	r3, [pc, #472]	@ (8001f00 <HAL_RCC_OscConfig+0x240>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a75      	ldr	r2, [pc, #468]	@ (8001f00 <HAL_RCC_OscConfig+0x240>)
 8001d2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d30:	6013      	str	r3, [r2, #0]
 8001d32:	e01d      	b.n	8001d70 <HAL_RCC_OscConfig+0xb0>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d3c:	d10c      	bne.n	8001d58 <HAL_RCC_OscConfig+0x98>
 8001d3e:	4b70      	ldr	r3, [pc, #448]	@ (8001f00 <HAL_RCC_OscConfig+0x240>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a6f      	ldr	r2, [pc, #444]	@ (8001f00 <HAL_RCC_OscConfig+0x240>)
 8001d44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	4b6d      	ldr	r3, [pc, #436]	@ (8001f00 <HAL_RCC_OscConfig+0x240>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a6c      	ldr	r2, [pc, #432]	@ (8001f00 <HAL_RCC_OscConfig+0x240>)
 8001d50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d54:	6013      	str	r3, [r2, #0]
 8001d56:	e00b      	b.n	8001d70 <HAL_RCC_OscConfig+0xb0>
 8001d58:	4b69      	ldr	r3, [pc, #420]	@ (8001f00 <HAL_RCC_OscConfig+0x240>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a68      	ldr	r2, [pc, #416]	@ (8001f00 <HAL_RCC_OscConfig+0x240>)
 8001d5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d62:	6013      	str	r3, [r2, #0]
 8001d64:	4b66      	ldr	r3, [pc, #408]	@ (8001f00 <HAL_RCC_OscConfig+0x240>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a65      	ldr	r2, [pc, #404]	@ (8001f00 <HAL_RCC_OscConfig+0x240>)
 8001d6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d013      	beq.n	8001da0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d78:	f7ff fcc2 	bl	8001700 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d80:	f7ff fcbe 	bl	8001700 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b64      	cmp	r3, #100	@ 0x64
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e207      	b.n	80021a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d92:	4b5b      	ldr	r3, [pc, #364]	@ (8001f00 <HAL_RCC_OscConfig+0x240>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0f0      	beq.n	8001d80 <HAL_RCC_OscConfig+0xc0>
 8001d9e:	e014      	b.n	8001dca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da0:	f7ff fcae 	bl	8001700 <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da8:	f7ff fcaa 	bl	8001700 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b64      	cmp	r3, #100	@ 0x64
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e1f3      	b.n	80021a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dba:	4b51      	ldr	r3, [pc, #324]	@ (8001f00 <HAL_RCC_OscConfig+0x240>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1f0      	bne.n	8001da8 <HAL_RCC_OscConfig+0xe8>
 8001dc6:	e000      	b.n	8001dca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d063      	beq.n	8001e9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001dd6:	4b4a      	ldr	r3, [pc, #296]	@ (8001f00 <HAL_RCC_OscConfig+0x240>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 030c 	and.w	r3, r3, #12
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00b      	beq.n	8001dfa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001de2:	4b47      	ldr	r3, [pc, #284]	@ (8001f00 <HAL_RCC_OscConfig+0x240>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001dea:	2b08      	cmp	r3, #8
 8001dec:	d11c      	bne.n	8001e28 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dee:	4b44      	ldr	r3, [pc, #272]	@ (8001f00 <HAL_RCC_OscConfig+0x240>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d116      	bne.n	8001e28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dfa:	4b41      	ldr	r3, [pc, #260]	@ (8001f00 <HAL_RCC_OscConfig+0x240>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d005      	beq.n	8001e12 <HAL_RCC_OscConfig+0x152>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d001      	beq.n	8001e12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e1c7      	b.n	80021a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e12:	4b3b      	ldr	r3, [pc, #236]	@ (8001f00 <HAL_RCC_OscConfig+0x240>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	4937      	ldr	r1, [pc, #220]	@ (8001f00 <HAL_RCC_OscConfig+0x240>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e26:	e03a      	b.n	8001e9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d020      	beq.n	8001e72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e30:	4b34      	ldr	r3, [pc, #208]	@ (8001f04 <HAL_RCC_OscConfig+0x244>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e36:	f7ff fc63 	bl	8001700 <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e3e:	f7ff fc5f 	bl	8001700 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e1a8      	b.n	80021a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e50:	4b2b      	ldr	r3, [pc, #172]	@ (8001f00 <HAL_RCC_OscConfig+0x240>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0f0      	beq.n	8001e3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e5c:	4b28      	ldr	r3, [pc, #160]	@ (8001f00 <HAL_RCC_OscConfig+0x240>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	4925      	ldr	r1, [pc, #148]	@ (8001f00 <HAL_RCC_OscConfig+0x240>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	600b      	str	r3, [r1, #0]
 8001e70:	e015      	b.n	8001e9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e72:	4b24      	ldr	r3, [pc, #144]	@ (8001f04 <HAL_RCC_OscConfig+0x244>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e78:	f7ff fc42 	bl	8001700 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e80:	f7ff fc3e 	bl	8001700 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e187      	b.n	80021a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e92:	4b1b      	ldr	r3, [pc, #108]	@ (8001f00 <HAL_RCC_OscConfig+0x240>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1f0      	bne.n	8001e80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0308 	and.w	r3, r3, #8
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d036      	beq.n	8001f18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d016      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eb2:	4b15      	ldr	r3, [pc, #84]	@ (8001f08 <HAL_RCC_OscConfig+0x248>)
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb8:	f7ff fc22 	bl	8001700 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ec0:	f7ff fc1e 	bl	8001700 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e167      	b.n	80021a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8001f00 <HAL_RCC_OscConfig+0x240>)
 8001ed4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0f0      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x200>
 8001ede:	e01b      	b.n	8001f18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ee0:	4b09      	ldr	r3, [pc, #36]	@ (8001f08 <HAL_RCC_OscConfig+0x248>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee6:	f7ff fc0b 	bl	8001700 <HAL_GetTick>
 8001eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eec:	e00e      	b.n	8001f0c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eee:	f7ff fc07 	bl	8001700 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d907      	bls.n	8001f0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e150      	b.n	80021a2 <HAL_RCC_OscConfig+0x4e2>
 8001f00:	40023800 	.word	0x40023800
 8001f04:	42470000 	.word	0x42470000
 8001f08:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f0c:	4b88      	ldr	r3, [pc, #544]	@ (8002130 <HAL_RCC_OscConfig+0x470>)
 8001f0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1ea      	bne.n	8001eee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f000 8097 	beq.w	8002054 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f26:	2300      	movs	r3, #0
 8001f28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f2a:	4b81      	ldr	r3, [pc, #516]	@ (8002130 <HAL_RCC_OscConfig+0x470>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d10f      	bne.n	8001f56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	60bb      	str	r3, [r7, #8]
 8001f3a:	4b7d      	ldr	r3, [pc, #500]	@ (8002130 <HAL_RCC_OscConfig+0x470>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3e:	4a7c      	ldr	r2, [pc, #496]	@ (8002130 <HAL_RCC_OscConfig+0x470>)
 8001f40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f46:	4b7a      	ldr	r3, [pc, #488]	@ (8002130 <HAL_RCC_OscConfig+0x470>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f4e:	60bb      	str	r3, [r7, #8]
 8001f50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f52:	2301      	movs	r3, #1
 8001f54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f56:	4b77      	ldr	r3, [pc, #476]	@ (8002134 <HAL_RCC_OscConfig+0x474>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d118      	bne.n	8001f94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f62:	4b74      	ldr	r3, [pc, #464]	@ (8002134 <HAL_RCC_OscConfig+0x474>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a73      	ldr	r2, [pc, #460]	@ (8002134 <HAL_RCC_OscConfig+0x474>)
 8001f68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f6e:	f7ff fbc7 	bl	8001700 <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f74:	e008      	b.n	8001f88 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f76:	f7ff fbc3 	bl	8001700 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e10c      	b.n	80021a2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f88:	4b6a      	ldr	r3, [pc, #424]	@ (8002134 <HAL_RCC_OscConfig+0x474>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0f0      	beq.n	8001f76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d106      	bne.n	8001faa <HAL_RCC_OscConfig+0x2ea>
 8001f9c:	4b64      	ldr	r3, [pc, #400]	@ (8002130 <HAL_RCC_OscConfig+0x470>)
 8001f9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fa0:	4a63      	ldr	r2, [pc, #396]	@ (8002130 <HAL_RCC_OscConfig+0x470>)
 8001fa2:	f043 0301 	orr.w	r3, r3, #1
 8001fa6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fa8:	e01c      	b.n	8001fe4 <HAL_RCC_OscConfig+0x324>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	2b05      	cmp	r3, #5
 8001fb0:	d10c      	bne.n	8001fcc <HAL_RCC_OscConfig+0x30c>
 8001fb2:	4b5f      	ldr	r3, [pc, #380]	@ (8002130 <HAL_RCC_OscConfig+0x470>)
 8001fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fb6:	4a5e      	ldr	r2, [pc, #376]	@ (8002130 <HAL_RCC_OscConfig+0x470>)
 8001fb8:	f043 0304 	orr.w	r3, r3, #4
 8001fbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fbe:	4b5c      	ldr	r3, [pc, #368]	@ (8002130 <HAL_RCC_OscConfig+0x470>)
 8001fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fc2:	4a5b      	ldr	r2, [pc, #364]	@ (8002130 <HAL_RCC_OscConfig+0x470>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fca:	e00b      	b.n	8001fe4 <HAL_RCC_OscConfig+0x324>
 8001fcc:	4b58      	ldr	r3, [pc, #352]	@ (8002130 <HAL_RCC_OscConfig+0x470>)
 8001fce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fd0:	4a57      	ldr	r2, [pc, #348]	@ (8002130 <HAL_RCC_OscConfig+0x470>)
 8001fd2:	f023 0301 	bic.w	r3, r3, #1
 8001fd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fd8:	4b55      	ldr	r3, [pc, #340]	@ (8002130 <HAL_RCC_OscConfig+0x470>)
 8001fda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fdc:	4a54      	ldr	r2, [pc, #336]	@ (8002130 <HAL_RCC_OscConfig+0x470>)
 8001fde:	f023 0304 	bic.w	r3, r3, #4
 8001fe2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d015      	beq.n	8002018 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fec:	f7ff fb88 	bl	8001700 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ff2:	e00a      	b.n	800200a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff4:	f7ff fb84 	bl	8001700 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002002:	4293      	cmp	r3, r2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e0cb      	b.n	80021a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800200a:	4b49      	ldr	r3, [pc, #292]	@ (8002130 <HAL_RCC_OscConfig+0x470>)
 800200c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0ee      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x334>
 8002016:	e014      	b.n	8002042 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002018:	f7ff fb72 	bl	8001700 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800201e:	e00a      	b.n	8002036 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002020:	f7ff fb6e 	bl	8001700 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800202e:	4293      	cmp	r3, r2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e0b5      	b.n	80021a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002036:	4b3e      	ldr	r3, [pc, #248]	@ (8002130 <HAL_RCC_OscConfig+0x470>)
 8002038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1ee      	bne.n	8002020 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002042:	7dfb      	ldrb	r3, [r7, #23]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d105      	bne.n	8002054 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002048:	4b39      	ldr	r3, [pc, #228]	@ (8002130 <HAL_RCC_OscConfig+0x470>)
 800204a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204c:	4a38      	ldr	r2, [pc, #224]	@ (8002130 <HAL_RCC_OscConfig+0x470>)
 800204e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002052:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 80a1 	beq.w	80021a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800205e:	4b34      	ldr	r3, [pc, #208]	@ (8002130 <HAL_RCC_OscConfig+0x470>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 030c 	and.w	r3, r3, #12
 8002066:	2b08      	cmp	r3, #8
 8002068:	d05c      	beq.n	8002124 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d141      	bne.n	80020f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002072:	4b31      	ldr	r3, [pc, #196]	@ (8002138 <HAL_RCC_OscConfig+0x478>)
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002078:	f7ff fb42 	bl	8001700 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002080:	f7ff fb3e 	bl	8001700 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e087      	b.n	80021a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002092:	4b27      	ldr	r3, [pc, #156]	@ (8002130 <HAL_RCC_OscConfig+0x470>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f0      	bne.n	8002080 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69da      	ldr	r2, [r3, #28]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	431a      	orrs	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ac:	019b      	lsls	r3, r3, #6
 80020ae:	431a      	orrs	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b4:	085b      	lsrs	r3, r3, #1
 80020b6:	3b01      	subs	r3, #1
 80020b8:	041b      	lsls	r3, r3, #16
 80020ba:	431a      	orrs	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c0:	061b      	lsls	r3, r3, #24
 80020c2:	491b      	ldr	r1, [pc, #108]	@ (8002130 <HAL_RCC_OscConfig+0x470>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002138 <HAL_RCC_OscConfig+0x478>)
 80020ca:	2201      	movs	r2, #1
 80020cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ce:	f7ff fb17 	bl	8001700 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d6:	f7ff fb13 	bl	8001700 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e05c      	b.n	80021a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020e8:	4b11      	ldr	r3, [pc, #68]	@ (8002130 <HAL_RCC_OscConfig+0x470>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0f0      	beq.n	80020d6 <HAL_RCC_OscConfig+0x416>
 80020f4:	e054      	b.n	80021a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f6:	4b10      	ldr	r3, [pc, #64]	@ (8002138 <HAL_RCC_OscConfig+0x478>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fc:	f7ff fb00 	bl	8001700 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002104:	f7ff fafc 	bl	8001700 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e045      	b.n	80021a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002116:	4b06      	ldr	r3, [pc, #24]	@ (8002130 <HAL_RCC_OscConfig+0x470>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f0      	bne.n	8002104 <HAL_RCC_OscConfig+0x444>
 8002122:	e03d      	b.n	80021a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d107      	bne.n	800213c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e038      	b.n	80021a2 <HAL_RCC_OscConfig+0x4e2>
 8002130:	40023800 	.word	0x40023800
 8002134:	40007000 	.word	0x40007000
 8002138:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800213c:	4b1b      	ldr	r3, [pc, #108]	@ (80021ac <HAL_RCC_OscConfig+0x4ec>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d028      	beq.n	800219c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002154:	429a      	cmp	r2, r3
 8002156:	d121      	bne.n	800219c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002162:	429a      	cmp	r2, r3
 8002164:	d11a      	bne.n	800219c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800216c:	4013      	ands	r3, r2
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002172:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002174:	4293      	cmp	r3, r2
 8002176:	d111      	bne.n	800219c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002182:	085b      	lsrs	r3, r3, #1
 8002184:	3b01      	subs	r3, #1
 8002186:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002188:	429a      	cmp	r2, r3
 800218a:	d107      	bne.n	800219c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002196:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002198:	429a      	cmp	r2, r3
 800219a:	d001      	beq.n	80021a0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e000      	b.n	80021a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3718      	adds	r7, #24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40023800 	.word	0x40023800

080021b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d101      	bne.n	80021c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e0cc      	b.n	800235e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021c4:	4b68      	ldr	r3, [pc, #416]	@ (8002368 <HAL_RCC_ClockConfig+0x1b8>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d90c      	bls.n	80021ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021d2:	4b65      	ldr	r3, [pc, #404]	@ (8002368 <HAL_RCC_ClockConfig+0x1b8>)
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	b2d2      	uxtb	r2, r2
 80021d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021da:	4b63      	ldr	r3, [pc, #396]	@ (8002368 <HAL_RCC_ClockConfig+0x1b8>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d001      	beq.n	80021ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e0b8      	b.n	800235e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d020      	beq.n	800223a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0304 	and.w	r3, r3, #4
 8002200:	2b00      	cmp	r3, #0
 8002202:	d005      	beq.n	8002210 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002204:	4b59      	ldr	r3, [pc, #356]	@ (800236c <HAL_RCC_ClockConfig+0x1bc>)
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	4a58      	ldr	r2, [pc, #352]	@ (800236c <HAL_RCC_ClockConfig+0x1bc>)
 800220a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800220e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0308 	and.w	r3, r3, #8
 8002218:	2b00      	cmp	r3, #0
 800221a:	d005      	beq.n	8002228 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800221c:	4b53      	ldr	r3, [pc, #332]	@ (800236c <HAL_RCC_ClockConfig+0x1bc>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	4a52      	ldr	r2, [pc, #328]	@ (800236c <HAL_RCC_ClockConfig+0x1bc>)
 8002222:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002226:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002228:	4b50      	ldr	r3, [pc, #320]	@ (800236c <HAL_RCC_ClockConfig+0x1bc>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	494d      	ldr	r1, [pc, #308]	@ (800236c <HAL_RCC_ClockConfig+0x1bc>)
 8002236:	4313      	orrs	r3, r2
 8002238:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b00      	cmp	r3, #0
 8002244:	d044      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d107      	bne.n	800225e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224e:	4b47      	ldr	r3, [pc, #284]	@ (800236c <HAL_RCC_ClockConfig+0x1bc>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d119      	bne.n	800228e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e07f      	b.n	800235e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2b02      	cmp	r3, #2
 8002264:	d003      	beq.n	800226e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800226a:	2b03      	cmp	r3, #3
 800226c:	d107      	bne.n	800227e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800226e:	4b3f      	ldr	r3, [pc, #252]	@ (800236c <HAL_RCC_ClockConfig+0x1bc>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d109      	bne.n	800228e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e06f      	b.n	800235e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800227e:	4b3b      	ldr	r3, [pc, #236]	@ (800236c <HAL_RCC_ClockConfig+0x1bc>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e067      	b.n	800235e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800228e:	4b37      	ldr	r3, [pc, #220]	@ (800236c <HAL_RCC_ClockConfig+0x1bc>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f023 0203 	bic.w	r2, r3, #3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	4934      	ldr	r1, [pc, #208]	@ (800236c <HAL_RCC_ClockConfig+0x1bc>)
 800229c:	4313      	orrs	r3, r2
 800229e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022a0:	f7ff fa2e 	bl	8001700 <HAL_GetTick>
 80022a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022a6:	e00a      	b.n	80022be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022a8:	f7ff fa2a 	bl	8001700 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e04f      	b.n	800235e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022be:	4b2b      	ldr	r3, [pc, #172]	@ (800236c <HAL_RCC_ClockConfig+0x1bc>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f003 020c 	and.w	r2, r3, #12
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d1eb      	bne.n	80022a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022d0:	4b25      	ldr	r3, [pc, #148]	@ (8002368 <HAL_RCC_ClockConfig+0x1b8>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d20c      	bcs.n	80022f8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022de:	4b22      	ldr	r3, [pc, #136]	@ (8002368 <HAL_RCC_ClockConfig+0x1b8>)
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e6:	4b20      	ldr	r3, [pc, #128]	@ (8002368 <HAL_RCC_ClockConfig+0x1b8>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d001      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e032      	b.n	800235e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0304 	and.w	r3, r3, #4
 8002300:	2b00      	cmp	r3, #0
 8002302:	d008      	beq.n	8002316 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002304:	4b19      	ldr	r3, [pc, #100]	@ (800236c <HAL_RCC_ClockConfig+0x1bc>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	4916      	ldr	r1, [pc, #88]	@ (800236c <HAL_RCC_ClockConfig+0x1bc>)
 8002312:	4313      	orrs	r3, r2
 8002314:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0308 	and.w	r3, r3, #8
 800231e:	2b00      	cmp	r3, #0
 8002320:	d009      	beq.n	8002336 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002322:	4b12      	ldr	r3, [pc, #72]	@ (800236c <HAL_RCC_ClockConfig+0x1bc>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	490e      	ldr	r1, [pc, #56]	@ (800236c <HAL_RCC_ClockConfig+0x1bc>)
 8002332:	4313      	orrs	r3, r2
 8002334:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002336:	f000 f821 	bl	800237c <HAL_RCC_GetSysClockFreq>
 800233a:	4602      	mov	r2, r0
 800233c:	4b0b      	ldr	r3, [pc, #44]	@ (800236c <HAL_RCC_ClockConfig+0x1bc>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	091b      	lsrs	r3, r3, #4
 8002342:	f003 030f 	and.w	r3, r3, #15
 8002346:	490a      	ldr	r1, [pc, #40]	@ (8002370 <HAL_RCC_ClockConfig+0x1c0>)
 8002348:	5ccb      	ldrb	r3, [r1, r3]
 800234a:	fa22 f303 	lsr.w	r3, r2, r3
 800234e:	4a09      	ldr	r2, [pc, #36]	@ (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 8002350:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002352:	4b09      	ldr	r3, [pc, #36]	@ (8002378 <HAL_RCC_ClockConfig+0x1c8>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f7fe fff4 	bl	8001344 <HAL_InitTick>

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40023c00 	.word	0x40023c00
 800236c:	40023800 	.word	0x40023800
 8002370:	080094d8 	.word	0x080094d8
 8002374:	20000000 	.word	0x20000000
 8002378:	20000004 	.word	0x20000004

0800237c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800237c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002380:	b094      	sub	sp, #80	@ 0x50
 8002382:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002384:	2300      	movs	r3, #0
 8002386:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002388:	2300      	movs	r3, #0
 800238a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800238c:	2300      	movs	r3, #0
 800238e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002390:	2300      	movs	r3, #0
 8002392:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002394:	4b79      	ldr	r3, [pc, #484]	@ (800257c <HAL_RCC_GetSysClockFreq+0x200>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f003 030c 	and.w	r3, r3, #12
 800239c:	2b08      	cmp	r3, #8
 800239e:	d00d      	beq.n	80023bc <HAL_RCC_GetSysClockFreq+0x40>
 80023a0:	2b08      	cmp	r3, #8
 80023a2:	f200 80e1 	bhi.w	8002568 <HAL_RCC_GetSysClockFreq+0x1ec>
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d002      	beq.n	80023b0 <HAL_RCC_GetSysClockFreq+0x34>
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	d003      	beq.n	80023b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80023ae:	e0db      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023b0:	4b73      	ldr	r3, [pc, #460]	@ (8002580 <HAL_RCC_GetSysClockFreq+0x204>)
 80023b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80023b4:	e0db      	b.n	800256e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023b6:	4b73      	ldr	r3, [pc, #460]	@ (8002584 <HAL_RCC_GetSysClockFreq+0x208>)
 80023b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80023ba:	e0d8      	b.n	800256e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023bc:	4b6f      	ldr	r3, [pc, #444]	@ (800257c <HAL_RCC_GetSysClockFreq+0x200>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023c4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023c6:	4b6d      	ldr	r3, [pc, #436]	@ (800257c <HAL_RCC_GetSysClockFreq+0x200>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d063      	beq.n	800249a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023d2:	4b6a      	ldr	r3, [pc, #424]	@ (800257c <HAL_RCC_GetSysClockFreq+0x200>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	099b      	lsrs	r3, r3, #6
 80023d8:	2200      	movs	r2, #0
 80023da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80023dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80023de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80023e6:	2300      	movs	r3, #0
 80023e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80023ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80023ee:	4622      	mov	r2, r4
 80023f0:	462b      	mov	r3, r5
 80023f2:	f04f 0000 	mov.w	r0, #0
 80023f6:	f04f 0100 	mov.w	r1, #0
 80023fa:	0159      	lsls	r1, r3, #5
 80023fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002400:	0150      	lsls	r0, r2, #5
 8002402:	4602      	mov	r2, r0
 8002404:	460b      	mov	r3, r1
 8002406:	4621      	mov	r1, r4
 8002408:	1a51      	subs	r1, r2, r1
 800240a:	6139      	str	r1, [r7, #16]
 800240c:	4629      	mov	r1, r5
 800240e:	eb63 0301 	sbc.w	r3, r3, r1
 8002412:	617b      	str	r3, [r7, #20]
 8002414:	f04f 0200 	mov.w	r2, #0
 8002418:	f04f 0300 	mov.w	r3, #0
 800241c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002420:	4659      	mov	r1, fp
 8002422:	018b      	lsls	r3, r1, #6
 8002424:	4651      	mov	r1, sl
 8002426:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800242a:	4651      	mov	r1, sl
 800242c:	018a      	lsls	r2, r1, #6
 800242e:	4651      	mov	r1, sl
 8002430:	ebb2 0801 	subs.w	r8, r2, r1
 8002434:	4659      	mov	r1, fp
 8002436:	eb63 0901 	sbc.w	r9, r3, r1
 800243a:	f04f 0200 	mov.w	r2, #0
 800243e:	f04f 0300 	mov.w	r3, #0
 8002442:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002446:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800244a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800244e:	4690      	mov	r8, r2
 8002450:	4699      	mov	r9, r3
 8002452:	4623      	mov	r3, r4
 8002454:	eb18 0303 	adds.w	r3, r8, r3
 8002458:	60bb      	str	r3, [r7, #8]
 800245a:	462b      	mov	r3, r5
 800245c:	eb49 0303 	adc.w	r3, r9, r3
 8002460:	60fb      	str	r3, [r7, #12]
 8002462:	f04f 0200 	mov.w	r2, #0
 8002466:	f04f 0300 	mov.w	r3, #0
 800246a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800246e:	4629      	mov	r1, r5
 8002470:	024b      	lsls	r3, r1, #9
 8002472:	4621      	mov	r1, r4
 8002474:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002478:	4621      	mov	r1, r4
 800247a:	024a      	lsls	r2, r1, #9
 800247c:	4610      	mov	r0, r2
 800247e:	4619      	mov	r1, r3
 8002480:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002482:	2200      	movs	r2, #0
 8002484:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002486:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002488:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800248c:	f7fd ff00 	bl	8000290 <__aeabi_uldivmod>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4613      	mov	r3, r2
 8002496:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002498:	e058      	b.n	800254c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800249a:	4b38      	ldr	r3, [pc, #224]	@ (800257c <HAL_RCC_GetSysClockFreq+0x200>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	099b      	lsrs	r3, r3, #6
 80024a0:	2200      	movs	r2, #0
 80024a2:	4618      	mov	r0, r3
 80024a4:	4611      	mov	r1, r2
 80024a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80024aa:	623b      	str	r3, [r7, #32]
 80024ac:	2300      	movs	r3, #0
 80024ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80024b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80024b4:	4642      	mov	r2, r8
 80024b6:	464b      	mov	r3, r9
 80024b8:	f04f 0000 	mov.w	r0, #0
 80024bc:	f04f 0100 	mov.w	r1, #0
 80024c0:	0159      	lsls	r1, r3, #5
 80024c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024c6:	0150      	lsls	r0, r2, #5
 80024c8:	4602      	mov	r2, r0
 80024ca:	460b      	mov	r3, r1
 80024cc:	4641      	mov	r1, r8
 80024ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80024d2:	4649      	mov	r1, r9
 80024d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80024d8:	f04f 0200 	mov.w	r2, #0
 80024dc:	f04f 0300 	mov.w	r3, #0
 80024e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80024e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80024e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80024ec:	ebb2 040a 	subs.w	r4, r2, sl
 80024f0:	eb63 050b 	sbc.w	r5, r3, fp
 80024f4:	f04f 0200 	mov.w	r2, #0
 80024f8:	f04f 0300 	mov.w	r3, #0
 80024fc:	00eb      	lsls	r3, r5, #3
 80024fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002502:	00e2      	lsls	r2, r4, #3
 8002504:	4614      	mov	r4, r2
 8002506:	461d      	mov	r5, r3
 8002508:	4643      	mov	r3, r8
 800250a:	18e3      	adds	r3, r4, r3
 800250c:	603b      	str	r3, [r7, #0]
 800250e:	464b      	mov	r3, r9
 8002510:	eb45 0303 	adc.w	r3, r5, r3
 8002514:	607b      	str	r3, [r7, #4]
 8002516:	f04f 0200 	mov.w	r2, #0
 800251a:	f04f 0300 	mov.w	r3, #0
 800251e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002522:	4629      	mov	r1, r5
 8002524:	028b      	lsls	r3, r1, #10
 8002526:	4621      	mov	r1, r4
 8002528:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800252c:	4621      	mov	r1, r4
 800252e:	028a      	lsls	r2, r1, #10
 8002530:	4610      	mov	r0, r2
 8002532:	4619      	mov	r1, r3
 8002534:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002536:	2200      	movs	r2, #0
 8002538:	61bb      	str	r3, [r7, #24]
 800253a:	61fa      	str	r2, [r7, #28]
 800253c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002540:	f7fd fea6 	bl	8000290 <__aeabi_uldivmod>
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	4613      	mov	r3, r2
 800254a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800254c:	4b0b      	ldr	r3, [pc, #44]	@ (800257c <HAL_RCC_GetSysClockFreq+0x200>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	0c1b      	lsrs	r3, r3, #16
 8002552:	f003 0303 	and.w	r3, r3, #3
 8002556:	3301      	adds	r3, #1
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800255c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800255e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002560:	fbb2 f3f3 	udiv	r3, r2, r3
 8002564:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002566:	e002      	b.n	800256e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002568:	4b05      	ldr	r3, [pc, #20]	@ (8002580 <HAL_RCC_GetSysClockFreq+0x204>)
 800256a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800256c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800256e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002570:	4618      	mov	r0, r3
 8002572:	3750      	adds	r7, #80	@ 0x50
 8002574:	46bd      	mov	sp, r7
 8002576:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800257a:	bf00      	nop
 800257c:	40023800 	.word	0x40023800
 8002580:	00f42400 	.word	0x00f42400
 8002584:	007a1200 	.word	0x007a1200

08002588 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800258c:	4b03      	ldr	r3, [pc, #12]	@ (800259c <HAL_RCC_GetHCLKFreq+0x14>)
 800258e:	681b      	ldr	r3, [r3, #0]
}
 8002590:	4618      	mov	r0, r3
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	20000000 	.word	0x20000000

080025a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025a4:	f7ff fff0 	bl	8002588 <HAL_RCC_GetHCLKFreq>
 80025a8:	4602      	mov	r2, r0
 80025aa:	4b05      	ldr	r3, [pc, #20]	@ (80025c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	0a9b      	lsrs	r3, r3, #10
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	4903      	ldr	r1, [pc, #12]	@ (80025c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025b6:	5ccb      	ldrb	r3, [r1, r3]
 80025b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025bc:	4618      	mov	r0, r3
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40023800 	.word	0x40023800
 80025c4:	080094e8 	.word	0x080094e8

080025c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025cc:	f7ff ffdc 	bl	8002588 <HAL_RCC_GetHCLKFreq>
 80025d0:	4602      	mov	r2, r0
 80025d2:	4b05      	ldr	r3, [pc, #20]	@ (80025e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	0b5b      	lsrs	r3, r3, #13
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	4903      	ldr	r1, [pc, #12]	@ (80025ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80025de:	5ccb      	ldrb	r3, [r1, r3]
 80025e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40023800 	.word	0x40023800
 80025ec:	080094e8 	.word	0x080094e8

080025f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	220f      	movs	r2, #15
 80025fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002600:	4b12      	ldr	r3, [pc, #72]	@ (800264c <HAL_RCC_GetClockConfig+0x5c>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f003 0203 	and.w	r2, r3, #3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800260c:	4b0f      	ldr	r3, [pc, #60]	@ (800264c <HAL_RCC_GetClockConfig+0x5c>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002618:	4b0c      	ldr	r3, [pc, #48]	@ (800264c <HAL_RCC_GetClockConfig+0x5c>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002624:	4b09      	ldr	r3, [pc, #36]	@ (800264c <HAL_RCC_GetClockConfig+0x5c>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	08db      	lsrs	r3, r3, #3
 800262a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002632:	4b07      	ldr	r3, [pc, #28]	@ (8002650 <HAL_RCC_GetClockConfig+0x60>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0207 	and.w	r2, r3, #7
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	601a      	str	r2, [r3, #0]
}
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	40023800 	.word	0x40023800
 8002650:	40023c00 	.word	0x40023c00

08002654 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002660:	2300      	movs	r3, #0
 8002662:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b00      	cmp	r3, #0
 800266e:	d105      	bne.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002678:	2b00      	cmp	r3, #0
 800267a:	d038      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800267c:	4b68      	ldr	r3, [pc, #416]	@ (8002820 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002682:	f7ff f83d 	bl	8001700 <HAL_GetTick>
 8002686:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002688:	e008      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800268a:	f7ff f839 	bl	8001700 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e0bd      	b.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800269c:	4b61      	ldr	r3, [pc, #388]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1f0      	bne.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	019b      	lsls	r3, r3, #6
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	071b      	lsls	r3, r3, #28
 80026ba:	495a      	ldr	r1, [pc, #360]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80026c2:	4b57      	ldr	r3, [pc, #348]	@ (8002820 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80026c8:	f7ff f81a 	bl	8001700 <HAL_GetTick>
 80026cc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80026ce:	e008      	b.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80026d0:	f7ff f816 	bl	8001700 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e09a      	b.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80026e2:	4b50      	ldr	r3, [pc, #320]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0f0      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 8083 	beq.w	8002802 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80026fc:	2300      	movs	r3, #0
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	4b48      	ldr	r3, [pc, #288]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002704:	4a47      	ldr	r2, [pc, #284]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002706:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800270a:	6413      	str	r3, [r2, #64]	@ 0x40
 800270c:	4b45      	ldr	r3, [pc, #276]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800270e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002710:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002718:	4b43      	ldr	r3, [pc, #268]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a42      	ldr	r2, [pc, #264]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800271e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002722:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002724:	f7fe ffec 	bl	8001700 <HAL_GetTick>
 8002728:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800272a:	e008      	b.n	800273e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800272c:	f7fe ffe8 	bl	8001700 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e06c      	b.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800273e:	4b3a      	ldr	r3, [pc, #232]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0f0      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800274a:	4b36      	ldr	r3, [pc, #216]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800274c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800274e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002752:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d02f      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x166>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	429a      	cmp	r2, r3
 8002766:	d028      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002768:	4b2e      	ldr	r3, [pc, #184]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800276a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800276c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002770:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002772:	4b2e      	ldr	r3, [pc, #184]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002774:	2201      	movs	r2, #1
 8002776:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002778:	4b2c      	ldr	r3, [pc, #176]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800277e:	4a29      	ldr	r2, [pc, #164]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002784:	4b27      	ldr	r3, [pc, #156]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b01      	cmp	r3, #1
 800278e:	d114      	bne.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002790:	f7fe ffb6 	bl	8001700 <HAL_GetTick>
 8002794:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002796:	e00a      	b.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002798:	f7fe ffb2 	bl	8001700 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d901      	bls.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e034      	b.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0ee      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80027c6:	d10d      	bne.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80027c8:	4b16      	ldr	r3, [pc, #88]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80027d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027dc:	4911      	ldr	r1, [pc, #68]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	608b      	str	r3, [r1, #8]
 80027e2:	e005      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80027e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	4a0e      	ldr	r2, [pc, #56]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ea:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80027ee:	6093      	str	r3, [r2, #8]
 80027f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027fc:	4909      	ldr	r1, [pc, #36]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0308 	and.w	r3, r3, #8
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	7d1a      	ldrb	r2, [r3, #20]
 8002812:	4b07      	ldr	r3, [pc, #28]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002814:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3718      	adds	r7, #24
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	42470068 	.word	0x42470068
 8002824:	40023800 	.word	0x40023800
 8002828:	40007000 	.word	0x40007000
 800282c:	42470e40 	.word	0x42470e40
 8002830:	424711e0 	.word	0x424711e0

08002834 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e073      	b.n	8002932 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	7f5b      	ldrb	r3, [r3, #29]
 800284e:	b2db      	uxtb	r3, r3
 8002850:	2b00      	cmp	r3, #0
 8002852:	d105      	bne.n	8002860 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7fe fcb6 	bl	80011cc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2202      	movs	r2, #2
 8002864:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	f003 0310 	and.w	r3, r3, #16
 8002870:	2b10      	cmp	r3, #16
 8002872:	d055      	beq.n	8002920 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	22ca      	movs	r2, #202	@ 0xca
 800287a:	625a      	str	r2, [r3, #36]	@ 0x24
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2253      	movs	r2, #83	@ 0x53
 8002882:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 f87f 	bl	8002988 <RTC_EnterInitMode>
 800288a:	4603      	mov	r3, r0
 800288c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800288e:	7bfb      	ldrb	r3, [r7, #15]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d12c      	bne.n	80028ee <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6812      	ldr	r2, [r2, #0]
 800289e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80028a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80028a6:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6899      	ldr	r1, [r3, #8]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	431a      	orrs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	695b      	ldr	r3, [r3, #20]
 80028bc:	431a      	orrs	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	430a      	orrs	r2, r1
 80028c4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	68d2      	ldr	r2, [r2, #12]
 80028ce:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6919      	ldr	r1, [r3, #16]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	041a      	lsls	r2, r3, #16
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	430a      	orrs	r2, r1
 80028e2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 f886 	bl	80029f6 <RTC_ExitInitMode>
 80028ea:	4603      	mov	r3, r0
 80028ec:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80028ee:	7bfb      	ldrb	r3, [r7, #15]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d110      	bne.n	8002916 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002902:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	699a      	ldr	r2, [r3, #24]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	22ff      	movs	r2, #255	@ 0xff
 800291c:	625a      	str	r2, [r3, #36]	@ 0x24
 800291e:	e001      	b.n	8002924 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002920:	2300      	movs	r3, #0
 8002922:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002924:	7bfb      	ldrb	r3, [r7, #15]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d102      	bne.n	8002930 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2201      	movs	r2, #1
 800292e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002930:	7bfb      	ldrb	r3, [r7, #15]
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
	...

0800293c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002944:	2300      	movs	r3, #0
 8002946:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a0d      	ldr	r2, [pc, #52]	@ (8002984 <HAL_RTC_WaitForSynchro+0x48>)
 800294e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002950:	f7fe fed6 	bl	8001700 <HAL_GetTick>
 8002954:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002956:	e009      	b.n	800296c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002958:	f7fe fed2 	bl	8001700 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002966:	d901      	bls.n	800296c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e007      	b.n	800297c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	f003 0320 	and.w	r3, r3, #32
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0ee      	beq.n	8002958 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	00013f5f 	.word	0x00013f5f

08002988 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002990:	2300      	movs	r3, #0
 8002992:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002994:	2300      	movs	r3, #0
 8002996:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d122      	bne.n	80029ec <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68da      	ldr	r2, [r3, #12]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80029b4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80029b6:	f7fe fea3 	bl	8001700 <HAL_GetTick>
 80029ba:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80029bc:	e00c      	b.n	80029d8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80029be:	f7fe fe9f 	bl	8001700 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80029cc:	d904      	bls.n	80029d8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2204      	movs	r2, #4
 80029d2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d102      	bne.n	80029ec <RTC_EnterInitMode+0x64>
 80029e6:	7bfb      	ldrb	r3, [r7, #15]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d1e8      	bne.n	80029be <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80029ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b084      	sub	sp, #16
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029fe:	2300      	movs	r3, #0
 8002a00:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68da      	ldr	r2, [r3, #12]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a10:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f003 0320 	and.w	r3, r3, #32
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10a      	bne.n	8002a36 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7ff ff8b 	bl	800293c <HAL_RTC_WaitForSynchro>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d004      	beq.n	8002a36 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2204      	movs	r2, #4
 8002a30:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e07b      	b.n	8002b4a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d108      	bne.n	8002a6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a62:	d009      	beq.n	8002a78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	61da      	str	r2, [r3, #28]
 8002a6a:	e005      	b.n	8002a78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d106      	bne.n	8002a98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7fe fbc6 	bl	8001224 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002aae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002aca:	431a      	orrs	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002af2:	431a      	orrs	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002afc:	ea42 0103 	orr.w	r1, r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b04:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	0c1b      	lsrs	r3, r3, #16
 8002b16:	f003 0104 	and.w	r1, r3, #4
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1e:	f003 0210 	and.w	r2, r3, #16
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	69da      	ldr	r2, [r3, #28]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b088      	sub	sp, #32
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	60f8      	str	r0, [r7, #12]
 8002b5a:	60b9      	str	r1, [r7, #8]
 8002b5c:	603b      	str	r3, [r7, #0]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b62:	f7fe fdcd 	bl	8001700 <HAL_GetTick>
 8002b66:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002b68:	88fb      	ldrh	r3, [r7, #6]
 8002b6a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d001      	beq.n	8002b7c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002b78:	2302      	movs	r3, #2
 8002b7a:	e12a      	b.n	8002dd2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d002      	beq.n	8002b88 <HAL_SPI_Transmit+0x36>
 8002b82:	88fb      	ldrh	r3, [r7, #6]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e122      	b.n	8002dd2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d101      	bne.n	8002b9a <HAL_SPI_Transmit+0x48>
 8002b96:	2302      	movs	r3, #2
 8002b98:	e11b      	b.n	8002dd2 <HAL_SPI_Transmit+0x280>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2203      	movs	r2, #3
 8002ba6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	88fa      	ldrh	r2, [r7, #6]
 8002bba:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	88fa      	ldrh	r2, [r7, #6]
 8002bc0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002be8:	d10f      	bne.n	8002c0a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002bf8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c08:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c14:	2b40      	cmp	r3, #64	@ 0x40
 8002c16:	d007      	beq.n	8002c28 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c30:	d152      	bne.n	8002cd8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d002      	beq.n	8002c40 <HAL_SPI_Transmit+0xee>
 8002c3a:	8b7b      	ldrh	r3, [r7, #26]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d145      	bne.n	8002ccc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c44:	881a      	ldrh	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c50:	1c9a      	adds	r2, r3, #2
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c64:	e032      	b.n	8002ccc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d112      	bne.n	8002c9a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c78:	881a      	ldrh	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c84:	1c9a      	adds	r2, r3, #2
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	3b01      	subs	r3, #1
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002c98:	e018      	b.n	8002ccc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c9a:	f7fe fd31 	bl	8001700 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d803      	bhi.n	8002cb2 <HAL_SPI_Transmit+0x160>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb0:	d102      	bne.n	8002cb8 <HAL_SPI_Transmit+0x166>
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d109      	bne.n	8002ccc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e082      	b.n	8002dd2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1c7      	bne.n	8002c66 <HAL_SPI_Transmit+0x114>
 8002cd6:	e053      	b.n	8002d80 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d002      	beq.n	8002ce6 <HAL_SPI_Transmit+0x194>
 8002ce0:	8b7b      	ldrh	r3, [r7, #26]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d147      	bne.n	8002d76 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	330c      	adds	r3, #12
 8002cf0:	7812      	ldrb	r2, [r2, #0]
 8002cf2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf8:	1c5a      	adds	r2, r3, #1
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	3b01      	subs	r3, #1
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002d0c:	e033      	b.n	8002d76 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d113      	bne.n	8002d44 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	330c      	adds	r3, #12
 8002d26:	7812      	ldrb	r2, [r2, #0]
 8002d28:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d2e:	1c5a      	adds	r2, r3, #1
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002d42:	e018      	b.n	8002d76 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d44:	f7fe fcdc 	bl	8001700 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d803      	bhi.n	8002d5c <HAL_SPI_Transmit+0x20a>
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5a:	d102      	bne.n	8002d62 <HAL_SPI_Transmit+0x210>
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d109      	bne.n	8002d76 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e02d      	b.n	8002dd2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1c6      	bne.n	8002d0e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d80:	69fa      	ldr	r2, [r7, #28]
 8002d82:	6839      	ldr	r1, [r7, #0]
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 fbd9 	bl	800353c <SPI_EndRxTxTransaction>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d002      	beq.n	8002d96 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2220      	movs	r2, #32
 8002d94:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10a      	bne.n	8002db4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d9e:	2300      	movs	r3, #0
 8002da0:	617b      	str	r3, [r7, #20]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	617b      	str	r3, [r7, #20]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	617b      	str	r3, [r7, #20]
 8002db2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e000      	b.n	8002dd2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
  }
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3720      	adds	r7, #32
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b088      	sub	sp, #32
 8002dde:	af02      	add	r7, sp, #8
 8002de0:	60f8      	str	r0, [r7, #12]
 8002de2:	60b9      	str	r1, [r7, #8]
 8002de4:	603b      	str	r3, [r7, #0]
 8002de6:	4613      	mov	r3, r2
 8002de8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d001      	beq.n	8002dfa <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002df6:	2302      	movs	r3, #2
 8002df8:	e104      	b.n	8003004 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e02:	d112      	bne.n	8002e2a <HAL_SPI_Receive+0x50>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10e      	bne.n	8002e2a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2204      	movs	r2, #4
 8002e10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002e14:	88fa      	ldrh	r2, [r7, #6]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	68ba      	ldr	r2, [r7, #8]
 8002e1e:	68b9      	ldr	r1, [r7, #8]
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f000 f8f3 	bl	800300c <HAL_SPI_TransmitReceive>
 8002e26:	4603      	mov	r3, r0
 8002e28:	e0ec      	b.n	8003004 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e2a:	f7fe fc69 	bl	8001700 <HAL_GetTick>
 8002e2e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d002      	beq.n	8002e3c <HAL_SPI_Receive+0x62>
 8002e36:	88fb      	ldrh	r3, [r7, #6]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e0e1      	b.n	8003004 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d101      	bne.n	8002e4e <HAL_SPI_Receive+0x74>
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	e0da      	b.n	8003004 <HAL_SPI_Receive+0x22a>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2204      	movs	r2, #4
 8002e5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	68ba      	ldr	r2, [r7, #8]
 8002e68:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	88fa      	ldrh	r2, [r7, #6]
 8002e6e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	88fa      	ldrh	r2, [r7, #6]
 8002e74:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e9c:	d10f      	bne.n	8002ebe <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002eac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002ebc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ec8:	2b40      	cmp	r3, #64	@ 0x40
 8002eca:	d007      	beq.n	8002edc <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002eda:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d170      	bne.n	8002fc6 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002ee4:	e035      	b.n	8002f52 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d115      	bne.n	8002f20 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f103 020c 	add.w	r2, r3, #12
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f00:	7812      	ldrb	r2, [r2, #0]
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f0a:	1c5a      	adds	r2, r3, #1
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	3b01      	subs	r3, #1
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f1e:	e018      	b.n	8002f52 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f20:	f7fe fbee 	bl	8001700 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d803      	bhi.n	8002f38 <HAL_SPI_Receive+0x15e>
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f36:	d102      	bne.n	8002f3e <HAL_SPI_Receive+0x164>
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d109      	bne.n	8002f52 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e058      	b.n	8003004 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1c4      	bne.n	8002ee6 <HAL_SPI_Receive+0x10c>
 8002f5c:	e038      	b.n	8002fd0 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d113      	bne.n	8002f94 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f76:	b292      	uxth	r2, r2
 8002f78:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f7e:	1c9a      	adds	r2, r3, #2
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f92:	e018      	b.n	8002fc6 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f94:	f7fe fbb4 	bl	8001700 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d803      	bhi.n	8002fac <HAL_SPI_Receive+0x1d2>
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002faa:	d102      	bne.n	8002fb2 <HAL_SPI_Receive+0x1d8>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d109      	bne.n	8002fc6 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e01e      	b.n	8003004 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1c6      	bne.n	8002f5e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	6839      	ldr	r1, [r7, #0]
 8002fd4:	68f8      	ldr	r0, [r7, #12]
 8002fd6:	f000 fa4b 	bl	8003470 <SPI_EndRxTransaction>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d002      	beq.n	8002fe6 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e000      	b.n	8003004 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003002:	2300      	movs	r3, #0
  }
}
 8003004:	4618      	mov	r0, r3
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b08a      	sub	sp, #40	@ 0x28
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
 8003018:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800301a:	2301      	movs	r3, #1
 800301c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800301e:	f7fe fb6f 	bl	8001700 <HAL_GetTick>
 8003022:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800302a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003032:	887b      	ldrh	r3, [r7, #2]
 8003034:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003036:	7ffb      	ldrb	r3, [r7, #31]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d00c      	beq.n	8003056 <HAL_SPI_TransmitReceive+0x4a>
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003042:	d106      	bne.n	8003052 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d102      	bne.n	8003052 <HAL_SPI_TransmitReceive+0x46>
 800304c:	7ffb      	ldrb	r3, [r7, #31]
 800304e:	2b04      	cmp	r3, #4
 8003050:	d001      	beq.n	8003056 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8003052:	2302      	movs	r3, #2
 8003054:	e17f      	b.n	8003356 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d005      	beq.n	8003068 <HAL_SPI_TransmitReceive+0x5c>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d002      	beq.n	8003068 <HAL_SPI_TransmitReceive+0x5c>
 8003062:	887b      	ldrh	r3, [r7, #2]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e174      	b.n	8003356 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003072:	2b01      	cmp	r3, #1
 8003074:	d101      	bne.n	800307a <HAL_SPI_TransmitReceive+0x6e>
 8003076:	2302      	movs	r3, #2
 8003078:	e16d      	b.n	8003356 <HAL_SPI_TransmitReceive+0x34a>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b04      	cmp	r3, #4
 800308c:	d003      	beq.n	8003096 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2205      	movs	r2, #5
 8003092:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	887a      	ldrh	r2, [r7, #2]
 80030a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	887a      	ldrh	r2, [r7, #2]
 80030ac:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	887a      	ldrh	r2, [r7, #2]
 80030b8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	887a      	ldrh	r2, [r7, #2]
 80030be:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030d6:	2b40      	cmp	r3, #64	@ 0x40
 80030d8:	d007      	beq.n	80030ea <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030f2:	d17e      	bne.n	80031f2 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d002      	beq.n	8003102 <HAL_SPI_TransmitReceive+0xf6>
 80030fc:	8afb      	ldrh	r3, [r7, #22]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d16c      	bne.n	80031dc <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003106:	881a      	ldrh	r2, [r3, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003112:	1c9a      	adds	r2, r3, #2
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800311c:	b29b      	uxth	r3, r3
 800311e:	3b01      	subs	r3, #1
 8003120:	b29a      	uxth	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003126:	e059      	b.n	80031dc <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b02      	cmp	r3, #2
 8003134:	d11b      	bne.n	800316e <HAL_SPI_TransmitReceive+0x162>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800313a:	b29b      	uxth	r3, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	d016      	beq.n	800316e <HAL_SPI_TransmitReceive+0x162>
 8003140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003142:	2b01      	cmp	r3, #1
 8003144:	d113      	bne.n	800316e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800314a:	881a      	ldrh	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003156:	1c9a      	adds	r2, r3, #2
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003160:	b29b      	uxth	r3, r3
 8003162:	3b01      	subs	r3, #1
 8003164:	b29a      	uxth	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800316a:	2300      	movs	r3, #0
 800316c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b01      	cmp	r3, #1
 800317a:	d119      	bne.n	80031b0 <HAL_SPI_TransmitReceive+0x1a4>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003180:	b29b      	uxth	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d014      	beq.n	80031b0 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68da      	ldr	r2, [r3, #12]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003190:	b292      	uxth	r2, r2
 8003192:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003198:	1c9a      	adds	r2, r3, #2
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	3b01      	subs	r3, #1
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031ac:	2301      	movs	r3, #1
 80031ae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80031b0:	f7fe faa6 	bl	8001700 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	6a3b      	ldr	r3, [r7, #32]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031bc:	429a      	cmp	r2, r3
 80031be:	d80d      	bhi.n	80031dc <HAL_SPI_TransmitReceive+0x1d0>
 80031c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c6:	d009      	beq.n	80031dc <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e0bc      	b.n	8003356 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1a0      	bne.n	8003128 <HAL_SPI_TransmitReceive+0x11c>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d19b      	bne.n	8003128 <HAL_SPI_TransmitReceive+0x11c>
 80031f0:	e082      	b.n	80032f8 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d002      	beq.n	8003200 <HAL_SPI_TransmitReceive+0x1f4>
 80031fa:	8afb      	ldrh	r3, [r7, #22]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d171      	bne.n	80032e4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	330c      	adds	r3, #12
 800320a:	7812      	ldrb	r2, [r2, #0]
 800320c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003212:	1c5a      	adds	r2, r3, #1
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800321c:	b29b      	uxth	r3, r3
 800321e:	3b01      	subs	r3, #1
 8003220:	b29a      	uxth	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003226:	e05d      	b.n	80032e4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b02      	cmp	r3, #2
 8003234:	d11c      	bne.n	8003270 <HAL_SPI_TransmitReceive+0x264>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800323a:	b29b      	uxth	r3, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	d017      	beq.n	8003270 <HAL_SPI_TransmitReceive+0x264>
 8003240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003242:	2b01      	cmp	r3, #1
 8003244:	d114      	bne.n	8003270 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	330c      	adds	r3, #12
 8003250:	7812      	ldrb	r2, [r2, #0]
 8003252:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003258:	1c5a      	adds	r2, r3, #1
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003262:	b29b      	uxth	r3, r3
 8003264:	3b01      	subs	r3, #1
 8003266:	b29a      	uxth	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800326c:	2300      	movs	r3, #0
 800326e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b01      	cmp	r3, #1
 800327c:	d119      	bne.n	80032b2 <HAL_SPI_TransmitReceive+0x2a6>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003282:	b29b      	uxth	r3, r3
 8003284:	2b00      	cmp	r3, #0
 8003286:	d014      	beq.n	80032b2 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68da      	ldr	r2, [r3, #12]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003292:	b2d2      	uxtb	r2, r2
 8003294:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800329a:	1c5a      	adds	r2, r3, #1
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	3b01      	subs	r3, #1
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032ae:	2301      	movs	r3, #1
 80032b0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80032b2:	f7fe fa25 	bl	8001700 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	6a3b      	ldr	r3, [r7, #32]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032be:	429a      	cmp	r2, r3
 80032c0:	d803      	bhi.n	80032ca <HAL_SPI_TransmitReceive+0x2be>
 80032c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c8:	d102      	bne.n	80032d0 <HAL_SPI_TransmitReceive+0x2c4>
 80032ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d109      	bne.n	80032e4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e038      	b.n	8003356 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d19c      	bne.n	8003228 <HAL_SPI_TransmitReceive+0x21c>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d197      	bne.n	8003228 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032f8:	6a3a      	ldr	r2, [r7, #32]
 80032fa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f000 f91d 	bl	800353c <SPI_EndRxTxTransaction>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d008      	beq.n	800331a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2220      	movs	r2, #32
 800330c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e01d      	b.n	8003356 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10a      	bne.n	8003338 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003322:	2300      	movs	r3, #0
 8003324:	613b      	str	r3, [r7, #16]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	613b      	str	r3, [r7, #16]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	613b      	str	r3, [r7, #16]
 8003336:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e000      	b.n	8003356 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003354:	2300      	movs	r3, #0
  }
}
 8003356:	4618      	mov	r0, r3
 8003358:	3728      	adds	r7, #40	@ 0x28
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
	...

08003360 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b088      	sub	sp, #32
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	603b      	str	r3, [r7, #0]
 800336c:	4613      	mov	r3, r2
 800336e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003370:	f7fe f9c6 	bl	8001700 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003378:	1a9b      	subs	r3, r3, r2
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	4413      	add	r3, r2
 800337e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003380:	f7fe f9be 	bl	8001700 <HAL_GetTick>
 8003384:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003386:	4b39      	ldr	r3, [pc, #228]	@ (800346c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	015b      	lsls	r3, r3, #5
 800338c:	0d1b      	lsrs	r3, r3, #20
 800338e:	69fa      	ldr	r2, [r7, #28]
 8003390:	fb02 f303 	mul.w	r3, r2, r3
 8003394:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003396:	e054      	b.n	8003442 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800339e:	d050      	beq.n	8003442 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033a0:	f7fe f9ae 	bl	8001700 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	69fa      	ldr	r2, [r7, #28]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d902      	bls.n	80033b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d13d      	bne.n	8003432 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80033c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033ce:	d111      	bne.n	80033f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033d8:	d004      	beq.n	80033e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033e2:	d107      	bne.n	80033f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033fc:	d10f      	bne.n	800341e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800341c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e017      	b.n	8003462 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003438:	2300      	movs	r3, #0
 800343a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	3b01      	subs	r3, #1
 8003440:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	4013      	ands	r3, r2
 800344c:	68ba      	ldr	r2, [r7, #8]
 800344e:	429a      	cmp	r2, r3
 8003450:	bf0c      	ite	eq
 8003452:	2301      	moveq	r3, #1
 8003454:	2300      	movne	r3, #0
 8003456:	b2db      	uxtb	r3, r3
 8003458:	461a      	mov	r2, r3
 800345a:	79fb      	ldrb	r3, [r7, #7]
 800345c:	429a      	cmp	r2, r3
 800345e:	d19b      	bne.n	8003398 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3720      	adds	r7, #32
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	20000000 	.word	0x20000000

08003470 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af02      	add	r7, sp, #8
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003484:	d111      	bne.n	80034aa <SPI_EndRxTransaction+0x3a>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800348e:	d004      	beq.n	800349a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003498:	d107      	bne.n	80034aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034a8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034b2:	d12a      	bne.n	800350a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034bc:	d012      	beq.n	80034e4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	2200      	movs	r2, #0
 80034c6:	2180      	movs	r1, #128	@ 0x80
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f7ff ff49 	bl	8003360 <SPI_WaitFlagStateUntilTimeout>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d02d      	beq.n	8003530 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034d8:	f043 0220 	orr.w	r2, r3, #32
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e026      	b.n	8003532 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	9300      	str	r3, [sp, #0]
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	2200      	movs	r2, #0
 80034ec:	2101      	movs	r1, #1
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f7ff ff36 	bl	8003360 <SPI_WaitFlagStateUntilTimeout>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d01a      	beq.n	8003530 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034fe:	f043 0220 	orr.w	r2, r3, #32
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e013      	b.n	8003532 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	2200      	movs	r2, #0
 8003512:	2101      	movs	r1, #1
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f7ff ff23 	bl	8003360 <SPI_WaitFlagStateUntilTimeout>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d007      	beq.n	8003530 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003524:	f043 0220 	orr.w	r2, r3, #32
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e000      	b.n	8003532 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
	...

0800353c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b088      	sub	sp, #32
 8003540:	af02      	add	r7, sp, #8
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	2201      	movs	r2, #1
 8003550:	2102      	movs	r1, #2
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f7ff ff04 	bl	8003360 <SPI_WaitFlagStateUntilTimeout>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d007      	beq.n	800356e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003562:	f043 0220 	orr.w	r2, r3, #32
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e032      	b.n	80035d4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800356e:	4b1b      	ldr	r3, [pc, #108]	@ (80035dc <SPI_EndRxTxTransaction+0xa0>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a1b      	ldr	r2, [pc, #108]	@ (80035e0 <SPI_EndRxTxTransaction+0xa4>)
 8003574:	fba2 2303 	umull	r2, r3, r2, r3
 8003578:	0d5b      	lsrs	r3, r3, #21
 800357a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800357e:	fb02 f303 	mul.w	r3, r2, r3
 8003582:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800358c:	d112      	bne.n	80035b4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	2200      	movs	r2, #0
 8003596:	2180      	movs	r1, #128	@ 0x80
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f7ff fee1 	bl	8003360 <SPI_WaitFlagStateUntilTimeout>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d016      	beq.n	80035d2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035a8:	f043 0220 	orr.w	r2, r3, #32
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e00f      	b.n	80035d4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00a      	beq.n	80035d0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	3b01      	subs	r3, #1
 80035be:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035ca:	2b80      	cmp	r3, #128	@ 0x80
 80035cc:	d0f2      	beq.n	80035b4 <SPI_EndRxTxTransaction+0x78>
 80035ce:	e000      	b.n	80035d2 <SPI_EndRxTxTransaction+0x96>
        break;
 80035d0:	bf00      	nop
  }

  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3718      	adds	r7, #24
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	20000000 	.word	0x20000000
 80035e0:	165e9f81 	.word	0x165e9f81

080035e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e041      	b.n	800367a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d106      	bne.n	8003610 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f839 	bl	8003682 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2202      	movs	r2, #2
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3304      	adds	r3, #4
 8003620:	4619      	mov	r1, r3
 8003622:	4610      	mov	r0, r2
 8003624:	f000 f9b2 	bl	800398c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003682:	b480      	push	{r7}
 8003684:	b083      	sub	sp, #12
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800368a:	bf00      	nop
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
	...

08003698 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d001      	beq.n	80036b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e044      	b.n	800373a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2202      	movs	r2, #2
 80036b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68da      	ldr	r2, [r3, #12]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0201 	orr.w	r2, r2, #1
 80036c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a1e      	ldr	r2, [pc, #120]	@ (8003748 <HAL_TIM_Base_Start_IT+0xb0>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d018      	beq.n	8003704 <HAL_TIM_Base_Start_IT+0x6c>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036da:	d013      	beq.n	8003704 <HAL_TIM_Base_Start_IT+0x6c>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a1a      	ldr	r2, [pc, #104]	@ (800374c <HAL_TIM_Base_Start_IT+0xb4>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d00e      	beq.n	8003704 <HAL_TIM_Base_Start_IT+0x6c>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a19      	ldr	r2, [pc, #100]	@ (8003750 <HAL_TIM_Base_Start_IT+0xb8>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d009      	beq.n	8003704 <HAL_TIM_Base_Start_IT+0x6c>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a17      	ldr	r2, [pc, #92]	@ (8003754 <HAL_TIM_Base_Start_IT+0xbc>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d004      	beq.n	8003704 <HAL_TIM_Base_Start_IT+0x6c>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a16      	ldr	r2, [pc, #88]	@ (8003758 <HAL_TIM_Base_Start_IT+0xc0>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d111      	bne.n	8003728 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f003 0307 	and.w	r3, r3, #7
 800370e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2b06      	cmp	r3, #6
 8003714:	d010      	beq.n	8003738 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f042 0201 	orr.w	r2, r2, #1
 8003724:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003726:	e007      	b.n	8003738 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0201 	orr.w	r2, r2, #1
 8003736:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	40010000 	.word	0x40010000
 800374c:	40000400 	.word	0x40000400
 8003750:	40000800 	.word	0x40000800
 8003754:	40000c00 	.word	0x40000c00
 8003758:	40014000 	.word	0x40014000

0800375c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d020      	beq.n	80037c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d01b      	beq.n	80037c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f06f 0202 	mvn.w	r2, #2
 8003790:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	f003 0303 	and.w	r3, r3, #3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d003      	beq.n	80037ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f8d2 	bl	8003950 <HAL_TIM_IC_CaptureCallback>
 80037ac:	e005      	b.n	80037ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f8c4 	bl	800393c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 f8d5 	bl	8003964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	f003 0304 	and.w	r3, r3, #4
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d020      	beq.n	800380c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f003 0304 	and.w	r3, r3, #4
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d01b      	beq.n	800380c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f06f 0204 	mvn.w	r2, #4
 80037dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2202      	movs	r2, #2
 80037e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f8ac 	bl	8003950 <HAL_TIM_IC_CaptureCallback>
 80037f8:	e005      	b.n	8003806 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f89e 	bl	800393c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 f8af 	bl	8003964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b00      	cmp	r3, #0
 8003814:	d020      	beq.n	8003858 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f003 0308 	and.w	r3, r3, #8
 800381c:	2b00      	cmp	r3, #0
 800381e:	d01b      	beq.n	8003858 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f06f 0208 	mvn.w	r2, #8
 8003828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2204      	movs	r2, #4
 800382e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	f003 0303 	and.w	r3, r3, #3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f886 	bl	8003950 <HAL_TIM_IC_CaptureCallback>
 8003844:	e005      	b.n	8003852 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f878 	bl	800393c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 f889 	bl	8003964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	f003 0310 	and.w	r3, r3, #16
 800385e:	2b00      	cmp	r3, #0
 8003860:	d020      	beq.n	80038a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f003 0310 	and.w	r3, r3, #16
 8003868:	2b00      	cmp	r3, #0
 800386a:	d01b      	beq.n	80038a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f06f 0210 	mvn.w	r2, #16
 8003874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2208      	movs	r2, #8
 800387a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003886:	2b00      	cmp	r3, #0
 8003888:	d003      	beq.n	8003892 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f860 	bl	8003950 <HAL_TIM_IC_CaptureCallback>
 8003890:	e005      	b.n	800389e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f852 	bl	800393c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 f863 	bl	8003964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00c      	beq.n	80038c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d007      	beq.n	80038c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f06f 0201 	mvn.w	r2, #1
 80038c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7fd fc3e 	bl	8001144 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00c      	beq.n	80038ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d007      	beq.n	80038ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80038e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f8e6 	bl	8003ab8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00c      	beq.n	8003910 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d007      	beq.n	8003910 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f834 	bl	8003978 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	f003 0320 	and.w	r3, r3, #32
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00c      	beq.n	8003934 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f003 0320 	and.w	r3, r3, #32
 8003920:	2b00      	cmp	r3, #0
 8003922:	d007      	beq.n	8003934 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f06f 0220 	mvn.w	r2, #32
 800392c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f8b8 	bl	8003aa4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003934:	bf00      	nop
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a3a      	ldr	r2, [pc, #232]	@ (8003a88 <TIM_Base_SetConfig+0xfc>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d00f      	beq.n	80039c4 <TIM_Base_SetConfig+0x38>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039aa:	d00b      	beq.n	80039c4 <TIM_Base_SetConfig+0x38>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a37      	ldr	r2, [pc, #220]	@ (8003a8c <TIM_Base_SetConfig+0x100>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d007      	beq.n	80039c4 <TIM_Base_SetConfig+0x38>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a36      	ldr	r2, [pc, #216]	@ (8003a90 <TIM_Base_SetConfig+0x104>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d003      	beq.n	80039c4 <TIM_Base_SetConfig+0x38>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a35      	ldr	r2, [pc, #212]	@ (8003a94 <TIM_Base_SetConfig+0x108>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d108      	bne.n	80039d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a2b      	ldr	r2, [pc, #172]	@ (8003a88 <TIM_Base_SetConfig+0xfc>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d01b      	beq.n	8003a16 <TIM_Base_SetConfig+0x8a>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039e4:	d017      	beq.n	8003a16 <TIM_Base_SetConfig+0x8a>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a28      	ldr	r2, [pc, #160]	@ (8003a8c <TIM_Base_SetConfig+0x100>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d013      	beq.n	8003a16 <TIM_Base_SetConfig+0x8a>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a27      	ldr	r2, [pc, #156]	@ (8003a90 <TIM_Base_SetConfig+0x104>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d00f      	beq.n	8003a16 <TIM_Base_SetConfig+0x8a>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a26      	ldr	r2, [pc, #152]	@ (8003a94 <TIM_Base_SetConfig+0x108>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d00b      	beq.n	8003a16 <TIM_Base_SetConfig+0x8a>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a25      	ldr	r2, [pc, #148]	@ (8003a98 <TIM_Base_SetConfig+0x10c>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d007      	beq.n	8003a16 <TIM_Base_SetConfig+0x8a>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a24      	ldr	r2, [pc, #144]	@ (8003a9c <TIM_Base_SetConfig+0x110>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d003      	beq.n	8003a16 <TIM_Base_SetConfig+0x8a>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a23      	ldr	r2, [pc, #140]	@ (8003aa0 <TIM_Base_SetConfig+0x114>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d108      	bne.n	8003a28 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	689a      	ldr	r2, [r3, #8]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a0e      	ldr	r2, [pc, #56]	@ (8003a88 <TIM_Base_SetConfig+0xfc>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d103      	bne.n	8003a5c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	691a      	ldr	r2, [r3, #16]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d105      	bne.n	8003a7a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	f023 0201 	bic.w	r2, r3, #1
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	611a      	str	r2, [r3, #16]
  }
}
 8003a7a:	bf00      	nop
 8003a7c:	3714      	adds	r7, #20
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	40010000 	.word	0x40010000
 8003a8c:	40000400 	.word	0x40000400
 8003a90:	40000800 	.word	0x40000800
 8003a94:	40000c00 	.word	0x40000c00
 8003a98:	40014000 	.word	0x40014000
 8003a9c:	40014400 	.word	0x40014400
 8003aa0:	40014800 	.word	0x40014800

08003aa4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e042      	b.n	8003b64 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d106      	bne.n	8003af8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7fd fbde 	bl	80012b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2224      	movs	r2, #36	@ 0x24
 8003afc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f973 	bl	8003dfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	695a      	ldr	r2, [r3, #20]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68da      	ldr	r2, [r3, #12]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2220      	movs	r2, #32
 8003b58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3708      	adds	r7, #8
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b08a      	sub	sp, #40	@ 0x28
 8003b70:	af02      	add	r7, sp, #8
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	603b      	str	r3, [r7, #0]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b20      	cmp	r3, #32
 8003b8a:	d175      	bne.n	8003c78 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d002      	beq.n	8003b98 <HAL_UART_Transmit+0x2c>
 8003b92:	88fb      	ldrh	r3, [r7, #6]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e06e      	b.n	8003c7a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2221      	movs	r2, #33	@ 0x21
 8003ba6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003baa:	f7fd fda9 	bl	8001700 <HAL_GetTick>
 8003bae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	88fa      	ldrh	r2, [r7, #6]
 8003bb4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	88fa      	ldrh	r2, [r7, #6]
 8003bba:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bc4:	d108      	bne.n	8003bd8 <HAL_UART_Transmit+0x6c>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d104      	bne.n	8003bd8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	61bb      	str	r3, [r7, #24]
 8003bd6:	e003      	b.n	8003be0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003be0:	e02e      	b.n	8003c40 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	9300      	str	r3, [sp, #0]
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	2200      	movs	r2, #0
 8003bea:	2180      	movs	r1, #128	@ 0x80
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f000 f848 	bl	8003c82 <UART_WaitOnFlagUntilTimeout>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d005      	beq.n	8003c04 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e03a      	b.n	8003c7a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10b      	bne.n	8003c22 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	881b      	ldrh	r3, [r3, #0]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c18:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	3302      	adds	r3, #2
 8003c1e:	61bb      	str	r3, [r7, #24]
 8003c20:	e007      	b.n	8003c32 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	781a      	ldrb	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1cb      	bne.n	8003be2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	9300      	str	r3, [sp, #0]
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2200      	movs	r2, #0
 8003c52:	2140      	movs	r1, #64	@ 0x40
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f000 f814 	bl	8003c82 <UART_WaitOnFlagUntilTimeout>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d005      	beq.n	8003c6c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2220      	movs	r2, #32
 8003c64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e006      	b.n	8003c7a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003c74:	2300      	movs	r3, #0
 8003c76:	e000      	b.n	8003c7a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003c78:	2302      	movs	r3, #2
  }
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3720      	adds	r7, #32
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b086      	sub	sp, #24
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	60f8      	str	r0, [r7, #12]
 8003c8a:	60b9      	str	r1, [r7, #8]
 8003c8c:	603b      	str	r3, [r7, #0]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c92:	e03b      	b.n	8003d0c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c94:	6a3b      	ldr	r3, [r7, #32]
 8003c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c9a:	d037      	beq.n	8003d0c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c9c:	f7fd fd30 	bl	8001700 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	6a3a      	ldr	r2, [r7, #32]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d302      	bcc.n	8003cb2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003cac:	6a3b      	ldr	r3, [r7, #32]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e03a      	b.n	8003d2c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	f003 0304 	and.w	r3, r3, #4
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d023      	beq.n	8003d0c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	2b80      	cmp	r3, #128	@ 0x80
 8003cc8:	d020      	beq.n	8003d0c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	2b40      	cmp	r3, #64	@ 0x40
 8003cce:	d01d      	beq.n	8003d0c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0308 	and.w	r3, r3, #8
 8003cda:	2b08      	cmp	r3, #8
 8003cdc:	d116      	bne.n	8003d0c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003cde:	2300      	movs	r3, #0
 8003ce0:	617b      	str	r3, [r7, #20]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	617b      	str	r3, [r7, #20]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	617b      	str	r3, [r7, #20]
 8003cf2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f000 f81d 	bl	8003d34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2208      	movs	r2, #8
 8003cfe:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e00f      	b.n	8003d2c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	4013      	ands	r3, r2
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	bf0c      	ite	eq
 8003d1c:	2301      	moveq	r3, #1
 8003d1e:	2300      	movne	r3, #0
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	461a      	mov	r2, r3
 8003d24:	79fb      	ldrb	r3, [r7, #7]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d0b4      	beq.n	8003c94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3718      	adds	r7, #24
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b095      	sub	sp, #84	@ 0x54
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	330c      	adds	r3, #12
 8003d42:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d46:	e853 3f00 	ldrex	r3, [r3]
 8003d4a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	330c      	adds	r3, #12
 8003d5a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d5c:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d60:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d64:	e841 2300 	strex	r3, r2, [r1]
 8003d68:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1e5      	bne.n	8003d3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	3314      	adds	r3, #20
 8003d76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d78:	6a3b      	ldr	r3, [r7, #32]
 8003d7a:	e853 3f00 	ldrex	r3, [r3]
 8003d7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	f023 0301 	bic.w	r3, r3, #1
 8003d86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	3314      	adds	r3, #20
 8003d8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d90:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d92:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d98:	e841 2300 	strex	r3, r2, [r1]
 8003d9c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1e5      	bne.n	8003d70 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d119      	bne.n	8003de0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	330c      	adds	r3, #12
 8003db2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	e853 3f00 	ldrex	r3, [r3]
 8003dba:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	f023 0310 	bic.w	r3, r3, #16
 8003dc2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	330c      	adds	r3, #12
 8003dca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003dcc:	61ba      	str	r2, [r7, #24]
 8003dce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd0:	6979      	ldr	r1, [r7, #20]
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	e841 2300 	strex	r3, r2, [r1]
 8003dd8:	613b      	str	r3, [r7, #16]
   return(result);
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1e5      	bne.n	8003dac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2220      	movs	r2, #32
 8003de4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003dee:	bf00      	nop
 8003df0:	3754      	adds	r7, #84	@ 0x54
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
	...

08003dfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e00:	b0c0      	sub	sp, #256	@ 0x100
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e18:	68d9      	ldr	r1, [r3, #12]
 8003e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	ea40 0301 	orr.w	r3, r0, r1
 8003e24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	431a      	orrs	r2, r3
 8003e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003e54:	f021 010c 	bic.w	r1, r1, #12
 8003e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003e62:	430b      	orrs	r3, r1
 8003e64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e76:	6999      	ldr	r1, [r3, #24]
 8003e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	ea40 0301 	orr.w	r3, r0, r1
 8003e82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	4b8f      	ldr	r3, [pc, #572]	@ (80040c8 <UART_SetConfig+0x2cc>)
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d005      	beq.n	8003e9c <UART_SetConfig+0xa0>
 8003e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	4b8d      	ldr	r3, [pc, #564]	@ (80040cc <UART_SetConfig+0x2d0>)
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d104      	bne.n	8003ea6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e9c:	f7fe fb94 	bl	80025c8 <HAL_RCC_GetPCLK2Freq>
 8003ea0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003ea4:	e003      	b.n	8003eae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ea6:	f7fe fb7b 	bl	80025a0 <HAL_RCC_GetPCLK1Freq>
 8003eaa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb2:	69db      	ldr	r3, [r3, #28]
 8003eb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003eb8:	f040 810c 	bne.w	80040d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ebc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003ec6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003eca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003ece:	4622      	mov	r2, r4
 8003ed0:	462b      	mov	r3, r5
 8003ed2:	1891      	adds	r1, r2, r2
 8003ed4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003ed6:	415b      	adcs	r3, r3
 8003ed8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003eda:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003ede:	4621      	mov	r1, r4
 8003ee0:	eb12 0801 	adds.w	r8, r2, r1
 8003ee4:	4629      	mov	r1, r5
 8003ee6:	eb43 0901 	adc.w	r9, r3, r1
 8003eea:	f04f 0200 	mov.w	r2, #0
 8003eee:	f04f 0300 	mov.w	r3, #0
 8003ef2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ef6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003efa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003efe:	4690      	mov	r8, r2
 8003f00:	4699      	mov	r9, r3
 8003f02:	4623      	mov	r3, r4
 8003f04:	eb18 0303 	adds.w	r3, r8, r3
 8003f08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003f0c:	462b      	mov	r3, r5
 8003f0e:	eb49 0303 	adc.w	r3, r9, r3
 8003f12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003f22:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003f26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	18db      	adds	r3, r3, r3
 8003f2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f30:	4613      	mov	r3, r2
 8003f32:	eb42 0303 	adc.w	r3, r2, r3
 8003f36:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003f3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003f40:	f7fc f9a6 	bl	8000290 <__aeabi_uldivmod>
 8003f44:	4602      	mov	r2, r0
 8003f46:	460b      	mov	r3, r1
 8003f48:	4b61      	ldr	r3, [pc, #388]	@ (80040d0 <UART_SetConfig+0x2d4>)
 8003f4a:	fba3 2302 	umull	r2, r3, r3, r2
 8003f4e:	095b      	lsrs	r3, r3, #5
 8003f50:	011c      	lsls	r4, r3, #4
 8003f52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f56:	2200      	movs	r2, #0
 8003f58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f5c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003f60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003f64:	4642      	mov	r2, r8
 8003f66:	464b      	mov	r3, r9
 8003f68:	1891      	adds	r1, r2, r2
 8003f6a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003f6c:	415b      	adcs	r3, r3
 8003f6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003f74:	4641      	mov	r1, r8
 8003f76:	eb12 0a01 	adds.w	sl, r2, r1
 8003f7a:	4649      	mov	r1, r9
 8003f7c:	eb43 0b01 	adc.w	fp, r3, r1
 8003f80:	f04f 0200 	mov.w	r2, #0
 8003f84:	f04f 0300 	mov.w	r3, #0
 8003f88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f94:	4692      	mov	sl, r2
 8003f96:	469b      	mov	fp, r3
 8003f98:	4643      	mov	r3, r8
 8003f9a:	eb1a 0303 	adds.w	r3, sl, r3
 8003f9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003fa2:	464b      	mov	r3, r9
 8003fa4:	eb4b 0303 	adc.w	r3, fp, r3
 8003fa8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003fb8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003fbc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	18db      	adds	r3, r3, r3
 8003fc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	eb42 0303 	adc.w	r3, r2, r3
 8003fcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003fd2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003fd6:	f7fc f95b 	bl	8000290 <__aeabi_uldivmod>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	460b      	mov	r3, r1
 8003fde:	4611      	mov	r1, r2
 8003fe0:	4b3b      	ldr	r3, [pc, #236]	@ (80040d0 <UART_SetConfig+0x2d4>)
 8003fe2:	fba3 2301 	umull	r2, r3, r3, r1
 8003fe6:	095b      	lsrs	r3, r3, #5
 8003fe8:	2264      	movs	r2, #100	@ 0x64
 8003fea:	fb02 f303 	mul.w	r3, r2, r3
 8003fee:	1acb      	subs	r3, r1, r3
 8003ff0:	00db      	lsls	r3, r3, #3
 8003ff2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003ff6:	4b36      	ldr	r3, [pc, #216]	@ (80040d0 <UART_SetConfig+0x2d4>)
 8003ff8:	fba3 2302 	umull	r2, r3, r3, r2
 8003ffc:	095b      	lsrs	r3, r3, #5
 8003ffe:	005b      	lsls	r3, r3, #1
 8004000:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004004:	441c      	add	r4, r3
 8004006:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800400a:	2200      	movs	r2, #0
 800400c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004010:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004014:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004018:	4642      	mov	r2, r8
 800401a:	464b      	mov	r3, r9
 800401c:	1891      	adds	r1, r2, r2
 800401e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004020:	415b      	adcs	r3, r3
 8004022:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004024:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004028:	4641      	mov	r1, r8
 800402a:	1851      	adds	r1, r2, r1
 800402c:	6339      	str	r1, [r7, #48]	@ 0x30
 800402e:	4649      	mov	r1, r9
 8004030:	414b      	adcs	r3, r1
 8004032:	637b      	str	r3, [r7, #52]	@ 0x34
 8004034:	f04f 0200 	mov.w	r2, #0
 8004038:	f04f 0300 	mov.w	r3, #0
 800403c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004040:	4659      	mov	r1, fp
 8004042:	00cb      	lsls	r3, r1, #3
 8004044:	4651      	mov	r1, sl
 8004046:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800404a:	4651      	mov	r1, sl
 800404c:	00ca      	lsls	r2, r1, #3
 800404e:	4610      	mov	r0, r2
 8004050:	4619      	mov	r1, r3
 8004052:	4603      	mov	r3, r0
 8004054:	4642      	mov	r2, r8
 8004056:	189b      	adds	r3, r3, r2
 8004058:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800405c:	464b      	mov	r3, r9
 800405e:	460a      	mov	r2, r1
 8004060:	eb42 0303 	adc.w	r3, r2, r3
 8004064:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004074:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004078:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800407c:	460b      	mov	r3, r1
 800407e:	18db      	adds	r3, r3, r3
 8004080:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004082:	4613      	mov	r3, r2
 8004084:	eb42 0303 	adc.w	r3, r2, r3
 8004088:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800408a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800408e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004092:	f7fc f8fd 	bl	8000290 <__aeabi_uldivmod>
 8004096:	4602      	mov	r2, r0
 8004098:	460b      	mov	r3, r1
 800409a:	4b0d      	ldr	r3, [pc, #52]	@ (80040d0 <UART_SetConfig+0x2d4>)
 800409c:	fba3 1302 	umull	r1, r3, r3, r2
 80040a0:	095b      	lsrs	r3, r3, #5
 80040a2:	2164      	movs	r1, #100	@ 0x64
 80040a4:	fb01 f303 	mul.w	r3, r1, r3
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	3332      	adds	r3, #50	@ 0x32
 80040ae:	4a08      	ldr	r2, [pc, #32]	@ (80040d0 <UART_SetConfig+0x2d4>)
 80040b0:	fba2 2303 	umull	r2, r3, r2, r3
 80040b4:	095b      	lsrs	r3, r3, #5
 80040b6:	f003 0207 	and.w	r2, r3, #7
 80040ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4422      	add	r2, r4
 80040c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80040c4:	e106      	b.n	80042d4 <UART_SetConfig+0x4d8>
 80040c6:	bf00      	nop
 80040c8:	40011000 	.word	0x40011000
 80040cc:	40011400 	.word	0x40011400
 80040d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040d8:	2200      	movs	r2, #0
 80040da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80040de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80040e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80040e6:	4642      	mov	r2, r8
 80040e8:	464b      	mov	r3, r9
 80040ea:	1891      	adds	r1, r2, r2
 80040ec:	6239      	str	r1, [r7, #32]
 80040ee:	415b      	adcs	r3, r3
 80040f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80040f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040f6:	4641      	mov	r1, r8
 80040f8:	1854      	adds	r4, r2, r1
 80040fa:	4649      	mov	r1, r9
 80040fc:	eb43 0501 	adc.w	r5, r3, r1
 8004100:	f04f 0200 	mov.w	r2, #0
 8004104:	f04f 0300 	mov.w	r3, #0
 8004108:	00eb      	lsls	r3, r5, #3
 800410a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800410e:	00e2      	lsls	r2, r4, #3
 8004110:	4614      	mov	r4, r2
 8004112:	461d      	mov	r5, r3
 8004114:	4643      	mov	r3, r8
 8004116:	18e3      	adds	r3, r4, r3
 8004118:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800411c:	464b      	mov	r3, r9
 800411e:	eb45 0303 	adc.w	r3, r5, r3
 8004122:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004132:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004136:	f04f 0200 	mov.w	r2, #0
 800413a:	f04f 0300 	mov.w	r3, #0
 800413e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004142:	4629      	mov	r1, r5
 8004144:	008b      	lsls	r3, r1, #2
 8004146:	4621      	mov	r1, r4
 8004148:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800414c:	4621      	mov	r1, r4
 800414e:	008a      	lsls	r2, r1, #2
 8004150:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004154:	f7fc f89c 	bl	8000290 <__aeabi_uldivmod>
 8004158:	4602      	mov	r2, r0
 800415a:	460b      	mov	r3, r1
 800415c:	4b60      	ldr	r3, [pc, #384]	@ (80042e0 <UART_SetConfig+0x4e4>)
 800415e:	fba3 2302 	umull	r2, r3, r3, r2
 8004162:	095b      	lsrs	r3, r3, #5
 8004164:	011c      	lsls	r4, r3, #4
 8004166:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800416a:	2200      	movs	r2, #0
 800416c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004170:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004174:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004178:	4642      	mov	r2, r8
 800417a:	464b      	mov	r3, r9
 800417c:	1891      	adds	r1, r2, r2
 800417e:	61b9      	str	r1, [r7, #24]
 8004180:	415b      	adcs	r3, r3
 8004182:	61fb      	str	r3, [r7, #28]
 8004184:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004188:	4641      	mov	r1, r8
 800418a:	1851      	adds	r1, r2, r1
 800418c:	6139      	str	r1, [r7, #16]
 800418e:	4649      	mov	r1, r9
 8004190:	414b      	adcs	r3, r1
 8004192:	617b      	str	r3, [r7, #20]
 8004194:	f04f 0200 	mov.w	r2, #0
 8004198:	f04f 0300 	mov.w	r3, #0
 800419c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041a0:	4659      	mov	r1, fp
 80041a2:	00cb      	lsls	r3, r1, #3
 80041a4:	4651      	mov	r1, sl
 80041a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041aa:	4651      	mov	r1, sl
 80041ac:	00ca      	lsls	r2, r1, #3
 80041ae:	4610      	mov	r0, r2
 80041b0:	4619      	mov	r1, r3
 80041b2:	4603      	mov	r3, r0
 80041b4:	4642      	mov	r2, r8
 80041b6:	189b      	adds	r3, r3, r2
 80041b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80041bc:	464b      	mov	r3, r9
 80041be:	460a      	mov	r2, r1
 80041c0:	eb42 0303 	adc.w	r3, r2, r3
 80041c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80041c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80041d4:	f04f 0200 	mov.w	r2, #0
 80041d8:	f04f 0300 	mov.w	r3, #0
 80041dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80041e0:	4649      	mov	r1, r9
 80041e2:	008b      	lsls	r3, r1, #2
 80041e4:	4641      	mov	r1, r8
 80041e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041ea:	4641      	mov	r1, r8
 80041ec:	008a      	lsls	r2, r1, #2
 80041ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80041f2:	f7fc f84d 	bl	8000290 <__aeabi_uldivmod>
 80041f6:	4602      	mov	r2, r0
 80041f8:	460b      	mov	r3, r1
 80041fa:	4611      	mov	r1, r2
 80041fc:	4b38      	ldr	r3, [pc, #224]	@ (80042e0 <UART_SetConfig+0x4e4>)
 80041fe:	fba3 2301 	umull	r2, r3, r3, r1
 8004202:	095b      	lsrs	r3, r3, #5
 8004204:	2264      	movs	r2, #100	@ 0x64
 8004206:	fb02 f303 	mul.w	r3, r2, r3
 800420a:	1acb      	subs	r3, r1, r3
 800420c:	011b      	lsls	r3, r3, #4
 800420e:	3332      	adds	r3, #50	@ 0x32
 8004210:	4a33      	ldr	r2, [pc, #204]	@ (80042e0 <UART_SetConfig+0x4e4>)
 8004212:	fba2 2303 	umull	r2, r3, r2, r3
 8004216:	095b      	lsrs	r3, r3, #5
 8004218:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800421c:	441c      	add	r4, r3
 800421e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004222:	2200      	movs	r2, #0
 8004224:	673b      	str	r3, [r7, #112]	@ 0x70
 8004226:	677a      	str	r2, [r7, #116]	@ 0x74
 8004228:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800422c:	4642      	mov	r2, r8
 800422e:	464b      	mov	r3, r9
 8004230:	1891      	adds	r1, r2, r2
 8004232:	60b9      	str	r1, [r7, #8]
 8004234:	415b      	adcs	r3, r3
 8004236:	60fb      	str	r3, [r7, #12]
 8004238:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800423c:	4641      	mov	r1, r8
 800423e:	1851      	adds	r1, r2, r1
 8004240:	6039      	str	r1, [r7, #0]
 8004242:	4649      	mov	r1, r9
 8004244:	414b      	adcs	r3, r1
 8004246:	607b      	str	r3, [r7, #4]
 8004248:	f04f 0200 	mov.w	r2, #0
 800424c:	f04f 0300 	mov.w	r3, #0
 8004250:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004254:	4659      	mov	r1, fp
 8004256:	00cb      	lsls	r3, r1, #3
 8004258:	4651      	mov	r1, sl
 800425a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800425e:	4651      	mov	r1, sl
 8004260:	00ca      	lsls	r2, r1, #3
 8004262:	4610      	mov	r0, r2
 8004264:	4619      	mov	r1, r3
 8004266:	4603      	mov	r3, r0
 8004268:	4642      	mov	r2, r8
 800426a:	189b      	adds	r3, r3, r2
 800426c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800426e:	464b      	mov	r3, r9
 8004270:	460a      	mov	r2, r1
 8004272:	eb42 0303 	adc.w	r3, r2, r3
 8004276:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	663b      	str	r3, [r7, #96]	@ 0x60
 8004282:	667a      	str	r2, [r7, #100]	@ 0x64
 8004284:	f04f 0200 	mov.w	r2, #0
 8004288:	f04f 0300 	mov.w	r3, #0
 800428c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004290:	4649      	mov	r1, r9
 8004292:	008b      	lsls	r3, r1, #2
 8004294:	4641      	mov	r1, r8
 8004296:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800429a:	4641      	mov	r1, r8
 800429c:	008a      	lsls	r2, r1, #2
 800429e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80042a2:	f7fb fff5 	bl	8000290 <__aeabi_uldivmod>
 80042a6:	4602      	mov	r2, r0
 80042a8:	460b      	mov	r3, r1
 80042aa:	4b0d      	ldr	r3, [pc, #52]	@ (80042e0 <UART_SetConfig+0x4e4>)
 80042ac:	fba3 1302 	umull	r1, r3, r3, r2
 80042b0:	095b      	lsrs	r3, r3, #5
 80042b2:	2164      	movs	r1, #100	@ 0x64
 80042b4:	fb01 f303 	mul.w	r3, r1, r3
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	011b      	lsls	r3, r3, #4
 80042bc:	3332      	adds	r3, #50	@ 0x32
 80042be:	4a08      	ldr	r2, [pc, #32]	@ (80042e0 <UART_SetConfig+0x4e4>)
 80042c0:	fba2 2303 	umull	r2, r3, r2, r3
 80042c4:	095b      	lsrs	r3, r3, #5
 80042c6:	f003 020f 	and.w	r2, r3, #15
 80042ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4422      	add	r2, r4
 80042d2:	609a      	str	r2, [r3, #8]
}
 80042d4:	bf00      	nop
 80042d6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80042da:	46bd      	mov	sp, r7
 80042dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042e0:	51eb851f 	.word	0x51eb851f

080042e4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	4603      	mov	r3, r0
 80042ec:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80042ee:	2300      	movs	r3, #0
 80042f0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80042f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042f6:	2b84      	cmp	r3, #132	@ 0x84
 80042f8:	d005      	beq.n	8004306 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80042fa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	4413      	add	r3, r2
 8004302:	3303      	adds	r3, #3
 8004304:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004306:	68fb      	ldr	r3, [r7, #12]
}
 8004308:	4618      	mov	r0, r3
 800430a:	3714      	adds	r7, #20
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800431a:	f3ef 8305 	mrs	r3, IPSR
 800431e:	607b      	str	r3, [r7, #4]
  return(result);
 8004320:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004322:	2b00      	cmp	r3, #0
 8004324:	bf14      	ite	ne
 8004326:	2301      	movne	r3, #1
 8004328:	2300      	moveq	r3, #0
 800432a:	b2db      	uxtb	r3, r3
}
 800432c:	4618      	mov	r0, r3
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800433c:	f001 fd90 	bl	8005e60 <vTaskStartScheduler>
  
  return osOK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	bd80      	pop	{r7, pc}

08004346 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004346:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004348:	b089      	sub	sp, #36	@ 0x24
 800434a:	af04      	add	r7, sp, #16
 800434c:	6078      	str	r0, [r7, #4]
 800434e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d020      	beq.n	800439a <osThreadCreate+0x54>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d01c      	beq.n	800439a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685c      	ldr	r4, [r3, #4]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	691e      	ldr	r6, [r3, #16]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004372:	4618      	mov	r0, r3
 8004374:	f7ff ffb6 	bl	80042e4 <makeFreeRtosPriority>
 8004378:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004382:	9202      	str	r2, [sp, #8]
 8004384:	9301      	str	r3, [sp, #4]
 8004386:	9100      	str	r1, [sp, #0]
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	4632      	mov	r2, r6
 800438c:	4629      	mov	r1, r5
 800438e:	4620      	mov	r0, r4
 8004390:	f001 fb78 	bl	8005a84 <xTaskCreateStatic>
 8004394:	4603      	mov	r3, r0
 8004396:	60fb      	str	r3, [r7, #12]
 8004398:	e01c      	b.n	80043d4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685c      	ldr	r4, [r3, #4]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80043a6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7ff ff98 	bl	80042e4 <makeFreeRtosPriority>
 80043b4:	4602      	mov	r2, r0
 80043b6:	f107 030c 	add.w	r3, r7, #12
 80043ba:	9301      	str	r3, [sp, #4]
 80043bc:	9200      	str	r2, [sp, #0]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	4632      	mov	r2, r6
 80043c2:	4629      	mov	r1, r5
 80043c4:	4620      	mov	r0, r4
 80043c6:	f001 fbbd 	bl	8005b44 <xTaskCreate>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d001      	beq.n	80043d4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80043d0:	2300      	movs	r3, #0
 80043d2:	e000      	b.n	80043d6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80043d4:	68fb      	ldr	r3, [r7, #12]
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3714      	adds	r7, #20
 80043da:	46bd      	mov	sp, r7
 80043dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080043e0 <osThreadYield>:
* @brief  Pass control to next thread that is in state \b READY.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadYield shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadYield (void)
{
 80043e0:	b480      	push	{r7}
 80043e2:	af00      	add	r7, sp, #0
  taskYIELD();
 80043e4:	4b06      	ldr	r3, [pc, #24]	@ (8004400 <osThreadYield+0x20>)
 80043e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043ea:	601a      	str	r2, [r3, #0]
 80043ec:	f3bf 8f4f 	dsb	sy
 80043f0:	f3bf 8f6f 	isb	sy
  
  return osOK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr
 8004400:	e000ed04 	.word	0xe000ed04

08004404 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <osDelay+0x16>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	e000      	b.n	800441c <osDelay+0x18>
 800441a:	2301      	movs	r3, #1
 800441c:	4618      	mov	r0, r3
 800441e:	f001 fce9 	bl	8005df4 <vTaskDelay>
  
  return osOK;
 8004422:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004424:	4618      	mov	r0, r3
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d007      	beq.n	800444c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	4619      	mov	r1, r3
 8004442:	2001      	movs	r0, #1
 8004444:	f000 fc95 	bl	8004d72 <xQueueCreateMutexStatic>
 8004448:	4603      	mov	r3, r0
 800444a:	e003      	b.n	8004454 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800444c:	2001      	movs	r0, #1
 800444e:	f000 fc78 	bl	8004d42 <xQueueCreateMutex>
 8004452:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8004454:	4618      	mov	r0, r3
 8004456:	3708      	adds	r7, #8
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004466:	2300      	movs	r3, #0
 8004468:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d101      	bne.n	8004474 <osMutexWait+0x18>
    return osErrorParameter;
 8004470:	2380      	movs	r3, #128	@ 0x80
 8004472:	e03a      	b.n	80044ea <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8004474:	2300      	movs	r3, #0
 8004476:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447e:	d103      	bne.n	8004488 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8004480:	f04f 33ff 	mov.w	r3, #4294967295
 8004484:	60fb      	str	r3, [r7, #12]
 8004486:	e009      	b.n	800449c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d006      	beq.n	800449c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <osMutexWait+0x40>
      ticks = 1;
 8004498:	2301      	movs	r3, #1
 800449a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800449c:	f7ff ff3a 	bl	8004314 <inHandlerMode>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d017      	beq.n	80044d6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80044a6:	f107 0308 	add.w	r3, r7, #8
 80044aa:	461a      	mov	r2, r3
 80044ac:	2100      	movs	r1, #0
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f001 f89c 	bl	80055ec <xQueueReceiveFromISR>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d001      	beq.n	80044be <osMutexWait+0x62>
      return osErrorOS;
 80044ba:	23ff      	movs	r3, #255	@ 0xff
 80044bc:	e015      	b.n	80044ea <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d011      	beq.n	80044e8 <osMutexWait+0x8c>
 80044c4:	4b0b      	ldr	r3, [pc, #44]	@ (80044f4 <osMutexWait+0x98>)
 80044c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044ca:	601a      	str	r2, [r3, #0]
 80044cc:	f3bf 8f4f 	dsb	sy
 80044d0:	f3bf 8f6f 	isb	sy
 80044d4:	e008      	b.n	80044e8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80044d6:	68f9      	ldr	r1, [r7, #12]
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 ff77 	bl	80053cc <xQueueSemaphoreTake>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d001      	beq.n	80044e8 <osMutexWait+0x8c>
    return osErrorOS;
 80044e4:	23ff      	movs	r3, #255	@ 0xff
 80044e6:	e000      	b.n	80044ea <osMutexWait+0x8e>
  }
  
  return osOK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	e000ed04 	.word	0xe000ed04

080044f8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004500:	2300      	movs	r3, #0
 8004502:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004504:	2300      	movs	r3, #0
 8004506:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004508:	f7ff ff04 	bl	8004314 <inHandlerMode>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d016      	beq.n	8004540 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004512:	f107 0308 	add.w	r3, r7, #8
 8004516:	4619      	mov	r1, r3
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 fde5 	bl	80050e8 <xQueueGiveFromISR>
 800451e:	4603      	mov	r3, r0
 8004520:	2b01      	cmp	r3, #1
 8004522:	d001      	beq.n	8004528 <osMutexRelease+0x30>
      return osErrorOS;
 8004524:	23ff      	movs	r3, #255	@ 0xff
 8004526:	e017      	b.n	8004558 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d013      	beq.n	8004556 <osMutexRelease+0x5e>
 800452e:	4b0c      	ldr	r3, [pc, #48]	@ (8004560 <osMutexRelease+0x68>)
 8004530:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004534:	601a      	str	r2, [r3, #0]
 8004536:	f3bf 8f4f 	dsb	sy
 800453a:	f3bf 8f6f 	isb	sy
 800453e:	e00a      	b.n	8004556 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004540:	2300      	movs	r3, #0
 8004542:	2200      	movs	r2, #0
 8004544:	2100      	movs	r1, #0
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 fc2e 	bl	8004da8 <xQueueGenericSend>
 800454c:	4603      	mov	r3, r0
 800454e:	2b01      	cmp	r3, #1
 8004550:	d001      	beq.n	8004556 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8004552:	23ff      	movs	r3, #255	@ 0xff
 8004554:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8004556:	68fb      	ldr	r3, [r7, #12]
}
 8004558:	4618      	mov	r0, r3
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	e000ed04 	.word	0xe000ed04

08004564 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800456a:	201c      	movs	r0, #28
 800456c:	f003 f9e6 	bl	800793c <pvPortMalloc>
 8004570:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00a      	beq.n	800458e <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	3304      	adds	r3, #4
 8004582:	4618      	mov	r0, r3
 8004584:	f000 f9ce 	bl	8004924 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800458e:	687b      	ldr	r3, [r7, #4]
	}
 8004590:	4618      	mov	r0, r3
 8004592:	3708      	adds	r7, #8
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b090      	sub	sp, #64	@ 0x40
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
 80045a4:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80045aa:	2300      	movs	r3, #0
 80045ac:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80045ae:	2300      	movs	r3, #0
 80045b0:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10b      	bne.n	80045d0 <xEventGroupWaitBits+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80045b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045bc:	f383 8811 	msr	BASEPRI, r3
 80045c0:	f3bf 8f6f 	isb	sy
 80045c4:	f3bf 8f4f 	dsb	sy
 80045c8:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80045ca:	bf00      	nop
 80045cc:	bf00      	nop
 80045ce:	e7fd      	b.n	80045cc <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045d6:	d30b      	bcc.n	80045f0 <xEventGroupWaitBits+0x58>
	__asm volatile
 80045d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	61fb      	str	r3, [r7, #28]
}
 80045ea:	bf00      	nop
 80045ec:	bf00      	nop
 80045ee:	e7fd      	b.n	80045ec <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d10b      	bne.n	800460e <xEventGroupWaitBits+0x76>
	__asm volatile
 80045f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045fa:	f383 8811 	msr	BASEPRI, r3
 80045fe:	f3bf 8f6f 	isb	sy
 8004602:	f3bf 8f4f 	dsb	sy
 8004606:	61bb      	str	r3, [r7, #24]
}
 8004608:	bf00      	nop
 800460a:	bf00      	nop
 800460c:	e7fd      	b.n	800460a <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800460e:	f002 f987 	bl	8006920 <xTaskGetSchedulerState>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d102      	bne.n	800461e <xEventGroupWaitBits+0x86>
 8004618:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <xEventGroupWaitBits+0x8a>
 800461e:	2301      	movs	r3, #1
 8004620:	e000      	b.n	8004624 <xEventGroupWaitBits+0x8c>
 8004622:	2300      	movs	r3, #0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10b      	bne.n	8004640 <xEventGroupWaitBits+0xa8>
	__asm volatile
 8004628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800462c:	f383 8811 	msr	BASEPRI, r3
 8004630:	f3bf 8f6f 	isb	sy
 8004634:	f3bf 8f4f 	dsb	sy
 8004638:	617b      	str	r3, [r7, #20]
}
 800463a:	bf00      	nop
 800463c:	bf00      	nop
 800463e:	e7fd      	b.n	800463c <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 8004640:	f001 fc7e 	bl	8005f40 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8004644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	68b9      	ldr	r1, [r7, #8]
 800464e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004650:	f000 f946 	bl	80048e0 <prvTestWaitCondition>
 8004654:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 8004656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00e      	beq.n	800467a <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800465c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800465e:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8004660:	2300      	movs	r3, #0
 8004662:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d028      	beq.n	80046bc <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800466a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	43db      	mvns	r3, r3
 8004672:	401a      	ands	r2, r3
 8004674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	e020      	b.n	80046bc <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800467a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800467c:	2b00      	cmp	r3, #0
 800467e:	d104      	bne.n	800468a <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8004680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004682:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 8004684:	2301      	movs	r3, #1
 8004686:	633b      	str	r3, [r7, #48]	@ 0x30
 8004688:	e018      	b.n	80046bc <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d003      	beq.n	8004698 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8004690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004692:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004696:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d003      	beq.n	80046a6 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800469e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046a0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80046a4:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80046a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046a8:	1d18      	adds	r0, r3, #4
 80046aa:	68ba      	ldr	r2, [r7, #8]
 80046ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ae:	4313      	orrs	r3, r2
 80046b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046b2:	4619      	mov	r1, r3
 80046b4:	f001 fe68 	bl	8006388 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80046b8:	2300      	movs	r3, #0
 80046ba:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80046bc:	f001 fc4e 	bl	8005f5c <xTaskResumeAll>
 80046c0:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80046c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d031      	beq.n	800472c <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 80046c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d107      	bne.n	80046de <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 80046ce:	4b1a      	ldr	r3, [pc, #104]	@ (8004738 <xEventGroupWaitBits+0x1a0>)
 80046d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046d4:	601a      	str	r2, [r3, #0]
 80046d6:	f3bf 8f4f 	dsb	sy
 80046da:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80046de:	f002 facb 	bl	8006c78 <uxTaskResetEventItemValue>
 80046e2:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80046e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d11a      	bne.n	8004724 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 80046ee:	f003 f803 	bl	80076f8 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80046f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80046f8:	683a      	ldr	r2, [r7, #0]
 80046fa:	68b9      	ldr	r1, [r7, #8]
 80046fc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80046fe:	f000 f8ef 	bl	80048e0 <prvTestWaitCondition>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d009      	beq.n	800471c <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d006      	beq.n	800471c <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800470e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	43db      	mvns	r3, r3
 8004716:	401a      	ands	r2, r3
 8004718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800471a:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800471c:	2301      	movs	r3, #1
 800471e:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 8004720:	f003 f81c 	bl	800775c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004724:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004726:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800472a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800472c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800472e:	4618      	mov	r0, r3
 8004730:	3740      	adds	r7, #64	@ 0x40
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	e000ed04 	.word	0xe000ed04

0800473c <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10b      	bne.n	8004768 <xEventGroupClearBits+0x2c>
	__asm volatile
 8004750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004754:	f383 8811 	msr	BASEPRI, r3
 8004758:	f3bf 8f6f 	isb	sy
 800475c:	f3bf 8f4f 	dsb	sy
 8004760:	60fb      	str	r3, [r7, #12]
}
 8004762:	bf00      	nop
 8004764:	bf00      	nop
 8004766:	e7fd      	b.n	8004764 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800476e:	d30b      	bcc.n	8004788 <xEventGroupClearBits+0x4c>
	__asm volatile
 8004770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004774:	f383 8811 	msr	BASEPRI, r3
 8004778:	f3bf 8f6f 	isb	sy
 800477c:	f3bf 8f4f 	dsb	sy
 8004780:	60bb      	str	r3, [r7, #8]
}
 8004782:	bf00      	nop
 8004784:	bf00      	nop
 8004786:	e7fd      	b.n	8004784 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8004788:	f002 ffb6 	bl	80076f8 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	43db      	mvns	r3, r3
 800479a:	401a      	ands	r2, r3
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 80047a0:	f002 ffdc 	bl	800775c <vPortExitCritical>

	return uxReturn;
 80047a4:	693b      	ldr	r3, [r7, #16]
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3718      	adds	r7, #24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b08e      	sub	sp, #56	@ 0x38
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
 80047b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80047b8:	2300      	movs	r3, #0
 80047ba:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 80047c0:	2300      	movs	r3, #0
 80047c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10b      	bne.n	80047e2 <xEventGroupSetBits+0x34>
	__asm volatile
 80047ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ce:	f383 8811 	msr	BASEPRI, r3
 80047d2:	f3bf 8f6f 	isb	sy
 80047d6:	f3bf 8f4f 	dsb	sy
 80047da:	613b      	str	r3, [r7, #16]
}
 80047dc:	bf00      	nop
 80047de:	bf00      	nop
 80047e0:	e7fd      	b.n	80047de <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80047e8:	d30b      	bcc.n	8004802 <xEventGroupSetBits+0x54>
	__asm volatile
 80047ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ee:	f383 8811 	msr	BASEPRI, r3
 80047f2:	f3bf 8f6f 	isb	sy
 80047f6:	f3bf 8f4f 	dsb	sy
 80047fa:	60fb      	str	r3, [r7, #12]
}
 80047fc:	bf00      	nop
 80047fe:	bf00      	nop
 8004800:	e7fd      	b.n	80047fe <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8004802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004804:	3304      	adds	r3, #4
 8004806:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800480a:	3308      	adds	r3, #8
 800480c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800480e:	f001 fb97 	bl	8005f40 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8004812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8004818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	431a      	orrs	r2, r3
 8004820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004822:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8004824:	e03c      	b.n	80048a0 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8004826:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800482c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8004832:	2300      	movs	r3, #0
 8004834:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800483c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004844:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d108      	bne.n	8004862 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8004850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	4013      	ands	r3, r2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00b      	beq.n	8004874 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 800485c:	2301      	movs	r3, #1
 800485e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004860:	e008      	b.n	8004874 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8004862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	4013      	ands	r3, r2
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	429a      	cmp	r2, r3
 800486e:	d101      	bne.n	8004874 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8004870:	2301      	movs	r3, #1
 8004872:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8004874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004876:	2b00      	cmp	r3, #0
 8004878:	d010      	beq.n	800489c <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d003      	beq.n	800488c <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8004884:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	4313      	orrs	r3, r2
 800488a:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800488c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004894:	4619      	mov	r1, r3
 8004896:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004898:	f001 fe44 	bl	8006524 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 80048a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80048a2:	6a3b      	ldr	r3, [r7, #32]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d1be      	bne.n	8004826 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80048a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ae:	43db      	mvns	r3, r3
 80048b0:	401a      	ands	r2, r3
 80048b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b4:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80048b6:	f001 fb51 	bl	8005f5c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80048ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048bc:	681b      	ldr	r3, [r3, #0]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3738      	adds	r7, #56	@ 0x38
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b082      	sub	sp, #8
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
 80048ce:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80048d0:	6839      	ldr	r1, [r7, #0]
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7ff ff6b 	bl	80047ae <xEventGroupSetBits>
}
 80048d8:	bf00      	nop
 80048da:	3708      	adds	r7, #8
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80048e0:	b480      	push	{r7}
 80048e2:	b087      	sub	sp, #28
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80048ec:	2300      	movs	r3, #0
 80048ee:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d107      	bne.n	8004906 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	4013      	ands	r3, r2
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00a      	beq.n	8004916 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004900:	2301      	movs	r3, #1
 8004902:	617b      	str	r3, [r7, #20]
 8004904:	e007      	b.n	8004916 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	4013      	ands	r3, r2
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	429a      	cmp	r2, r3
 8004910:	d101      	bne.n	8004916 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004912:	2301      	movs	r3, #1
 8004914:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8004916:	697b      	ldr	r3, [r7, #20]
}
 8004918:	4618      	mov	r0, r3
 800491a:	371c      	adds	r7, #28
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f103 0208 	add.w	r2, r3, #8
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f04f 32ff 	mov.w	r2, #4294967295
 800493c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f103 0208 	add.w	r2, r3, #8
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f103 0208 	add.w	r2, r3, #8
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004972:	bf00      	nop
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800497e:	b480      	push	{r7}
 8004980:	b085      	sub	sp, #20
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
 8004986:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	689a      	ldr	r2, [r3, #8]
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	683a      	ldr	r2, [r7, #0]
 80049a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	1c5a      	adds	r2, r3, #1
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	601a      	str	r2, [r3, #0]
}
 80049ba:	bf00      	nop
 80049bc:	3714      	adds	r7, #20
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr

080049c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80049c6:	b480      	push	{r7}
 80049c8:	b085      	sub	sp, #20
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
 80049ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049dc:	d103      	bne.n	80049e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	60fb      	str	r3, [r7, #12]
 80049e4:	e00c      	b.n	8004a00 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	3308      	adds	r3, #8
 80049ea:	60fb      	str	r3, [r7, #12]
 80049ec:	e002      	b.n	80049f4 <vListInsert+0x2e>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	60fb      	str	r3, [r7, #12]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d2f6      	bcs.n	80049ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	685a      	ldr	r2, [r3, #4]
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	683a      	ldr	r2, [r7, #0]
 8004a1a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	1c5a      	adds	r2, r3, #1
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	601a      	str	r2, [r3, #0]
}
 8004a2c:	bf00      	nop
 8004a2e:	3714      	adds	r7, #20
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	6892      	ldr	r2, [r2, #8]
 8004a4e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6852      	ldr	r2, [r2, #4]
 8004a58:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d103      	bne.n	8004a6c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689a      	ldr	r2, [r3, #8]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	1e5a      	subs	r2, r3, #1
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3714      	adds	r7, #20
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10b      	bne.n	8004ab8 <xQueueGenericReset+0x2c>
	__asm volatile
 8004aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa4:	f383 8811 	msr	BASEPRI, r3
 8004aa8:	f3bf 8f6f 	isb	sy
 8004aac:	f3bf 8f4f 	dsb	sy
 8004ab0:	60bb      	str	r3, [r7, #8]
}
 8004ab2:	bf00      	nop
 8004ab4:	bf00      	nop
 8004ab6:	e7fd      	b.n	8004ab4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004ab8:	f002 fe1e 	bl	80076f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ac4:	68f9      	ldr	r1, [r7, #12]
 8004ac6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004ac8:	fb01 f303 	mul.w	r3, r1, r3
 8004acc:	441a      	add	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	68f9      	ldr	r1, [r7, #12]
 8004aec:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004aee:	fb01 f303 	mul.w	r3, r1, r3
 8004af2:	441a      	add	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	22ff      	movs	r2, #255	@ 0xff
 8004afc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	22ff      	movs	r2, #255	@ 0xff
 8004b04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d114      	bne.n	8004b38 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d01a      	beq.n	8004b4c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	3310      	adds	r3, #16
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f001 fc9e 	bl	800645c <xTaskRemoveFromEventList>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d012      	beq.n	8004b4c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004b26:	4b0d      	ldr	r3, [pc, #52]	@ (8004b5c <xQueueGenericReset+0xd0>)
 8004b28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b2c:	601a      	str	r2, [r3, #0]
 8004b2e:	f3bf 8f4f 	dsb	sy
 8004b32:	f3bf 8f6f 	isb	sy
 8004b36:	e009      	b.n	8004b4c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	3310      	adds	r3, #16
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7ff fef1 	bl	8004924 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	3324      	adds	r3, #36	@ 0x24
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7ff feec 	bl	8004924 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004b4c:	f002 fe06 	bl	800775c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004b50:	2301      	movs	r3, #1
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	e000ed04 	.word	0xe000ed04

08004b60 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b08e      	sub	sp, #56	@ 0x38
 8004b64:	af02      	add	r7, sp, #8
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
 8004b6c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d10b      	bne.n	8004b8c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b78:	f383 8811 	msr	BASEPRI, r3
 8004b7c:	f3bf 8f6f 	isb	sy
 8004b80:	f3bf 8f4f 	dsb	sy
 8004b84:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004b86:	bf00      	nop
 8004b88:	bf00      	nop
 8004b8a:	e7fd      	b.n	8004b88 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10b      	bne.n	8004baa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b96:	f383 8811 	msr	BASEPRI, r3
 8004b9a:	f3bf 8f6f 	isb	sy
 8004b9e:	f3bf 8f4f 	dsb	sy
 8004ba2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004ba4:	bf00      	nop
 8004ba6:	bf00      	nop
 8004ba8:	e7fd      	b.n	8004ba6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d002      	beq.n	8004bb6 <xQueueGenericCreateStatic+0x56>
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d001      	beq.n	8004bba <xQueueGenericCreateStatic+0x5a>
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e000      	b.n	8004bbc <xQueueGenericCreateStatic+0x5c>
 8004bba:	2300      	movs	r3, #0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d10b      	bne.n	8004bd8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc4:	f383 8811 	msr	BASEPRI, r3
 8004bc8:	f3bf 8f6f 	isb	sy
 8004bcc:	f3bf 8f4f 	dsb	sy
 8004bd0:	623b      	str	r3, [r7, #32]
}
 8004bd2:	bf00      	nop
 8004bd4:	bf00      	nop
 8004bd6:	e7fd      	b.n	8004bd4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d102      	bne.n	8004be4 <xQueueGenericCreateStatic+0x84>
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d101      	bne.n	8004be8 <xQueueGenericCreateStatic+0x88>
 8004be4:	2301      	movs	r3, #1
 8004be6:	e000      	b.n	8004bea <xQueueGenericCreateStatic+0x8a>
 8004be8:	2300      	movs	r3, #0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10b      	bne.n	8004c06 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bf2:	f383 8811 	msr	BASEPRI, r3
 8004bf6:	f3bf 8f6f 	isb	sy
 8004bfa:	f3bf 8f4f 	dsb	sy
 8004bfe:	61fb      	str	r3, [r7, #28]
}
 8004c00:	bf00      	nop
 8004c02:	bf00      	nop
 8004c04:	e7fd      	b.n	8004c02 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004c06:	2348      	movs	r3, #72	@ 0x48
 8004c08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	2b48      	cmp	r3, #72	@ 0x48
 8004c0e:	d00b      	beq.n	8004c28 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c14:	f383 8811 	msr	BASEPRI, r3
 8004c18:	f3bf 8f6f 	isb	sy
 8004c1c:	f3bf 8f4f 	dsb	sy
 8004c20:	61bb      	str	r3, [r7, #24]
}
 8004c22:	bf00      	nop
 8004c24:	bf00      	nop
 8004c26:	e7fd      	b.n	8004c24 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004c28:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d00d      	beq.n	8004c50 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c3c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c42:	9300      	str	r3, [sp, #0]
 8004c44:	4613      	mov	r3, r2
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	68b9      	ldr	r1, [r7, #8]
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f000 f840 	bl	8004cd0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3730      	adds	r7, #48	@ 0x30
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b08a      	sub	sp, #40	@ 0x28
 8004c5e:	af02      	add	r7, sp, #8
 8004c60:	60f8      	str	r0, [r7, #12]
 8004c62:	60b9      	str	r1, [r7, #8]
 8004c64:	4613      	mov	r3, r2
 8004c66:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10b      	bne.n	8004c86 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c72:	f383 8811 	msr	BASEPRI, r3
 8004c76:	f3bf 8f6f 	isb	sy
 8004c7a:	f3bf 8f4f 	dsb	sy
 8004c7e:	613b      	str	r3, [r7, #16]
}
 8004c80:	bf00      	nop
 8004c82:	bf00      	nop
 8004c84:	e7fd      	b.n	8004c82 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	68ba      	ldr	r2, [r7, #8]
 8004c8a:	fb02 f303 	mul.w	r3, r2, r3
 8004c8e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	3348      	adds	r3, #72	@ 0x48
 8004c94:	4618      	mov	r0, r3
 8004c96:	f002 fe51 	bl	800793c <pvPortMalloc>
 8004c9a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d011      	beq.n	8004cc6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	3348      	adds	r3, #72	@ 0x48
 8004caa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004cb4:	79fa      	ldrb	r2, [r7, #7]
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	68b9      	ldr	r1, [r7, #8]
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f000 f805 	bl	8004cd0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004cc6:	69bb      	ldr	r3, [r7, #24]
	}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3720      	adds	r7, #32
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]
 8004cdc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d103      	bne.n	8004cec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	69ba      	ldr	r2, [r7, #24]
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	e002      	b.n	8004cf2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004cfe:	2101      	movs	r1, #1
 8004d00:	69b8      	ldr	r0, [r7, #24]
 8004d02:	f7ff fec3 	bl	8004a8c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004d06:	bf00      	nop
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b082      	sub	sp, #8
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00e      	beq.n	8004d3a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004d2e:	2300      	movs	r3, #0
 8004d30:	2200      	movs	r2, #0
 8004d32:	2100      	movs	r1, #0
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f837 	bl	8004da8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004d3a:	bf00      	nop
 8004d3c:	3708      	adds	r7, #8
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b086      	sub	sp, #24
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	4603      	mov	r3, r0
 8004d4a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	617b      	str	r3, [r7, #20]
 8004d50:	2300      	movs	r3, #0
 8004d52:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004d54:	79fb      	ldrb	r3, [r7, #7]
 8004d56:	461a      	mov	r2, r3
 8004d58:	6939      	ldr	r1, [r7, #16]
 8004d5a:	6978      	ldr	r0, [r7, #20]
 8004d5c:	f7ff ff7d 	bl	8004c5a <xQueueGenericCreate>
 8004d60:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f7ff ffd3 	bl	8004d0e <prvInitialiseMutex>

		return xNewQueue;
 8004d68:	68fb      	ldr	r3, [r7, #12]
	}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3718      	adds	r7, #24
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b088      	sub	sp, #32
 8004d76:	af02      	add	r7, sp, #8
 8004d78:	4603      	mov	r3, r0
 8004d7a:	6039      	str	r1, [r7, #0]
 8004d7c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	617b      	str	r3, [r7, #20]
 8004d82:	2300      	movs	r3, #0
 8004d84:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004d86:	79fb      	ldrb	r3, [r7, #7]
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	6939      	ldr	r1, [r7, #16]
 8004d90:	6978      	ldr	r0, [r7, #20]
 8004d92:	f7ff fee5 	bl	8004b60 <xQueueGenericCreateStatic>
 8004d96:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f7ff ffb8 	bl	8004d0e <prvInitialiseMutex>

		return xNewQueue;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
	}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3718      	adds	r7, #24
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b08e      	sub	sp, #56	@ 0x38
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
 8004db4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004db6:	2300      	movs	r3, #0
 8004db8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10b      	bne.n	8004ddc <xQueueGenericSend+0x34>
	__asm volatile
 8004dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dc8:	f383 8811 	msr	BASEPRI, r3
 8004dcc:	f3bf 8f6f 	isb	sy
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004dd6:	bf00      	nop
 8004dd8:	bf00      	nop
 8004dda:	e7fd      	b.n	8004dd8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d103      	bne.n	8004dea <xQueueGenericSend+0x42>
 8004de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <xQueueGenericSend+0x46>
 8004dea:	2301      	movs	r3, #1
 8004dec:	e000      	b.n	8004df0 <xQueueGenericSend+0x48>
 8004dee:	2300      	movs	r3, #0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10b      	bne.n	8004e0c <xQueueGenericSend+0x64>
	__asm volatile
 8004df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df8:	f383 8811 	msr	BASEPRI, r3
 8004dfc:	f3bf 8f6f 	isb	sy
 8004e00:	f3bf 8f4f 	dsb	sy
 8004e04:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004e06:	bf00      	nop
 8004e08:	bf00      	nop
 8004e0a:	e7fd      	b.n	8004e08 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d103      	bne.n	8004e1a <xQueueGenericSend+0x72>
 8004e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d101      	bne.n	8004e1e <xQueueGenericSend+0x76>
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e000      	b.n	8004e20 <xQueueGenericSend+0x78>
 8004e1e:	2300      	movs	r3, #0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d10b      	bne.n	8004e3c <xQueueGenericSend+0x94>
	__asm volatile
 8004e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e28:	f383 8811 	msr	BASEPRI, r3
 8004e2c:	f3bf 8f6f 	isb	sy
 8004e30:	f3bf 8f4f 	dsb	sy
 8004e34:	623b      	str	r3, [r7, #32]
}
 8004e36:	bf00      	nop
 8004e38:	bf00      	nop
 8004e3a:	e7fd      	b.n	8004e38 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e3c:	f001 fd70 	bl	8006920 <xTaskGetSchedulerState>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d102      	bne.n	8004e4c <xQueueGenericSend+0xa4>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d101      	bne.n	8004e50 <xQueueGenericSend+0xa8>
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e000      	b.n	8004e52 <xQueueGenericSend+0xaa>
 8004e50:	2300      	movs	r3, #0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10b      	bne.n	8004e6e <xQueueGenericSend+0xc6>
	__asm volatile
 8004e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e5a:	f383 8811 	msr	BASEPRI, r3
 8004e5e:	f3bf 8f6f 	isb	sy
 8004e62:	f3bf 8f4f 	dsb	sy
 8004e66:	61fb      	str	r3, [r7, #28]
}
 8004e68:	bf00      	nop
 8004e6a:	bf00      	nop
 8004e6c:	e7fd      	b.n	8004e6a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e6e:	f002 fc43 	bl	80076f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d302      	bcc.n	8004e84 <xQueueGenericSend+0xdc>
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d129      	bne.n	8004ed8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e84:	683a      	ldr	r2, [r7, #0]
 8004e86:	68b9      	ldr	r1, [r7, #8]
 8004e88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e8a:	f000 fc8c 	bl	80057a6 <prvCopyDataToQueue>
 8004e8e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d010      	beq.n	8004eba <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e9a:	3324      	adds	r3, #36	@ 0x24
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f001 fadd 	bl	800645c <xTaskRemoveFromEventList>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d013      	beq.n	8004ed0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004ea8:	4b3f      	ldr	r3, [pc, #252]	@ (8004fa8 <xQueueGenericSend+0x200>)
 8004eaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004eae:	601a      	str	r2, [r3, #0]
 8004eb0:	f3bf 8f4f 	dsb	sy
 8004eb4:	f3bf 8f6f 	isb	sy
 8004eb8:	e00a      	b.n	8004ed0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d007      	beq.n	8004ed0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004ec0:	4b39      	ldr	r3, [pc, #228]	@ (8004fa8 <xQueueGenericSend+0x200>)
 8004ec2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ec6:	601a      	str	r2, [r3, #0]
 8004ec8:	f3bf 8f4f 	dsb	sy
 8004ecc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004ed0:	f002 fc44 	bl	800775c <vPortExitCritical>
				return pdPASS;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e063      	b.n	8004fa0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d103      	bne.n	8004ee6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ede:	f002 fc3d 	bl	800775c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	e05c      	b.n	8004fa0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ee6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d106      	bne.n	8004efa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004eec:	f107 0314 	add.w	r3, r7, #20
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f001 fb7b 	bl	80065ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004efa:	f002 fc2f 	bl	800775c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004efe:	f001 f81f 	bl	8005f40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f02:	f002 fbf9 	bl	80076f8 <vPortEnterCritical>
 8004f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f0c:	b25b      	sxtb	r3, r3
 8004f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f12:	d103      	bne.n	8004f1c <xQueueGenericSend+0x174>
 8004f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f1e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f22:	b25b      	sxtb	r3, r3
 8004f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f28:	d103      	bne.n	8004f32 <xQueueGenericSend+0x18a>
 8004f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f32:	f002 fc13 	bl	800775c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f36:	1d3a      	adds	r2, r7, #4
 8004f38:	f107 0314 	add.w	r3, r7, #20
 8004f3c:	4611      	mov	r1, r2
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f001 fb6a 	bl	8006618 <xTaskCheckForTimeOut>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d124      	bne.n	8004f94 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004f4a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f4c:	f000 fd23 	bl	8005996 <prvIsQueueFull>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d018      	beq.n	8004f88 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f58:	3310      	adds	r3, #16
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	4611      	mov	r1, r2
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f001 f9ec 	bl	800633c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004f64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f66:	f000 fcae 	bl	80058c6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004f6a:	f000 fff7 	bl	8005f5c <xTaskResumeAll>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f47f af7c 	bne.w	8004e6e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004f76:	4b0c      	ldr	r3, [pc, #48]	@ (8004fa8 <xQueueGenericSend+0x200>)
 8004f78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f7c:	601a      	str	r2, [r3, #0]
 8004f7e:	f3bf 8f4f 	dsb	sy
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	e772      	b.n	8004e6e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004f88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f8a:	f000 fc9c 	bl	80058c6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f8e:	f000 ffe5 	bl	8005f5c <xTaskResumeAll>
 8004f92:	e76c      	b.n	8004e6e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004f94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f96:	f000 fc96 	bl	80058c6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f9a:	f000 ffdf 	bl	8005f5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004f9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3738      	adds	r7, #56	@ 0x38
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	e000ed04 	.word	0xe000ed04

08004fac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b090      	sub	sp, #64	@ 0x40
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
 8004fb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10b      	bne.n	8004fdc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fc8:	f383 8811 	msr	BASEPRI, r3
 8004fcc:	f3bf 8f6f 	isb	sy
 8004fd0:	f3bf 8f4f 	dsb	sy
 8004fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004fd6:	bf00      	nop
 8004fd8:	bf00      	nop
 8004fda:	e7fd      	b.n	8004fd8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d103      	bne.n	8004fea <xQueueGenericSendFromISR+0x3e>
 8004fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d101      	bne.n	8004fee <xQueueGenericSendFromISR+0x42>
 8004fea:	2301      	movs	r3, #1
 8004fec:	e000      	b.n	8004ff0 <xQueueGenericSendFromISR+0x44>
 8004fee:	2300      	movs	r3, #0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d10b      	bne.n	800500c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ff8:	f383 8811 	msr	BASEPRI, r3
 8004ffc:	f3bf 8f6f 	isb	sy
 8005000:	f3bf 8f4f 	dsb	sy
 8005004:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005006:	bf00      	nop
 8005008:	bf00      	nop
 800500a:	e7fd      	b.n	8005008 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	2b02      	cmp	r3, #2
 8005010:	d103      	bne.n	800501a <xQueueGenericSendFromISR+0x6e>
 8005012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005016:	2b01      	cmp	r3, #1
 8005018:	d101      	bne.n	800501e <xQueueGenericSendFromISR+0x72>
 800501a:	2301      	movs	r3, #1
 800501c:	e000      	b.n	8005020 <xQueueGenericSendFromISR+0x74>
 800501e:	2300      	movs	r3, #0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d10b      	bne.n	800503c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005028:	f383 8811 	msr	BASEPRI, r3
 800502c:	f3bf 8f6f 	isb	sy
 8005030:	f3bf 8f4f 	dsb	sy
 8005034:	623b      	str	r3, [r7, #32]
}
 8005036:	bf00      	nop
 8005038:	bf00      	nop
 800503a:	e7fd      	b.n	8005038 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800503c:	f002 fc3c 	bl	80078b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005040:	f3ef 8211 	mrs	r2, BASEPRI
 8005044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005048:	f383 8811 	msr	BASEPRI, r3
 800504c:	f3bf 8f6f 	isb	sy
 8005050:	f3bf 8f4f 	dsb	sy
 8005054:	61fa      	str	r2, [r7, #28]
 8005056:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005058:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800505a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800505c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800505e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005064:	429a      	cmp	r2, r3
 8005066:	d302      	bcc.n	800506e <xQueueGenericSendFromISR+0xc2>
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	2b02      	cmp	r3, #2
 800506c:	d12f      	bne.n	80050ce <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800506e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005070:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005074:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800507a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800507c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800507e:	683a      	ldr	r2, [r7, #0]
 8005080:	68b9      	ldr	r1, [r7, #8]
 8005082:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005084:	f000 fb8f 	bl	80057a6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005088:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800508c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005090:	d112      	bne.n	80050b8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005096:	2b00      	cmp	r3, #0
 8005098:	d016      	beq.n	80050c8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800509a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800509c:	3324      	adds	r3, #36	@ 0x24
 800509e:	4618      	mov	r0, r3
 80050a0:	f001 f9dc 	bl	800645c <xTaskRemoveFromEventList>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00e      	beq.n	80050c8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00b      	beq.n	80050c8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	601a      	str	r2, [r3, #0]
 80050b6:	e007      	b.n	80050c8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80050b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80050bc:	3301      	adds	r3, #1
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	b25a      	sxtb	r2, r3
 80050c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80050c8:	2301      	movs	r3, #1
 80050ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80050cc:	e001      	b.n	80050d2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80050ce:	2300      	movs	r3, #0
 80050d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050d4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80050dc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80050de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3740      	adds	r7, #64	@ 0x40
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b08e      	sub	sp, #56	@ 0x38
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80050f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10b      	bne.n	8005114 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80050fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005100:	f383 8811 	msr	BASEPRI, r3
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	623b      	str	r3, [r7, #32]
}
 800510e:	bf00      	nop
 8005110:	bf00      	nop
 8005112:	e7fd      	b.n	8005110 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00b      	beq.n	8005134 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800511c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005120:	f383 8811 	msr	BASEPRI, r3
 8005124:	f3bf 8f6f 	isb	sy
 8005128:	f3bf 8f4f 	dsb	sy
 800512c:	61fb      	str	r3, [r7, #28]
}
 800512e:	bf00      	nop
 8005130:	bf00      	nop
 8005132:	e7fd      	b.n	8005130 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d103      	bne.n	8005144 <xQueueGiveFromISR+0x5c>
 800513c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d101      	bne.n	8005148 <xQueueGiveFromISR+0x60>
 8005144:	2301      	movs	r3, #1
 8005146:	e000      	b.n	800514a <xQueueGiveFromISR+0x62>
 8005148:	2300      	movs	r3, #0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d10b      	bne.n	8005166 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800514e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005152:	f383 8811 	msr	BASEPRI, r3
 8005156:	f3bf 8f6f 	isb	sy
 800515a:	f3bf 8f4f 	dsb	sy
 800515e:	61bb      	str	r3, [r7, #24]
}
 8005160:	bf00      	nop
 8005162:	bf00      	nop
 8005164:	e7fd      	b.n	8005162 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005166:	f002 fba7 	bl	80078b8 <vPortValidateInterruptPriority>
	__asm volatile
 800516a:	f3ef 8211 	mrs	r2, BASEPRI
 800516e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005172:	f383 8811 	msr	BASEPRI, r3
 8005176:	f3bf 8f6f 	isb	sy
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	617a      	str	r2, [r7, #20]
 8005180:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005182:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005184:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005188:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800518a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800518c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800518e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005190:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005192:	429a      	cmp	r2, r3
 8005194:	d22b      	bcs.n	80051ee <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005198:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800519c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80051a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051a2:	1c5a      	adds	r2, r3, #1
 80051a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80051a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80051ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b0:	d112      	bne.n	80051d8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d016      	beq.n	80051e8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051bc:	3324      	adds	r3, #36	@ 0x24
 80051be:	4618      	mov	r0, r3
 80051c0:	f001 f94c 	bl	800645c <xTaskRemoveFromEventList>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00e      	beq.n	80051e8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00b      	beq.n	80051e8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	2201      	movs	r2, #1
 80051d4:	601a      	str	r2, [r3, #0]
 80051d6:	e007      	b.n	80051e8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80051d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80051dc:	3301      	adds	r3, #1
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	b25a      	sxtb	r2, r3
 80051e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80051e8:	2301      	movs	r3, #1
 80051ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80051ec:	e001      	b.n	80051f2 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80051ee:	2300      	movs	r3, #0
 80051f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80051f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051f4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f383 8811 	msr	BASEPRI, r3
}
 80051fc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80051fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005200:	4618      	mov	r0, r3
 8005202:	3738      	adds	r7, #56	@ 0x38
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b08c      	sub	sp, #48	@ 0x30
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005214:	2300      	movs	r3, #0
 8005216:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800521c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10b      	bne.n	800523a <xQueueReceive+0x32>
	__asm volatile
 8005222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005226:	f383 8811 	msr	BASEPRI, r3
 800522a:	f3bf 8f6f 	isb	sy
 800522e:	f3bf 8f4f 	dsb	sy
 8005232:	623b      	str	r3, [r7, #32]
}
 8005234:	bf00      	nop
 8005236:	bf00      	nop
 8005238:	e7fd      	b.n	8005236 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d103      	bne.n	8005248 <xQueueReceive+0x40>
 8005240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005244:	2b00      	cmp	r3, #0
 8005246:	d101      	bne.n	800524c <xQueueReceive+0x44>
 8005248:	2301      	movs	r3, #1
 800524a:	e000      	b.n	800524e <xQueueReceive+0x46>
 800524c:	2300      	movs	r3, #0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10b      	bne.n	800526a <xQueueReceive+0x62>
	__asm volatile
 8005252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005256:	f383 8811 	msr	BASEPRI, r3
 800525a:	f3bf 8f6f 	isb	sy
 800525e:	f3bf 8f4f 	dsb	sy
 8005262:	61fb      	str	r3, [r7, #28]
}
 8005264:	bf00      	nop
 8005266:	bf00      	nop
 8005268:	e7fd      	b.n	8005266 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800526a:	f001 fb59 	bl	8006920 <xTaskGetSchedulerState>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d102      	bne.n	800527a <xQueueReceive+0x72>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d101      	bne.n	800527e <xQueueReceive+0x76>
 800527a:	2301      	movs	r3, #1
 800527c:	e000      	b.n	8005280 <xQueueReceive+0x78>
 800527e:	2300      	movs	r3, #0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10b      	bne.n	800529c <xQueueReceive+0x94>
	__asm volatile
 8005284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005288:	f383 8811 	msr	BASEPRI, r3
 800528c:	f3bf 8f6f 	isb	sy
 8005290:	f3bf 8f4f 	dsb	sy
 8005294:	61bb      	str	r3, [r7, #24]
}
 8005296:	bf00      	nop
 8005298:	bf00      	nop
 800529a:	e7fd      	b.n	8005298 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800529c:	f002 fa2c 	bl	80076f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052a4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80052a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d01f      	beq.n	80052ec <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80052ac:	68b9      	ldr	r1, [r7, #8]
 80052ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052b0:	f000 fae3 	bl	800587a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80052b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b6:	1e5a      	subs	r2, r3, #1
 80052b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ba:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00f      	beq.n	80052e4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052c6:	3310      	adds	r3, #16
 80052c8:	4618      	mov	r0, r3
 80052ca:	f001 f8c7 	bl	800645c <xTaskRemoveFromEventList>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d007      	beq.n	80052e4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80052d4:	4b3c      	ldr	r3, [pc, #240]	@ (80053c8 <xQueueReceive+0x1c0>)
 80052d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052da:	601a      	str	r2, [r3, #0]
 80052dc:	f3bf 8f4f 	dsb	sy
 80052e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80052e4:	f002 fa3a 	bl	800775c <vPortExitCritical>
				return pdPASS;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e069      	b.n	80053c0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d103      	bne.n	80052fa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80052f2:	f002 fa33 	bl	800775c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80052f6:	2300      	movs	r3, #0
 80052f8:	e062      	b.n	80053c0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d106      	bne.n	800530e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005300:	f107 0310 	add.w	r3, r7, #16
 8005304:	4618      	mov	r0, r3
 8005306:	f001 f971 	bl	80065ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800530a:	2301      	movs	r3, #1
 800530c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800530e:	f002 fa25 	bl	800775c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005312:	f000 fe15 	bl	8005f40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005316:	f002 f9ef 	bl	80076f8 <vPortEnterCritical>
 800531a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800531c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005320:	b25b      	sxtb	r3, r3
 8005322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005326:	d103      	bne.n	8005330 <xQueueReceive+0x128>
 8005328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800532a:	2200      	movs	r2, #0
 800532c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005332:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005336:	b25b      	sxtb	r3, r3
 8005338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800533c:	d103      	bne.n	8005346 <xQueueReceive+0x13e>
 800533e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005340:	2200      	movs	r2, #0
 8005342:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005346:	f002 fa09 	bl	800775c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800534a:	1d3a      	adds	r2, r7, #4
 800534c:	f107 0310 	add.w	r3, r7, #16
 8005350:	4611      	mov	r1, r2
 8005352:	4618      	mov	r0, r3
 8005354:	f001 f960 	bl	8006618 <xTaskCheckForTimeOut>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d123      	bne.n	80053a6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800535e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005360:	f000 fb03 	bl	800596a <prvIsQueueEmpty>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d017      	beq.n	800539a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800536a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800536c:	3324      	adds	r3, #36	@ 0x24
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	4611      	mov	r1, r2
 8005372:	4618      	mov	r0, r3
 8005374:	f000 ffe2 	bl	800633c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005378:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800537a:	f000 faa4 	bl	80058c6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800537e:	f000 fded 	bl	8005f5c <xTaskResumeAll>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d189      	bne.n	800529c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005388:	4b0f      	ldr	r3, [pc, #60]	@ (80053c8 <xQueueReceive+0x1c0>)
 800538a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800538e:	601a      	str	r2, [r3, #0]
 8005390:	f3bf 8f4f 	dsb	sy
 8005394:	f3bf 8f6f 	isb	sy
 8005398:	e780      	b.n	800529c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800539a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800539c:	f000 fa93 	bl	80058c6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80053a0:	f000 fddc 	bl	8005f5c <xTaskResumeAll>
 80053a4:	e77a      	b.n	800529c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80053a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053a8:	f000 fa8d 	bl	80058c6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80053ac:	f000 fdd6 	bl	8005f5c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053b2:	f000 fada 	bl	800596a <prvIsQueueEmpty>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f43f af6f 	beq.w	800529c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80053be:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3730      	adds	r7, #48	@ 0x30
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	e000ed04 	.word	0xe000ed04

080053cc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b08e      	sub	sp, #56	@ 0x38
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80053d6:	2300      	movs	r3, #0
 80053d8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80053de:	2300      	movs	r3, #0
 80053e0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80053e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10b      	bne.n	8005400 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80053e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ec:	f383 8811 	msr	BASEPRI, r3
 80053f0:	f3bf 8f6f 	isb	sy
 80053f4:	f3bf 8f4f 	dsb	sy
 80053f8:	623b      	str	r3, [r7, #32]
}
 80053fa:	bf00      	nop
 80053fc:	bf00      	nop
 80053fe:	e7fd      	b.n	80053fc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00b      	beq.n	8005420 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800540c:	f383 8811 	msr	BASEPRI, r3
 8005410:	f3bf 8f6f 	isb	sy
 8005414:	f3bf 8f4f 	dsb	sy
 8005418:	61fb      	str	r3, [r7, #28]
}
 800541a:	bf00      	nop
 800541c:	bf00      	nop
 800541e:	e7fd      	b.n	800541c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005420:	f001 fa7e 	bl	8006920 <xTaskGetSchedulerState>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d102      	bne.n	8005430 <xQueueSemaphoreTake+0x64>
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d101      	bne.n	8005434 <xQueueSemaphoreTake+0x68>
 8005430:	2301      	movs	r3, #1
 8005432:	e000      	b.n	8005436 <xQueueSemaphoreTake+0x6a>
 8005434:	2300      	movs	r3, #0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10b      	bne.n	8005452 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800543a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800543e:	f383 8811 	msr	BASEPRI, r3
 8005442:	f3bf 8f6f 	isb	sy
 8005446:	f3bf 8f4f 	dsb	sy
 800544a:	61bb      	str	r3, [r7, #24]
}
 800544c:	bf00      	nop
 800544e:	bf00      	nop
 8005450:	e7fd      	b.n	800544e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005452:	f002 f951 	bl	80076f8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800545a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800545c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800545e:	2b00      	cmp	r3, #0
 8005460:	d024      	beq.n	80054ac <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005464:	1e5a      	subs	r2, r3, #1
 8005466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005468:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800546a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d104      	bne.n	800547c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005472:	f001 fc19 	bl	8006ca8 <pvTaskIncrementMutexHeldCount>
 8005476:	4602      	mov	r2, r0
 8005478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800547a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800547c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00f      	beq.n	80054a4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005486:	3310      	adds	r3, #16
 8005488:	4618      	mov	r0, r3
 800548a:	f000 ffe7 	bl	800645c <xTaskRemoveFromEventList>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d007      	beq.n	80054a4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005494:	4b54      	ldr	r3, [pc, #336]	@ (80055e8 <xQueueSemaphoreTake+0x21c>)
 8005496:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800549a:	601a      	str	r2, [r3, #0]
 800549c:	f3bf 8f4f 	dsb	sy
 80054a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80054a4:	f002 f95a 	bl	800775c <vPortExitCritical>
				return pdPASS;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e098      	b.n	80055de <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d112      	bne.n	80054d8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80054b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00b      	beq.n	80054d0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80054b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054bc:	f383 8811 	msr	BASEPRI, r3
 80054c0:	f3bf 8f6f 	isb	sy
 80054c4:	f3bf 8f4f 	dsb	sy
 80054c8:	617b      	str	r3, [r7, #20]
}
 80054ca:	bf00      	nop
 80054cc:	bf00      	nop
 80054ce:	e7fd      	b.n	80054cc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80054d0:	f002 f944 	bl	800775c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80054d4:	2300      	movs	r3, #0
 80054d6:	e082      	b.n	80055de <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d106      	bne.n	80054ec <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054de:	f107 030c 	add.w	r3, r7, #12
 80054e2:	4618      	mov	r0, r3
 80054e4:	f001 f882 	bl	80065ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054e8:	2301      	movs	r3, #1
 80054ea:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054ec:	f002 f936 	bl	800775c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054f0:	f000 fd26 	bl	8005f40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054f4:	f002 f900 	bl	80076f8 <vPortEnterCritical>
 80054f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054fa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80054fe:	b25b      	sxtb	r3, r3
 8005500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005504:	d103      	bne.n	800550e <xQueueSemaphoreTake+0x142>
 8005506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005508:	2200      	movs	r2, #0
 800550a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800550e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005510:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005514:	b25b      	sxtb	r3, r3
 8005516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800551a:	d103      	bne.n	8005524 <xQueueSemaphoreTake+0x158>
 800551c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800551e:	2200      	movs	r2, #0
 8005520:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005524:	f002 f91a 	bl	800775c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005528:	463a      	mov	r2, r7
 800552a:	f107 030c 	add.w	r3, r7, #12
 800552e:	4611      	mov	r1, r2
 8005530:	4618      	mov	r0, r3
 8005532:	f001 f871 	bl	8006618 <xTaskCheckForTimeOut>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d132      	bne.n	80055a2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800553c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800553e:	f000 fa14 	bl	800596a <prvIsQueueEmpty>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d026      	beq.n	8005596 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d109      	bne.n	8005564 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005550:	f002 f8d2 	bl	80076f8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	4618      	mov	r0, r3
 800555a:	f001 f9ff 	bl	800695c <xTaskPriorityInherit>
 800555e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005560:	f002 f8fc 	bl	800775c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005566:	3324      	adds	r3, #36	@ 0x24
 8005568:	683a      	ldr	r2, [r7, #0]
 800556a:	4611      	mov	r1, r2
 800556c:	4618      	mov	r0, r3
 800556e:	f000 fee5 	bl	800633c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005572:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005574:	f000 f9a7 	bl	80058c6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005578:	f000 fcf0 	bl	8005f5c <xTaskResumeAll>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	f47f af67 	bne.w	8005452 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005584:	4b18      	ldr	r3, [pc, #96]	@ (80055e8 <xQueueSemaphoreTake+0x21c>)
 8005586:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800558a:	601a      	str	r2, [r3, #0]
 800558c:	f3bf 8f4f 	dsb	sy
 8005590:	f3bf 8f6f 	isb	sy
 8005594:	e75d      	b.n	8005452 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005596:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005598:	f000 f995 	bl	80058c6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800559c:	f000 fcde 	bl	8005f5c <xTaskResumeAll>
 80055a0:	e757      	b.n	8005452 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80055a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80055a4:	f000 f98f 	bl	80058c6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80055a8:	f000 fcd8 	bl	8005f5c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80055ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80055ae:	f000 f9dc 	bl	800596a <prvIsQueueEmpty>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f43f af4c 	beq.w	8005452 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80055ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00d      	beq.n	80055dc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80055c0:	f002 f89a 	bl	80076f8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80055c4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80055c6:	f000 f8d6 	bl	8005776 <prvGetDisinheritPriorityAfterTimeout>
 80055ca:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80055cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80055d2:	4618      	mov	r0, r3
 80055d4:	f001 fac0 	bl	8006b58 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80055d8:	f002 f8c0 	bl	800775c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80055dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3738      	adds	r7, #56	@ 0x38
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	e000ed04 	.word	0xe000ed04

080055ec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b08e      	sub	sp, #56	@ 0x38
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80055fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d10b      	bne.n	800561a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8005602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005606:	f383 8811 	msr	BASEPRI, r3
 800560a:	f3bf 8f6f 	isb	sy
 800560e:	f3bf 8f4f 	dsb	sy
 8005612:	623b      	str	r3, [r7, #32]
}
 8005614:	bf00      	nop
 8005616:	bf00      	nop
 8005618:	e7fd      	b.n	8005616 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d103      	bne.n	8005628 <xQueueReceiveFromISR+0x3c>
 8005620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005624:	2b00      	cmp	r3, #0
 8005626:	d101      	bne.n	800562c <xQueueReceiveFromISR+0x40>
 8005628:	2301      	movs	r3, #1
 800562a:	e000      	b.n	800562e <xQueueReceiveFromISR+0x42>
 800562c:	2300      	movs	r3, #0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d10b      	bne.n	800564a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8005632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005636:	f383 8811 	msr	BASEPRI, r3
 800563a:	f3bf 8f6f 	isb	sy
 800563e:	f3bf 8f4f 	dsb	sy
 8005642:	61fb      	str	r3, [r7, #28]
}
 8005644:	bf00      	nop
 8005646:	bf00      	nop
 8005648:	e7fd      	b.n	8005646 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800564a:	f002 f935 	bl	80078b8 <vPortValidateInterruptPriority>
	__asm volatile
 800564e:	f3ef 8211 	mrs	r2, BASEPRI
 8005652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005656:	f383 8811 	msr	BASEPRI, r3
 800565a:	f3bf 8f6f 	isb	sy
 800565e:	f3bf 8f4f 	dsb	sy
 8005662:	61ba      	str	r2, [r7, #24]
 8005664:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005666:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005668:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800566a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800566c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800566e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005672:	2b00      	cmp	r3, #0
 8005674:	d02f      	beq.n	80056d6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005678:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800567c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005680:	68b9      	ldr	r1, [r7, #8]
 8005682:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005684:	f000 f8f9 	bl	800587a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800568a:	1e5a      	subs	r2, r3, #1
 800568c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800568e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005690:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005698:	d112      	bne.n	80056c0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800569a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d016      	beq.n	80056d0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a4:	3310      	adds	r3, #16
 80056a6:	4618      	mov	r0, r3
 80056a8:	f000 fed8 	bl	800645c <xTaskRemoveFromEventList>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00e      	beq.n	80056d0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00b      	beq.n	80056d0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	601a      	str	r2, [r3, #0]
 80056be:	e007      	b.n	80056d0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80056c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80056c4:	3301      	adds	r3, #1
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	b25a      	sxtb	r2, r3
 80056ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80056d0:	2301      	movs	r3, #1
 80056d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80056d4:	e001      	b.n	80056da <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80056d6:	2300      	movs	r3, #0
 80056d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80056da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056dc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	f383 8811 	msr	BASEPRI, r3
}
 80056e4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80056e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3738      	adds	r7, #56	@ 0x38
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d10b      	bne.n	8005716 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 80056fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005702:	f383 8811 	msr	BASEPRI, r3
 8005706:	f3bf 8f6f 	isb	sy
 800570a:	f3bf 8f4f 	dsb	sy
 800570e:	60bb      	str	r3, [r7, #8]
}
 8005710:	bf00      	nop
 8005712:	bf00      	nop
 8005714:	e7fd      	b.n	8005712 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8005716:	f001 ffef 	bl	80076f8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800571e:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005720:	f002 f81c 	bl	800775c <vPortExitCritical>

	return uxReturn;
 8005724:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005726:	4618      	mov	r0, r3
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 800572e:	b580      	push	{r7, lr}
 8005730:	b086      	sub	sp, #24
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10b      	bne.n	8005758 <uxQueueSpacesAvailable+0x2a>
	__asm volatile
 8005740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005744:	f383 8811 	msr	BASEPRI, r3
 8005748:	f3bf 8f6f 	isb	sy
 800574c:	f3bf 8f4f 	dsb	sy
 8005750:	60fb      	str	r3, [r7, #12]
}
 8005752:	bf00      	nop
 8005754:	bf00      	nop
 8005756:	e7fd      	b.n	8005754 <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 8005758:	f001 ffce 	bl	80076f8 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8005768:	f001 fff8 	bl	800775c <vPortExitCritical>

	return uxReturn;
 800576c:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800576e:	4618      	mov	r0, r3
 8005770:	3718      	adds	r7, #24
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}

08005776 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005776:	b480      	push	{r7}
 8005778:	b085      	sub	sp, #20
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005782:	2b00      	cmp	r3, #0
 8005784:	d006      	beq.n	8005794 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f1c3 0307 	rsb	r3, r3, #7
 8005790:	60fb      	str	r3, [r7, #12]
 8005792:	e001      	b.n	8005798 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005794:	2300      	movs	r3, #0
 8005796:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005798:	68fb      	ldr	r3, [r7, #12]
	}
 800579a:	4618      	mov	r0, r3
 800579c:	3714      	adds	r7, #20
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b086      	sub	sp, #24
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	60f8      	str	r0, [r7, #12]
 80057ae:	60b9      	str	r1, [r7, #8]
 80057b0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80057b2:	2300      	movs	r3, #0
 80057b4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ba:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10d      	bne.n	80057e0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d14d      	bne.n	8005868 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	4618      	mov	r0, r3
 80057d2:	f001 f939 	bl	8006a48 <xTaskPriorityDisinherit>
 80057d6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	609a      	str	r2, [r3, #8]
 80057de:	e043      	b.n	8005868 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d119      	bne.n	800581a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6858      	ldr	r0, [r3, #4]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ee:	461a      	mov	r2, r3
 80057f0:	68b9      	ldr	r1, [r7, #8]
 80057f2:	f002 fcd4 	bl	800819e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	685a      	ldr	r2, [r3, #4]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057fe:	441a      	add	r2, r3
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	685a      	ldr	r2, [r3, #4]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	429a      	cmp	r2, r3
 800580e:	d32b      	bcc.n	8005868 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	605a      	str	r2, [r3, #4]
 8005818:	e026      	b.n	8005868 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	68d8      	ldr	r0, [r3, #12]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005822:	461a      	mov	r2, r3
 8005824:	68b9      	ldr	r1, [r7, #8]
 8005826:	f002 fcba 	bl	800819e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	68da      	ldr	r2, [r3, #12]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005832:	425b      	negs	r3, r3
 8005834:	441a      	add	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	68da      	ldr	r2, [r3, #12]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	429a      	cmp	r2, r3
 8005844:	d207      	bcs.n	8005856 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	689a      	ldr	r2, [r3, #8]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800584e:	425b      	negs	r3, r3
 8005850:	441a      	add	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2b02      	cmp	r3, #2
 800585a:	d105      	bne.n	8005868 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d002      	beq.n	8005868 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	3b01      	subs	r3, #1
 8005866:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	1c5a      	adds	r2, r3, #1
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005870:	697b      	ldr	r3, [r7, #20]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3718      	adds	r7, #24
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b082      	sub	sp, #8
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
 8005882:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005888:	2b00      	cmp	r3, #0
 800588a:	d018      	beq.n	80058be <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	68da      	ldr	r2, [r3, #12]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005894:	441a      	add	r2, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68da      	ldr	r2, [r3, #12]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d303      	bcc.n	80058ae <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	68d9      	ldr	r1, [r3, #12]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058b6:	461a      	mov	r2, r3
 80058b8:	6838      	ldr	r0, [r7, #0]
 80058ba:	f002 fc70 	bl	800819e <memcpy>
	}
}
 80058be:	bf00      	nop
 80058c0:	3708      	adds	r7, #8
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b084      	sub	sp, #16
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80058ce:	f001 ff13 	bl	80076f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80058d8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058da:	e011      	b.n	8005900 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d012      	beq.n	800590a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	3324      	adds	r3, #36	@ 0x24
 80058e8:	4618      	mov	r0, r3
 80058ea:	f000 fdb7 	bl	800645c <xTaskRemoveFromEventList>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d001      	beq.n	80058f8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80058f4:	f000 fef4 	bl	80066e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80058f8:	7bfb      	ldrb	r3, [r7, #15]
 80058fa:	3b01      	subs	r3, #1
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005900:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005904:	2b00      	cmp	r3, #0
 8005906:	dce9      	bgt.n	80058dc <prvUnlockQueue+0x16>
 8005908:	e000      	b.n	800590c <prvUnlockQueue+0x46>
					break;
 800590a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	22ff      	movs	r2, #255	@ 0xff
 8005910:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005914:	f001 ff22 	bl	800775c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005918:	f001 feee 	bl	80076f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005922:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005924:	e011      	b.n	800594a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d012      	beq.n	8005954 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	3310      	adds	r3, #16
 8005932:	4618      	mov	r0, r3
 8005934:	f000 fd92 	bl	800645c <xTaskRemoveFromEventList>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d001      	beq.n	8005942 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800593e:	f000 fecf 	bl	80066e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005942:	7bbb      	ldrb	r3, [r7, #14]
 8005944:	3b01      	subs	r3, #1
 8005946:	b2db      	uxtb	r3, r3
 8005948:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800594a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800594e:	2b00      	cmp	r3, #0
 8005950:	dce9      	bgt.n	8005926 <prvUnlockQueue+0x60>
 8005952:	e000      	b.n	8005956 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005954:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	22ff      	movs	r2, #255	@ 0xff
 800595a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800595e:	f001 fefd 	bl	800775c <vPortExitCritical>
}
 8005962:	bf00      	nop
 8005964:	3710      	adds	r7, #16
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}

0800596a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800596a:	b580      	push	{r7, lr}
 800596c:	b084      	sub	sp, #16
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005972:	f001 fec1 	bl	80076f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800597a:	2b00      	cmp	r3, #0
 800597c:	d102      	bne.n	8005984 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800597e:	2301      	movs	r3, #1
 8005980:	60fb      	str	r3, [r7, #12]
 8005982:	e001      	b.n	8005988 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005984:	2300      	movs	r3, #0
 8005986:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005988:	f001 fee8 	bl	800775c <vPortExitCritical>

	return xReturn;
 800598c:	68fb      	ldr	r3, [r7, #12]
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b084      	sub	sp, #16
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800599e:	f001 feab 	bl	80076f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d102      	bne.n	80059b4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80059ae:	2301      	movs	r3, #1
 80059b0:	60fb      	str	r3, [r7, #12]
 80059b2:	e001      	b.n	80059b8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80059b4:	2300      	movs	r3, #0
 80059b6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80059b8:	f001 fed0 	bl	800775c <vPortExitCritical>

	return xReturn;
 80059bc:	68fb      	ldr	r3, [r7, #12]
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
	...

080059c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059d2:	2300      	movs	r3, #0
 80059d4:	60fb      	str	r3, [r7, #12]
 80059d6:	e014      	b.n	8005a02 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80059d8:	4a0f      	ldr	r2, [pc, #60]	@ (8005a18 <vQueueAddToRegistry+0x50>)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d10b      	bne.n	80059fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80059e4:	490c      	ldr	r1, [pc, #48]	@ (8005a18 <vQueueAddToRegistry+0x50>)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	683a      	ldr	r2, [r7, #0]
 80059ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80059ee:	4a0a      	ldr	r2, [pc, #40]	@ (8005a18 <vQueueAddToRegistry+0x50>)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	00db      	lsls	r3, r3, #3
 80059f4:	4413      	add	r3, r2
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80059fa:	e006      	b.n	8005a0a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	3301      	adds	r3, #1
 8005a00:	60fb      	str	r3, [r7, #12]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2b07      	cmp	r3, #7
 8005a06:	d9e7      	bls.n	80059d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005a08:	bf00      	nop
 8005a0a:	bf00      	nop
 8005a0c:	3714      	adds	r7, #20
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr
 8005a16:	bf00      	nop
 8005a18:	200006f8 	.word	0x200006f8

08005a1c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b086      	sub	sp, #24
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005a2c:	f001 fe64 	bl	80076f8 <vPortEnterCritical>
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a36:	b25b      	sxtb	r3, r3
 8005a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a3c:	d103      	bne.n	8005a46 <vQueueWaitForMessageRestricted+0x2a>
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a4c:	b25b      	sxtb	r3, r3
 8005a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a52:	d103      	bne.n	8005a5c <vQueueWaitForMessageRestricted+0x40>
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a5c:	f001 fe7e 	bl	800775c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d106      	bne.n	8005a76 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	3324      	adds	r3, #36	@ 0x24
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	68b9      	ldr	r1, [r7, #8]
 8005a70:	4618      	mov	r0, r3
 8005a72:	f000 fcc7 	bl	8006404 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005a76:	6978      	ldr	r0, [r7, #20]
 8005a78:	f7ff ff25 	bl	80058c6 <prvUnlockQueue>
	}
 8005a7c:	bf00      	nop
 8005a7e:	3718      	adds	r7, #24
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b08e      	sub	sp, #56	@ 0x38
 8005a88:	af04      	add	r7, sp, #16
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	607a      	str	r2, [r7, #4]
 8005a90:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005a92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d10b      	bne.n	8005ab0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a9c:	f383 8811 	msr	BASEPRI, r3
 8005aa0:	f3bf 8f6f 	isb	sy
 8005aa4:	f3bf 8f4f 	dsb	sy
 8005aa8:	623b      	str	r3, [r7, #32]
}
 8005aaa:	bf00      	nop
 8005aac:	bf00      	nop
 8005aae:	e7fd      	b.n	8005aac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d10b      	bne.n	8005ace <xTaskCreateStatic+0x4a>
	__asm volatile
 8005ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aba:	f383 8811 	msr	BASEPRI, r3
 8005abe:	f3bf 8f6f 	isb	sy
 8005ac2:	f3bf 8f4f 	dsb	sy
 8005ac6:	61fb      	str	r3, [r7, #28]
}
 8005ac8:	bf00      	nop
 8005aca:	bf00      	nop
 8005acc:	e7fd      	b.n	8005aca <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005ace:	23a0      	movs	r3, #160	@ 0xa0
 8005ad0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	2ba0      	cmp	r3, #160	@ 0xa0
 8005ad6:	d00b      	beq.n	8005af0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005adc:	f383 8811 	msr	BASEPRI, r3
 8005ae0:	f3bf 8f6f 	isb	sy
 8005ae4:	f3bf 8f4f 	dsb	sy
 8005ae8:	61bb      	str	r3, [r7, #24]
}
 8005aea:	bf00      	nop
 8005aec:	bf00      	nop
 8005aee:	e7fd      	b.n	8005aec <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005af0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d01e      	beq.n	8005b36 <xTaskCreateStatic+0xb2>
 8005af8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d01b      	beq.n	8005b36 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b00:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005b06:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005b10:	2300      	movs	r3, #0
 8005b12:	9303      	str	r3, [sp, #12]
 8005b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b16:	9302      	str	r3, [sp, #8]
 8005b18:	f107 0314 	add.w	r3, r7, #20
 8005b1c:	9301      	str	r3, [sp, #4]
 8005b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b20:	9300      	str	r3, [sp, #0]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	68b9      	ldr	r1, [r7, #8]
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f000 f851 	bl	8005bd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b2e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005b30:	f000 f8f6 	bl	8005d20 <prvAddNewTaskToReadyList>
 8005b34:	e001      	b.n	8005b3a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005b36:	2300      	movs	r3, #0
 8005b38:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005b3a:	697b      	ldr	r3, [r7, #20]
	}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3728      	adds	r7, #40	@ 0x28
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b08c      	sub	sp, #48	@ 0x30
 8005b48:	af04      	add	r7, sp, #16
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	603b      	str	r3, [r7, #0]
 8005b50:	4613      	mov	r3, r2
 8005b52:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005b54:	88fb      	ldrh	r3, [r7, #6]
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f001 feef 	bl	800793c <pvPortMalloc>
 8005b5e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00e      	beq.n	8005b84 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005b66:	20a0      	movs	r0, #160	@ 0xa0
 8005b68:	f001 fee8 	bl	800793c <pvPortMalloc>
 8005b6c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d003      	beq.n	8005b7c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	631a      	str	r2, [r3, #48]	@ 0x30
 8005b7a:	e005      	b.n	8005b88 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005b7c:	6978      	ldr	r0, [r7, #20]
 8005b7e:	f001 ffb1 	bl	8007ae4 <vPortFree>
 8005b82:	e001      	b.n	8005b88 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005b84:	2300      	movs	r3, #0
 8005b86:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d017      	beq.n	8005bbe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005b96:	88fa      	ldrh	r2, [r7, #6]
 8005b98:	2300      	movs	r3, #0
 8005b9a:	9303      	str	r3, [sp, #12]
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	9302      	str	r3, [sp, #8]
 8005ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ba2:	9301      	str	r3, [sp, #4]
 8005ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ba6:	9300      	str	r3, [sp, #0]
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	68b9      	ldr	r1, [r7, #8]
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f000 f80f 	bl	8005bd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005bb2:	69f8      	ldr	r0, [r7, #28]
 8005bb4:	f000 f8b4 	bl	8005d20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	61bb      	str	r3, [r7, #24]
 8005bbc:	e002      	b.n	8005bc4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8005bc2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005bc4:	69bb      	ldr	r3, [r7, #24]
	}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3720      	adds	r7, #32
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
	...

08005bd0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b088      	sub	sp, #32
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	607a      	str	r2, [r7, #4]
 8005bdc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005be0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	461a      	mov	r2, r3
 8005be8:	21a5      	movs	r1, #165	@ 0xa5
 8005bea:	f002 f9fe 	bl	8007fea <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	4413      	add	r3, r2
 8005bfe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	f023 0307 	bic.w	r3, r3, #7
 8005c06:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	f003 0307 	and.w	r3, r3, #7
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d00b      	beq.n	8005c2a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c16:	f383 8811 	msr	BASEPRI, r3
 8005c1a:	f3bf 8f6f 	isb	sy
 8005c1e:	f3bf 8f4f 	dsb	sy
 8005c22:	617b      	str	r3, [r7, #20]
}
 8005c24:	bf00      	nop
 8005c26:	bf00      	nop
 8005c28:	e7fd      	b.n	8005c26 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d01f      	beq.n	8005c70 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c30:	2300      	movs	r3, #0
 8005c32:	61fb      	str	r3, [r7, #28]
 8005c34:	e012      	b.n	8005c5c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	7819      	ldrb	r1, [r3, #0]
 8005c3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	4413      	add	r3, r2
 8005c44:	3334      	adds	r3, #52	@ 0x34
 8005c46:	460a      	mov	r2, r1
 8005c48:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005c4a:	68ba      	ldr	r2, [r7, #8]
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	4413      	add	r3, r2
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d006      	beq.n	8005c64 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	61fb      	str	r3, [r7, #28]
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	2b0f      	cmp	r3, #15
 8005c60:	d9e9      	bls.n	8005c36 <prvInitialiseNewTask+0x66>
 8005c62:	e000      	b.n	8005c66 <prvInitialiseNewTask+0x96>
			{
				break;
 8005c64:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c6e:	e003      	b.n	8005c78 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c7a:	2b06      	cmp	r3, #6
 8005c7c:	d901      	bls.n	8005c82 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005c7e:	2306      	movs	r3, #6
 8005c80:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c86:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c8c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c90:	2200      	movs	r2, #0
 8005c92:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c96:	3304      	adds	r3, #4
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7fe fe63 	bl	8004964 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca0:	3318      	adds	r3, #24
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7fe fe5e 	bl	8004964 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005caa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cac:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cb0:	f1c3 0207 	rsb	r2, r3, #7
 8005cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cbc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd0:	334c      	adds	r3, #76	@ 0x4c
 8005cd2:	224c      	movs	r2, #76	@ 0x4c
 8005cd4:	2100      	movs	r1, #0
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f002 f987 	bl	8007fea <memset>
 8005cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cde:	4a0d      	ldr	r2, [pc, #52]	@ (8005d14 <prvInitialiseNewTask+0x144>)
 8005ce0:	651a      	str	r2, [r3, #80]	@ 0x50
 8005ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ce4:	4a0c      	ldr	r2, [pc, #48]	@ (8005d18 <prvInitialiseNewTask+0x148>)
 8005ce6:	655a      	str	r2, [r3, #84]	@ 0x54
 8005ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cea:	4a0c      	ldr	r2, [pc, #48]	@ (8005d1c <prvInitialiseNewTask+0x14c>)
 8005cec:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005cee:	683a      	ldr	r2, [r7, #0]
 8005cf0:	68f9      	ldr	r1, [r7, #12]
 8005cf2:	69b8      	ldr	r0, [r7, #24]
 8005cf4:	f001 fbcc 	bl	8007490 <pxPortInitialiseStack>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cfc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d002      	beq.n	8005d0a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d0a:	bf00      	nop
 8005d0c:	3720      	adds	r7, #32
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	200045b0 	.word	0x200045b0
 8005d18:	20004618 	.word	0x20004618
 8005d1c:	20004680 	.word	0x20004680

08005d20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b082      	sub	sp, #8
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005d28:	f001 fce6 	bl	80076f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005d2c:	4b2a      	ldr	r3, [pc, #168]	@ (8005dd8 <prvAddNewTaskToReadyList+0xb8>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	3301      	adds	r3, #1
 8005d32:	4a29      	ldr	r2, [pc, #164]	@ (8005dd8 <prvAddNewTaskToReadyList+0xb8>)
 8005d34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005d36:	4b29      	ldr	r3, [pc, #164]	@ (8005ddc <prvAddNewTaskToReadyList+0xbc>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d109      	bne.n	8005d52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005d3e:	4a27      	ldr	r2, [pc, #156]	@ (8005ddc <prvAddNewTaskToReadyList+0xbc>)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d44:	4b24      	ldr	r3, [pc, #144]	@ (8005dd8 <prvAddNewTaskToReadyList+0xb8>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d110      	bne.n	8005d6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005d4c:	f000 fcec 	bl	8006728 <prvInitialiseTaskLists>
 8005d50:	e00d      	b.n	8005d6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005d52:	4b23      	ldr	r3, [pc, #140]	@ (8005de0 <prvAddNewTaskToReadyList+0xc0>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d109      	bne.n	8005d6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005d5a:	4b20      	ldr	r3, [pc, #128]	@ (8005ddc <prvAddNewTaskToReadyList+0xbc>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d802      	bhi.n	8005d6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005d68:	4a1c      	ldr	r2, [pc, #112]	@ (8005ddc <prvAddNewTaskToReadyList+0xbc>)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005d6e:	4b1d      	ldr	r3, [pc, #116]	@ (8005de4 <prvAddNewTaskToReadyList+0xc4>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	3301      	adds	r3, #1
 8005d74:	4a1b      	ldr	r2, [pc, #108]	@ (8005de4 <prvAddNewTaskToReadyList+0xc4>)
 8005d76:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	409a      	lsls	r2, r3
 8005d80:	4b19      	ldr	r3, [pc, #100]	@ (8005de8 <prvAddNewTaskToReadyList+0xc8>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	4a18      	ldr	r2, [pc, #96]	@ (8005de8 <prvAddNewTaskToReadyList+0xc8>)
 8005d88:	6013      	str	r3, [r2, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d8e:	4613      	mov	r3, r2
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	4413      	add	r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4a15      	ldr	r2, [pc, #84]	@ (8005dec <prvAddNewTaskToReadyList+0xcc>)
 8005d98:	441a      	add	r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	3304      	adds	r3, #4
 8005d9e:	4619      	mov	r1, r3
 8005da0:	4610      	mov	r0, r2
 8005da2:	f7fe fdec 	bl	800497e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005da6:	f001 fcd9 	bl	800775c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005daa:	4b0d      	ldr	r3, [pc, #52]	@ (8005de0 <prvAddNewTaskToReadyList+0xc0>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00e      	beq.n	8005dd0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005db2:	4b0a      	ldr	r3, [pc, #40]	@ (8005ddc <prvAddNewTaskToReadyList+0xbc>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d207      	bcs.n	8005dd0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8005df0 <prvAddNewTaskToReadyList+0xd0>)
 8005dc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dc6:	601a      	str	r2, [r3, #0]
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005dd0:	bf00      	nop
 8005dd2:	3708      	adds	r7, #8
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	20000838 	.word	0x20000838
 8005ddc:	20000738 	.word	0x20000738
 8005de0:	20000844 	.word	0x20000844
 8005de4:	20000854 	.word	0x20000854
 8005de8:	20000840 	.word	0x20000840
 8005dec:	2000073c 	.word	0x2000073c
 8005df0:	e000ed04 	.word	0xe000ed04

08005df4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d018      	beq.n	8005e38 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005e06:	4b14      	ldr	r3, [pc, #80]	@ (8005e58 <vTaskDelay+0x64>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00b      	beq.n	8005e26 <vTaskDelay+0x32>
	__asm volatile
 8005e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e12:	f383 8811 	msr	BASEPRI, r3
 8005e16:	f3bf 8f6f 	isb	sy
 8005e1a:	f3bf 8f4f 	dsb	sy
 8005e1e:	60bb      	str	r3, [r7, #8]
}
 8005e20:	bf00      	nop
 8005e22:	bf00      	nop
 8005e24:	e7fd      	b.n	8005e22 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005e26:	f000 f88b 	bl	8005f40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005e2a:	2100      	movs	r1, #0
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 ff4f 	bl	8006cd0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005e32:	f000 f893 	bl	8005f5c <xTaskResumeAll>
 8005e36:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d107      	bne.n	8005e4e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005e3e:	4b07      	ldr	r3, [pc, #28]	@ (8005e5c <vTaskDelay+0x68>)
 8005e40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e44:	601a      	str	r2, [r3, #0]
 8005e46:	f3bf 8f4f 	dsb	sy
 8005e4a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e4e:	bf00      	nop
 8005e50:	3710      	adds	r7, #16
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	20000860 	.word	0x20000860
 8005e5c:	e000ed04 	.word	0xe000ed04

08005e60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b08a      	sub	sp, #40	@ 0x28
 8005e64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005e66:	2300      	movs	r3, #0
 8005e68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005e6e:	463a      	mov	r2, r7
 8005e70:	1d39      	adds	r1, r7, #4
 8005e72:	f107 0308 	add.w	r3, r7, #8
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7fa fb82 	bl	8000580 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005e7c:	6839      	ldr	r1, [r7, #0]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	68ba      	ldr	r2, [r7, #8]
 8005e82:	9202      	str	r2, [sp, #8]
 8005e84:	9301      	str	r3, [sp, #4]
 8005e86:	2300      	movs	r3, #0
 8005e88:	9300      	str	r3, [sp, #0]
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	460a      	mov	r2, r1
 8005e8e:	4924      	ldr	r1, [pc, #144]	@ (8005f20 <vTaskStartScheduler+0xc0>)
 8005e90:	4824      	ldr	r0, [pc, #144]	@ (8005f24 <vTaskStartScheduler+0xc4>)
 8005e92:	f7ff fdf7 	bl	8005a84 <xTaskCreateStatic>
 8005e96:	4603      	mov	r3, r0
 8005e98:	4a23      	ldr	r2, [pc, #140]	@ (8005f28 <vTaskStartScheduler+0xc8>)
 8005e9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005e9c:	4b22      	ldr	r3, [pc, #136]	@ (8005f28 <vTaskStartScheduler+0xc8>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d002      	beq.n	8005eaa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	617b      	str	r3, [r7, #20]
 8005ea8:	e001      	b.n	8005eae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d102      	bne.n	8005eba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005eb4:	f000 ff72 	bl	8006d9c <xTimerCreateTimerTask>
 8005eb8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d11b      	bne.n	8005ef8 <vTaskStartScheduler+0x98>
	__asm volatile
 8005ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec4:	f383 8811 	msr	BASEPRI, r3
 8005ec8:	f3bf 8f6f 	isb	sy
 8005ecc:	f3bf 8f4f 	dsb	sy
 8005ed0:	613b      	str	r3, [r7, #16]
}
 8005ed2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005ed4:	4b15      	ldr	r3, [pc, #84]	@ (8005f2c <vTaskStartScheduler+0xcc>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	334c      	adds	r3, #76	@ 0x4c
 8005eda:	4a15      	ldr	r2, [pc, #84]	@ (8005f30 <vTaskStartScheduler+0xd0>)
 8005edc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005ede:	4b15      	ldr	r3, [pc, #84]	@ (8005f34 <vTaskStartScheduler+0xd4>)
 8005ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ee4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005ee6:	4b14      	ldr	r3, [pc, #80]	@ (8005f38 <vTaskStartScheduler+0xd8>)
 8005ee8:	2201      	movs	r2, #1
 8005eea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005eec:	4b13      	ldr	r3, [pc, #76]	@ (8005f3c <vTaskStartScheduler+0xdc>)
 8005eee:	2200      	movs	r2, #0
 8005ef0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005ef2:	f001 fb5d 	bl	80075b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005ef6:	e00f      	b.n	8005f18 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005efe:	d10b      	bne.n	8005f18 <vTaskStartScheduler+0xb8>
	__asm volatile
 8005f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f04:	f383 8811 	msr	BASEPRI, r3
 8005f08:	f3bf 8f6f 	isb	sy
 8005f0c:	f3bf 8f4f 	dsb	sy
 8005f10:	60fb      	str	r3, [r7, #12]
}
 8005f12:	bf00      	nop
 8005f14:	bf00      	nop
 8005f16:	e7fd      	b.n	8005f14 <vTaskStartScheduler+0xb4>
}
 8005f18:	bf00      	nop
 8005f1a:	3718      	adds	r7, #24
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	080094c0 	.word	0x080094c0
 8005f24:	080066f9 	.word	0x080066f9
 8005f28:	2000085c 	.word	0x2000085c
 8005f2c:	20000738 	.word	0x20000738
 8005f30:	2000001c 	.word	0x2000001c
 8005f34:	20000858 	.word	0x20000858
 8005f38:	20000844 	.word	0x20000844
 8005f3c:	2000083c 	.word	0x2000083c

08005f40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005f40:	b480      	push	{r7}
 8005f42:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005f44:	4b04      	ldr	r3, [pc, #16]	@ (8005f58 <vTaskSuspendAll+0x18>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	3301      	adds	r3, #1
 8005f4a:	4a03      	ldr	r2, [pc, #12]	@ (8005f58 <vTaskSuspendAll+0x18>)
 8005f4c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005f4e:	bf00      	nop
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr
 8005f58:	20000860 	.word	0x20000860

08005f5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f62:	2300      	movs	r3, #0
 8005f64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f66:	2300      	movs	r3, #0
 8005f68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005f6a:	4b42      	ldr	r3, [pc, #264]	@ (8006074 <xTaskResumeAll+0x118>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d10b      	bne.n	8005f8a <xTaskResumeAll+0x2e>
	__asm volatile
 8005f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f76:	f383 8811 	msr	BASEPRI, r3
 8005f7a:	f3bf 8f6f 	isb	sy
 8005f7e:	f3bf 8f4f 	dsb	sy
 8005f82:	603b      	str	r3, [r7, #0]
}
 8005f84:	bf00      	nop
 8005f86:	bf00      	nop
 8005f88:	e7fd      	b.n	8005f86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005f8a:	f001 fbb5 	bl	80076f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005f8e:	4b39      	ldr	r3, [pc, #228]	@ (8006074 <xTaskResumeAll+0x118>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	3b01      	subs	r3, #1
 8005f94:	4a37      	ldr	r2, [pc, #220]	@ (8006074 <xTaskResumeAll+0x118>)
 8005f96:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f98:	4b36      	ldr	r3, [pc, #216]	@ (8006074 <xTaskResumeAll+0x118>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d161      	bne.n	8006064 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005fa0:	4b35      	ldr	r3, [pc, #212]	@ (8006078 <xTaskResumeAll+0x11c>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d05d      	beq.n	8006064 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fa8:	e02e      	b.n	8006008 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005faa:	4b34      	ldr	r3, [pc, #208]	@ (800607c <xTaskResumeAll+0x120>)
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	3318      	adds	r3, #24
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f7fe fd3e 	bl	8004a38 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	3304      	adds	r3, #4
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7fe fd39 	bl	8004a38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fca:	2201      	movs	r2, #1
 8005fcc:	409a      	lsls	r2, r3
 8005fce:	4b2c      	ldr	r3, [pc, #176]	@ (8006080 <xTaskResumeAll+0x124>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	4a2a      	ldr	r2, [pc, #168]	@ (8006080 <xTaskResumeAll+0x124>)
 8005fd6:	6013      	str	r3, [r2, #0]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fdc:	4613      	mov	r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	4a27      	ldr	r2, [pc, #156]	@ (8006084 <xTaskResumeAll+0x128>)
 8005fe6:	441a      	add	r2, r3
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	3304      	adds	r3, #4
 8005fec:	4619      	mov	r1, r3
 8005fee:	4610      	mov	r0, r2
 8005ff0:	f7fe fcc5 	bl	800497e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ff8:	4b23      	ldr	r3, [pc, #140]	@ (8006088 <xTaskResumeAll+0x12c>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d302      	bcc.n	8006008 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006002:	4b22      	ldr	r3, [pc, #136]	@ (800608c <xTaskResumeAll+0x130>)
 8006004:	2201      	movs	r2, #1
 8006006:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006008:	4b1c      	ldr	r3, [pc, #112]	@ (800607c <xTaskResumeAll+0x120>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1cc      	bne.n	8005faa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d001      	beq.n	800601a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006016:	f000 fc63 	bl	80068e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800601a:	4b1d      	ldr	r3, [pc, #116]	@ (8006090 <xTaskResumeAll+0x134>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d010      	beq.n	8006048 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006026:	f000 f847 	bl	80060b8 <xTaskIncrementTick>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d002      	beq.n	8006036 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006030:	4b16      	ldr	r3, [pc, #88]	@ (800608c <xTaskResumeAll+0x130>)
 8006032:	2201      	movs	r2, #1
 8006034:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	3b01      	subs	r3, #1
 800603a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1f1      	bne.n	8006026 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006042:	4b13      	ldr	r3, [pc, #76]	@ (8006090 <xTaskResumeAll+0x134>)
 8006044:	2200      	movs	r2, #0
 8006046:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006048:	4b10      	ldr	r3, [pc, #64]	@ (800608c <xTaskResumeAll+0x130>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d009      	beq.n	8006064 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006050:	2301      	movs	r3, #1
 8006052:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006054:	4b0f      	ldr	r3, [pc, #60]	@ (8006094 <xTaskResumeAll+0x138>)
 8006056:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800605a:	601a      	str	r2, [r3, #0]
 800605c:	f3bf 8f4f 	dsb	sy
 8006060:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006064:	f001 fb7a 	bl	800775c <vPortExitCritical>

	return xAlreadyYielded;
 8006068:	68bb      	ldr	r3, [r7, #8]
}
 800606a:	4618      	mov	r0, r3
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	20000860 	.word	0x20000860
 8006078:	20000838 	.word	0x20000838
 800607c:	200007f8 	.word	0x200007f8
 8006080:	20000840 	.word	0x20000840
 8006084:	2000073c 	.word	0x2000073c
 8006088:	20000738 	.word	0x20000738
 800608c:	2000084c 	.word	0x2000084c
 8006090:	20000848 	.word	0x20000848
 8006094:	e000ed04 	.word	0xe000ed04

08006098 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800609e:	4b05      	ldr	r3, [pc, #20]	@ (80060b4 <xTaskGetTickCount+0x1c>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80060a4:	687b      	ldr	r3, [r7, #4]
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	370c      	adds	r7, #12
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	2000083c 	.word	0x2000083c

080060b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b086      	sub	sp, #24
 80060bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80060be:	2300      	movs	r3, #0
 80060c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060c2:	4b4f      	ldr	r3, [pc, #316]	@ (8006200 <xTaskIncrementTick+0x148>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	f040 808f 	bne.w	80061ea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80060cc:	4b4d      	ldr	r3, [pc, #308]	@ (8006204 <xTaskIncrementTick+0x14c>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	3301      	adds	r3, #1
 80060d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80060d4:	4a4b      	ldr	r2, [pc, #300]	@ (8006204 <xTaskIncrementTick+0x14c>)
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d121      	bne.n	8006124 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80060e0:	4b49      	ldr	r3, [pc, #292]	@ (8006208 <xTaskIncrementTick+0x150>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00b      	beq.n	8006102 <xTaskIncrementTick+0x4a>
	__asm volatile
 80060ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ee:	f383 8811 	msr	BASEPRI, r3
 80060f2:	f3bf 8f6f 	isb	sy
 80060f6:	f3bf 8f4f 	dsb	sy
 80060fa:	603b      	str	r3, [r7, #0]
}
 80060fc:	bf00      	nop
 80060fe:	bf00      	nop
 8006100:	e7fd      	b.n	80060fe <xTaskIncrementTick+0x46>
 8006102:	4b41      	ldr	r3, [pc, #260]	@ (8006208 <xTaskIncrementTick+0x150>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	60fb      	str	r3, [r7, #12]
 8006108:	4b40      	ldr	r3, [pc, #256]	@ (800620c <xTaskIncrementTick+0x154>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a3e      	ldr	r2, [pc, #248]	@ (8006208 <xTaskIncrementTick+0x150>)
 800610e:	6013      	str	r3, [r2, #0]
 8006110:	4a3e      	ldr	r2, [pc, #248]	@ (800620c <xTaskIncrementTick+0x154>)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6013      	str	r3, [r2, #0]
 8006116:	4b3e      	ldr	r3, [pc, #248]	@ (8006210 <xTaskIncrementTick+0x158>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	3301      	adds	r3, #1
 800611c:	4a3c      	ldr	r2, [pc, #240]	@ (8006210 <xTaskIncrementTick+0x158>)
 800611e:	6013      	str	r3, [r2, #0]
 8006120:	f000 fbde 	bl	80068e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006124:	4b3b      	ldr	r3, [pc, #236]	@ (8006214 <xTaskIncrementTick+0x15c>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	429a      	cmp	r2, r3
 800612c:	d348      	bcc.n	80061c0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800612e:	4b36      	ldr	r3, [pc, #216]	@ (8006208 <xTaskIncrementTick+0x150>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d104      	bne.n	8006142 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006138:	4b36      	ldr	r3, [pc, #216]	@ (8006214 <xTaskIncrementTick+0x15c>)
 800613a:	f04f 32ff 	mov.w	r2, #4294967295
 800613e:	601a      	str	r2, [r3, #0]
					break;
 8006140:	e03e      	b.n	80061c0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006142:	4b31      	ldr	r3, [pc, #196]	@ (8006208 <xTaskIncrementTick+0x150>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	429a      	cmp	r2, r3
 8006158:	d203      	bcs.n	8006162 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800615a:	4a2e      	ldr	r2, [pc, #184]	@ (8006214 <xTaskIncrementTick+0x15c>)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006160:	e02e      	b.n	80061c0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	3304      	adds	r3, #4
 8006166:	4618      	mov	r0, r3
 8006168:	f7fe fc66 	bl	8004a38 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006170:	2b00      	cmp	r3, #0
 8006172:	d004      	beq.n	800617e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	3318      	adds	r3, #24
 8006178:	4618      	mov	r0, r3
 800617a:	f7fe fc5d 	bl	8004a38 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006182:	2201      	movs	r2, #1
 8006184:	409a      	lsls	r2, r3
 8006186:	4b24      	ldr	r3, [pc, #144]	@ (8006218 <xTaskIncrementTick+0x160>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4313      	orrs	r3, r2
 800618c:	4a22      	ldr	r2, [pc, #136]	@ (8006218 <xTaskIncrementTick+0x160>)
 800618e:	6013      	str	r3, [r2, #0]
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006194:	4613      	mov	r3, r2
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4413      	add	r3, r2
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	4a1f      	ldr	r2, [pc, #124]	@ (800621c <xTaskIncrementTick+0x164>)
 800619e:	441a      	add	r2, r3
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	3304      	adds	r3, #4
 80061a4:	4619      	mov	r1, r3
 80061a6:	4610      	mov	r0, r2
 80061a8:	f7fe fbe9 	bl	800497e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061b0:	4b1b      	ldr	r3, [pc, #108]	@ (8006220 <xTaskIncrementTick+0x168>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d3b9      	bcc.n	800612e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80061ba:	2301      	movs	r3, #1
 80061bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061be:	e7b6      	b.n	800612e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80061c0:	4b17      	ldr	r3, [pc, #92]	@ (8006220 <xTaskIncrementTick+0x168>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061c6:	4915      	ldr	r1, [pc, #84]	@ (800621c <xTaskIncrementTick+0x164>)
 80061c8:	4613      	mov	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	4413      	add	r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	440b      	add	r3, r1
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d901      	bls.n	80061dc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80061d8:	2301      	movs	r3, #1
 80061da:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80061dc:	4b11      	ldr	r3, [pc, #68]	@ (8006224 <xTaskIncrementTick+0x16c>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d007      	beq.n	80061f4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80061e4:	2301      	movs	r3, #1
 80061e6:	617b      	str	r3, [r7, #20]
 80061e8:	e004      	b.n	80061f4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80061ea:	4b0f      	ldr	r3, [pc, #60]	@ (8006228 <xTaskIncrementTick+0x170>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	3301      	adds	r3, #1
 80061f0:	4a0d      	ldr	r2, [pc, #52]	@ (8006228 <xTaskIncrementTick+0x170>)
 80061f2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80061f4:	697b      	ldr	r3, [r7, #20]
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3718      	adds	r7, #24
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	20000860 	.word	0x20000860
 8006204:	2000083c 	.word	0x2000083c
 8006208:	200007f0 	.word	0x200007f0
 800620c:	200007f4 	.word	0x200007f4
 8006210:	20000850 	.word	0x20000850
 8006214:	20000858 	.word	0x20000858
 8006218:	20000840 	.word	0x20000840
 800621c:	2000073c 	.word	0x2000073c
 8006220:	20000738 	.word	0x20000738
 8006224:	2000084c 	.word	0x2000084c
 8006228:	20000848 	.word	0x20000848

0800622c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b088      	sub	sp, #32
 8006230:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006232:	4b3c      	ldr	r3, [pc, #240]	@ (8006324 <vTaskSwitchContext+0xf8>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d003      	beq.n	8006242 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800623a:	4b3b      	ldr	r3, [pc, #236]	@ (8006328 <vTaskSwitchContext+0xfc>)
 800623c:	2201      	movs	r2, #1
 800623e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006240:	e06c      	b.n	800631c <vTaskSwitchContext+0xf0>
		xYieldPending = pdFALSE;
 8006242:	4b39      	ldr	r3, [pc, #228]	@ (8006328 <vTaskSwitchContext+0xfc>)
 8006244:	2200      	movs	r2, #0
 8006246:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8006248:	4b38      	ldr	r3, [pc, #224]	@ (800632c <vTaskSwitchContext+0x100>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800624e:	61fb      	str	r3, [r7, #28]
 8006250:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8006254:	61bb      	str	r3, [r7, #24]
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	69ba      	ldr	r2, [r7, #24]
 800625c:	429a      	cmp	r2, r3
 800625e:	d111      	bne.n	8006284 <vTaskSwitchContext+0x58>
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	3304      	adds	r3, #4
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	69ba      	ldr	r2, [r7, #24]
 8006268:	429a      	cmp	r2, r3
 800626a:	d10b      	bne.n	8006284 <vTaskSwitchContext+0x58>
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	3308      	adds	r3, #8
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	69ba      	ldr	r2, [r7, #24]
 8006274:	429a      	cmp	r2, r3
 8006276:	d105      	bne.n	8006284 <vTaskSwitchContext+0x58>
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	330c      	adds	r3, #12
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	69ba      	ldr	r2, [r7, #24]
 8006280:	429a      	cmp	r2, r3
 8006282:	d008      	beq.n	8006296 <vTaskSwitchContext+0x6a>
 8006284:	4b29      	ldr	r3, [pc, #164]	@ (800632c <vTaskSwitchContext+0x100>)
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	4b28      	ldr	r3, [pc, #160]	@ (800632c <vTaskSwitchContext+0x100>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	3334      	adds	r3, #52	@ 0x34
 800628e:	4619      	mov	r1, r3
 8006290:	4610      	mov	r0, r2
 8006292:	f7fa fbed 	bl	8000a70 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006296:	4b26      	ldr	r3, [pc, #152]	@ (8006330 <vTaskSwitchContext+0x104>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	fab3 f383 	clz	r3, r3
 80062a2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80062a4:	7afb      	ldrb	r3, [r7, #11]
 80062a6:	f1c3 031f 	rsb	r3, r3, #31
 80062aa:	617b      	str	r3, [r7, #20]
 80062ac:	4921      	ldr	r1, [pc, #132]	@ (8006334 <vTaskSwitchContext+0x108>)
 80062ae:	697a      	ldr	r2, [r7, #20]
 80062b0:	4613      	mov	r3, r2
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	4413      	add	r3, r2
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	440b      	add	r3, r1
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d10b      	bne.n	80062d8 <vTaskSwitchContext+0xac>
	__asm volatile
 80062c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062c4:	f383 8811 	msr	BASEPRI, r3
 80062c8:	f3bf 8f6f 	isb	sy
 80062cc:	f3bf 8f4f 	dsb	sy
 80062d0:	607b      	str	r3, [r7, #4]
}
 80062d2:	bf00      	nop
 80062d4:	bf00      	nop
 80062d6:	e7fd      	b.n	80062d4 <vTaskSwitchContext+0xa8>
 80062d8:	697a      	ldr	r2, [r7, #20]
 80062da:	4613      	mov	r3, r2
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	4413      	add	r3, r2
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4a14      	ldr	r2, [pc, #80]	@ (8006334 <vTaskSwitchContext+0x108>)
 80062e4:	4413      	add	r3, r2
 80062e6:	613b      	str	r3, [r7, #16]
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	685a      	ldr	r2, [r3, #4]
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	605a      	str	r2, [r3, #4]
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	685a      	ldr	r2, [r3, #4]
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	3308      	adds	r3, #8
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d104      	bne.n	8006308 <vTaskSwitchContext+0xdc>
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	685a      	ldr	r2, [r3, #4]
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	605a      	str	r2, [r3, #4]
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	4a07      	ldr	r2, [pc, #28]	@ (800632c <vTaskSwitchContext+0x100>)
 8006310:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006312:	4b06      	ldr	r3, [pc, #24]	@ (800632c <vTaskSwitchContext+0x100>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	334c      	adds	r3, #76	@ 0x4c
 8006318:	4a07      	ldr	r2, [pc, #28]	@ (8006338 <vTaskSwitchContext+0x10c>)
 800631a:	6013      	str	r3, [r2, #0]
}
 800631c:	bf00      	nop
 800631e:	3720      	adds	r7, #32
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	20000860 	.word	0x20000860
 8006328:	2000084c 	.word	0x2000084c
 800632c:	20000738 	.word	0x20000738
 8006330:	20000840 	.word	0x20000840
 8006334:	2000073c 	.word	0x2000073c
 8006338:	2000001c 	.word	0x2000001c

0800633c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d10b      	bne.n	8006364 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800634c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006350:	f383 8811 	msr	BASEPRI, r3
 8006354:	f3bf 8f6f 	isb	sy
 8006358:	f3bf 8f4f 	dsb	sy
 800635c:	60fb      	str	r3, [r7, #12]
}
 800635e:	bf00      	nop
 8006360:	bf00      	nop
 8006362:	e7fd      	b.n	8006360 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006364:	4b07      	ldr	r3, [pc, #28]	@ (8006384 <vTaskPlaceOnEventList+0x48>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	3318      	adds	r3, #24
 800636a:	4619      	mov	r1, r3
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f7fe fb2a 	bl	80049c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006372:	2101      	movs	r1, #1
 8006374:	6838      	ldr	r0, [r7, #0]
 8006376:	f000 fcab 	bl	8006cd0 <prvAddCurrentTaskToDelayedList>
}
 800637a:	bf00      	nop
 800637c:	3710      	adds	r7, #16
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	20000738 	.word	0x20000738

08006388 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b086      	sub	sp, #24
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d10b      	bne.n	80063b2 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 800639a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800639e:	f383 8811 	msr	BASEPRI, r3
 80063a2:	f3bf 8f6f 	isb	sy
 80063a6:	f3bf 8f4f 	dsb	sy
 80063aa:	617b      	str	r3, [r7, #20]
}
 80063ac:	bf00      	nop
 80063ae:	bf00      	nop
 80063b0:	e7fd      	b.n	80063ae <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80063b2:	4b12      	ldr	r3, [pc, #72]	@ (80063fc <vTaskPlaceOnUnorderedEventList+0x74>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d10b      	bne.n	80063d2 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 80063ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063be:	f383 8811 	msr	BASEPRI, r3
 80063c2:	f3bf 8f6f 	isb	sy
 80063c6:	f3bf 8f4f 	dsb	sy
 80063ca:	613b      	str	r3, [r7, #16]
}
 80063cc:	bf00      	nop
 80063ce:	bf00      	nop
 80063d0:	e7fd      	b.n	80063ce <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80063d2:	4b0b      	ldr	r3, [pc, #44]	@ (8006400 <vTaskPlaceOnUnorderedEventList+0x78>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80063dc:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80063de:	4b08      	ldr	r3, [pc, #32]	@ (8006400 <vTaskPlaceOnUnorderedEventList+0x78>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	3318      	adds	r3, #24
 80063e4:	4619      	mov	r1, r3
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f7fe fac9 	bl	800497e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80063ec:	2101      	movs	r1, #1
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 fc6e 	bl	8006cd0 <prvAddCurrentTaskToDelayedList>
}
 80063f4:	bf00      	nop
 80063f6:	3718      	adds	r7, #24
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	20000860 	.word	0x20000860
 8006400:	20000738 	.word	0x20000738

08006404 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006404:	b580      	push	{r7, lr}
 8006406:	b086      	sub	sp, #24
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d10b      	bne.n	800642e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800641a:	f383 8811 	msr	BASEPRI, r3
 800641e:	f3bf 8f6f 	isb	sy
 8006422:	f3bf 8f4f 	dsb	sy
 8006426:	617b      	str	r3, [r7, #20]
}
 8006428:	bf00      	nop
 800642a:	bf00      	nop
 800642c:	e7fd      	b.n	800642a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800642e:	4b0a      	ldr	r3, [pc, #40]	@ (8006458 <vTaskPlaceOnEventListRestricted+0x54>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	3318      	adds	r3, #24
 8006434:	4619      	mov	r1, r3
 8006436:	68f8      	ldr	r0, [r7, #12]
 8006438:	f7fe faa1 	bl	800497e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d002      	beq.n	8006448 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006442:	f04f 33ff 	mov.w	r3, #4294967295
 8006446:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006448:	6879      	ldr	r1, [r7, #4]
 800644a:	68b8      	ldr	r0, [r7, #8]
 800644c:	f000 fc40 	bl	8006cd0 <prvAddCurrentTaskToDelayedList>
	}
 8006450:	bf00      	nop
 8006452:	3718      	adds	r7, #24
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}
 8006458:	20000738 	.word	0x20000738

0800645c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b086      	sub	sp, #24
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10b      	bne.n	800648a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006476:	f383 8811 	msr	BASEPRI, r3
 800647a:	f3bf 8f6f 	isb	sy
 800647e:	f3bf 8f4f 	dsb	sy
 8006482:	60fb      	str	r3, [r7, #12]
}
 8006484:	bf00      	nop
 8006486:	bf00      	nop
 8006488:	e7fd      	b.n	8006486 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	3318      	adds	r3, #24
 800648e:	4618      	mov	r0, r3
 8006490:	f7fe fad2 	bl	8004a38 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006494:	4b1d      	ldr	r3, [pc, #116]	@ (800650c <xTaskRemoveFromEventList+0xb0>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d11c      	bne.n	80064d6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	3304      	adds	r3, #4
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7fe fac9 	bl	8004a38 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064aa:	2201      	movs	r2, #1
 80064ac:	409a      	lsls	r2, r3
 80064ae:	4b18      	ldr	r3, [pc, #96]	@ (8006510 <xTaskRemoveFromEventList+0xb4>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	4a16      	ldr	r2, [pc, #88]	@ (8006510 <xTaskRemoveFromEventList+0xb4>)
 80064b6:	6013      	str	r3, [r2, #0]
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064bc:	4613      	mov	r3, r2
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	4413      	add	r3, r2
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	4a13      	ldr	r2, [pc, #76]	@ (8006514 <xTaskRemoveFromEventList+0xb8>)
 80064c6:	441a      	add	r2, r3
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	3304      	adds	r3, #4
 80064cc:	4619      	mov	r1, r3
 80064ce:	4610      	mov	r0, r2
 80064d0:	f7fe fa55 	bl	800497e <vListInsertEnd>
 80064d4:	e005      	b.n	80064e2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	3318      	adds	r3, #24
 80064da:	4619      	mov	r1, r3
 80064dc:	480e      	ldr	r0, [pc, #56]	@ (8006518 <xTaskRemoveFromEventList+0xbc>)
 80064de:	f7fe fa4e 	bl	800497e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064e6:	4b0d      	ldr	r3, [pc, #52]	@ (800651c <xTaskRemoveFromEventList+0xc0>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d905      	bls.n	80064fc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80064f0:	2301      	movs	r3, #1
 80064f2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80064f4:	4b0a      	ldr	r3, [pc, #40]	@ (8006520 <xTaskRemoveFromEventList+0xc4>)
 80064f6:	2201      	movs	r2, #1
 80064f8:	601a      	str	r2, [r3, #0]
 80064fa:	e001      	b.n	8006500 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80064fc:	2300      	movs	r3, #0
 80064fe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006500:	697b      	ldr	r3, [r7, #20]
}
 8006502:	4618      	mov	r0, r3
 8006504:	3718      	adds	r7, #24
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	20000860 	.word	0x20000860
 8006510:	20000840 	.word	0x20000840
 8006514:	2000073c 	.word	0x2000073c
 8006518:	200007f8 	.word	0x200007f8
 800651c:	20000738 	.word	0x20000738
 8006520:	2000084c 	.word	0x2000084c

08006524 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b086      	sub	sp, #24
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800652e:	4b2a      	ldr	r3, [pc, #168]	@ (80065d8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d10b      	bne.n	800654e <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 8006536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800653a:	f383 8811 	msr	BASEPRI, r3
 800653e:	f3bf 8f6f 	isb	sy
 8006542:	f3bf 8f4f 	dsb	sy
 8006546:	613b      	str	r3, [r7, #16]
}
 8006548:	bf00      	nop
 800654a:	bf00      	nop
 800654c:	e7fd      	b.n	800654a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d10b      	bne.n	800657c <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 8006564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006568:	f383 8811 	msr	BASEPRI, r3
 800656c:	f3bf 8f6f 	isb	sy
 8006570:	f3bf 8f4f 	dsb	sy
 8006574:	60fb      	str	r3, [r7, #12]
}
 8006576:	bf00      	nop
 8006578:	bf00      	nop
 800657a:	e7fd      	b.n	8006578 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f7fe fa5b 	bl	8004a38 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	3304      	adds	r3, #4
 8006586:	4618      	mov	r0, r3
 8006588:	f7fe fa56 	bl	8004a38 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006590:	2201      	movs	r2, #1
 8006592:	409a      	lsls	r2, r3
 8006594:	4b11      	ldr	r3, [pc, #68]	@ (80065dc <vTaskRemoveFromUnorderedEventList+0xb8>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4313      	orrs	r3, r2
 800659a:	4a10      	ldr	r2, [pc, #64]	@ (80065dc <vTaskRemoveFromUnorderedEventList+0xb8>)
 800659c:	6013      	str	r3, [r2, #0]
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065a2:	4613      	mov	r3, r2
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	4413      	add	r3, r2
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	4a0d      	ldr	r2, [pc, #52]	@ (80065e0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80065ac:	441a      	add	r2, r3
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	3304      	adds	r3, #4
 80065b2:	4619      	mov	r1, r3
 80065b4:	4610      	mov	r0, r2
 80065b6:	f7fe f9e2 	bl	800497e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065be:	4b09      	ldr	r3, [pc, #36]	@ (80065e4 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d902      	bls.n	80065ce <vTaskRemoveFromUnorderedEventList+0xaa>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80065c8:	4b07      	ldr	r3, [pc, #28]	@ (80065e8 <vTaskRemoveFromUnorderedEventList+0xc4>)
 80065ca:	2201      	movs	r2, #1
 80065cc:	601a      	str	r2, [r3, #0]
	}
}
 80065ce:	bf00      	nop
 80065d0:	3718      	adds	r7, #24
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	20000860 	.word	0x20000860
 80065dc:	20000840 	.word	0x20000840
 80065e0:	2000073c 	.word	0x2000073c
 80065e4:	20000738 	.word	0x20000738
 80065e8:	2000084c 	.word	0x2000084c

080065ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80065f4:	4b06      	ldr	r3, [pc, #24]	@ (8006610 <vTaskInternalSetTimeOutState+0x24>)
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80065fc:	4b05      	ldr	r3, [pc, #20]	@ (8006614 <vTaskInternalSetTimeOutState+0x28>)
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	605a      	str	r2, [r3, #4]
}
 8006604:	bf00      	nop
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr
 8006610:	20000850 	.word	0x20000850
 8006614:	2000083c 	.word	0x2000083c

08006618 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b088      	sub	sp, #32
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d10b      	bne.n	8006640 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800662c:	f383 8811 	msr	BASEPRI, r3
 8006630:	f3bf 8f6f 	isb	sy
 8006634:	f3bf 8f4f 	dsb	sy
 8006638:	613b      	str	r3, [r7, #16]
}
 800663a:	bf00      	nop
 800663c:	bf00      	nop
 800663e:	e7fd      	b.n	800663c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d10b      	bne.n	800665e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800664a:	f383 8811 	msr	BASEPRI, r3
 800664e:	f3bf 8f6f 	isb	sy
 8006652:	f3bf 8f4f 	dsb	sy
 8006656:	60fb      	str	r3, [r7, #12]
}
 8006658:	bf00      	nop
 800665a:	bf00      	nop
 800665c:	e7fd      	b.n	800665a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800665e:	f001 f84b 	bl	80076f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006662:	4b1d      	ldr	r3, [pc, #116]	@ (80066d8 <xTaskCheckForTimeOut+0xc0>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	69ba      	ldr	r2, [r7, #24]
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800667a:	d102      	bne.n	8006682 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800667c:	2300      	movs	r3, #0
 800667e:	61fb      	str	r3, [r7, #28]
 8006680:	e023      	b.n	80066ca <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	4b15      	ldr	r3, [pc, #84]	@ (80066dc <xTaskCheckForTimeOut+0xc4>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	429a      	cmp	r2, r3
 800668c:	d007      	beq.n	800669e <xTaskCheckForTimeOut+0x86>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	69ba      	ldr	r2, [r7, #24]
 8006694:	429a      	cmp	r2, r3
 8006696:	d302      	bcc.n	800669e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006698:	2301      	movs	r3, #1
 800669a:	61fb      	str	r3, [r7, #28]
 800669c:	e015      	b.n	80066ca <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	697a      	ldr	r2, [r7, #20]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d20b      	bcs.n	80066c0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	1ad2      	subs	r2, r2, r3
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f7ff ff99 	bl	80065ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80066ba:	2300      	movs	r3, #0
 80066bc:	61fb      	str	r3, [r7, #28]
 80066be:	e004      	b.n	80066ca <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	2200      	movs	r2, #0
 80066c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80066c6:	2301      	movs	r3, #1
 80066c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80066ca:	f001 f847 	bl	800775c <vPortExitCritical>

	return xReturn;
 80066ce:	69fb      	ldr	r3, [r7, #28]
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3720      	adds	r7, #32
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	2000083c 	.word	0x2000083c
 80066dc:	20000850 	.word	0x20000850

080066e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80066e0:	b480      	push	{r7}
 80066e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80066e4:	4b03      	ldr	r3, [pc, #12]	@ (80066f4 <vTaskMissedYield+0x14>)
 80066e6:	2201      	movs	r2, #1
 80066e8:	601a      	str	r2, [r3, #0]
}
 80066ea:	bf00      	nop
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr
 80066f4:	2000084c 	.word	0x2000084c

080066f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006700:	f000 f852 	bl	80067a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006704:	4b06      	ldr	r3, [pc, #24]	@ (8006720 <prvIdleTask+0x28>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2b01      	cmp	r3, #1
 800670a:	d9f9      	bls.n	8006700 <prvIdleTask+0x8>
			{
				taskYIELD();
 800670c:	4b05      	ldr	r3, [pc, #20]	@ (8006724 <prvIdleTask+0x2c>)
 800670e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006712:	601a      	str	r2, [r3, #0]
 8006714:	f3bf 8f4f 	dsb	sy
 8006718:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800671c:	e7f0      	b.n	8006700 <prvIdleTask+0x8>
 800671e:	bf00      	nop
 8006720:	2000073c 	.word	0x2000073c
 8006724:	e000ed04 	.word	0xe000ed04

08006728 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800672e:	2300      	movs	r3, #0
 8006730:	607b      	str	r3, [r7, #4]
 8006732:	e00c      	b.n	800674e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	4613      	mov	r3, r2
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	4413      	add	r3, r2
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	4a12      	ldr	r2, [pc, #72]	@ (8006788 <prvInitialiseTaskLists+0x60>)
 8006740:	4413      	add	r3, r2
 8006742:	4618      	mov	r0, r3
 8006744:	f7fe f8ee 	bl	8004924 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	3301      	adds	r3, #1
 800674c:	607b      	str	r3, [r7, #4]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2b06      	cmp	r3, #6
 8006752:	d9ef      	bls.n	8006734 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006754:	480d      	ldr	r0, [pc, #52]	@ (800678c <prvInitialiseTaskLists+0x64>)
 8006756:	f7fe f8e5 	bl	8004924 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800675a:	480d      	ldr	r0, [pc, #52]	@ (8006790 <prvInitialiseTaskLists+0x68>)
 800675c:	f7fe f8e2 	bl	8004924 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006760:	480c      	ldr	r0, [pc, #48]	@ (8006794 <prvInitialiseTaskLists+0x6c>)
 8006762:	f7fe f8df 	bl	8004924 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006766:	480c      	ldr	r0, [pc, #48]	@ (8006798 <prvInitialiseTaskLists+0x70>)
 8006768:	f7fe f8dc 	bl	8004924 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800676c:	480b      	ldr	r0, [pc, #44]	@ (800679c <prvInitialiseTaskLists+0x74>)
 800676e:	f7fe f8d9 	bl	8004924 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006772:	4b0b      	ldr	r3, [pc, #44]	@ (80067a0 <prvInitialiseTaskLists+0x78>)
 8006774:	4a05      	ldr	r2, [pc, #20]	@ (800678c <prvInitialiseTaskLists+0x64>)
 8006776:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006778:	4b0a      	ldr	r3, [pc, #40]	@ (80067a4 <prvInitialiseTaskLists+0x7c>)
 800677a:	4a05      	ldr	r2, [pc, #20]	@ (8006790 <prvInitialiseTaskLists+0x68>)
 800677c:	601a      	str	r2, [r3, #0]
}
 800677e:	bf00      	nop
 8006780:	3708      	adds	r7, #8
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	2000073c 	.word	0x2000073c
 800678c:	200007c8 	.word	0x200007c8
 8006790:	200007dc 	.word	0x200007dc
 8006794:	200007f8 	.word	0x200007f8
 8006798:	2000080c 	.word	0x2000080c
 800679c:	20000824 	.word	0x20000824
 80067a0:	200007f0 	.word	0x200007f0
 80067a4:	200007f4 	.word	0x200007f4

080067a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067ae:	e019      	b.n	80067e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80067b0:	f000 ffa2 	bl	80076f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067b4:	4b10      	ldr	r3, [pc, #64]	@ (80067f8 <prvCheckTasksWaitingTermination+0x50>)
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	3304      	adds	r3, #4
 80067c0:	4618      	mov	r0, r3
 80067c2:	f7fe f939 	bl	8004a38 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80067c6:	4b0d      	ldr	r3, [pc, #52]	@ (80067fc <prvCheckTasksWaitingTermination+0x54>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	3b01      	subs	r3, #1
 80067cc:	4a0b      	ldr	r2, [pc, #44]	@ (80067fc <prvCheckTasksWaitingTermination+0x54>)
 80067ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80067d0:	4b0b      	ldr	r3, [pc, #44]	@ (8006800 <prvCheckTasksWaitingTermination+0x58>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	3b01      	subs	r3, #1
 80067d6:	4a0a      	ldr	r2, [pc, #40]	@ (8006800 <prvCheckTasksWaitingTermination+0x58>)
 80067d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80067da:	f000 ffbf 	bl	800775c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 f848 	bl	8006874 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067e4:	4b06      	ldr	r3, [pc, #24]	@ (8006800 <prvCheckTasksWaitingTermination+0x58>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1e1      	bne.n	80067b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80067ec:	bf00      	nop
 80067ee:	bf00      	nop
 80067f0:	3708      	adds	r7, #8
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	2000080c 	.word	0x2000080c
 80067fc:	20000838 	.word	0x20000838
 8006800:	20000820 	.word	0x20000820

08006804 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800680c:	2300      	movs	r3, #0
 800680e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8006810:	e005      	b.n	800681e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	3301      	adds	r3, #1
 8006816:	607b      	str	r3, [r7, #4]
			ulCount++;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	3301      	adds	r3, #1
 800681c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	2ba5      	cmp	r3, #165	@ 0xa5
 8006824:	d0f5      	beq.n	8006812 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	089b      	lsrs	r3, r3, #2
 800682a:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	b29b      	uxth	r3, r3
	}
 8006830:	4618      	mov	r0, r3
 8006832:	3714      	adds	r7, #20
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800683c:	b580      	push	{r7, lr}
 800683e:	b086      	sub	sp, #24
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d102      	bne.n	8006850 <uxTaskGetStackHighWaterMark+0x14>
 800684a:	4b09      	ldr	r3, [pc, #36]	@ (8006870 <uxTaskGetStackHighWaterMark+0x34>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	e000      	b.n	8006852 <uxTaskGetStackHighWaterMark+0x16>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006858:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800685a:	6938      	ldr	r0, [r7, #16]
 800685c:	f7ff ffd2 	bl	8006804 <prvTaskCheckFreeStackSpace>
 8006860:	4603      	mov	r3, r0
 8006862:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8006864:	68fb      	ldr	r3, [r7, #12]
	}
 8006866:	4618      	mov	r0, r3
 8006868:	3718      	adds	r7, #24
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	20000738 	.word	0x20000738

08006874 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	334c      	adds	r3, #76	@ 0x4c
 8006880:	4618      	mov	r0, r3
 8006882:	f001 fbcb 	bl	800801c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800688c:	2b00      	cmp	r3, #0
 800688e:	d108      	bne.n	80068a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006894:	4618      	mov	r0, r3
 8006896:	f001 f925 	bl	8007ae4 <vPortFree>
				vPortFree( pxTCB );
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f001 f922 	bl	8007ae4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80068a0:	e019      	b.n	80068d6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d103      	bne.n	80068b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f001 f919 	bl	8007ae4 <vPortFree>
	}
 80068b2:	e010      	b.n	80068d6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80068ba:	2b02      	cmp	r3, #2
 80068bc:	d00b      	beq.n	80068d6 <prvDeleteTCB+0x62>
	__asm volatile
 80068be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068c2:	f383 8811 	msr	BASEPRI, r3
 80068c6:	f3bf 8f6f 	isb	sy
 80068ca:	f3bf 8f4f 	dsb	sy
 80068ce:	60fb      	str	r3, [r7, #12]
}
 80068d0:	bf00      	nop
 80068d2:	bf00      	nop
 80068d4:	e7fd      	b.n	80068d2 <prvDeleteTCB+0x5e>
	}
 80068d6:	bf00      	nop
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
	...

080068e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068e6:	4b0c      	ldr	r3, [pc, #48]	@ (8006918 <prvResetNextTaskUnblockTime+0x38>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d104      	bne.n	80068fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80068f0:	4b0a      	ldr	r3, [pc, #40]	@ (800691c <prvResetNextTaskUnblockTime+0x3c>)
 80068f2:	f04f 32ff 	mov.w	r2, #4294967295
 80068f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80068f8:	e008      	b.n	800690c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068fa:	4b07      	ldr	r3, [pc, #28]	@ (8006918 <prvResetNextTaskUnblockTime+0x38>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	4a04      	ldr	r2, [pc, #16]	@ (800691c <prvResetNextTaskUnblockTime+0x3c>)
 800690a:	6013      	str	r3, [r2, #0]
}
 800690c:	bf00      	nop
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr
 8006918:	200007f0 	.word	0x200007f0
 800691c:	20000858 	.word	0x20000858

08006920 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006926:	4b0b      	ldr	r3, [pc, #44]	@ (8006954 <xTaskGetSchedulerState+0x34>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d102      	bne.n	8006934 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800692e:	2301      	movs	r3, #1
 8006930:	607b      	str	r3, [r7, #4]
 8006932:	e008      	b.n	8006946 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006934:	4b08      	ldr	r3, [pc, #32]	@ (8006958 <xTaskGetSchedulerState+0x38>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d102      	bne.n	8006942 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800693c:	2302      	movs	r3, #2
 800693e:	607b      	str	r3, [r7, #4]
 8006940:	e001      	b.n	8006946 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006942:	2300      	movs	r3, #0
 8006944:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006946:	687b      	ldr	r3, [r7, #4]
	}
 8006948:	4618      	mov	r0, r3
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr
 8006954:	20000844 	.word	0x20000844
 8006958:	20000860 	.word	0x20000860

0800695c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006968:	2300      	movs	r3, #0
 800696a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d05e      	beq.n	8006a30 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006976:	4b31      	ldr	r3, [pc, #196]	@ (8006a3c <xTaskPriorityInherit+0xe0>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800697c:	429a      	cmp	r2, r3
 800697e:	d24e      	bcs.n	8006a1e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	699b      	ldr	r3, [r3, #24]
 8006984:	2b00      	cmp	r3, #0
 8006986:	db06      	blt.n	8006996 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006988:	4b2c      	ldr	r3, [pc, #176]	@ (8006a3c <xTaskPriorityInherit+0xe0>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800698e:	f1c3 0207 	rsb	r2, r3, #7
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	6959      	ldr	r1, [r3, #20]
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800699e:	4613      	mov	r3, r2
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	4413      	add	r3, r2
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	4a26      	ldr	r2, [pc, #152]	@ (8006a40 <xTaskPriorityInherit+0xe4>)
 80069a8:	4413      	add	r3, r2
 80069aa:	4299      	cmp	r1, r3
 80069ac:	d12f      	bne.n	8006a0e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	3304      	adds	r3, #4
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7fe f840 	bl	8004a38 <uxListRemove>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10a      	bne.n	80069d4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069c2:	2201      	movs	r2, #1
 80069c4:	fa02 f303 	lsl.w	r3, r2, r3
 80069c8:	43da      	mvns	r2, r3
 80069ca:	4b1e      	ldr	r3, [pc, #120]	@ (8006a44 <xTaskPriorityInherit+0xe8>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4013      	ands	r3, r2
 80069d0:	4a1c      	ldr	r2, [pc, #112]	@ (8006a44 <xTaskPriorityInherit+0xe8>)
 80069d2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80069d4:	4b19      	ldr	r3, [pc, #100]	@ (8006a3c <xTaskPriorityInherit+0xe0>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e2:	2201      	movs	r2, #1
 80069e4:	409a      	lsls	r2, r3
 80069e6:	4b17      	ldr	r3, [pc, #92]	@ (8006a44 <xTaskPriorityInherit+0xe8>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	4a15      	ldr	r2, [pc, #84]	@ (8006a44 <xTaskPriorityInherit+0xe8>)
 80069ee:	6013      	str	r3, [r2, #0]
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069f4:	4613      	mov	r3, r2
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	4413      	add	r3, r2
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	4a10      	ldr	r2, [pc, #64]	@ (8006a40 <xTaskPriorityInherit+0xe4>)
 80069fe:	441a      	add	r2, r3
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	3304      	adds	r3, #4
 8006a04:	4619      	mov	r1, r3
 8006a06:	4610      	mov	r0, r2
 8006a08:	f7fd ffb9 	bl	800497e <vListInsertEnd>
 8006a0c:	e004      	b.n	8006a18 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8006a3c <xTaskPriorityInherit+0xe0>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	60fb      	str	r3, [r7, #12]
 8006a1c:	e008      	b.n	8006a30 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a22:	4b06      	ldr	r3, [pc, #24]	@ (8006a3c <xTaskPriorityInherit+0xe0>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d201      	bcs.n	8006a30 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006a30:	68fb      	ldr	r3, [r7, #12]
	}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	20000738 	.word	0x20000738
 8006a40:	2000073c 	.word	0x2000073c
 8006a44:	20000840 	.word	0x20000840

08006a48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b086      	sub	sp, #24
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006a54:	2300      	movs	r3, #0
 8006a56:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d070      	beq.n	8006b40 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006a5e:	4b3b      	ldr	r3, [pc, #236]	@ (8006b4c <xTaskPriorityDisinherit+0x104>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	693a      	ldr	r2, [r7, #16]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d00b      	beq.n	8006a80 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a6c:	f383 8811 	msr	BASEPRI, r3
 8006a70:	f3bf 8f6f 	isb	sy
 8006a74:	f3bf 8f4f 	dsb	sy
 8006a78:	60fb      	str	r3, [r7, #12]
}
 8006a7a:	bf00      	nop
 8006a7c:	bf00      	nop
 8006a7e:	e7fd      	b.n	8006a7c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d10b      	bne.n	8006aa0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a8c:	f383 8811 	msr	BASEPRI, r3
 8006a90:	f3bf 8f6f 	isb	sy
 8006a94:	f3bf 8f4f 	dsb	sy
 8006a98:	60bb      	str	r3, [r7, #8]
}
 8006a9a:	bf00      	nop
 8006a9c:	bf00      	nop
 8006a9e:	e7fd      	b.n	8006a9c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006aa4:	1e5a      	subs	r2, r3, #1
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d044      	beq.n	8006b40 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d140      	bne.n	8006b40 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	3304      	adds	r3, #4
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f7fd ffb8 	bl	8004a38 <uxListRemove>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d115      	bne.n	8006afa <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ad2:	491f      	ldr	r1, [pc, #124]	@ (8006b50 <xTaskPriorityDisinherit+0x108>)
 8006ad4:	4613      	mov	r3, r2
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4413      	add	r3, r2
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	440b      	add	r3, r1
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d10a      	bne.n	8006afa <xTaskPriorityDisinherit+0xb2>
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ae8:	2201      	movs	r2, #1
 8006aea:	fa02 f303 	lsl.w	r3, r2, r3
 8006aee:	43da      	mvns	r2, r3
 8006af0:	4b18      	ldr	r3, [pc, #96]	@ (8006b54 <xTaskPriorityDisinherit+0x10c>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4013      	ands	r3, r2
 8006af6:	4a17      	ldr	r2, [pc, #92]	@ (8006b54 <xTaskPriorityDisinherit+0x10c>)
 8006af8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b06:	f1c3 0207 	rsb	r2, r3, #7
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b12:	2201      	movs	r2, #1
 8006b14:	409a      	lsls	r2, r3
 8006b16:	4b0f      	ldr	r3, [pc, #60]	@ (8006b54 <xTaskPriorityDisinherit+0x10c>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	4a0d      	ldr	r2, [pc, #52]	@ (8006b54 <xTaskPriorityDisinherit+0x10c>)
 8006b1e:	6013      	str	r3, [r2, #0]
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b24:	4613      	mov	r3, r2
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	4413      	add	r3, r2
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	4a08      	ldr	r2, [pc, #32]	@ (8006b50 <xTaskPriorityDisinherit+0x108>)
 8006b2e:	441a      	add	r2, r3
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	3304      	adds	r3, #4
 8006b34:	4619      	mov	r1, r3
 8006b36:	4610      	mov	r0, r2
 8006b38:	f7fd ff21 	bl	800497e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b40:	697b      	ldr	r3, [r7, #20]
	}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3718      	adds	r7, #24
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	20000738 	.word	0x20000738
 8006b50:	2000073c 	.word	0x2000073c
 8006b54:	20000840 	.word	0x20000840

08006b58 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b088      	sub	sp, #32
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006b66:	2301      	movs	r3, #1
 8006b68:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d079      	beq.n	8006c64 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d10b      	bne.n	8006b90 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b7c:	f383 8811 	msr	BASEPRI, r3
 8006b80:	f3bf 8f6f 	isb	sy
 8006b84:	f3bf 8f4f 	dsb	sy
 8006b88:	60fb      	str	r3, [r7, #12]
}
 8006b8a:	bf00      	nop
 8006b8c:	bf00      	nop
 8006b8e:	e7fd      	b.n	8006b8c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b94:	683a      	ldr	r2, [r7, #0]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d902      	bls.n	8006ba0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	61fb      	str	r3, [r7, #28]
 8006b9e:	e002      	b.n	8006ba6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ba4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006baa:	69fa      	ldr	r2, [r7, #28]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d059      	beq.n	8006c64 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bb4:	697a      	ldr	r2, [r7, #20]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d154      	bne.n	8006c64 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006bba:	4b2c      	ldr	r3, [pc, #176]	@ (8006c6c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	69ba      	ldr	r2, [r7, #24]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d10b      	bne.n	8006bdc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc8:	f383 8811 	msr	BASEPRI, r3
 8006bcc:	f3bf 8f6f 	isb	sy
 8006bd0:	f3bf 8f4f 	dsb	sy
 8006bd4:	60bb      	str	r3, [r7, #8]
}
 8006bd6:	bf00      	nop
 8006bd8:	bf00      	nop
 8006bda:	e7fd      	b.n	8006bd8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006be0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	69fa      	ldr	r2, [r7, #28]
 8006be6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	699b      	ldr	r3, [r3, #24]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	db04      	blt.n	8006bfa <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	f1c3 0207 	rsb	r2, r3, #7
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	6959      	ldr	r1, [r3, #20]
 8006bfe:	693a      	ldr	r2, [r7, #16]
 8006c00:	4613      	mov	r3, r2
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4413      	add	r3, r2
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	4a19      	ldr	r2, [pc, #100]	@ (8006c70 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006c0a:	4413      	add	r3, r2
 8006c0c:	4299      	cmp	r1, r3
 8006c0e:	d129      	bne.n	8006c64 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	3304      	adds	r3, #4
 8006c14:	4618      	mov	r0, r3
 8006c16:	f7fd ff0f 	bl	8004a38 <uxListRemove>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d10a      	bne.n	8006c36 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c24:	2201      	movs	r2, #1
 8006c26:	fa02 f303 	lsl.w	r3, r2, r3
 8006c2a:	43da      	mvns	r2, r3
 8006c2c:	4b11      	ldr	r3, [pc, #68]	@ (8006c74 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4013      	ands	r3, r2
 8006c32:	4a10      	ldr	r2, [pc, #64]	@ (8006c74 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006c34:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	409a      	lsls	r2, r3
 8006c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8006c74 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	4a0b      	ldr	r2, [pc, #44]	@ (8006c74 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006c46:	6013      	str	r3, [r2, #0]
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c4c:	4613      	mov	r3, r2
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	4413      	add	r3, r2
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	4a06      	ldr	r2, [pc, #24]	@ (8006c70 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006c56:	441a      	add	r2, r3
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	3304      	adds	r3, #4
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	4610      	mov	r0, r2
 8006c60:	f7fd fe8d 	bl	800497e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006c64:	bf00      	nop
 8006c66:	3720      	adds	r7, #32
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	20000738 	.word	0x20000738
 8006c70:	2000073c 	.word	0x2000073c
 8006c74:	20000840 	.word	0x20000840

08006c78 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8006c7e:	4b09      	ldr	r3, [pc, #36]	@ (8006ca4 <uxTaskResetEventItemValue+0x2c>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	699b      	ldr	r3, [r3, #24]
 8006c84:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c86:	4b07      	ldr	r3, [pc, #28]	@ (8006ca4 <uxTaskResetEventItemValue+0x2c>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c8c:	4b05      	ldr	r3, [pc, #20]	@ (8006ca4 <uxTaskResetEventItemValue+0x2c>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f1c2 0207 	rsb	r2, r2, #7
 8006c94:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8006c96:	687b      	ldr	r3, [r7, #4]
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr
 8006ca4:	20000738 	.word	0x20000738

08006ca8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006ca8:	b480      	push	{r7}
 8006caa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006cac:	4b07      	ldr	r3, [pc, #28]	@ (8006ccc <pvTaskIncrementMutexHeldCount+0x24>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d004      	beq.n	8006cbe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006cb4:	4b05      	ldr	r3, [pc, #20]	@ (8006ccc <pvTaskIncrementMutexHeldCount+0x24>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006cba:	3201      	adds	r2, #1
 8006cbc:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8006cbe:	4b03      	ldr	r3, [pc, #12]	@ (8006ccc <pvTaskIncrementMutexHeldCount+0x24>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
	}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr
 8006ccc:	20000738 	.word	0x20000738

08006cd0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006cda:	4b29      	ldr	r3, [pc, #164]	@ (8006d80 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ce0:	4b28      	ldr	r3, [pc, #160]	@ (8006d84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	3304      	adds	r3, #4
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f7fd fea6 	bl	8004a38 <uxListRemove>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d10b      	bne.n	8006d0a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006cf2:	4b24      	ldr	r3, [pc, #144]	@ (8006d84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8006cfe:	43da      	mvns	r2, r3
 8006d00:	4b21      	ldr	r3, [pc, #132]	@ (8006d88 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4013      	ands	r3, r2
 8006d06:	4a20      	ldr	r2, [pc, #128]	@ (8006d88 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006d08:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d10:	d10a      	bne.n	8006d28 <prvAddCurrentTaskToDelayedList+0x58>
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d007      	beq.n	8006d28 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d18:	4b1a      	ldr	r3, [pc, #104]	@ (8006d84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	3304      	adds	r3, #4
 8006d1e:	4619      	mov	r1, r3
 8006d20:	481a      	ldr	r0, [pc, #104]	@ (8006d8c <prvAddCurrentTaskToDelayedList+0xbc>)
 8006d22:	f7fd fe2c 	bl	800497e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006d26:	e026      	b.n	8006d76 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006d30:	4b14      	ldr	r3, [pc, #80]	@ (8006d84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	68ba      	ldr	r2, [r7, #8]
 8006d36:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006d38:	68ba      	ldr	r2, [r7, #8]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d209      	bcs.n	8006d54 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d40:	4b13      	ldr	r3, [pc, #76]	@ (8006d90 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	4b0f      	ldr	r3, [pc, #60]	@ (8006d84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	3304      	adds	r3, #4
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	4610      	mov	r0, r2
 8006d4e:	f7fd fe3a 	bl	80049c6 <vListInsert>
}
 8006d52:	e010      	b.n	8006d76 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d54:	4b0f      	ldr	r3, [pc, #60]	@ (8006d94 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	4b0a      	ldr	r3, [pc, #40]	@ (8006d84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	3304      	adds	r3, #4
 8006d5e:	4619      	mov	r1, r3
 8006d60:	4610      	mov	r0, r2
 8006d62:	f7fd fe30 	bl	80049c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006d66:	4b0c      	ldr	r3, [pc, #48]	@ (8006d98 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	68ba      	ldr	r2, [r7, #8]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d202      	bcs.n	8006d76 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006d70:	4a09      	ldr	r2, [pc, #36]	@ (8006d98 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	6013      	str	r3, [r2, #0]
}
 8006d76:	bf00      	nop
 8006d78:	3710      	adds	r7, #16
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	2000083c 	.word	0x2000083c
 8006d84:	20000738 	.word	0x20000738
 8006d88:	20000840 	.word	0x20000840
 8006d8c:	20000824 	.word	0x20000824
 8006d90:	200007f4 	.word	0x200007f4
 8006d94:	200007f0 	.word	0x200007f0
 8006d98:	20000858 	.word	0x20000858

08006d9c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b08a      	sub	sp, #40	@ 0x28
 8006da0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006da2:	2300      	movs	r3, #0
 8006da4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006da6:	f000 fb13 	bl	80073d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006daa:	4b1d      	ldr	r3, [pc, #116]	@ (8006e20 <xTimerCreateTimerTask+0x84>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d021      	beq.n	8006df6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006db2:	2300      	movs	r3, #0
 8006db4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006db6:	2300      	movs	r3, #0
 8006db8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006dba:	1d3a      	adds	r2, r7, #4
 8006dbc:	f107 0108 	add.w	r1, r7, #8
 8006dc0:	f107 030c 	add.w	r3, r7, #12
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f7f9 fbf5 	bl	80005b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006dca:	6879      	ldr	r1, [r7, #4]
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	68fa      	ldr	r2, [r7, #12]
 8006dd0:	9202      	str	r2, [sp, #8]
 8006dd2:	9301      	str	r3, [sp, #4]
 8006dd4:	2306      	movs	r3, #6
 8006dd6:	9300      	str	r3, [sp, #0]
 8006dd8:	2300      	movs	r3, #0
 8006dda:	460a      	mov	r2, r1
 8006ddc:	4911      	ldr	r1, [pc, #68]	@ (8006e24 <xTimerCreateTimerTask+0x88>)
 8006dde:	4812      	ldr	r0, [pc, #72]	@ (8006e28 <xTimerCreateTimerTask+0x8c>)
 8006de0:	f7fe fe50 	bl	8005a84 <xTaskCreateStatic>
 8006de4:	4603      	mov	r3, r0
 8006de6:	4a11      	ldr	r2, [pc, #68]	@ (8006e2c <xTimerCreateTimerTask+0x90>)
 8006de8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006dea:	4b10      	ldr	r3, [pc, #64]	@ (8006e2c <xTimerCreateTimerTask+0x90>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d001      	beq.n	8006df6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006df2:	2301      	movs	r3, #1
 8006df4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d10b      	bne.n	8006e14 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e00:	f383 8811 	msr	BASEPRI, r3
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	613b      	str	r3, [r7, #16]
}
 8006e0e:	bf00      	nop
 8006e10:	bf00      	nop
 8006e12:	e7fd      	b.n	8006e10 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006e14:	697b      	ldr	r3, [r7, #20]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3718      	adds	r7, #24
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	20000894 	.word	0x20000894
 8006e24:	080094c8 	.word	0x080094c8
 8006e28:	08006f69 	.word	0x08006f69
 8006e2c:	20000898 	.word	0x20000898

08006e30 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b08a      	sub	sp, #40	@ 0x28
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
 8006e3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d10b      	bne.n	8006e60 <xTimerGenericCommand+0x30>
	__asm volatile
 8006e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e4c:	f383 8811 	msr	BASEPRI, r3
 8006e50:	f3bf 8f6f 	isb	sy
 8006e54:	f3bf 8f4f 	dsb	sy
 8006e58:	623b      	str	r3, [r7, #32]
}
 8006e5a:	bf00      	nop
 8006e5c:	bf00      	nop
 8006e5e:	e7fd      	b.n	8006e5c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006e60:	4b19      	ldr	r3, [pc, #100]	@ (8006ec8 <xTimerGenericCommand+0x98>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d02a      	beq.n	8006ebe <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	2b05      	cmp	r3, #5
 8006e78:	dc18      	bgt.n	8006eac <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006e7a:	f7ff fd51 	bl	8006920 <xTaskGetSchedulerState>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	d109      	bne.n	8006e98 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006e84:	4b10      	ldr	r3, [pc, #64]	@ (8006ec8 <xTimerGenericCommand+0x98>)
 8006e86:	6818      	ldr	r0, [r3, #0]
 8006e88:	f107 0110 	add.w	r1, r7, #16
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e90:	f7fd ff8a 	bl	8004da8 <xQueueGenericSend>
 8006e94:	6278      	str	r0, [r7, #36]	@ 0x24
 8006e96:	e012      	b.n	8006ebe <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006e98:	4b0b      	ldr	r3, [pc, #44]	@ (8006ec8 <xTimerGenericCommand+0x98>)
 8006e9a:	6818      	ldr	r0, [r3, #0]
 8006e9c:	f107 0110 	add.w	r1, r7, #16
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f7fd ff80 	bl	8004da8 <xQueueGenericSend>
 8006ea8:	6278      	str	r0, [r7, #36]	@ 0x24
 8006eaa:	e008      	b.n	8006ebe <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006eac:	4b06      	ldr	r3, [pc, #24]	@ (8006ec8 <xTimerGenericCommand+0x98>)
 8006eae:	6818      	ldr	r0, [r3, #0]
 8006eb0:	f107 0110 	add.w	r1, r7, #16
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	683a      	ldr	r2, [r7, #0]
 8006eb8:	f7fe f878 	bl	8004fac <xQueueGenericSendFromISR>
 8006ebc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3728      	adds	r7, #40	@ 0x28
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	20000894 	.word	0x20000894

08006ecc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b088      	sub	sp, #32
 8006ed0:	af02      	add	r7, sp, #8
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ed6:	4b23      	ldr	r3, [pc, #140]	@ (8006f64 <prvProcessExpiredTimer+0x98>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	3304      	adds	r3, #4
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f7fd fda7 	bl	8004a38 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006ef0:	f003 0304 	and.w	r3, r3, #4
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d023      	beq.n	8006f40 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	699a      	ldr	r2, [r3, #24]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	18d1      	adds	r1, r2, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	683a      	ldr	r2, [r7, #0]
 8006f04:	6978      	ldr	r0, [r7, #20]
 8006f06:	f000 f8d5 	bl	80070b4 <prvInsertTimerInActiveList>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d020      	beq.n	8006f52 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006f10:	2300      	movs	r3, #0
 8006f12:	9300      	str	r3, [sp, #0]
 8006f14:	2300      	movs	r3, #0
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	2100      	movs	r1, #0
 8006f1a:	6978      	ldr	r0, [r7, #20]
 8006f1c:	f7ff ff88 	bl	8006e30 <xTimerGenericCommand>
 8006f20:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d114      	bne.n	8006f52 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f2c:	f383 8811 	msr	BASEPRI, r3
 8006f30:	f3bf 8f6f 	isb	sy
 8006f34:	f3bf 8f4f 	dsb	sy
 8006f38:	60fb      	str	r3, [r7, #12]
}
 8006f3a:	bf00      	nop
 8006f3c:	bf00      	nop
 8006f3e:	e7fd      	b.n	8006f3c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006f46:	f023 0301 	bic.w	r3, r3, #1
 8006f4a:	b2da      	uxtb	r2, r3
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	6a1b      	ldr	r3, [r3, #32]
 8006f56:	6978      	ldr	r0, [r7, #20]
 8006f58:	4798      	blx	r3
}
 8006f5a:	bf00      	nop
 8006f5c:	3718      	adds	r7, #24
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	2000088c 	.word	0x2000088c

08006f68 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f70:	f107 0308 	add.w	r3, r7, #8
 8006f74:	4618      	mov	r0, r3
 8006f76:	f000 f859 	bl	800702c <prvGetNextExpireTime>
 8006f7a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	4619      	mov	r1, r3
 8006f80:	68f8      	ldr	r0, [r7, #12]
 8006f82:	f000 f805 	bl	8006f90 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006f86:	f000 f8d7 	bl	8007138 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f8a:	bf00      	nop
 8006f8c:	e7f0      	b.n	8006f70 <prvTimerTask+0x8>
	...

08006f90 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006f9a:	f7fe ffd1 	bl	8005f40 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f9e:	f107 0308 	add.w	r3, r7, #8
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f000 f866 	bl	8007074 <prvSampleTimeNow>
 8006fa8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d130      	bne.n	8007012 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d10a      	bne.n	8006fcc <prvProcessTimerOrBlockTask+0x3c>
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d806      	bhi.n	8006fcc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006fbe:	f7fe ffcd 	bl	8005f5c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006fc2:	68f9      	ldr	r1, [r7, #12]
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f7ff ff81 	bl	8006ecc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006fca:	e024      	b.n	8007016 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d008      	beq.n	8006fe4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006fd2:	4b13      	ldr	r3, [pc, #76]	@ (8007020 <prvProcessTimerOrBlockTask+0x90>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d101      	bne.n	8006fe0 <prvProcessTimerOrBlockTask+0x50>
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e000      	b.n	8006fe2 <prvProcessTimerOrBlockTask+0x52>
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006fe4:	4b0f      	ldr	r3, [pc, #60]	@ (8007024 <prvProcessTimerOrBlockTask+0x94>)
 8006fe6:	6818      	ldr	r0, [r3, #0]
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	683a      	ldr	r2, [r7, #0]
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	f7fe fd13 	bl	8005a1c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006ff6:	f7fe ffb1 	bl	8005f5c <xTaskResumeAll>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d10a      	bne.n	8007016 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007000:	4b09      	ldr	r3, [pc, #36]	@ (8007028 <prvProcessTimerOrBlockTask+0x98>)
 8007002:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007006:	601a      	str	r2, [r3, #0]
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	f3bf 8f6f 	isb	sy
}
 8007010:	e001      	b.n	8007016 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007012:	f7fe ffa3 	bl	8005f5c <xTaskResumeAll>
}
 8007016:	bf00      	nop
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	20000890 	.word	0x20000890
 8007024:	20000894 	.word	0x20000894
 8007028:	e000ed04 	.word	0xe000ed04

0800702c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007034:	4b0e      	ldr	r3, [pc, #56]	@ (8007070 <prvGetNextExpireTime+0x44>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d101      	bne.n	8007042 <prvGetNextExpireTime+0x16>
 800703e:	2201      	movs	r2, #1
 8007040:	e000      	b.n	8007044 <prvGetNextExpireTime+0x18>
 8007042:	2200      	movs	r2, #0
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d105      	bne.n	800705c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007050:	4b07      	ldr	r3, [pc, #28]	@ (8007070 <prvGetNextExpireTime+0x44>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	60fb      	str	r3, [r7, #12]
 800705a:	e001      	b.n	8007060 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800705c:	2300      	movs	r3, #0
 800705e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007060:	68fb      	ldr	r3, [r7, #12]
}
 8007062:	4618      	mov	r0, r3
 8007064:	3714      	adds	r7, #20
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	2000088c 	.word	0x2000088c

08007074 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800707c:	f7ff f80c 	bl	8006098 <xTaskGetTickCount>
 8007080:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007082:	4b0b      	ldr	r3, [pc, #44]	@ (80070b0 <prvSampleTimeNow+0x3c>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	429a      	cmp	r2, r3
 800708a:	d205      	bcs.n	8007098 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800708c:	f000 f93a 	bl	8007304 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	601a      	str	r2, [r3, #0]
 8007096:	e002      	b.n	800709e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800709e:	4a04      	ldr	r2, [pc, #16]	@ (80070b0 <prvSampleTimeNow+0x3c>)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80070a4:	68fb      	ldr	r3, [r7, #12]
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop
 80070b0:	2000089c 	.word	0x2000089c

080070b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b086      	sub	sp, #24
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	607a      	str	r2, [r7, #4]
 80070c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80070c2:	2300      	movs	r3, #0
 80070c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	68ba      	ldr	r2, [r7, #8]
 80070ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	68fa      	ldr	r2, [r7, #12]
 80070d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80070d2:	68ba      	ldr	r2, [r7, #8]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d812      	bhi.n	8007100 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	1ad2      	subs	r2, r2, r3
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	699b      	ldr	r3, [r3, #24]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d302      	bcc.n	80070ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80070e8:	2301      	movs	r3, #1
 80070ea:	617b      	str	r3, [r7, #20]
 80070ec:	e01b      	b.n	8007126 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80070ee:	4b10      	ldr	r3, [pc, #64]	@ (8007130 <prvInsertTimerInActiveList+0x7c>)
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	3304      	adds	r3, #4
 80070f6:	4619      	mov	r1, r3
 80070f8:	4610      	mov	r0, r2
 80070fa:	f7fd fc64 	bl	80049c6 <vListInsert>
 80070fe:	e012      	b.n	8007126 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	429a      	cmp	r2, r3
 8007106:	d206      	bcs.n	8007116 <prvInsertTimerInActiveList+0x62>
 8007108:	68ba      	ldr	r2, [r7, #8]
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	429a      	cmp	r2, r3
 800710e:	d302      	bcc.n	8007116 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007110:	2301      	movs	r3, #1
 8007112:	617b      	str	r3, [r7, #20]
 8007114:	e007      	b.n	8007126 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007116:	4b07      	ldr	r3, [pc, #28]	@ (8007134 <prvInsertTimerInActiveList+0x80>)
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	3304      	adds	r3, #4
 800711e:	4619      	mov	r1, r3
 8007120:	4610      	mov	r0, r2
 8007122:	f7fd fc50 	bl	80049c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007126:	697b      	ldr	r3, [r7, #20]
}
 8007128:	4618      	mov	r0, r3
 800712a:	3718      	adds	r7, #24
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}
 8007130:	20000890 	.word	0x20000890
 8007134:	2000088c 	.word	0x2000088c

08007138 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b08e      	sub	sp, #56	@ 0x38
 800713c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800713e:	e0ce      	b.n	80072de <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2b00      	cmp	r3, #0
 8007144:	da19      	bge.n	800717a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007146:	1d3b      	adds	r3, r7, #4
 8007148:	3304      	adds	r3, #4
 800714a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800714c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800714e:	2b00      	cmp	r3, #0
 8007150:	d10b      	bne.n	800716a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007156:	f383 8811 	msr	BASEPRI, r3
 800715a:	f3bf 8f6f 	isb	sy
 800715e:	f3bf 8f4f 	dsb	sy
 8007162:	61fb      	str	r3, [r7, #28]
}
 8007164:	bf00      	nop
 8007166:	bf00      	nop
 8007168:	e7fd      	b.n	8007166 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800716a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007170:	6850      	ldr	r0, [r2, #4]
 8007172:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007174:	6892      	ldr	r2, [r2, #8]
 8007176:	4611      	mov	r1, r2
 8007178:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2b00      	cmp	r3, #0
 800717e:	f2c0 80ae 	blt.w	80072de <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007188:	695b      	ldr	r3, [r3, #20]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d004      	beq.n	8007198 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800718e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007190:	3304      	adds	r3, #4
 8007192:	4618      	mov	r0, r3
 8007194:	f7fd fc50 	bl	8004a38 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007198:	463b      	mov	r3, r7
 800719a:	4618      	mov	r0, r3
 800719c:	f7ff ff6a 	bl	8007074 <prvSampleTimeNow>
 80071a0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2b09      	cmp	r3, #9
 80071a6:	f200 8097 	bhi.w	80072d8 <prvProcessReceivedCommands+0x1a0>
 80071aa:	a201      	add	r2, pc, #4	@ (adr r2, 80071b0 <prvProcessReceivedCommands+0x78>)
 80071ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b0:	080071d9 	.word	0x080071d9
 80071b4:	080071d9 	.word	0x080071d9
 80071b8:	080071d9 	.word	0x080071d9
 80071bc:	0800724f 	.word	0x0800724f
 80071c0:	08007263 	.word	0x08007263
 80071c4:	080072af 	.word	0x080072af
 80071c8:	080071d9 	.word	0x080071d9
 80071cc:	080071d9 	.word	0x080071d9
 80071d0:	0800724f 	.word	0x0800724f
 80071d4:	08007263 	.word	0x08007263
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80071d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071da:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80071de:	f043 0301 	orr.w	r3, r3, #1
 80071e2:	b2da      	uxtb	r2, r3
 80071e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80071ea:	68ba      	ldr	r2, [r7, #8]
 80071ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ee:	699b      	ldr	r3, [r3, #24]
 80071f0:	18d1      	adds	r1, r2, r3
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071f8:	f7ff ff5c 	bl	80070b4 <prvInsertTimerInActiveList>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d06c      	beq.n	80072dc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007204:	6a1b      	ldr	r3, [r3, #32]
 8007206:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007208:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800720a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800720c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007210:	f003 0304 	and.w	r3, r3, #4
 8007214:	2b00      	cmp	r3, #0
 8007216:	d061      	beq.n	80072dc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007218:	68ba      	ldr	r2, [r7, #8]
 800721a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	441a      	add	r2, r3
 8007220:	2300      	movs	r3, #0
 8007222:	9300      	str	r3, [sp, #0]
 8007224:	2300      	movs	r3, #0
 8007226:	2100      	movs	r1, #0
 8007228:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800722a:	f7ff fe01 	bl	8006e30 <xTimerGenericCommand>
 800722e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007230:	6a3b      	ldr	r3, [r7, #32]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d152      	bne.n	80072dc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800723a:	f383 8811 	msr	BASEPRI, r3
 800723e:	f3bf 8f6f 	isb	sy
 8007242:	f3bf 8f4f 	dsb	sy
 8007246:	61bb      	str	r3, [r7, #24]
}
 8007248:	bf00      	nop
 800724a:	bf00      	nop
 800724c:	e7fd      	b.n	800724a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800724e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007250:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007254:	f023 0301 	bic.w	r3, r3, #1
 8007258:	b2da      	uxtb	r2, r3
 800725a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800725c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8007260:	e03d      	b.n	80072de <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007264:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007268:	f043 0301 	orr.w	r3, r3, #1
 800726c:	b2da      	uxtb	r2, r3
 800726e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007270:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007278:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800727a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800727c:	699b      	ldr	r3, [r3, #24]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d10b      	bne.n	800729a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007286:	f383 8811 	msr	BASEPRI, r3
 800728a:	f3bf 8f6f 	isb	sy
 800728e:	f3bf 8f4f 	dsb	sy
 8007292:	617b      	str	r3, [r7, #20]
}
 8007294:	bf00      	nop
 8007296:	bf00      	nop
 8007298:	e7fd      	b.n	8007296 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800729a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800729c:	699a      	ldr	r2, [r3, #24]
 800729e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a0:	18d1      	adds	r1, r2, r3
 80072a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072a8:	f7ff ff04 	bl	80070b4 <prvInsertTimerInActiveList>
					break;
 80072ac:	e017      	b.n	80072de <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80072ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072b0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80072b4:	f003 0302 	and.w	r3, r3, #2
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d103      	bne.n	80072c4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80072bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072be:	f000 fc11 	bl	8007ae4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80072c2:	e00c      	b.n	80072de <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80072c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072c6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80072ca:	f023 0301 	bic.w	r3, r3, #1
 80072ce:	b2da      	uxtb	r2, r3
 80072d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 80072d6:	e002      	b.n	80072de <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80072d8:	bf00      	nop
 80072da:	e000      	b.n	80072de <prvProcessReceivedCommands+0x1a6>
					break;
 80072dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80072de:	4b08      	ldr	r3, [pc, #32]	@ (8007300 <prvProcessReceivedCommands+0x1c8>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	1d39      	adds	r1, r7, #4
 80072e4:	2200      	movs	r2, #0
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7fd ff8e 	bl	8005208 <xQueueReceive>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	f47f af26 	bne.w	8007140 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80072f4:	bf00      	nop
 80072f6:	bf00      	nop
 80072f8:	3730      	adds	r7, #48	@ 0x30
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	20000894 	.word	0x20000894

08007304 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b088      	sub	sp, #32
 8007308:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800730a:	e049      	b.n	80073a0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800730c:	4b2e      	ldr	r3, [pc, #184]	@ (80073c8 <prvSwitchTimerLists+0xc4>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007316:	4b2c      	ldr	r3, [pc, #176]	@ (80073c8 <prvSwitchTimerLists+0xc4>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	3304      	adds	r3, #4
 8007324:	4618      	mov	r0, r3
 8007326:	f7fd fb87 	bl	8004a38 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6a1b      	ldr	r3, [r3, #32]
 800732e:	68f8      	ldr	r0, [r7, #12]
 8007330:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007338:	f003 0304 	and.w	r3, r3, #4
 800733c:	2b00      	cmp	r3, #0
 800733e:	d02f      	beq.n	80073a0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	699b      	ldr	r3, [r3, #24]
 8007344:	693a      	ldr	r2, [r7, #16]
 8007346:	4413      	add	r3, r2
 8007348:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800734a:	68ba      	ldr	r2, [r7, #8]
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	429a      	cmp	r2, r3
 8007350:	d90e      	bls.n	8007370 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	68ba      	ldr	r2, [r7, #8]
 8007356:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800735e:	4b1a      	ldr	r3, [pc, #104]	@ (80073c8 <prvSwitchTimerLists+0xc4>)
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	3304      	adds	r3, #4
 8007366:	4619      	mov	r1, r3
 8007368:	4610      	mov	r0, r2
 800736a:	f7fd fb2c 	bl	80049c6 <vListInsert>
 800736e:	e017      	b.n	80073a0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007370:	2300      	movs	r3, #0
 8007372:	9300      	str	r3, [sp, #0]
 8007374:	2300      	movs	r3, #0
 8007376:	693a      	ldr	r2, [r7, #16]
 8007378:	2100      	movs	r1, #0
 800737a:	68f8      	ldr	r0, [r7, #12]
 800737c:	f7ff fd58 	bl	8006e30 <xTimerGenericCommand>
 8007380:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d10b      	bne.n	80073a0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800738c:	f383 8811 	msr	BASEPRI, r3
 8007390:	f3bf 8f6f 	isb	sy
 8007394:	f3bf 8f4f 	dsb	sy
 8007398:	603b      	str	r3, [r7, #0]
}
 800739a:	bf00      	nop
 800739c:	bf00      	nop
 800739e:	e7fd      	b.n	800739c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80073a0:	4b09      	ldr	r3, [pc, #36]	@ (80073c8 <prvSwitchTimerLists+0xc4>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1b0      	bne.n	800730c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80073aa:	4b07      	ldr	r3, [pc, #28]	@ (80073c8 <prvSwitchTimerLists+0xc4>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80073b0:	4b06      	ldr	r3, [pc, #24]	@ (80073cc <prvSwitchTimerLists+0xc8>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a04      	ldr	r2, [pc, #16]	@ (80073c8 <prvSwitchTimerLists+0xc4>)
 80073b6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80073b8:	4a04      	ldr	r2, [pc, #16]	@ (80073cc <prvSwitchTimerLists+0xc8>)
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	6013      	str	r3, [r2, #0]
}
 80073be:	bf00      	nop
 80073c0:	3718      	adds	r7, #24
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	2000088c 	.word	0x2000088c
 80073cc:	20000890 	.word	0x20000890

080073d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80073d6:	f000 f98f 	bl	80076f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80073da:	4b15      	ldr	r3, [pc, #84]	@ (8007430 <prvCheckForValidListAndQueue+0x60>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d120      	bne.n	8007424 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80073e2:	4814      	ldr	r0, [pc, #80]	@ (8007434 <prvCheckForValidListAndQueue+0x64>)
 80073e4:	f7fd fa9e 	bl	8004924 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80073e8:	4813      	ldr	r0, [pc, #76]	@ (8007438 <prvCheckForValidListAndQueue+0x68>)
 80073ea:	f7fd fa9b 	bl	8004924 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80073ee:	4b13      	ldr	r3, [pc, #76]	@ (800743c <prvCheckForValidListAndQueue+0x6c>)
 80073f0:	4a10      	ldr	r2, [pc, #64]	@ (8007434 <prvCheckForValidListAndQueue+0x64>)
 80073f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80073f4:	4b12      	ldr	r3, [pc, #72]	@ (8007440 <prvCheckForValidListAndQueue+0x70>)
 80073f6:	4a10      	ldr	r2, [pc, #64]	@ (8007438 <prvCheckForValidListAndQueue+0x68>)
 80073f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80073fa:	2300      	movs	r3, #0
 80073fc:	9300      	str	r3, [sp, #0]
 80073fe:	4b11      	ldr	r3, [pc, #68]	@ (8007444 <prvCheckForValidListAndQueue+0x74>)
 8007400:	4a11      	ldr	r2, [pc, #68]	@ (8007448 <prvCheckForValidListAndQueue+0x78>)
 8007402:	2110      	movs	r1, #16
 8007404:	200a      	movs	r0, #10
 8007406:	f7fd fbab 	bl	8004b60 <xQueueGenericCreateStatic>
 800740a:	4603      	mov	r3, r0
 800740c:	4a08      	ldr	r2, [pc, #32]	@ (8007430 <prvCheckForValidListAndQueue+0x60>)
 800740e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007410:	4b07      	ldr	r3, [pc, #28]	@ (8007430 <prvCheckForValidListAndQueue+0x60>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d005      	beq.n	8007424 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007418:	4b05      	ldr	r3, [pc, #20]	@ (8007430 <prvCheckForValidListAndQueue+0x60>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	490b      	ldr	r1, [pc, #44]	@ (800744c <prvCheckForValidListAndQueue+0x7c>)
 800741e:	4618      	mov	r0, r3
 8007420:	f7fe fad2 	bl	80059c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007424:	f000 f99a 	bl	800775c <vPortExitCritical>
}
 8007428:	bf00      	nop
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	20000894 	.word	0x20000894
 8007434:	20000864 	.word	0x20000864
 8007438:	20000878 	.word	0x20000878
 800743c:	2000088c 	.word	0x2000088c
 8007440:	20000890 	.word	0x20000890
 8007444:	20000940 	.word	0x20000940
 8007448:	200008a0 	.word	0x200008a0
 800744c:	080094d0 	.word	0x080094d0

08007450 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007450:	b580      	push	{r7, lr}
 8007452:	b08a      	sub	sp, #40	@ 0x28
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	607a      	str	r2, [r7, #4]
 800745c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800745e:	f06f 0301 	mvn.w	r3, #1
 8007462:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007470:	4b06      	ldr	r3, [pc, #24]	@ (800748c <xTimerPendFunctionCallFromISR+0x3c>)
 8007472:	6818      	ldr	r0, [r3, #0]
 8007474:	f107 0114 	add.w	r1, r7, #20
 8007478:	2300      	movs	r3, #0
 800747a:	683a      	ldr	r2, [r7, #0]
 800747c:	f7fd fd96 	bl	8004fac <xQueueGenericSendFromISR>
 8007480:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8007482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8007484:	4618      	mov	r0, r3
 8007486:	3728      	adds	r7, #40	@ 0x28
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	20000894 	.word	0x20000894

08007490 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007490:	b480      	push	{r7}
 8007492:	b085      	sub	sp, #20
 8007494:	af00      	add	r7, sp, #0
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	3b04      	subs	r3, #4
 80074a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80074a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	3b04      	subs	r3, #4
 80074ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	f023 0201 	bic.w	r2, r3, #1
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	3b04      	subs	r3, #4
 80074be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80074c0:	4a0c      	ldr	r2, [pc, #48]	@ (80074f4 <pxPortInitialiseStack+0x64>)
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	3b14      	subs	r3, #20
 80074ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	3b04      	subs	r3, #4
 80074d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f06f 0202 	mvn.w	r2, #2
 80074de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	3b20      	subs	r3, #32
 80074e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80074e6:	68fb      	ldr	r3, [r7, #12]
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3714      	adds	r7, #20
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr
 80074f4:	080074f9 	.word	0x080074f9

080074f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80074fe:	2300      	movs	r3, #0
 8007500:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007502:	4b13      	ldr	r3, [pc, #76]	@ (8007550 <prvTaskExitError+0x58>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800750a:	d00b      	beq.n	8007524 <prvTaskExitError+0x2c>
	__asm volatile
 800750c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007510:	f383 8811 	msr	BASEPRI, r3
 8007514:	f3bf 8f6f 	isb	sy
 8007518:	f3bf 8f4f 	dsb	sy
 800751c:	60fb      	str	r3, [r7, #12]
}
 800751e:	bf00      	nop
 8007520:	bf00      	nop
 8007522:	e7fd      	b.n	8007520 <prvTaskExitError+0x28>
	__asm volatile
 8007524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007528:	f383 8811 	msr	BASEPRI, r3
 800752c:	f3bf 8f6f 	isb	sy
 8007530:	f3bf 8f4f 	dsb	sy
 8007534:	60bb      	str	r3, [r7, #8]
}
 8007536:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007538:	bf00      	nop
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d0fc      	beq.n	800753a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007540:	bf00      	nop
 8007542:	bf00      	nop
 8007544:	3714      	adds	r7, #20
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop
 8007550:	2000000c 	.word	0x2000000c
	...

08007560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007560:	4b07      	ldr	r3, [pc, #28]	@ (8007580 <pxCurrentTCBConst2>)
 8007562:	6819      	ldr	r1, [r3, #0]
 8007564:	6808      	ldr	r0, [r1, #0]
 8007566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800756a:	f380 8809 	msr	PSP, r0
 800756e:	f3bf 8f6f 	isb	sy
 8007572:	f04f 0000 	mov.w	r0, #0
 8007576:	f380 8811 	msr	BASEPRI, r0
 800757a:	4770      	bx	lr
 800757c:	f3af 8000 	nop.w

08007580 <pxCurrentTCBConst2>:
 8007580:	20000738 	.word	0x20000738
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007584:	bf00      	nop
 8007586:	bf00      	nop

08007588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007588:	4808      	ldr	r0, [pc, #32]	@ (80075ac <prvPortStartFirstTask+0x24>)
 800758a:	6800      	ldr	r0, [r0, #0]
 800758c:	6800      	ldr	r0, [r0, #0]
 800758e:	f380 8808 	msr	MSP, r0
 8007592:	f04f 0000 	mov.w	r0, #0
 8007596:	f380 8814 	msr	CONTROL, r0
 800759a:	b662      	cpsie	i
 800759c:	b661      	cpsie	f
 800759e:	f3bf 8f4f 	dsb	sy
 80075a2:	f3bf 8f6f 	isb	sy
 80075a6:	df00      	svc	0
 80075a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80075aa:	bf00      	nop
 80075ac:	e000ed08 	.word	0xe000ed08

080075b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b086      	sub	sp, #24
 80075b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80075b6:	4b47      	ldr	r3, [pc, #284]	@ (80076d4 <xPortStartScheduler+0x124>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a47      	ldr	r2, [pc, #284]	@ (80076d8 <xPortStartScheduler+0x128>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d10b      	bne.n	80075d8 <xPortStartScheduler+0x28>
	__asm volatile
 80075c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075c4:	f383 8811 	msr	BASEPRI, r3
 80075c8:	f3bf 8f6f 	isb	sy
 80075cc:	f3bf 8f4f 	dsb	sy
 80075d0:	613b      	str	r3, [r7, #16]
}
 80075d2:	bf00      	nop
 80075d4:	bf00      	nop
 80075d6:	e7fd      	b.n	80075d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80075d8:	4b3e      	ldr	r3, [pc, #248]	@ (80076d4 <xPortStartScheduler+0x124>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a3f      	ldr	r2, [pc, #252]	@ (80076dc <xPortStartScheduler+0x12c>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d10b      	bne.n	80075fa <xPortStartScheduler+0x4a>
	__asm volatile
 80075e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075e6:	f383 8811 	msr	BASEPRI, r3
 80075ea:	f3bf 8f6f 	isb	sy
 80075ee:	f3bf 8f4f 	dsb	sy
 80075f2:	60fb      	str	r3, [r7, #12]
}
 80075f4:	bf00      	nop
 80075f6:	bf00      	nop
 80075f8:	e7fd      	b.n	80075f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80075fa:	4b39      	ldr	r3, [pc, #228]	@ (80076e0 <xPortStartScheduler+0x130>)
 80075fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	b2db      	uxtb	r3, r3
 8007604:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	22ff      	movs	r2, #255	@ 0xff
 800760a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	b2db      	uxtb	r3, r3
 8007612:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007614:	78fb      	ldrb	r3, [r7, #3]
 8007616:	b2db      	uxtb	r3, r3
 8007618:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800761c:	b2da      	uxtb	r2, r3
 800761e:	4b31      	ldr	r3, [pc, #196]	@ (80076e4 <xPortStartScheduler+0x134>)
 8007620:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007622:	4b31      	ldr	r3, [pc, #196]	@ (80076e8 <xPortStartScheduler+0x138>)
 8007624:	2207      	movs	r2, #7
 8007626:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007628:	e009      	b.n	800763e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800762a:	4b2f      	ldr	r3, [pc, #188]	@ (80076e8 <xPortStartScheduler+0x138>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	3b01      	subs	r3, #1
 8007630:	4a2d      	ldr	r2, [pc, #180]	@ (80076e8 <xPortStartScheduler+0x138>)
 8007632:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007634:	78fb      	ldrb	r3, [r7, #3]
 8007636:	b2db      	uxtb	r3, r3
 8007638:	005b      	lsls	r3, r3, #1
 800763a:	b2db      	uxtb	r3, r3
 800763c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800763e:	78fb      	ldrb	r3, [r7, #3]
 8007640:	b2db      	uxtb	r3, r3
 8007642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007646:	2b80      	cmp	r3, #128	@ 0x80
 8007648:	d0ef      	beq.n	800762a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800764a:	4b27      	ldr	r3, [pc, #156]	@ (80076e8 <xPortStartScheduler+0x138>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f1c3 0307 	rsb	r3, r3, #7
 8007652:	2b04      	cmp	r3, #4
 8007654:	d00b      	beq.n	800766e <xPortStartScheduler+0xbe>
	__asm volatile
 8007656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800765a:	f383 8811 	msr	BASEPRI, r3
 800765e:	f3bf 8f6f 	isb	sy
 8007662:	f3bf 8f4f 	dsb	sy
 8007666:	60bb      	str	r3, [r7, #8]
}
 8007668:	bf00      	nop
 800766a:	bf00      	nop
 800766c:	e7fd      	b.n	800766a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800766e:	4b1e      	ldr	r3, [pc, #120]	@ (80076e8 <xPortStartScheduler+0x138>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	021b      	lsls	r3, r3, #8
 8007674:	4a1c      	ldr	r2, [pc, #112]	@ (80076e8 <xPortStartScheduler+0x138>)
 8007676:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007678:	4b1b      	ldr	r3, [pc, #108]	@ (80076e8 <xPortStartScheduler+0x138>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007680:	4a19      	ldr	r2, [pc, #100]	@ (80076e8 <xPortStartScheduler+0x138>)
 8007682:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	b2da      	uxtb	r2, r3
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800768c:	4b17      	ldr	r3, [pc, #92]	@ (80076ec <xPortStartScheduler+0x13c>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a16      	ldr	r2, [pc, #88]	@ (80076ec <xPortStartScheduler+0x13c>)
 8007692:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007696:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007698:	4b14      	ldr	r3, [pc, #80]	@ (80076ec <xPortStartScheduler+0x13c>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a13      	ldr	r2, [pc, #76]	@ (80076ec <xPortStartScheduler+0x13c>)
 800769e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80076a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80076a4:	f000 f8da 	bl	800785c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80076a8:	4b11      	ldr	r3, [pc, #68]	@ (80076f0 <xPortStartScheduler+0x140>)
 80076aa:	2200      	movs	r2, #0
 80076ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80076ae:	f000 f8f9 	bl	80078a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80076b2:	4b10      	ldr	r3, [pc, #64]	@ (80076f4 <xPortStartScheduler+0x144>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a0f      	ldr	r2, [pc, #60]	@ (80076f4 <xPortStartScheduler+0x144>)
 80076b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80076bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80076be:	f7ff ff63 	bl	8007588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80076c2:	f7fe fdb3 	bl	800622c <vTaskSwitchContext>
	prvTaskExitError();
 80076c6:	f7ff ff17 	bl	80074f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3718      	adds	r7, #24
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	e000ed00 	.word	0xe000ed00
 80076d8:	410fc271 	.word	0x410fc271
 80076dc:	410fc270 	.word	0x410fc270
 80076e0:	e000e400 	.word	0xe000e400
 80076e4:	20000988 	.word	0x20000988
 80076e8:	2000098c 	.word	0x2000098c
 80076ec:	e000ed20 	.word	0xe000ed20
 80076f0:	2000000c 	.word	0x2000000c
 80076f4:	e000ef34 	.word	0xe000ef34

080076f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
	__asm volatile
 80076fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007702:	f383 8811 	msr	BASEPRI, r3
 8007706:	f3bf 8f6f 	isb	sy
 800770a:	f3bf 8f4f 	dsb	sy
 800770e:	607b      	str	r3, [r7, #4]
}
 8007710:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007712:	4b10      	ldr	r3, [pc, #64]	@ (8007754 <vPortEnterCritical+0x5c>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	3301      	adds	r3, #1
 8007718:	4a0e      	ldr	r2, [pc, #56]	@ (8007754 <vPortEnterCritical+0x5c>)
 800771a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800771c:	4b0d      	ldr	r3, [pc, #52]	@ (8007754 <vPortEnterCritical+0x5c>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2b01      	cmp	r3, #1
 8007722:	d110      	bne.n	8007746 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007724:	4b0c      	ldr	r3, [pc, #48]	@ (8007758 <vPortEnterCritical+0x60>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	b2db      	uxtb	r3, r3
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00b      	beq.n	8007746 <vPortEnterCritical+0x4e>
	__asm volatile
 800772e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007732:	f383 8811 	msr	BASEPRI, r3
 8007736:	f3bf 8f6f 	isb	sy
 800773a:	f3bf 8f4f 	dsb	sy
 800773e:	603b      	str	r3, [r7, #0]
}
 8007740:	bf00      	nop
 8007742:	bf00      	nop
 8007744:	e7fd      	b.n	8007742 <vPortEnterCritical+0x4a>
	}
}
 8007746:	bf00      	nop
 8007748:	370c      	adds	r7, #12
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr
 8007752:	bf00      	nop
 8007754:	2000000c 	.word	0x2000000c
 8007758:	e000ed04 	.word	0xe000ed04

0800775c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007762:	4b12      	ldr	r3, [pc, #72]	@ (80077ac <vPortExitCritical+0x50>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d10b      	bne.n	8007782 <vPortExitCritical+0x26>
	__asm volatile
 800776a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800776e:	f383 8811 	msr	BASEPRI, r3
 8007772:	f3bf 8f6f 	isb	sy
 8007776:	f3bf 8f4f 	dsb	sy
 800777a:	607b      	str	r3, [r7, #4]
}
 800777c:	bf00      	nop
 800777e:	bf00      	nop
 8007780:	e7fd      	b.n	800777e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007782:	4b0a      	ldr	r3, [pc, #40]	@ (80077ac <vPortExitCritical+0x50>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	3b01      	subs	r3, #1
 8007788:	4a08      	ldr	r2, [pc, #32]	@ (80077ac <vPortExitCritical+0x50>)
 800778a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800778c:	4b07      	ldr	r3, [pc, #28]	@ (80077ac <vPortExitCritical+0x50>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d105      	bne.n	80077a0 <vPortExitCritical+0x44>
 8007794:	2300      	movs	r3, #0
 8007796:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	f383 8811 	msr	BASEPRI, r3
}
 800779e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80077a0:	bf00      	nop
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr
 80077ac:	2000000c 	.word	0x2000000c

080077b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80077b0:	f3ef 8009 	mrs	r0, PSP
 80077b4:	f3bf 8f6f 	isb	sy
 80077b8:	4b15      	ldr	r3, [pc, #84]	@ (8007810 <pxCurrentTCBConst>)
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	f01e 0f10 	tst.w	lr, #16
 80077c0:	bf08      	it	eq
 80077c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80077c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ca:	6010      	str	r0, [r2, #0]
 80077cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80077d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80077d4:	f380 8811 	msr	BASEPRI, r0
 80077d8:	f3bf 8f4f 	dsb	sy
 80077dc:	f3bf 8f6f 	isb	sy
 80077e0:	f7fe fd24 	bl	800622c <vTaskSwitchContext>
 80077e4:	f04f 0000 	mov.w	r0, #0
 80077e8:	f380 8811 	msr	BASEPRI, r0
 80077ec:	bc09      	pop	{r0, r3}
 80077ee:	6819      	ldr	r1, [r3, #0]
 80077f0:	6808      	ldr	r0, [r1, #0]
 80077f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077f6:	f01e 0f10 	tst.w	lr, #16
 80077fa:	bf08      	it	eq
 80077fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007800:	f380 8809 	msr	PSP, r0
 8007804:	f3bf 8f6f 	isb	sy
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop
 800780c:	f3af 8000 	nop.w

08007810 <pxCurrentTCBConst>:
 8007810:	20000738 	.word	0x20000738
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007814:	bf00      	nop
 8007816:	bf00      	nop

08007818 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
	__asm volatile
 800781e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007822:	f383 8811 	msr	BASEPRI, r3
 8007826:	f3bf 8f6f 	isb	sy
 800782a:	f3bf 8f4f 	dsb	sy
 800782e:	607b      	str	r3, [r7, #4]
}
 8007830:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007832:	f7fe fc41 	bl	80060b8 <xTaskIncrementTick>
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d003      	beq.n	8007844 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800783c:	4b06      	ldr	r3, [pc, #24]	@ (8007858 <SysTick_Handler+0x40>)
 800783e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007842:	601a      	str	r2, [r3, #0]
 8007844:	2300      	movs	r3, #0
 8007846:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	f383 8811 	msr	BASEPRI, r3
}
 800784e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007850:	bf00      	nop
 8007852:	3708      	adds	r7, #8
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}
 8007858:	e000ed04 	.word	0xe000ed04

0800785c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800785c:	b480      	push	{r7}
 800785e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007860:	4b0b      	ldr	r3, [pc, #44]	@ (8007890 <vPortSetupTimerInterrupt+0x34>)
 8007862:	2200      	movs	r2, #0
 8007864:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007866:	4b0b      	ldr	r3, [pc, #44]	@ (8007894 <vPortSetupTimerInterrupt+0x38>)
 8007868:	2200      	movs	r2, #0
 800786a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800786c:	4b0a      	ldr	r3, [pc, #40]	@ (8007898 <vPortSetupTimerInterrupt+0x3c>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a0a      	ldr	r2, [pc, #40]	@ (800789c <vPortSetupTimerInterrupt+0x40>)
 8007872:	fba2 2303 	umull	r2, r3, r2, r3
 8007876:	099b      	lsrs	r3, r3, #6
 8007878:	4a09      	ldr	r2, [pc, #36]	@ (80078a0 <vPortSetupTimerInterrupt+0x44>)
 800787a:	3b01      	subs	r3, #1
 800787c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800787e:	4b04      	ldr	r3, [pc, #16]	@ (8007890 <vPortSetupTimerInterrupt+0x34>)
 8007880:	2207      	movs	r2, #7
 8007882:	601a      	str	r2, [r3, #0]
}
 8007884:	bf00      	nop
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop
 8007890:	e000e010 	.word	0xe000e010
 8007894:	e000e018 	.word	0xe000e018
 8007898:	20000000 	.word	0x20000000
 800789c:	10624dd3 	.word	0x10624dd3
 80078a0:	e000e014 	.word	0xe000e014

080078a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80078a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80078b4 <vPortEnableVFP+0x10>
 80078a8:	6801      	ldr	r1, [r0, #0]
 80078aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80078ae:	6001      	str	r1, [r0, #0]
 80078b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80078b2:	bf00      	nop
 80078b4:	e000ed88 	.word	0xe000ed88

080078b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80078be:	f3ef 8305 	mrs	r3, IPSR
 80078c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2b0f      	cmp	r3, #15
 80078c8:	d915      	bls.n	80078f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80078ca:	4a18      	ldr	r2, [pc, #96]	@ (800792c <vPortValidateInterruptPriority+0x74>)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	4413      	add	r3, r2
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80078d4:	4b16      	ldr	r3, [pc, #88]	@ (8007930 <vPortValidateInterruptPriority+0x78>)
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	7afa      	ldrb	r2, [r7, #11]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d20b      	bcs.n	80078f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80078de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078e2:	f383 8811 	msr	BASEPRI, r3
 80078e6:	f3bf 8f6f 	isb	sy
 80078ea:	f3bf 8f4f 	dsb	sy
 80078ee:	607b      	str	r3, [r7, #4]
}
 80078f0:	bf00      	nop
 80078f2:	bf00      	nop
 80078f4:	e7fd      	b.n	80078f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80078f6:	4b0f      	ldr	r3, [pc, #60]	@ (8007934 <vPortValidateInterruptPriority+0x7c>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80078fe:	4b0e      	ldr	r3, [pc, #56]	@ (8007938 <vPortValidateInterruptPriority+0x80>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	429a      	cmp	r2, r3
 8007904:	d90b      	bls.n	800791e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800790a:	f383 8811 	msr	BASEPRI, r3
 800790e:	f3bf 8f6f 	isb	sy
 8007912:	f3bf 8f4f 	dsb	sy
 8007916:	603b      	str	r3, [r7, #0]
}
 8007918:	bf00      	nop
 800791a:	bf00      	nop
 800791c:	e7fd      	b.n	800791a <vPortValidateInterruptPriority+0x62>
	}
 800791e:	bf00      	nop
 8007920:	3714      	adds	r7, #20
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop
 800792c:	e000e3f0 	.word	0xe000e3f0
 8007930:	20000988 	.word	0x20000988
 8007934:	e000ed0c 	.word	0xe000ed0c
 8007938:	2000098c 	.word	0x2000098c

0800793c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b08a      	sub	sp, #40	@ 0x28
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007944:	2300      	movs	r3, #0
 8007946:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007948:	f7fe fafa 	bl	8005f40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800794c:	4b5f      	ldr	r3, [pc, #380]	@ (8007acc <pvPortMalloc+0x190>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d101      	bne.n	8007958 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007954:	f000 f92a 	bl	8007bac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007958:	4b5d      	ldr	r3, [pc, #372]	@ (8007ad0 <pvPortMalloc+0x194>)
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	4013      	ands	r3, r2
 8007960:	2b00      	cmp	r3, #0
 8007962:	f040 8095 	bne.w	8007a90 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d01e      	beq.n	80079aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800796c:	2208      	movs	r2, #8
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4413      	add	r3, r2
 8007972:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f003 0307 	and.w	r3, r3, #7
 800797a:	2b00      	cmp	r3, #0
 800797c:	d015      	beq.n	80079aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f023 0307 	bic.w	r3, r3, #7
 8007984:	3308      	adds	r3, #8
 8007986:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f003 0307 	and.w	r3, r3, #7
 800798e:	2b00      	cmp	r3, #0
 8007990:	d00b      	beq.n	80079aa <pvPortMalloc+0x6e>
	__asm volatile
 8007992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007996:	f383 8811 	msr	BASEPRI, r3
 800799a:	f3bf 8f6f 	isb	sy
 800799e:	f3bf 8f4f 	dsb	sy
 80079a2:	617b      	str	r3, [r7, #20]
}
 80079a4:	bf00      	nop
 80079a6:	bf00      	nop
 80079a8:	e7fd      	b.n	80079a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d06f      	beq.n	8007a90 <pvPortMalloc+0x154>
 80079b0:	4b48      	ldr	r3, [pc, #288]	@ (8007ad4 <pvPortMalloc+0x198>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d86a      	bhi.n	8007a90 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80079ba:	4b47      	ldr	r3, [pc, #284]	@ (8007ad8 <pvPortMalloc+0x19c>)
 80079bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80079be:	4b46      	ldr	r3, [pc, #280]	@ (8007ad8 <pvPortMalloc+0x19c>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80079c4:	e004      	b.n	80079d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80079c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80079ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80079d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d903      	bls.n	80079e2 <pvPortMalloc+0xa6>
 80079da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d1f1      	bne.n	80079c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80079e2:	4b3a      	ldr	r3, [pc, #232]	@ (8007acc <pvPortMalloc+0x190>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d051      	beq.n	8007a90 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80079ec:	6a3b      	ldr	r3, [r7, #32]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	2208      	movs	r2, #8
 80079f2:	4413      	add	r3, r2
 80079f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80079f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	6a3b      	ldr	r3, [r7, #32]
 80079fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80079fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a00:	685a      	ldr	r2, [r3, #4]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	1ad2      	subs	r2, r2, r3
 8007a06:	2308      	movs	r3, #8
 8007a08:	005b      	lsls	r3, r3, #1
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d920      	bls.n	8007a50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007a0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	4413      	add	r3, r2
 8007a14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a16:	69bb      	ldr	r3, [r7, #24]
 8007a18:	f003 0307 	and.w	r3, r3, #7
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00b      	beq.n	8007a38 <pvPortMalloc+0xfc>
	__asm volatile
 8007a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a24:	f383 8811 	msr	BASEPRI, r3
 8007a28:	f3bf 8f6f 	isb	sy
 8007a2c:	f3bf 8f4f 	dsb	sy
 8007a30:	613b      	str	r3, [r7, #16]
}
 8007a32:	bf00      	nop
 8007a34:	bf00      	nop
 8007a36:	e7fd      	b.n	8007a34 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a3a:	685a      	ldr	r2, [r3, #4]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	1ad2      	subs	r2, r2, r3
 8007a40:	69bb      	ldr	r3, [r7, #24]
 8007a42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007a4a:	69b8      	ldr	r0, [r7, #24]
 8007a4c:	f000 f910 	bl	8007c70 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007a50:	4b20      	ldr	r3, [pc, #128]	@ (8007ad4 <pvPortMalloc+0x198>)
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	1ad3      	subs	r3, r2, r3
 8007a5a:	4a1e      	ldr	r2, [pc, #120]	@ (8007ad4 <pvPortMalloc+0x198>)
 8007a5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007a5e:	4b1d      	ldr	r3, [pc, #116]	@ (8007ad4 <pvPortMalloc+0x198>)
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	4b1e      	ldr	r3, [pc, #120]	@ (8007adc <pvPortMalloc+0x1a0>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d203      	bcs.n	8007a72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007a6a:	4b1a      	ldr	r3, [pc, #104]	@ (8007ad4 <pvPortMalloc+0x198>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a1b      	ldr	r2, [pc, #108]	@ (8007adc <pvPortMalloc+0x1a0>)
 8007a70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a74:	685a      	ldr	r2, [r3, #4]
 8007a76:	4b16      	ldr	r3, [pc, #88]	@ (8007ad0 <pvPortMalloc+0x194>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	431a      	orrs	r2, r3
 8007a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a82:	2200      	movs	r2, #0
 8007a84:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007a86:	4b16      	ldr	r3, [pc, #88]	@ (8007ae0 <pvPortMalloc+0x1a4>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	4a14      	ldr	r2, [pc, #80]	@ (8007ae0 <pvPortMalloc+0x1a4>)
 8007a8e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007a90:	f7fe fa64 	bl	8005f5c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8007a94:	69fb      	ldr	r3, [r7, #28]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d101      	bne.n	8007a9e <pvPortMalloc+0x162>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8007a9a:	f7f8 fff7 	bl	8000a8c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a9e:	69fb      	ldr	r3, [r7, #28]
 8007aa0:	f003 0307 	and.w	r3, r3, #7
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00b      	beq.n	8007ac0 <pvPortMalloc+0x184>
	__asm volatile
 8007aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aac:	f383 8811 	msr	BASEPRI, r3
 8007ab0:	f3bf 8f6f 	isb	sy
 8007ab4:	f3bf 8f4f 	dsb	sy
 8007ab8:	60fb      	str	r3, [r7, #12]
}
 8007aba:	bf00      	nop
 8007abc:	bf00      	nop
 8007abe:	e7fd      	b.n	8007abc <pvPortMalloc+0x180>
	return pvReturn;
 8007ac0:	69fb      	ldr	r3, [r7, #28]
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3728      	adds	r7, #40	@ 0x28
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	20004598 	.word	0x20004598
 8007ad0:	200045ac 	.word	0x200045ac
 8007ad4:	2000459c 	.word	0x2000459c
 8007ad8:	20004590 	.word	0x20004590
 8007adc:	200045a0 	.word	0x200045a0
 8007ae0:	200045a4 	.word	0x200045a4

08007ae4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b086      	sub	sp, #24
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d04f      	beq.n	8007b96 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007af6:	2308      	movs	r3, #8
 8007af8:	425b      	negs	r3, r3
 8007afa:	697a      	ldr	r2, [r7, #20]
 8007afc:	4413      	add	r3, r2
 8007afe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	685a      	ldr	r2, [r3, #4]
 8007b08:	4b25      	ldr	r3, [pc, #148]	@ (8007ba0 <vPortFree+0xbc>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4013      	ands	r3, r2
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d10b      	bne.n	8007b2a <vPortFree+0x46>
	__asm volatile
 8007b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b16:	f383 8811 	msr	BASEPRI, r3
 8007b1a:	f3bf 8f6f 	isb	sy
 8007b1e:	f3bf 8f4f 	dsb	sy
 8007b22:	60fb      	str	r3, [r7, #12]
}
 8007b24:	bf00      	nop
 8007b26:	bf00      	nop
 8007b28:	e7fd      	b.n	8007b26 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00b      	beq.n	8007b4a <vPortFree+0x66>
	__asm volatile
 8007b32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b36:	f383 8811 	msr	BASEPRI, r3
 8007b3a:	f3bf 8f6f 	isb	sy
 8007b3e:	f3bf 8f4f 	dsb	sy
 8007b42:	60bb      	str	r3, [r7, #8]
}
 8007b44:	bf00      	nop
 8007b46:	bf00      	nop
 8007b48:	e7fd      	b.n	8007b46 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	685a      	ldr	r2, [r3, #4]
 8007b4e:	4b14      	ldr	r3, [pc, #80]	@ (8007ba0 <vPortFree+0xbc>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4013      	ands	r3, r2
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d01e      	beq.n	8007b96 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d11a      	bne.n	8007b96 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	685a      	ldr	r2, [r3, #4]
 8007b64:	4b0e      	ldr	r3, [pc, #56]	@ (8007ba0 <vPortFree+0xbc>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	43db      	mvns	r3, r3
 8007b6a:	401a      	ands	r2, r3
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007b70:	f7fe f9e6 	bl	8005f40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	685a      	ldr	r2, [r3, #4]
 8007b78:	4b0a      	ldr	r3, [pc, #40]	@ (8007ba4 <vPortFree+0xc0>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	4a09      	ldr	r2, [pc, #36]	@ (8007ba4 <vPortFree+0xc0>)
 8007b80:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007b82:	6938      	ldr	r0, [r7, #16]
 8007b84:	f000 f874 	bl	8007c70 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007b88:	4b07      	ldr	r3, [pc, #28]	@ (8007ba8 <vPortFree+0xc4>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	4a06      	ldr	r2, [pc, #24]	@ (8007ba8 <vPortFree+0xc4>)
 8007b90:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007b92:	f7fe f9e3 	bl	8005f5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007b96:	bf00      	nop
 8007b98:	3718      	adds	r7, #24
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	200045ac 	.word	0x200045ac
 8007ba4:	2000459c 	.word	0x2000459c
 8007ba8:	200045a8 	.word	0x200045a8

08007bac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007bac:	b480      	push	{r7}
 8007bae:	b085      	sub	sp, #20
 8007bb0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007bb2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007bb6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007bb8:	4b27      	ldr	r3, [pc, #156]	@ (8007c58 <prvHeapInit+0xac>)
 8007bba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f003 0307 	and.w	r3, r3, #7
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d00c      	beq.n	8007be0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	3307      	adds	r3, #7
 8007bca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f023 0307 	bic.w	r3, r3, #7
 8007bd2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007bd4:	68ba      	ldr	r2, [r7, #8]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	1ad3      	subs	r3, r2, r3
 8007bda:	4a1f      	ldr	r2, [pc, #124]	@ (8007c58 <prvHeapInit+0xac>)
 8007bdc:	4413      	add	r3, r2
 8007bde:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007be4:	4a1d      	ldr	r2, [pc, #116]	@ (8007c5c <prvHeapInit+0xb0>)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007bea:	4b1c      	ldr	r3, [pc, #112]	@ (8007c5c <prvHeapInit+0xb0>)
 8007bec:	2200      	movs	r2, #0
 8007bee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	68ba      	ldr	r2, [r7, #8]
 8007bf4:	4413      	add	r3, r2
 8007bf6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007bf8:	2208      	movs	r2, #8
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	1a9b      	subs	r3, r3, r2
 8007bfe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f023 0307 	bic.w	r3, r3, #7
 8007c06:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	4a15      	ldr	r2, [pc, #84]	@ (8007c60 <prvHeapInit+0xb4>)
 8007c0c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007c0e:	4b14      	ldr	r3, [pc, #80]	@ (8007c60 <prvHeapInit+0xb4>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	2200      	movs	r2, #0
 8007c14:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007c16:	4b12      	ldr	r3, [pc, #72]	@ (8007c60 <prvHeapInit+0xb4>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	68fa      	ldr	r2, [r7, #12]
 8007c26:	1ad2      	subs	r2, r2, r3
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8007c60 <prvHeapInit+0xb4>)
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	4a0a      	ldr	r2, [pc, #40]	@ (8007c64 <prvHeapInit+0xb8>)
 8007c3a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	4a09      	ldr	r2, [pc, #36]	@ (8007c68 <prvHeapInit+0xbc>)
 8007c42:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007c44:	4b09      	ldr	r3, [pc, #36]	@ (8007c6c <prvHeapInit+0xc0>)
 8007c46:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007c4a:	601a      	str	r2, [r3, #0]
}
 8007c4c:	bf00      	nop
 8007c4e:	3714      	adds	r7, #20
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr
 8007c58:	20000990 	.word	0x20000990
 8007c5c:	20004590 	.word	0x20004590
 8007c60:	20004598 	.word	0x20004598
 8007c64:	200045a0 	.word	0x200045a0
 8007c68:	2000459c 	.word	0x2000459c
 8007c6c:	200045ac 	.word	0x200045ac

08007c70 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007c70:	b480      	push	{r7}
 8007c72:	b085      	sub	sp, #20
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007c78:	4b28      	ldr	r3, [pc, #160]	@ (8007d1c <prvInsertBlockIntoFreeList+0xac>)
 8007c7a:	60fb      	str	r3, [r7, #12]
 8007c7c:	e002      	b.n	8007c84 <prvInsertBlockIntoFreeList+0x14>
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	60fb      	str	r3, [r7, #12]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d8f7      	bhi.n	8007c7e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	68ba      	ldr	r2, [r7, #8]
 8007c98:	4413      	add	r3, r2
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d108      	bne.n	8007cb2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	685a      	ldr	r2, [r3, #4]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	441a      	add	r2, r3
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	68ba      	ldr	r2, [r7, #8]
 8007cbc:	441a      	add	r2, r3
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d118      	bne.n	8007cf8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	4b15      	ldr	r3, [pc, #84]	@ (8007d20 <prvInsertBlockIntoFreeList+0xb0>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d00d      	beq.n	8007cee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	685a      	ldr	r2, [r3, #4]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	441a      	add	r2, r3
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	601a      	str	r2, [r3, #0]
 8007cec:	e008      	b.n	8007d00 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007cee:	4b0c      	ldr	r3, [pc, #48]	@ (8007d20 <prvInsertBlockIntoFreeList+0xb0>)
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	601a      	str	r2, [r3, #0]
 8007cf6:	e003      	b.n	8007d00 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d002      	beq.n	8007d0e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d0e:	bf00      	nop
 8007d10:	3714      	adds	r7, #20
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr
 8007d1a:	bf00      	nop
 8007d1c:	20004590 	.word	0x20004590
 8007d20:	20004598 	.word	0x20004598

08007d24 <rand>:
 8007d24:	4b16      	ldr	r3, [pc, #88]	@ (8007d80 <rand+0x5c>)
 8007d26:	b510      	push	{r4, lr}
 8007d28:	681c      	ldr	r4, [r3, #0]
 8007d2a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007d2c:	b9b3      	cbnz	r3, 8007d5c <rand+0x38>
 8007d2e:	2018      	movs	r0, #24
 8007d30:	f000 faac 	bl	800828c <malloc>
 8007d34:	4602      	mov	r2, r0
 8007d36:	6320      	str	r0, [r4, #48]	@ 0x30
 8007d38:	b920      	cbnz	r0, 8007d44 <rand+0x20>
 8007d3a:	4b12      	ldr	r3, [pc, #72]	@ (8007d84 <rand+0x60>)
 8007d3c:	4812      	ldr	r0, [pc, #72]	@ (8007d88 <rand+0x64>)
 8007d3e:	2152      	movs	r1, #82	@ 0x52
 8007d40:	f000 fa3c 	bl	80081bc <__assert_func>
 8007d44:	4911      	ldr	r1, [pc, #68]	@ (8007d8c <rand+0x68>)
 8007d46:	4b12      	ldr	r3, [pc, #72]	@ (8007d90 <rand+0x6c>)
 8007d48:	e9c0 1300 	strd	r1, r3, [r0]
 8007d4c:	4b11      	ldr	r3, [pc, #68]	@ (8007d94 <rand+0x70>)
 8007d4e:	6083      	str	r3, [r0, #8]
 8007d50:	230b      	movs	r3, #11
 8007d52:	8183      	strh	r3, [r0, #12]
 8007d54:	2100      	movs	r1, #0
 8007d56:	2001      	movs	r0, #1
 8007d58:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8007d5c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007d5e:	480e      	ldr	r0, [pc, #56]	@ (8007d98 <rand+0x74>)
 8007d60:	690b      	ldr	r3, [r1, #16]
 8007d62:	694c      	ldr	r4, [r1, #20]
 8007d64:	4a0d      	ldr	r2, [pc, #52]	@ (8007d9c <rand+0x78>)
 8007d66:	4358      	muls	r0, r3
 8007d68:	fb02 0004 	mla	r0, r2, r4, r0
 8007d6c:	fba3 3202 	umull	r3, r2, r3, r2
 8007d70:	3301      	adds	r3, #1
 8007d72:	eb40 0002 	adc.w	r0, r0, r2
 8007d76:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8007d7a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8007d7e:	bd10      	pop	{r4, pc}
 8007d80:	2000001c 	.word	0x2000001c
 8007d84:	080094f0 	.word	0x080094f0
 8007d88:	08009507 	.word	0x08009507
 8007d8c:	abcd330e 	.word	0xabcd330e
 8007d90:	e66d1234 	.word	0xe66d1234
 8007d94:	0005deec 	.word	0x0005deec
 8007d98:	5851f42d 	.word	0x5851f42d
 8007d9c:	4c957f2d 	.word	0x4c957f2d

08007da0 <std>:
 8007da0:	2300      	movs	r3, #0
 8007da2:	b510      	push	{r4, lr}
 8007da4:	4604      	mov	r4, r0
 8007da6:	e9c0 3300 	strd	r3, r3, [r0]
 8007daa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007dae:	6083      	str	r3, [r0, #8]
 8007db0:	8181      	strh	r1, [r0, #12]
 8007db2:	6643      	str	r3, [r0, #100]	@ 0x64
 8007db4:	81c2      	strh	r2, [r0, #14]
 8007db6:	6183      	str	r3, [r0, #24]
 8007db8:	4619      	mov	r1, r3
 8007dba:	2208      	movs	r2, #8
 8007dbc:	305c      	adds	r0, #92	@ 0x5c
 8007dbe:	f000 f914 	bl	8007fea <memset>
 8007dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8007df8 <std+0x58>)
 8007dc4:	6263      	str	r3, [r4, #36]	@ 0x24
 8007dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8007dfc <std+0x5c>)
 8007dc8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007dca:	4b0d      	ldr	r3, [pc, #52]	@ (8007e00 <std+0x60>)
 8007dcc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007dce:	4b0d      	ldr	r3, [pc, #52]	@ (8007e04 <std+0x64>)
 8007dd0:	6323      	str	r3, [r4, #48]	@ 0x30
 8007dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8007e08 <std+0x68>)
 8007dd4:	6224      	str	r4, [r4, #32]
 8007dd6:	429c      	cmp	r4, r3
 8007dd8:	d006      	beq.n	8007de8 <std+0x48>
 8007dda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007dde:	4294      	cmp	r4, r2
 8007de0:	d002      	beq.n	8007de8 <std+0x48>
 8007de2:	33d0      	adds	r3, #208	@ 0xd0
 8007de4:	429c      	cmp	r4, r3
 8007de6:	d105      	bne.n	8007df4 <std+0x54>
 8007de8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007df0:	f000 b9ca 	b.w	8008188 <__retarget_lock_init_recursive>
 8007df4:	bd10      	pop	{r4, pc}
 8007df6:	bf00      	nop
 8007df8:	08007f65 	.word	0x08007f65
 8007dfc:	08007f87 	.word	0x08007f87
 8007e00:	08007fbf 	.word	0x08007fbf
 8007e04:	08007fe3 	.word	0x08007fe3
 8007e08:	200045b0 	.word	0x200045b0

08007e0c <stdio_exit_handler>:
 8007e0c:	4a02      	ldr	r2, [pc, #8]	@ (8007e18 <stdio_exit_handler+0xc>)
 8007e0e:	4903      	ldr	r1, [pc, #12]	@ (8007e1c <stdio_exit_handler+0x10>)
 8007e10:	4803      	ldr	r0, [pc, #12]	@ (8007e20 <stdio_exit_handler+0x14>)
 8007e12:	f000 b869 	b.w	8007ee8 <_fwalk_sglue>
 8007e16:	bf00      	nop
 8007e18:	20000010 	.word	0x20000010
 8007e1c:	08008acd 	.word	0x08008acd
 8007e20:	20000020 	.word	0x20000020

08007e24 <cleanup_stdio>:
 8007e24:	6841      	ldr	r1, [r0, #4]
 8007e26:	4b0c      	ldr	r3, [pc, #48]	@ (8007e58 <cleanup_stdio+0x34>)
 8007e28:	4299      	cmp	r1, r3
 8007e2a:	b510      	push	{r4, lr}
 8007e2c:	4604      	mov	r4, r0
 8007e2e:	d001      	beq.n	8007e34 <cleanup_stdio+0x10>
 8007e30:	f000 fe4c 	bl	8008acc <_fflush_r>
 8007e34:	68a1      	ldr	r1, [r4, #8]
 8007e36:	4b09      	ldr	r3, [pc, #36]	@ (8007e5c <cleanup_stdio+0x38>)
 8007e38:	4299      	cmp	r1, r3
 8007e3a:	d002      	beq.n	8007e42 <cleanup_stdio+0x1e>
 8007e3c:	4620      	mov	r0, r4
 8007e3e:	f000 fe45 	bl	8008acc <_fflush_r>
 8007e42:	68e1      	ldr	r1, [r4, #12]
 8007e44:	4b06      	ldr	r3, [pc, #24]	@ (8007e60 <cleanup_stdio+0x3c>)
 8007e46:	4299      	cmp	r1, r3
 8007e48:	d004      	beq.n	8007e54 <cleanup_stdio+0x30>
 8007e4a:	4620      	mov	r0, r4
 8007e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e50:	f000 be3c 	b.w	8008acc <_fflush_r>
 8007e54:	bd10      	pop	{r4, pc}
 8007e56:	bf00      	nop
 8007e58:	200045b0 	.word	0x200045b0
 8007e5c:	20004618 	.word	0x20004618
 8007e60:	20004680 	.word	0x20004680

08007e64 <global_stdio_init.part.0>:
 8007e64:	b510      	push	{r4, lr}
 8007e66:	4b0b      	ldr	r3, [pc, #44]	@ (8007e94 <global_stdio_init.part.0+0x30>)
 8007e68:	4c0b      	ldr	r4, [pc, #44]	@ (8007e98 <global_stdio_init.part.0+0x34>)
 8007e6a:	4a0c      	ldr	r2, [pc, #48]	@ (8007e9c <global_stdio_init.part.0+0x38>)
 8007e6c:	601a      	str	r2, [r3, #0]
 8007e6e:	4620      	mov	r0, r4
 8007e70:	2200      	movs	r2, #0
 8007e72:	2104      	movs	r1, #4
 8007e74:	f7ff ff94 	bl	8007da0 <std>
 8007e78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	2109      	movs	r1, #9
 8007e80:	f7ff ff8e 	bl	8007da0 <std>
 8007e84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007e88:	2202      	movs	r2, #2
 8007e8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e8e:	2112      	movs	r1, #18
 8007e90:	f7ff bf86 	b.w	8007da0 <std>
 8007e94:	200046e8 	.word	0x200046e8
 8007e98:	200045b0 	.word	0x200045b0
 8007e9c:	08007e0d 	.word	0x08007e0d

08007ea0 <__sfp_lock_acquire>:
 8007ea0:	4801      	ldr	r0, [pc, #4]	@ (8007ea8 <__sfp_lock_acquire+0x8>)
 8007ea2:	f000 b972 	b.w	800818a <__retarget_lock_acquire_recursive>
 8007ea6:	bf00      	nop
 8007ea8:	200046f1 	.word	0x200046f1

08007eac <__sfp_lock_release>:
 8007eac:	4801      	ldr	r0, [pc, #4]	@ (8007eb4 <__sfp_lock_release+0x8>)
 8007eae:	f000 b96d 	b.w	800818c <__retarget_lock_release_recursive>
 8007eb2:	bf00      	nop
 8007eb4:	200046f1 	.word	0x200046f1

08007eb8 <__sinit>:
 8007eb8:	b510      	push	{r4, lr}
 8007eba:	4604      	mov	r4, r0
 8007ebc:	f7ff fff0 	bl	8007ea0 <__sfp_lock_acquire>
 8007ec0:	6a23      	ldr	r3, [r4, #32]
 8007ec2:	b11b      	cbz	r3, 8007ecc <__sinit+0x14>
 8007ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ec8:	f7ff bff0 	b.w	8007eac <__sfp_lock_release>
 8007ecc:	4b04      	ldr	r3, [pc, #16]	@ (8007ee0 <__sinit+0x28>)
 8007ece:	6223      	str	r3, [r4, #32]
 8007ed0:	4b04      	ldr	r3, [pc, #16]	@ (8007ee4 <__sinit+0x2c>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d1f5      	bne.n	8007ec4 <__sinit+0xc>
 8007ed8:	f7ff ffc4 	bl	8007e64 <global_stdio_init.part.0>
 8007edc:	e7f2      	b.n	8007ec4 <__sinit+0xc>
 8007ede:	bf00      	nop
 8007ee0:	08007e25 	.word	0x08007e25
 8007ee4:	200046e8 	.word	0x200046e8

08007ee8 <_fwalk_sglue>:
 8007ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007eec:	4607      	mov	r7, r0
 8007eee:	4688      	mov	r8, r1
 8007ef0:	4614      	mov	r4, r2
 8007ef2:	2600      	movs	r6, #0
 8007ef4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ef8:	f1b9 0901 	subs.w	r9, r9, #1
 8007efc:	d505      	bpl.n	8007f0a <_fwalk_sglue+0x22>
 8007efe:	6824      	ldr	r4, [r4, #0]
 8007f00:	2c00      	cmp	r4, #0
 8007f02:	d1f7      	bne.n	8007ef4 <_fwalk_sglue+0xc>
 8007f04:	4630      	mov	r0, r6
 8007f06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f0a:	89ab      	ldrh	r3, [r5, #12]
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d907      	bls.n	8007f20 <_fwalk_sglue+0x38>
 8007f10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f14:	3301      	adds	r3, #1
 8007f16:	d003      	beq.n	8007f20 <_fwalk_sglue+0x38>
 8007f18:	4629      	mov	r1, r5
 8007f1a:	4638      	mov	r0, r7
 8007f1c:	47c0      	blx	r8
 8007f1e:	4306      	orrs	r6, r0
 8007f20:	3568      	adds	r5, #104	@ 0x68
 8007f22:	e7e9      	b.n	8007ef8 <_fwalk_sglue+0x10>

08007f24 <siprintf>:
 8007f24:	b40e      	push	{r1, r2, r3}
 8007f26:	b500      	push	{lr}
 8007f28:	b09c      	sub	sp, #112	@ 0x70
 8007f2a:	ab1d      	add	r3, sp, #116	@ 0x74
 8007f2c:	9002      	str	r0, [sp, #8]
 8007f2e:	9006      	str	r0, [sp, #24]
 8007f30:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007f34:	4809      	ldr	r0, [pc, #36]	@ (8007f5c <siprintf+0x38>)
 8007f36:	9107      	str	r1, [sp, #28]
 8007f38:	9104      	str	r1, [sp, #16]
 8007f3a:	4909      	ldr	r1, [pc, #36]	@ (8007f60 <siprintf+0x3c>)
 8007f3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f40:	9105      	str	r1, [sp, #20]
 8007f42:	6800      	ldr	r0, [r0, #0]
 8007f44:	9301      	str	r3, [sp, #4]
 8007f46:	a902      	add	r1, sp, #8
 8007f48:	f000 fab2 	bl	80084b0 <_svfiprintf_r>
 8007f4c:	9b02      	ldr	r3, [sp, #8]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	701a      	strb	r2, [r3, #0]
 8007f52:	b01c      	add	sp, #112	@ 0x70
 8007f54:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f58:	b003      	add	sp, #12
 8007f5a:	4770      	bx	lr
 8007f5c:	2000001c 	.word	0x2000001c
 8007f60:	ffff0208 	.word	0xffff0208

08007f64 <__sread>:
 8007f64:	b510      	push	{r4, lr}
 8007f66:	460c      	mov	r4, r1
 8007f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f6c:	f000 f8be 	bl	80080ec <_read_r>
 8007f70:	2800      	cmp	r0, #0
 8007f72:	bfab      	itete	ge
 8007f74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007f76:	89a3      	ldrhlt	r3, [r4, #12]
 8007f78:	181b      	addge	r3, r3, r0
 8007f7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007f7e:	bfac      	ite	ge
 8007f80:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007f82:	81a3      	strhlt	r3, [r4, #12]
 8007f84:	bd10      	pop	{r4, pc}

08007f86 <__swrite>:
 8007f86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f8a:	461f      	mov	r7, r3
 8007f8c:	898b      	ldrh	r3, [r1, #12]
 8007f8e:	05db      	lsls	r3, r3, #23
 8007f90:	4605      	mov	r5, r0
 8007f92:	460c      	mov	r4, r1
 8007f94:	4616      	mov	r6, r2
 8007f96:	d505      	bpl.n	8007fa4 <__swrite+0x1e>
 8007f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f9c:	2302      	movs	r3, #2
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f000 f892 	bl	80080c8 <_lseek_r>
 8007fa4:	89a3      	ldrh	r3, [r4, #12]
 8007fa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007faa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007fae:	81a3      	strh	r3, [r4, #12]
 8007fb0:	4632      	mov	r2, r6
 8007fb2:	463b      	mov	r3, r7
 8007fb4:	4628      	mov	r0, r5
 8007fb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fba:	f000 b8a9 	b.w	8008110 <_write_r>

08007fbe <__sseek>:
 8007fbe:	b510      	push	{r4, lr}
 8007fc0:	460c      	mov	r4, r1
 8007fc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fc6:	f000 f87f 	bl	80080c8 <_lseek_r>
 8007fca:	1c43      	adds	r3, r0, #1
 8007fcc:	89a3      	ldrh	r3, [r4, #12]
 8007fce:	bf15      	itete	ne
 8007fd0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007fd2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007fd6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007fda:	81a3      	strheq	r3, [r4, #12]
 8007fdc:	bf18      	it	ne
 8007fde:	81a3      	strhne	r3, [r4, #12]
 8007fe0:	bd10      	pop	{r4, pc}

08007fe2 <__sclose>:
 8007fe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fe6:	f000 b809 	b.w	8007ffc <_close_r>

08007fea <memset>:
 8007fea:	4402      	add	r2, r0
 8007fec:	4603      	mov	r3, r0
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d100      	bne.n	8007ff4 <memset+0xa>
 8007ff2:	4770      	bx	lr
 8007ff4:	f803 1b01 	strb.w	r1, [r3], #1
 8007ff8:	e7f9      	b.n	8007fee <memset+0x4>
	...

08007ffc <_close_r>:
 8007ffc:	b538      	push	{r3, r4, r5, lr}
 8007ffe:	4d06      	ldr	r5, [pc, #24]	@ (8008018 <_close_r+0x1c>)
 8008000:	2300      	movs	r3, #0
 8008002:	4604      	mov	r4, r0
 8008004:	4608      	mov	r0, r1
 8008006:	602b      	str	r3, [r5, #0]
 8008008:	f7f9 fa9e 	bl	8001548 <_close>
 800800c:	1c43      	adds	r3, r0, #1
 800800e:	d102      	bne.n	8008016 <_close_r+0x1a>
 8008010:	682b      	ldr	r3, [r5, #0]
 8008012:	b103      	cbz	r3, 8008016 <_close_r+0x1a>
 8008014:	6023      	str	r3, [r4, #0]
 8008016:	bd38      	pop	{r3, r4, r5, pc}
 8008018:	200046ec 	.word	0x200046ec

0800801c <_reclaim_reent>:
 800801c:	4b29      	ldr	r3, [pc, #164]	@ (80080c4 <_reclaim_reent+0xa8>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4283      	cmp	r3, r0
 8008022:	b570      	push	{r4, r5, r6, lr}
 8008024:	4604      	mov	r4, r0
 8008026:	d04b      	beq.n	80080c0 <_reclaim_reent+0xa4>
 8008028:	69c3      	ldr	r3, [r0, #28]
 800802a:	b1ab      	cbz	r3, 8008058 <_reclaim_reent+0x3c>
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	b16b      	cbz	r3, 800804c <_reclaim_reent+0x30>
 8008030:	2500      	movs	r5, #0
 8008032:	69e3      	ldr	r3, [r4, #28]
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	5959      	ldr	r1, [r3, r5]
 8008038:	2900      	cmp	r1, #0
 800803a:	d13b      	bne.n	80080b4 <_reclaim_reent+0x98>
 800803c:	3504      	adds	r5, #4
 800803e:	2d80      	cmp	r5, #128	@ 0x80
 8008040:	d1f7      	bne.n	8008032 <_reclaim_reent+0x16>
 8008042:	69e3      	ldr	r3, [r4, #28]
 8008044:	4620      	mov	r0, r4
 8008046:	68d9      	ldr	r1, [r3, #12]
 8008048:	f000 f8d6 	bl	80081f8 <_free_r>
 800804c:	69e3      	ldr	r3, [r4, #28]
 800804e:	6819      	ldr	r1, [r3, #0]
 8008050:	b111      	cbz	r1, 8008058 <_reclaim_reent+0x3c>
 8008052:	4620      	mov	r0, r4
 8008054:	f000 f8d0 	bl	80081f8 <_free_r>
 8008058:	6961      	ldr	r1, [r4, #20]
 800805a:	b111      	cbz	r1, 8008062 <_reclaim_reent+0x46>
 800805c:	4620      	mov	r0, r4
 800805e:	f000 f8cb 	bl	80081f8 <_free_r>
 8008062:	69e1      	ldr	r1, [r4, #28]
 8008064:	b111      	cbz	r1, 800806c <_reclaim_reent+0x50>
 8008066:	4620      	mov	r0, r4
 8008068:	f000 f8c6 	bl	80081f8 <_free_r>
 800806c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800806e:	b111      	cbz	r1, 8008076 <_reclaim_reent+0x5a>
 8008070:	4620      	mov	r0, r4
 8008072:	f000 f8c1 	bl	80081f8 <_free_r>
 8008076:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008078:	b111      	cbz	r1, 8008080 <_reclaim_reent+0x64>
 800807a:	4620      	mov	r0, r4
 800807c:	f000 f8bc 	bl	80081f8 <_free_r>
 8008080:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008082:	b111      	cbz	r1, 800808a <_reclaim_reent+0x6e>
 8008084:	4620      	mov	r0, r4
 8008086:	f000 f8b7 	bl	80081f8 <_free_r>
 800808a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800808c:	b111      	cbz	r1, 8008094 <_reclaim_reent+0x78>
 800808e:	4620      	mov	r0, r4
 8008090:	f000 f8b2 	bl	80081f8 <_free_r>
 8008094:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008096:	b111      	cbz	r1, 800809e <_reclaim_reent+0x82>
 8008098:	4620      	mov	r0, r4
 800809a:	f000 f8ad 	bl	80081f8 <_free_r>
 800809e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80080a0:	b111      	cbz	r1, 80080a8 <_reclaim_reent+0x8c>
 80080a2:	4620      	mov	r0, r4
 80080a4:	f000 f8a8 	bl	80081f8 <_free_r>
 80080a8:	6a23      	ldr	r3, [r4, #32]
 80080aa:	b14b      	cbz	r3, 80080c0 <_reclaim_reent+0xa4>
 80080ac:	4620      	mov	r0, r4
 80080ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80080b2:	4718      	bx	r3
 80080b4:	680e      	ldr	r6, [r1, #0]
 80080b6:	4620      	mov	r0, r4
 80080b8:	f000 f89e 	bl	80081f8 <_free_r>
 80080bc:	4631      	mov	r1, r6
 80080be:	e7bb      	b.n	8008038 <_reclaim_reent+0x1c>
 80080c0:	bd70      	pop	{r4, r5, r6, pc}
 80080c2:	bf00      	nop
 80080c4:	2000001c 	.word	0x2000001c

080080c8 <_lseek_r>:
 80080c8:	b538      	push	{r3, r4, r5, lr}
 80080ca:	4d07      	ldr	r5, [pc, #28]	@ (80080e8 <_lseek_r+0x20>)
 80080cc:	4604      	mov	r4, r0
 80080ce:	4608      	mov	r0, r1
 80080d0:	4611      	mov	r1, r2
 80080d2:	2200      	movs	r2, #0
 80080d4:	602a      	str	r2, [r5, #0]
 80080d6:	461a      	mov	r2, r3
 80080d8:	f7f9 fa5d 	bl	8001596 <_lseek>
 80080dc:	1c43      	adds	r3, r0, #1
 80080de:	d102      	bne.n	80080e6 <_lseek_r+0x1e>
 80080e0:	682b      	ldr	r3, [r5, #0]
 80080e2:	b103      	cbz	r3, 80080e6 <_lseek_r+0x1e>
 80080e4:	6023      	str	r3, [r4, #0]
 80080e6:	bd38      	pop	{r3, r4, r5, pc}
 80080e8:	200046ec 	.word	0x200046ec

080080ec <_read_r>:
 80080ec:	b538      	push	{r3, r4, r5, lr}
 80080ee:	4d07      	ldr	r5, [pc, #28]	@ (800810c <_read_r+0x20>)
 80080f0:	4604      	mov	r4, r0
 80080f2:	4608      	mov	r0, r1
 80080f4:	4611      	mov	r1, r2
 80080f6:	2200      	movs	r2, #0
 80080f8:	602a      	str	r2, [r5, #0]
 80080fa:	461a      	mov	r2, r3
 80080fc:	f7f9 f9eb 	bl	80014d6 <_read>
 8008100:	1c43      	adds	r3, r0, #1
 8008102:	d102      	bne.n	800810a <_read_r+0x1e>
 8008104:	682b      	ldr	r3, [r5, #0]
 8008106:	b103      	cbz	r3, 800810a <_read_r+0x1e>
 8008108:	6023      	str	r3, [r4, #0]
 800810a:	bd38      	pop	{r3, r4, r5, pc}
 800810c:	200046ec 	.word	0x200046ec

08008110 <_write_r>:
 8008110:	b538      	push	{r3, r4, r5, lr}
 8008112:	4d07      	ldr	r5, [pc, #28]	@ (8008130 <_write_r+0x20>)
 8008114:	4604      	mov	r4, r0
 8008116:	4608      	mov	r0, r1
 8008118:	4611      	mov	r1, r2
 800811a:	2200      	movs	r2, #0
 800811c:	602a      	str	r2, [r5, #0]
 800811e:	461a      	mov	r2, r3
 8008120:	f7f9 f9f6 	bl	8001510 <_write>
 8008124:	1c43      	adds	r3, r0, #1
 8008126:	d102      	bne.n	800812e <_write_r+0x1e>
 8008128:	682b      	ldr	r3, [r5, #0]
 800812a:	b103      	cbz	r3, 800812e <_write_r+0x1e>
 800812c:	6023      	str	r3, [r4, #0]
 800812e:	bd38      	pop	{r3, r4, r5, pc}
 8008130:	200046ec 	.word	0x200046ec

08008134 <__errno>:
 8008134:	4b01      	ldr	r3, [pc, #4]	@ (800813c <__errno+0x8>)
 8008136:	6818      	ldr	r0, [r3, #0]
 8008138:	4770      	bx	lr
 800813a:	bf00      	nop
 800813c:	2000001c 	.word	0x2000001c

08008140 <__libc_init_array>:
 8008140:	b570      	push	{r4, r5, r6, lr}
 8008142:	4d0d      	ldr	r5, [pc, #52]	@ (8008178 <__libc_init_array+0x38>)
 8008144:	4c0d      	ldr	r4, [pc, #52]	@ (800817c <__libc_init_array+0x3c>)
 8008146:	1b64      	subs	r4, r4, r5
 8008148:	10a4      	asrs	r4, r4, #2
 800814a:	2600      	movs	r6, #0
 800814c:	42a6      	cmp	r6, r4
 800814e:	d109      	bne.n	8008164 <__libc_init_array+0x24>
 8008150:	4d0b      	ldr	r5, [pc, #44]	@ (8008180 <__libc_init_array+0x40>)
 8008152:	4c0c      	ldr	r4, [pc, #48]	@ (8008184 <__libc_init_array+0x44>)
 8008154:	f000 fff8 	bl	8009148 <_init>
 8008158:	1b64      	subs	r4, r4, r5
 800815a:	10a4      	asrs	r4, r4, #2
 800815c:	2600      	movs	r6, #0
 800815e:	42a6      	cmp	r6, r4
 8008160:	d105      	bne.n	800816e <__libc_init_array+0x2e>
 8008162:	bd70      	pop	{r4, r5, r6, pc}
 8008164:	f855 3b04 	ldr.w	r3, [r5], #4
 8008168:	4798      	blx	r3
 800816a:	3601      	adds	r6, #1
 800816c:	e7ee      	b.n	800814c <__libc_init_array+0xc>
 800816e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008172:	4798      	blx	r3
 8008174:	3601      	adds	r6, #1
 8008176:	e7f2      	b.n	800815e <__libc_init_array+0x1e>
 8008178:	080095d8 	.word	0x080095d8
 800817c:	080095d8 	.word	0x080095d8
 8008180:	080095d8 	.word	0x080095d8
 8008184:	080095dc 	.word	0x080095dc

08008188 <__retarget_lock_init_recursive>:
 8008188:	4770      	bx	lr

0800818a <__retarget_lock_acquire_recursive>:
 800818a:	4770      	bx	lr

0800818c <__retarget_lock_release_recursive>:
 800818c:	4770      	bx	lr

0800818e <strcpy>:
 800818e:	4603      	mov	r3, r0
 8008190:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008194:	f803 2b01 	strb.w	r2, [r3], #1
 8008198:	2a00      	cmp	r2, #0
 800819a:	d1f9      	bne.n	8008190 <strcpy+0x2>
 800819c:	4770      	bx	lr

0800819e <memcpy>:
 800819e:	440a      	add	r2, r1
 80081a0:	4291      	cmp	r1, r2
 80081a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80081a6:	d100      	bne.n	80081aa <memcpy+0xc>
 80081a8:	4770      	bx	lr
 80081aa:	b510      	push	{r4, lr}
 80081ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081b4:	4291      	cmp	r1, r2
 80081b6:	d1f9      	bne.n	80081ac <memcpy+0xe>
 80081b8:	bd10      	pop	{r4, pc}
	...

080081bc <__assert_func>:
 80081bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80081be:	4614      	mov	r4, r2
 80081c0:	461a      	mov	r2, r3
 80081c2:	4b09      	ldr	r3, [pc, #36]	@ (80081e8 <__assert_func+0x2c>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4605      	mov	r5, r0
 80081c8:	68d8      	ldr	r0, [r3, #12]
 80081ca:	b954      	cbnz	r4, 80081e2 <__assert_func+0x26>
 80081cc:	4b07      	ldr	r3, [pc, #28]	@ (80081ec <__assert_func+0x30>)
 80081ce:	461c      	mov	r4, r3
 80081d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80081d4:	9100      	str	r1, [sp, #0]
 80081d6:	462b      	mov	r3, r5
 80081d8:	4905      	ldr	r1, [pc, #20]	@ (80081f0 <__assert_func+0x34>)
 80081da:	f000 fc9f 	bl	8008b1c <fiprintf>
 80081de:	f000 fcd9 	bl	8008b94 <abort>
 80081e2:	4b04      	ldr	r3, [pc, #16]	@ (80081f4 <__assert_func+0x38>)
 80081e4:	e7f4      	b.n	80081d0 <__assert_func+0x14>
 80081e6:	bf00      	nop
 80081e8:	2000001c 	.word	0x2000001c
 80081ec:	0800959a 	.word	0x0800959a
 80081f0:	0800956c 	.word	0x0800956c
 80081f4:	0800955f 	.word	0x0800955f

080081f8 <_free_r>:
 80081f8:	b538      	push	{r3, r4, r5, lr}
 80081fa:	4605      	mov	r5, r0
 80081fc:	2900      	cmp	r1, #0
 80081fe:	d041      	beq.n	8008284 <_free_r+0x8c>
 8008200:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008204:	1f0c      	subs	r4, r1, #4
 8008206:	2b00      	cmp	r3, #0
 8008208:	bfb8      	it	lt
 800820a:	18e4      	addlt	r4, r4, r3
 800820c:	f000 f8e8 	bl	80083e0 <__malloc_lock>
 8008210:	4a1d      	ldr	r2, [pc, #116]	@ (8008288 <_free_r+0x90>)
 8008212:	6813      	ldr	r3, [r2, #0]
 8008214:	b933      	cbnz	r3, 8008224 <_free_r+0x2c>
 8008216:	6063      	str	r3, [r4, #4]
 8008218:	6014      	str	r4, [r2, #0]
 800821a:	4628      	mov	r0, r5
 800821c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008220:	f000 b8e4 	b.w	80083ec <__malloc_unlock>
 8008224:	42a3      	cmp	r3, r4
 8008226:	d908      	bls.n	800823a <_free_r+0x42>
 8008228:	6820      	ldr	r0, [r4, #0]
 800822a:	1821      	adds	r1, r4, r0
 800822c:	428b      	cmp	r3, r1
 800822e:	bf01      	itttt	eq
 8008230:	6819      	ldreq	r1, [r3, #0]
 8008232:	685b      	ldreq	r3, [r3, #4]
 8008234:	1809      	addeq	r1, r1, r0
 8008236:	6021      	streq	r1, [r4, #0]
 8008238:	e7ed      	b.n	8008216 <_free_r+0x1e>
 800823a:	461a      	mov	r2, r3
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	b10b      	cbz	r3, 8008244 <_free_r+0x4c>
 8008240:	42a3      	cmp	r3, r4
 8008242:	d9fa      	bls.n	800823a <_free_r+0x42>
 8008244:	6811      	ldr	r1, [r2, #0]
 8008246:	1850      	adds	r0, r2, r1
 8008248:	42a0      	cmp	r0, r4
 800824a:	d10b      	bne.n	8008264 <_free_r+0x6c>
 800824c:	6820      	ldr	r0, [r4, #0]
 800824e:	4401      	add	r1, r0
 8008250:	1850      	adds	r0, r2, r1
 8008252:	4283      	cmp	r3, r0
 8008254:	6011      	str	r1, [r2, #0]
 8008256:	d1e0      	bne.n	800821a <_free_r+0x22>
 8008258:	6818      	ldr	r0, [r3, #0]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	6053      	str	r3, [r2, #4]
 800825e:	4408      	add	r0, r1
 8008260:	6010      	str	r0, [r2, #0]
 8008262:	e7da      	b.n	800821a <_free_r+0x22>
 8008264:	d902      	bls.n	800826c <_free_r+0x74>
 8008266:	230c      	movs	r3, #12
 8008268:	602b      	str	r3, [r5, #0]
 800826a:	e7d6      	b.n	800821a <_free_r+0x22>
 800826c:	6820      	ldr	r0, [r4, #0]
 800826e:	1821      	adds	r1, r4, r0
 8008270:	428b      	cmp	r3, r1
 8008272:	bf04      	itt	eq
 8008274:	6819      	ldreq	r1, [r3, #0]
 8008276:	685b      	ldreq	r3, [r3, #4]
 8008278:	6063      	str	r3, [r4, #4]
 800827a:	bf04      	itt	eq
 800827c:	1809      	addeq	r1, r1, r0
 800827e:	6021      	streq	r1, [r4, #0]
 8008280:	6054      	str	r4, [r2, #4]
 8008282:	e7ca      	b.n	800821a <_free_r+0x22>
 8008284:	bd38      	pop	{r3, r4, r5, pc}
 8008286:	bf00      	nop
 8008288:	200046f8 	.word	0x200046f8

0800828c <malloc>:
 800828c:	4b02      	ldr	r3, [pc, #8]	@ (8008298 <malloc+0xc>)
 800828e:	4601      	mov	r1, r0
 8008290:	6818      	ldr	r0, [r3, #0]
 8008292:	f000 b825 	b.w	80082e0 <_malloc_r>
 8008296:	bf00      	nop
 8008298:	2000001c 	.word	0x2000001c

0800829c <sbrk_aligned>:
 800829c:	b570      	push	{r4, r5, r6, lr}
 800829e:	4e0f      	ldr	r6, [pc, #60]	@ (80082dc <sbrk_aligned+0x40>)
 80082a0:	460c      	mov	r4, r1
 80082a2:	6831      	ldr	r1, [r6, #0]
 80082a4:	4605      	mov	r5, r0
 80082a6:	b911      	cbnz	r1, 80082ae <sbrk_aligned+0x12>
 80082a8:	f000 fc64 	bl	8008b74 <_sbrk_r>
 80082ac:	6030      	str	r0, [r6, #0]
 80082ae:	4621      	mov	r1, r4
 80082b0:	4628      	mov	r0, r5
 80082b2:	f000 fc5f 	bl	8008b74 <_sbrk_r>
 80082b6:	1c43      	adds	r3, r0, #1
 80082b8:	d103      	bne.n	80082c2 <sbrk_aligned+0x26>
 80082ba:	f04f 34ff 	mov.w	r4, #4294967295
 80082be:	4620      	mov	r0, r4
 80082c0:	bd70      	pop	{r4, r5, r6, pc}
 80082c2:	1cc4      	adds	r4, r0, #3
 80082c4:	f024 0403 	bic.w	r4, r4, #3
 80082c8:	42a0      	cmp	r0, r4
 80082ca:	d0f8      	beq.n	80082be <sbrk_aligned+0x22>
 80082cc:	1a21      	subs	r1, r4, r0
 80082ce:	4628      	mov	r0, r5
 80082d0:	f000 fc50 	bl	8008b74 <_sbrk_r>
 80082d4:	3001      	adds	r0, #1
 80082d6:	d1f2      	bne.n	80082be <sbrk_aligned+0x22>
 80082d8:	e7ef      	b.n	80082ba <sbrk_aligned+0x1e>
 80082da:	bf00      	nop
 80082dc:	200046f4 	.word	0x200046f4

080082e0 <_malloc_r>:
 80082e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082e4:	1ccd      	adds	r5, r1, #3
 80082e6:	f025 0503 	bic.w	r5, r5, #3
 80082ea:	3508      	adds	r5, #8
 80082ec:	2d0c      	cmp	r5, #12
 80082ee:	bf38      	it	cc
 80082f0:	250c      	movcc	r5, #12
 80082f2:	2d00      	cmp	r5, #0
 80082f4:	4606      	mov	r6, r0
 80082f6:	db01      	blt.n	80082fc <_malloc_r+0x1c>
 80082f8:	42a9      	cmp	r1, r5
 80082fa:	d904      	bls.n	8008306 <_malloc_r+0x26>
 80082fc:	230c      	movs	r3, #12
 80082fe:	6033      	str	r3, [r6, #0]
 8008300:	2000      	movs	r0, #0
 8008302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008306:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80083dc <_malloc_r+0xfc>
 800830a:	f000 f869 	bl	80083e0 <__malloc_lock>
 800830e:	f8d8 3000 	ldr.w	r3, [r8]
 8008312:	461c      	mov	r4, r3
 8008314:	bb44      	cbnz	r4, 8008368 <_malloc_r+0x88>
 8008316:	4629      	mov	r1, r5
 8008318:	4630      	mov	r0, r6
 800831a:	f7ff ffbf 	bl	800829c <sbrk_aligned>
 800831e:	1c43      	adds	r3, r0, #1
 8008320:	4604      	mov	r4, r0
 8008322:	d158      	bne.n	80083d6 <_malloc_r+0xf6>
 8008324:	f8d8 4000 	ldr.w	r4, [r8]
 8008328:	4627      	mov	r7, r4
 800832a:	2f00      	cmp	r7, #0
 800832c:	d143      	bne.n	80083b6 <_malloc_r+0xd6>
 800832e:	2c00      	cmp	r4, #0
 8008330:	d04b      	beq.n	80083ca <_malloc_r+0xea>
 8008332:	6823      	ldr	r3, [r4, #0]
 8008334:	4639      	mov	r1, r7
 8008336:	4630      	mov	r0, r6
 8008338:	eb04 0903 	add.w	r9, r4, r3
 800833c:	f000 fc1a 	bl	8008b74 <_sbrk_r>
 8008340:	4581      	cmp	r9, r0
 8008342:	d142      	bne.n	80083ca <_malloc_r+0xea>
 8008344:	6821      	ldr	r1, [r4, #0]
 8008346:	1a6d      	subs	r5, r5, r1
 8008348:	4629      	mov	r1, r5
 800834a:	4630      	mov	r0, r6
 800834c:	f7ff ffa6 	bl	800829c <sbrk_aligned>
 8008350:	3001      	adds	r0, #1
 8008352:	d03a      	beq.n	80083ca <_malloc_r+0xea>
 8008354:	6823      	ldr	r3, [r4, #0]
 8008356:	442b      	add	r3, r5
 8008358:	6023      	str	r3, [r4, #0]
 800835a:	f8d8 3000 	ldr.w	r3, [r8]
 800835e:	685a      	ldr	r2, [r3, #4]
 8008360:	bb62      	cbnz	r2, 80083bc <_malloc_r+0xdc>
 8008362:	f8c8 7000 	str.w	r7, [r8]
 8008366:	e00f      	b.n	8008388 <_malloc_r+0xa8>
 8008368:	6822      	ldr	r2, [r4, #0]
 800836a:	1b52      	subs	r2, r2, r5
 800836c:	d420      	bmi.n	80083b0 <_malloc_r+0xd0>
 800836e:	2a0b      	cmp	r2, #11
 8008370:	d917      	bls.n	80083a2 <_malloc_r+0xc2>
 8008372:	1961      	adds	r1, r4, r5
 8008374:	42a3      	cmp	r3, r4
 8008376:	6025      	str	r5, [r4, #0]
 8008378:	bf18      	it	ne
 800837a:	6059      	strne	r1, [r3, #4]
 800837c:	6863      	ldr	r3, [r4, #4]
 800837e:	bf08      	it	eq
 8008380:	f8c8 1000 	streq.w	r1, [r8]
 8008384:	5162      	str	r2, [r4, r5]
 8008386:	604b      	str	r3, [r1, #4]
 8008388:	4630      	mov	r0, r6
 800838a:	f000 f82f 	bl	80083ec <__malloc_unlock>
 800838e:	f104 000b 	add.w	r0, r4, #11
 8008392:	1d23      	adds	r3, r4, #4
 8008394:	f020 0007 	bic.w	r0, r0, #7
 8008398:	1ac2      	subs	r2, r0, r3
 800839a:	bf1c      	itt	ne
 800839c:	1a1b      	subne	r3, r3, r0
 800839e:	50a3      	strne	r3, [r4, r2]
 80083a0:	e7af      	b.n	8008302 <_malloc_r+0x22>
 80083a2:	6862      	ldr	r2, [r4, #4]
 80083a4:	42a3      	cmp	r3, r4
 80083a6:	bf0c      	ite	eq
 80083a8:	f8c8 2000 	streq.w	r2, [r8]
 80083ac:	605a      	strne	r2, [r3, #4]
 80083ae:	e7eb      	b.n	8008388 <_malloc_r+0xa8>
 80083b0:	4623      	mov	r3, r4
 80083b2:	6864      	ldr	r4, [r4, #4]
 80083b4:	e7ae      	b.n	8008314 <_malloc_r+0x34>
 80083b6:	463c      	mov	r4, r7
 80083b8:	687f      	ldr	r7, [r7, #4]
 80083ba:	e7b6      	b.n	800832a <_malloc_r+0x4a>
 80083bc:	461a      	mov	r2, r3
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	42a3      	cmp	r3, r4
 80083c2:	d1fb      	bne.n	80083bc <_malloc_r+0xdc>
 80083c4:	2300      	movs	r3, #0
 80083c6:	6053      	str	r3, [r2, #4]
 80083c8:	e7de      	b.n	8008388 <_malloc_r+0xa8>
 80083ca:	230c      	movs	r3, #12
 80083cc:	6033      	str	r3, [r6, #0]
 80083ce:	4630      	mov	r0, r6
 80083d0:	f000 f80c 	bl	80083ec <__malloc_unlock>
 80083d4:	e794      	b.n	8008300 <_malloc_r+0x20>
 80083d6:	6005      	str	r5, [r0, #0]
 80083d8:	e7d6      	b.n	8008388 <_malloc_r+0xa8>
 80083da:	bf00      	nop
 80083dc:	200046f8 	.word	0x200046f8

080083e0 <__malloc_lock>:
 80083e0:	4801      	ldr	r0, [pc, #4]	@ (80083e8 <__malloc_lock+0x8>)
 80083e2:	f7ff bed2 	b.w	800818a <__retarget_lock_acquire_recursive>
 80083e6:	bf00      	nop
 80083e8:	200046f0 	.word	0x200046f0

080083ec <__malloc_unlock>:
 80083ec:	4801      	ldr	r0, [pc, #4]	@ (80083f4 <__malloc_unlock+0x8>)
 80083ee:	f7ff becd 	b.w	800818c <__retarget_lock_release_recursive>
 80083f2:	bf00      	nop
 80083f4:	200046f0 	.word	0x200046f0

080083f8 <__ssputs_r>:
 80083f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083fc:	688e      	ldr	r6, [r1, #8]
 80083fe:	461f      	mov	r7, r3
 8008400:	42be      	cmp	r6, r7
 8008402:	680b      	ldr	r3, [r1, #0]
 8008404:	4682      	mov	sl, r0
 8008406:	460c      	mov	r4, r1
 8008408:	4690      	mov	r8, r2
 800840a:	d82d      	bhi.n	8008468 <__ssputs_r+0x70>
 800840c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008410:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008414:	d026      	beq.n	8008464 <__ssputs_r+0x6c>
 8008416:	6965      	ldr	r5, [r4, #20]
 8008418:	6909      	ldr	r1, [r1, #16]
 800841a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800841e:	eba3 0901 	sub.w	r9, r3, r1
 8008422:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008426:	1c7b      	adds	r3, r7, #1
 8008428:	444b      	add	r3, r9
 800842a:	106d      	asrs	r5, r5, #1
 800842c:	429d      	cmp	r5, r3
 800842e:	bf38      	it	cc
 8008430:	461d      	movcc	r5, r3
 8008432:	0553      	lsls	r3, r2, #21
 8008434:	d527      	bpl.n	8008486 <__ssputs_r+0x8e>
 8008436:	4629      	mov	r1, r5
 8008438:	f7ff ff52 	bl	80082e0 <_malloc_r>
 800843c:	4606      	mov	r6, r0
 800843e:	b360      	cbz	r0, 800849a <__ssputs_r+0xa2>
 8008440:	6921      	ldr	r1, [r4, #16]
 8008442:	464a      	mov	r2, r9
 8008444:	f7ff feab 	bl	800819e <memcpy>
 8008448:	89a3      	ldrh	r3, [r4, #12]
 800844a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800844e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008452:	81a3      	strh	r3, [r4, #12]
 8008454:	6126      	str	r6, [r4, #16]
 8008456:	6165      	str	r5, [r4, #20]
 8008458:	444e      	add	r6, r9
 800845a:	eba5 0509 	sub.w	r5, r5, r9
 800845e:	6026      	str	r6, [r4, #0]
 8008460:	60a5      	str	r5, [r4, #8]
 8008462:	463e      	mov	r6, r7
 8008464:	42be      	cmp	r6, r7
 8008466:	d900      	bls.n	800846a <__ssputs_r+0x72>
 8008468:	463e      	mov	r6, r7
 800846a:	6820      	ldr	r0, [r4, #0]
 800846c:	4632      	mov	r2, r6
 800846e:	4641      	mov	r1, r8
 8008470:	f000 fb66 	bl	8008b40 <memmove>
 8008474:	68a3      	ldr	r3, [r4, #8]
 8008476:	1b9b      	subs	r3, r3, r6
 8008478:	60a3      	str	r3, [r4, #8]
 800847a:	6823      	ldr	r3, [r4, #0]
 800847c:	4433      	add	r3, r6
 800847e:	6023      	str	r3, [r4, #0]
 8008480:	2000      	movs	r0, #0
 8008482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008486:	462a      	mov	r2, r5
 8008488:	f000 fb8b 	bl	8008ba2 <_realloc_r>
 800848c:	4606      	mov	r6, r0
 800848e:	2800      	cmp	r0, #0
 8008490:	d1e0      	bne.n	8008454 <__ssputs_r+0x5c>
 8008492:	6921      	ldr	r1, [r4, #16]
 8008494:	4650      	mov	r0, sl
 8008496:	f7ff feaf 	bl	80081f8 <_free_r>
 800849a:	230c      	movs	r3, #12
 800849c:	f8ca 3000 	str.w	r3, [sl]
 80084a0:	89a3      	ldrh	r3, [r4, #12]
 80084a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084a6:	81a3      	strh	r3, [r4, #12]
 80084a8:	f04f 30ff 	mov.w	r0, #4294967295
 80084ac:	e7e9      	b.n	8008482 <__ssputs_r+0x8a>
	...

080084b0 <_svfiprintf_r>:
 80084b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084b4:	4698      	mov	r8, r3
 80084b6:	898b      	ldrh	r3, [r1, #12]
 80084b8:	061b      	lsls	r3, r3, #24
 80084ba:	b09d      	sub	sp, #116	@ 0x74
 80084bc:	4607      	mov	r7, r0
 80084be:	460d      	mov	r5, r1
 80084c0:	4614      	mov	r4, r2
 80084c2:	d510      	bpl.n	80084e6 <_svfiprintf_r+0x36>
 80084c4:	690b      	ldr	r3, [r1, #16]
 80084c6:	b973      	cbnz	r3, 80084e6 <_svfiprintf_r+0x36>
 80084c8:	2140      	movs	r1, #64	@ 0x40
 80084ca:	f7ff ff09 	bl	80082e0 <_malloc_r>
 80084ce:	6028      	str	r0, [r5, #0]
 80084d0:	6128      	str	r0, [r5, #16]
 80084d2:	b930      	cbnz	r0, 80084e2 <_svfiprintf_r+0x32>
 80084d4:	230c      	movs	r3, #12
 80084d6:	603b      	str	r3, [r7, #0]
 80084d8:	f04f 30ff 	mov.w	r0, #4294967295
 80084dc:	b01d      	add	sp, #116	@ 0x74
 80084de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084e2:	2340      	movs	r3, #64	@ 0x40
 80084e4:	616b      	str	r3, [r5, #20]
 80084e6:	2300      	movs	r3, #0
 80084e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80084ea:	2320      	movs	r3, #32
 80084ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80084f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80084f4:	2330      	movs	r3, #48	@ 0x30
 80084f6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008694 <_svfiprintf_r+0x1e4>
 80084fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80084fe:	f04f 0901 	mov.w	r9, #1
 8008502:	4623      	mov	r3, r4
 8008504:	469a      	mov	sl, r3
 8008506:	f813 2b01 	ldrb.w	r2, [r3], #1
 800850a:	b10a      	cbz	r2, 8008510 <_svfiprintf_r+0x60>
 800850c:	2a25      	cmp	r2, #37	@ 0x25
 800850e:	d1f9      	bne.n	8008504 <_svfiprintf_r+0x54>
 8008510:	ebba 0b04 	subs.w	fp, sl, r4
 8008514:	d00b      	beq.n	800852e <_svfiprintf_r+0x7e>
 8008516:	465b      	mov	r3, fp
 8008518:	4622      	mov	r2, r4
 800851a:	4629      	mov	r1, r5
 800851c:	4638      	mov	r0, r7
 800851e:	f7ff ff6b 	bl	80083f8 <__ssputs_r>
 8008522:	3001      	adds	r0, #1
 8008524:	f000 80a7 	beq.w	8008676 <_svfiprintf_r+0x1c6>
 8008528:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800852a:	445a      	add	r2, fp
 800852c:	9209      	str	r2, [sp, #36]	@ 0x24
 800852e:	f89a 3000 	ldrb.w	r3, [sl]
 8008532:	2b00      	cmp	r3, #0
 8008534:	f000 809f 	beq.w	8008676 <_svfiprintf_r+0x1c6>
 8008538:	2300      	movs	r3, #0
 800853a:	f04f 32ff 	mov.w	r2, #4294967295
 800853e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008542:	f10a 0a01 	add.w	sl, sl, #1
 8008546:	9304      	str	r3, [sp, #16]
 8008548:	9307      	str	r3, [sp, #28]
 800854a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800854e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008550:	4654      	mov	r4, sl
 8008552:	2205      	movs	r2, #5
 8008554:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008558:	484e      	ldr	r0, [pc, #312]	@ (8008694 <_svfiprintf_r+0x1e4>)
 800855a:	f7f7 fe49 	bl	80001f0 <memchr>
 800855e:	9a04      	ldr	r2, [sp, #16]
 8008560:	b9d8      	cbnz	r0, 800859a <_svfiprintf_r+0xea>
 8008562:	06d0      	lsls	r0, r2, #27
 8008564:	bf44      	itt	mi
 8008566:	2320      	movmi	r3, #32
 8008568:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800856c:	0711      	lsls	r1, r2, #28
 800856e:	bf44      	itt	mi
 8008570:	232b      	movmi	r3, #43	@ 0x2b
 8008572:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008576:	f89a 3000 	ldrb.w	r3, [sl]
 800857a:	2b2a      	cmp	r3, #42	@ 0x2a
 800857c:	d015      	beq.n	80085aa <_svfiprintf_r+0xfa>
 800857e:	9a07      	ldr	r2, [sp, #28]
 8008580:	4654      	mov	r4, sl
 8008582:	2000      	movs	r0, #0
 8008584:	f04f 0c0a 	mov.w	ip, #10
 8008588:	4621      	mov	r1, r4
 800858a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800858e:	3b30      	subs	r3, #48	@ 0x30
 8008590:	2b09      	cmp	r3, #9
 8008592:	d94b      	bls.n	800862c <_svfiprintf_r+0x17c>
 8008594:	b1b0      	cbz	r0, 80085c4 <_svfiprintf_r+0x114>
 8008596:	9207      	str	r2, [sp, #28]
 8008598:	e014      	b.n	80085c4 <_svfiprintf_r+0x114>
 800859a:	eba0 0308 	sub.w	r3, r0, r8
 800859e:	fa09 f303 	lsl.w	r3, r9, r3
 80085a2:	4313      	orrs	r3, r2
 80085a4:	9304      	str	r3, [sp, #16]
 80085a6:	46a2      	mov	sl, r4
 80085a8:	e7d2      	b.n	8008550 <_svfiprintf_r+0xa0>
 80085aa:	9b03      	ldr	r3, [sp, #12]
 80085ac:	1d19      	adds	r1, r3, #4
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	9103      	str	r1, [sp, #12]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	bfbb      	ittet	lt
 80085b6:	425b      	neglt	r3, r3
 80085b8:	f042 0202 	orrlt.w	r2, r2, #2
 80085bc:	9307      	strge	r3, [sp, #28]
 80085be:	9307      	strlt	r3, [sp, #28]
 80085c0:	bfb8      	it	lt
 80085c2:	9204      	strlt	r2, [sp, #16]
 80085c4:	7823      	ldrb	r3, [r4, #0]
 80085c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80085c8:	d10a      	bne.n	80085e0 <_svfiprintf_r+0x130>
 80085ca:	7863      	ldrb	r3, [r4, #1]
 80085cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80085ce:	d132      	bne.n	8008636 <_svfiprintf_r+0x186>
 80085d0:	9b03      	ldr	r3, [sp, #12]
 80085d2:	1d1a      	adds	r2, r3, #4
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	9203      	str	r2, [sp, #12]
 80085d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80085dc:	3402      	adds	r4, #2
 80085de:	9305      	str	r3, [sp, #20]
 80085e0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80086a4 <_svfiprintf_r+0x1f4>
 80085e4:	7821      	ldrb	r1, [r4, #0]
 80085e6:	2203      	movs	r2, #3
 80085e8:	4650      	mov	r0, sl
 80085ea:	f7f7 fe01 	bl	80001f0 <memchr>
 80085ee:	b138      	cbz	r0, 8008600 <_svfiprintf_r+0x150>
 80085f0:	9b04      	ldr	r3, [sp, #16]
 80085f2:	eba0 000a 	sub.w	r0, r0, sl
 80085f6:	2240      	movs	r2, #64	@ 0x40
 80085f8:	4082      	lsls	r2, r0
 80085fa:	4313      	orrs	r3, r2
 80085fc:	3401      	adds	r4, #1
 80085fe:	9304      	str	r3, [sp, #16]
 8008600:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008604:	4824      	ldr	r0, [pc, #144]	@ (8008698 <_svfiprintf_r+0x1e8>)
 8008606:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800860a:	2206      	movs	r2, #6
 800860c:	f7f7 fdf0 	bl	80001f0 <memchr>
 8008610:	2800      	cmp	r0, #0
 8008612:	d036      	beq.n	8008682 <_svfiprintf_r+0x1d2>
 8008614:	4b21      	ldr	r3, [pc, #132]	@ (800869c <_svfiprintf_r+0x1ec>)
 8008616:	bb1b      	cbnz	r3, 8008660 <_svfiprintf_r+0x1b0>
 8008618:	9b03      	ldr	r3, [sp, #12]
 800861a:	3307      	adds	r3, #7
 800861c:	f023 0307 	bic.w	r3, r3, #7
 8008620:	3308      	adds	r3, #8
 8008622:	9303      	str	r3, [sp, #12]
 8008624:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008626:	4433      	add	r3, r6
 8008628:	9309      	str	r3, [sp, #36]	@ 0x24
 800862a:	e76a      	b.n	8008502 <_svfiprintf_r+0x52>
 800862c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008630:	460c      	mov	r4, r1
 8008632:	2001      	movs	r0, #1
 8008634:	e7a8      	b.n	8008588 <_svfiprintf_r+0xd8>
 8008636:	2300      	movs	r3, #0
 8008638:	3401      	adds	r4, #1
 800863a:	9305      	str	r3, [sp, #20]
 800863c:	4619      	mov	r1, r3
 800863e:	f04f 0c0a 	mov.w	ip, #10
 8008642:	4620      	mov	r0, r4
 8008644:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008648:	3a30      	subs	r2, #48	@ 0x30
 800864a:	2a09      	cmp	r2, #9
 800864c:	d903      	bls.n	8008656 <_svfiprintf_r+0x1a6>
 800864e:	2b00      	cmp	r3, #0
 8008650:	d0c6      	beq.n	80085e0 <_svfiprintf_r+0x130>
 8008652:	9105      	str	r1, [sp, #20]
 8008654:	e7c4      	b.n	80085e0 <_svfiprintf_r+0x130>
 8008656:	fb0c 2101 	mla	r1, ip, r1, r2
 800865a:	4604      	mov	r4, r0
 800865c:	2301      	movs	r3, #1
 800865e:	e7f0      	b.n	8008642 <_svfiprintf_r+0x192>
 8008660:	ab03      	add	r3, sp, #12
 8008662:	9300      	str	r3, [sp, #0]
 8008664:	462a      	mov	r2, r5
 8008666:	4b0e      	ldr	r3, [pc, #56]	@ (80086a0 <_svfiprintf_r+0x1f0>)
 8008668:	a904      	add	r1, sp, #16
 800866a:	4638      	mov	r0, r7
 800866c:	f3af 8000 	nop.w
 8008670:	1c42      	adds	r2, r0, #1
 8008672:	4606      	mov	r6, r0
 8008674:	d1d6      	bne.n	8008624 <_svfiprintf_r+0x174>
 8008676:	89ab      	ldrh	r3, [r5, #12]
 8008678:	065b      	lsls	r3, r3, #25
 800867a:	f53f af2d 	bmi.w	80084d8 <_svfiprintf_r+0x28>
 800867e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008680:	e72c      	b.n	80084dc <_svfiprintf_r+0x2c>
 8008682:	ab03      	add	r3, sp, #12
 8008684:	9300      	str	r3, [sp, #0]
 8008686:	462a      	mov	r2, r5
 8008688:	4b05      	ldr	r3, [pc, #20]	@ (80086a0 <_svfiprintf_r+0x1f0>)
 800868a:	a904      	add	r1, sp, #16
 800868c:	4638      	mov	r0, r7
 800868e:	f000 f879 	bl	8008784 <_printf_i>
 8008692:	e7ed      	b.n	8008670 <_svfiprintf_r+0x1c0>
 8008694:	0800959b 	.word	0x0800959b
 8008698:	080095a5 	.word	0x080095a5
 800869c:	00000000 	.word	0x00000000
 80086a0:	080083f9 	.word	0x080083f9
 80086a4:	080095a1 	.word	0x080095a1

080086a8 <_printf_common>:
 80086a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086ac:	4616      	mov	r6, r2
 80086ae:	4698      	mov	r8, r3
 80086b0:	688a      	ldr	r2, [r1, #8]
 80086b2:	690b      	ldr	r3, [r1, #16]
 80086b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80086b8:	4293      	cmp	r3, r2
 80086ba:	bfb8      	it	lt
 80086bc:	4613      	movlt	r3, r2
 80086be:	6033      	str	r3, [r6, #0]
 80086c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80086c4:	4607      	mov	r7, r0
 80086c6:	460c      	mov	r4, r1
 80086c8:	b10a      	cbz	r2, 80086ce <_printf_common+0x26>
 80086ca:	3301      	adds	r3, #1
 80086cc:	6033      	str	r3, [r6, #0]
 80086ce:	6823      	ldr	r3, [r4, #0]
 80086d0:	0699      	lsls	r1, r3, #26
 80086d2:	bf42      	ittt	mi
 80086d4:	6833      	ldrmi	r3, [r6, #0]
 80086d6:	3302      	addmi	r3, #2
 80086d8:	6033      	strmi	r3, [r6, #0]
 80086da:	6825      	ldr	r5, [r4, #0]
 80086dc:	f015 0506 	ands.w	r5, r5, #6
 80086e0:	d106      	bne.n	80086f0 <_printf_common+0x48>
 80086e2:	f104 0a19 	add.w	sl, r4, #25
 80086e6:	68e3      	ldr	r3, [r4, #12]
 80086e8:	6832      	ldr	r2, [r6, #0]
 80086ea:	1a9b      	subs	r3, r3, r2
 80086ec:	42ab      	cmp	r3, r5
 80086ee:	dc26      	bgt.n	800873e <_printf_common+0x96>
 80086f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80086f4:	6822      	ldr	r2, [r4, #0]
 80086f6:	3b00      	subs	r3, #0
 80086f8:	bf18      	it	ne
 80086fa:	2301      	movne	r3, #1
 80086fc:	0692      	lsls	r2, r2, #26
 80086fe:	d42b      	bmi.n	8008758 <_printf_common+0xb0>
 8008700:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008704:	4641      	mov	r1, r8
 8008706:	4638      	mov	r0, r7
 8008708:	47c8      	blx	r9
 800870a:	3001      	adds	r0, #1
 800870c:	d01e      	beq.n	800874c <_printf_common+0xa4>
 800870e:	6823      	ldr	r3, [r4, #0]
 8008710:	6922      	ldr	r2, [r4, #16]
 8008712:	f003 0306 	and.w	r3, r3, #6
 8008716:	2b04      	cmp	r3, #4
 8008718:	bf02      	ittt	eq
 800871a:	68e5      	ldreq	r5, [r4, #12]
 800871c:	6833      	ldreq	r3, [r6, #0]
 800871e:	1aed      	subeq	r5, r5, r3
 8008720:	68a3      	ldr	r3, [r4, #8]
 8008722:	bf0c      	ite	eq
 8008724:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008728:	2500      	movne	r5, #0
 800872a:	4293      	cmp	r3, r2
 800872c:	bfc4      	itt	gt
 800872e:	1a9b      	subgt	r3, r3, r2
 8008730:	18ed      	addgt	r5, r5, r3
 8008732:	2600      	movs	r6, #0
 8008734:	341a      	adds	r4, #26
 8008736:	42b5      	cmp	r5, r6
 8008738:	d11a      	bne.n	8008770 <_printf_common+0xc8>
 800873a:	2000      	movs	r0, #0
 800873c:	e008      	b.n	8008750 <_printf_common+0xa8>
 800873e:	2301      	movs	r3, #1
 8008740:	4652      	mov	r2, sl
 8008742:	4641      	mov	r1, r8
 8008744:	4638      	mov	r0, r7
 8008746:	47c8      	blx	r9
 8008748:	3001      	adds	r0, #1
 800874a:	d103      	bne.n	8008754 <_printf_common+0xac>
 800874c:	f04f 30ff 	mov.w	r0, #4294967295
 8008750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008754:	3501      	adds	r5, #1
 8008756:	e7c6      	b.n	80086e6 <_printf_common+0x3e>
 8008758:	18e1      	adds	r1, r4, r3
 800875a:	1c5a      	adds	r2, r3, #1
 800875c:	2030      	movs	r0, #48	@ 0x30
 800875e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008762:	4422      	add	r2, r4
 8008764:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008768:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800876c:	3302      	adds	r3, #2
 800876e:	e7c7      	b.n	8008700 <_printf_common+0x58>
 8008770:	2301      	movs	r3, #1
 8008772:	4622      	mov	r2, r4
 8008774:	4641      	mov	r1, r8
 8008776:	4638      	mov	r0, r7
 8008778:	47c8      	blx	r9
 800877a:	3001      	adds	r0, #1
 800877c:	d0e6      	beq.n	800874c <_printf_common+0xa4>
 800877e:	3601      	adds	r6, #1
 8008780:	e7d9      	b.n	8008736 <_printf_common+0x8e>
	...

08008784 <_printf_i>:
 8008784:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008788:	7e0f      	ldrb	r7, [r1, #24]
 800878a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800878c:	2f78      	cmp	r7, #120	@ 0x78
 800878e:	4691      	mov	r9, r2
 8008790:	4680      	mov	r8, r0
 8008792:	460c      	mov	r4, r1
 8008794:	469a      	mov	sl, r3
 8008796:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800879a:	d807      	bhi.n	80087ac <_printf_i+0x28>
 800879c:	2f62      	cmp	r7, #98	@ 0x62
 800879e:	d80a      	bhi.n	80087b6 <_printf_i+0x32>
 80087a0:	2f00      	cmp	r7, #0
 80087a2:	f000 80d2 	beq.w	800894a <_printf_i+0x1c6>
 80087a6:	2f58      	cmp	r7, #88	@ 0x58
 80087a8:	f000 80b9 	beq.w	800891e <_printf_i+0x19a>
 80087ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80087b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80087b4:	e03a      	b.n	800882c <_printf_i+0xa8>
 80087b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80087ba:	2b15      	cmp	r3, #21
 80087bc:	d8f6      	bhi.n	80087ac <_printf_i+0x28>
 80087be:	a101      	add	r1, pc, #4	@ (adr r1, 80087c4 <_printf_i+0x40>)
 80087c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80087c4:	0800881d 	.word	0x0800881d
 80087c8:	08008831 	.word	0x08008831
 80087cc:	080087ad 	.word	0x080087ad
 80087d0:	080087ad 	.word	0x080087ad
 80087d4:	080087ad 	.word	0x080087ad
 80087d8:	080087ad 	.word	0x080087ad
 80087dc:	08008831 	.word	0x08008831
 80087e0:	080087ad 	.word	0x080087ad
 80087e4:	080087ad 	.word	0x080087ad
 80087e8:	080087ad 	.word	0x080087ad
 80087ec:	080087ad 	.word	0x080087ad
 80087f0:	08008931 	.word	0x08008931
 80087f4:	0800885b 	.word	0x0800885b
 80087f8:	080088eb 	.word	0x080088eb
 80087fc:	080087ad 	.word	0x080087ad
 8008800:	080087ad 	.word	0x080087ad
 8008804:	08008953 	.word	0x08008953
 8008808:	080087ad 	.word	0x080087ad
 800880c:	0800885b 	.word	0x0800885b
 8008810:	080087ad 	.word	0x080087ad
 8008814:	080087ad 	.word	0x080087ad
 8008818:	080088f3 	.word	0x080088f3
 800881c:	6833      	ldr	r3, [r6, #0]
 800881e:	1d1a      	adds	r2, r3, #4
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	6032      	str	r2, [r6, #0]
 8008824:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008828:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800882c:	2301      	movs	r3, #1
 800882e:	e09d      	b.n	800896c <_printf_i+0x1e8>
 8008830:	6833      	ldr	r3, [r6, #0]
 8008832:	6820      	ldr	r0, [r4, #0]
 8008834:	1d19      	adds	r1, r3, #4
 8008836:	6031      	str	r1, [r6, #0]
 8008838:	0606      	lsls	r6, r0, #24
 800883a:	d501      	bpl.n	8008840 <_printf_i+0xbc>
 800883c:	681d      	ldr	r5, [r3, #0]
 800883e:	e003      	b.n	8008848 <_printf_i+0xc4>
 8008840:	0645      	lsls	r5, r0, #25
 8008842:	d5fb      	bpl.n	800883c <_printf_i+0xb8>
 8008844:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008848:	2d00      	cmp	r5, #0
 800884a:	da03      	bge.n	8008854 <_printf_i+0xd0>
 800884c:	232d      	movs	r3, #45	@ 0x2d
 800884e:	426d      	negs	r5, r5
 8008850:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008854:	4859      	ldr	r0, [pc, #356]	@ (80089bc <_printf_i+0x238>)
 8008856:	230a      	movs	r3, #10
 8008858:	e011      	b.n	800887e <_printf_i+0xfa>
 800885a:	6821      	ldr	r1, [r4, #0]
 800885c:	6833      	ldr	r3, [r6, #0]
 800885e:	0608      	lsls	r0, r1, #24
 8008860:	f853 5b04 	ldr.w	r5, [r3], #4
 8008864:	d402      	bmi.n	800886c <_printf_i+0xe8>
 8008866:	0649      	lsls	r1, r1, #25
 8008868:	bf48      	it	mi
 800886a:	b2ad      	uxthmi	r5, r5
 800886c:	2f6f      	cmp	r7, #111	@ 0x6f
 800886e:	4853      	ldr	r0, [pc, #332]	@ (80089bc <_printf_i+0x238>)
 8008870:	6033      	str	r3, [r6, #0]
 8008872:	bf14      	ite	ne
 8008874:	230a      	movne	r3, #10
 8008876:	2308      	moveq	r3, #8
 8008878:	2100      	movs	r1, #0
 800887a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800887e:	6866      	ldr	r6, [r4, #4]
 8008880:	60a6      	str	r6, [r4, #8]
 8008882:	2e00      	cmp	r6, #0
 8008884:	bfa2      	ittt	ge
 8008886:	6821      	ldrge	r1, [r4, #0]
 8008888:	f021 0104 	bicge.w	r1, r1, #4
 800888c:	6021      	strge	r1, [r4, #0]
 800888e:	b90d      	cbnz	r5, 8008894 <_printf_i+0x110>
 8008890:	2e00      	cmp	r6, #0
 8008892:	d04b      	beq.n	800892c <_printf_i+0x1a8>
 8008894:	4616      	mov	r6, r2
 8008896:	fbb5 f1f3 	udiv	r1, r5, r3
 800889a:	fb03 5711 	mls	r7, r3, r1, r5
 800889e:	5dc7      	ldrb	r7, [r0, r7]
 80088a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80088a4:	462f      	mov	r7, r5
 80088a6:	42bb      	cmp	r3, r7
 80088a8:	460d      	mov	r5, r1
 80088aa:	d9f4      	bls.n	8008896 <_printf_i+0x112>
 80088ac:	2b08      	cmp	r3, #8
 80088ae:	d10b      	bne.n	80088c8 <_printf_i+0x144>
 80088b0:	6823      	ldr	r3, [r4, #0]
 80088b2:	07df      	lsls	r7, r3, #31
 80088b4:	d508      	bpl.n	80088c8 <_printf_i+0x144>
 80088b6:	6923      	ldr	r3, [r4, #16]
 80088b8:	6861      	ldr	r1, [r4, #4]
 80088ba:	4299      	cmp	r1, r3
 80088bc:	bfde      	ittt	le
 80088be:	2330      	movle	r3, #48	@ 0x30
 80088c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80088c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80088c8:	1b92      	subs	r2, r2, r6
 80088ca:	6122      	str	r2, [r4, #16]
 80088cc:	f8cd a000 	str.w	sl, [sp]
 80088d0:	464b      	mov	r3, r9
 80088d2:	aa03      	add	r2, sp, #12
 80088d4:	4621      	mov	r1, r4
 80088d6:	4640      	mov	r0, r8
 80088d8:	f7ff fee6 	bl	80086a8 <_printf_common>
 80088dc:	3001      	adds	r0, #1
 80088de:	d14a      	bne.n	8008976 <_printf_i+0x1f2>
 80088e0:	f04f 30ff 	mov.w	r0, #4294967295
 80088e4:	b004      	add	sp, #16
 80088e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088ea:	6823      	ldr	r3, [r4, #0]
 80088ec:	f043 0320 	orr.w	r3, r3, #32
 80088f0:	6023      	str	r3, [r4, #0]
 80088f2:	4833      	ldr	r0, [pc, #204]	@ (80089c0 <_printf_i+0x23c>)
 80088f4:	2778      	movs	r7, #120	@ 0x78
 80088f6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80088fa:	6823      	ldr	r3, [r4, #0]
 80088fc:	6831      	ldr	r1, [r6, #0]
 80088fe:	061f      	lsls	r7, r3, #24
 8008900:	f851 5b04 	ldr.w	r5, [r1], #4
 8008904:	d402      	bmi.n	800890c <_printf_i+0x188>
 8008906:	065f      	lsls	r7, r3, #25
 8008908:	bf48      	it	mi
 800890a:	b2ad      	uxthmi	r5, r5
 800890c:	6031      	str	r1, [r6, #0]
 800890e:	07d9      	lsls	r1, r3, #31
 8008910:	bf44      	itt	mi
 8008912:	f043 0320 	orrmi.w	r3, r3, #32
 8008916:	6023      	strmi	r3, [r4, #0]
 8008918:	b11d      	cbz	r5, 8008922 <_printf_i+0x19e>
 800891a:	2310      	movs	r3, #16
 800891c:	e7ac      	b.n	8008878 <_printf_i+0xf4>
 800891e:	4827      	ldr	r0, [pc, #156]	@ (80089bc <_printf_i+0x238>)
 8008920:	e7e9      	b.n	80088f6 <_printf_i+0x172>
 8008922:	6823      	ldr	r3, [r4, #0]
 8008924:	f023 0320 	bic.w	r3, r3, #32
 8008928:	6023      	str	r3, [r4, #0]
 800892a:	e7f6      	b.n	800891a <_printf_i+0x196>
 800892c:	4616      	mov	r6, r2
 800892e:	e7bd      	b.n	80088ac <_printf_i+0x128>
 8008930:	6833      	ldr	r3, [r6, #0]
 8008932:	6825      	ldr	r5, [r4, #0]
 8008934:	6961      	ldr	r1, [r4, #20]
 8008936:	1d18      	adds	r0, r3, #4
 8008938:	6030      	str	r0, [r6, #0]
 800893a:	062e      	lsls	r6, r5, #24
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	d501      	bpl.n	8008944 <_printf_i+0x1c0>
 8008940:	6019      	str	r1, [r3, #0]
 8008942:	e002      	b.n	800894a <_printf_i+0x1c6>
 8008944:	0668      	lsls	r0, r5, #25
 8008946:	d5fb      	bpl.n	8008940 <_printf_i+0x1bc>
 8008948:	8019      	strh	r1, [r3, #0]
 800894a:	2300      	movs	r3, #0
 800894c:	6123      	str	r3, [r4, #16]
 800894e:	4616      	mov	r6, r2
 8008950:	e7bc      	b.n	80088cc <_printf_i+0x148>
 8008952:	6833      	ldr	r3, [r6, #0]
 8008954:	1d1a      	adds	r2, r3, #4
 8008956:	6032      	str	r2, [r6, #0]
 8008958:	681e      	ldr	r6, [r3, #0]
 800895a:	6862      	ldr	r2, [r4, #4]
 800895c:	2100      	movs	r1, #0
 800895e:	4630      	mov	r0, r6
 8008960:	f7f7 fc46 	bl	80001f0 <memchr>
 8008964:	b108      	cbz	r0, 800896a <_printf_i+0x1e6>
 8008966:	1b80      	subs	r0, r0, r6
 8008968:	6060      	str	r0, [r4, #4]
 800896a:	6863      	ldr	r3, [r4, #4]
 800896c:	6123      	str	r3, [r4, #16]
 800896e:	2300      	movs	r3, #0
 8008970:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008974:	e7aa      	b.n	80088cc <_printf_i+0x148>
 8008976:	6923      	ldr	r3, [r4, #16]
 8008978:	4632      	mov	r2, r6
 800897a:	4649      	mov	r1, r9
 800897c:	4640      	mov	r0, r8
 800897e:	47d0      	blx	sl
 8008980:	3001      	adds	r0, #1
 8008982:	d0ad      	beq.n	80088e0 <_printf_i+0x15c>
 8008984:	6823      	ldr	r3, [r4, #0]
 8008986:	079b      	lsls	r3, r3, #30
 8008988:	d413      	bmi.n	80089b2 <_printf_i+0x22e>
 800898a:	68e0      	ldr	r0, [r4, #12]
 800898c:	9b03      	ldr	r3, [sp, #12]
 800898e:	4298      	cmp	r0, r3
 8008990:	bfb8      	it	lt
 8008992:	4618      	movlt	r0, r3
 8008994:	e7a6      	b.n	80088e4 <_printf_i+0x160>
 8008996:	2301      	movs	r3, #1
 8008998:	4632      	mov	r2, r6
 800899a:	4649      	mov	r1, r9
 800899c:	4640      	mov	r0, r8
 800899e:	47d0      	blx	sl
 80089a0:	3001      	adds	r0, #1
 80089a2:	d09d      	beq.n	80088e0 <_printf_i+0x15c>
 80089a4:	3501      	adds	r5, #1
 80089a6:	68e3      	ldr	r3, [r4, #12]
 80089a8:	9903      	ldr	r1, [sp, #12]
 80089aa:	1a5b      	subs	r3, r3, r1
 80089ac:	42ab      	cmp	r3, r5
 80089ae:	dcf2      	bgt.n	8008996 <_printf_i+0x212>
 80089b0:	e7eb      	b.n	800898a <_printf_i+0x206>
 80089b2:	2500      	movs	r5, #0
 80089b4:	f104 0619 	add.w	r6, r4, #25
 80089b8:	e7f5      	b.n	80089a6 <_printf_i+0x222>
 80089ba:	bf00      	nop
 80089bc:	080095ac 	.word	0x080095ac
 80089c0:	080095bd 	.word	0x080095bd

080089c4 <__sflush_r>:
 80089c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80089c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089cc:	0716      	lsls	r6, r2, #28
 80089ce:	4605      	mov	r5, r0
 80089d0:	460c      	mov	r4, r1
 80089d2:	d454      	bmi.n	8008a7e <__sflush_r+0xba>
 80089d4:	684b      	ldr	r3, [r1, #4]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	dc02      	bgt.n	80089e0 <__sflush_r+0x1c>
 80089da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80089dc:	2b00      	cmp	r3, #0
 80089de:	dd48      	ble.n	8008a72 <__sflush_r+0xae>
 80089e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80089e2:	2e00      	cmp	r6, #0
 80089e4:	d045      	beq.n	8008a72 <__sflush_r+0xae>
 80089e6:	2300      	movs	r3, #0
 80089e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80089ec:	682f      	ldr	r7, [r5, #0]
 80089ee:	6a21      	ldr	r1, [r4, #32]
 80089f0:	602b      	str	r3, [r5, #0]
 80089f2:	d030      	beq.n	8008a56 <__sflush_r+0x92>
 80089f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80089f6:	89a3      	ldrh	r3, [r4, #12]
 80089f8:	0759      	lsls	r1, r3, #29
 80089fa:	d505      	bpl.n	8008a08 <__sflush_r+0x44>
 80089fc:	6863      	ldr	r3, [r4, #4]
 80089fe:	1ad2      	subs	r2, r2, r3
 8008a00:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008a02:	b10b      	cbz	r3, 8008a08 <__sflush_r+0x44>
 8008a04:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008a06:	1ad2      	subs	r2, r2, r3
 8008a08:	2300      	movs	r3, #0
 8008a0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a0c:	6a21      	ldr	r1, [r4, #32]
 8008a0e:	4628      	mov	r0, r5
 8008a10:	47b0      	blx	r6
 8008a12:	1c43      	adds	r3, r0, #1
 8008a14:	89a3      	ldrh	r3, [r4, #12]
 8008a16:	d106      	bne.n	8008a26 <__sflush_r+0x62>
 8008a18:	6829      	ldr	r1, [r5, #0]
 8008a1a:	291d      	cmp	r1, #29
 8008a1c:	d82b      	bhi.n	8008a76 <__sflush_r+0xb2>
 8008a1e:	4a2a      	ldr	r2, [pc, #168]	@ (8008ac8 <__sflush_r+0x104>)
 8008a20:	410a      	asrs	r2, r1
 8008a22:	07d6      	lsls	r6, r2, #31
 8008a24:	d427      	bmi.n	8008a76 <__sflush_r+0xb2>
 8008a26:	2200      	movs	r2, #0
 8008a28:	6062      	str	r2, [r4, #4]
 8008a2a:	04d9      	lsls	r1, r3, #19
 8008a2c:	6922      	ldr	r2, [r4, #16]
 8008a2e:	6022      	str	r2, [r4, #0]
 8008a30:	d504      	bpl.n	8008a3c <__sflush_r+0x78>
 8008a32:	1c42      	adds	r2, r0, #1
 8008a34:	d101      	bne.n	8008a3a <__sflush_r+0x76>
 8008a36:	682b      	ldr	r3, [r5, #0]
 8008a38:	b903      	cbnz	r3, 8008a3c <__sflush_r+0x78>
 8008a3a:	6560      	str	r0, [r4, #84]	@ 0x54
 8008a3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a3e:	602f      	str	r7, [r5, #0]
 8008a40:	b1b9      	cbz	r1, 8008a72 <__sflush_r+0xae>
 8008a42:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a46:	4299      	cmp	r1, r3
 8008a48:	d002      	beq.n	8008a50 <__sflush_r+0x8c>
 8008a4a:	4628      	mov	r0, r5
 8008a4c:	f7ff fbd4 	bl	80081f8 <_free_r>
 8008a50:	2300      	movs	r3, #0
 8008a52:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a54:	e00d      	b.n	8008a72 <__sflush_r+0xae>
 8008a56:	2301      	movs	r3, #1
 8008a58:	4628      	mov	r0, r5
 8008a5a:	47b0      	blx	r6
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	1c50      	adds	r0, r2, #1
 8008a60:	d1c9      	bne.n	80089f6 <__sflush_r+0x32>
 8008a62:	682b      	ldr	r3, [r5, #0]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d0c6      	beq.n	80089f6 <__sflush_r+0x32>
 8008a68:	2b1d      	cmp	r3, #29
 8008a6a:	d001      	beq.n	8008a70 <__sflush_r+0xac>
 8008a6c:	2b16      	cmp	r3, #22
 8008a6e:	d11e      	bne.n	8008aae <__sflush_r+0xea>
 8008a70:	602f      	str	r7, [r5, #0]
 8008a72:	2000      	movs	r0, #0
 8008a74:	e022      	b.n	8008abc <__sflush_r+0xf8>
 8008a76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a7a:	b21b      	sxth	r3, r3
 8008a7c:	e01b      	b.n	8008ab6 <__sflush_r+0xf2>
 8008a7e:	690f      	ldr	r7, [r1, #16]
 8008a80:	2f00      	cmp	r7, #0
 8008a82:	d0f6      	beq.n	8008a72 <__sflush_r+0xae>
 8008a84:	0793      	lsls	r3, r2, #30
 8008a86:	680e      	ldr	r6, [r1, #0]
 8008a88:	bf08      	it	eq
 8008a8a:	694b      	ldreq	r3, [r1, #20]
 8008a8c:	600f      	str	r7, [r1, #0]
 8008a8e:	bf18      	it	ne
 8008a90:	2300      	movne	r3, #0
 8008a92:	eba6 0807 	sub.w	r8, r6, r7
 8008a96:	608b      	str	r3, [r1, #8]
 8008a98:	f1b8 0f00 	cmp.w	r8, #0
 8008a9c:	dde9      	ble.n	8008a72 <__sflush_r+0xae>
 8008a9e:	6a21      	ldr	r1, [r4, #32]
 8008aa0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008aa2:	4643      	mov	r3, r8
 8008aa4:	463a      	mov	r2, r7
 8008aa6:	4628      	mov	r0, r5
 8008aa8:	47b0      	blx	r6
 8008aaa:	2800      	cmp	r0, #0
 8008aac:	dc08      	bgt.n	8008ac0 <__sflush_r+0xfc>
 8008aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ab2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ab6:	81a3      	strh	r3, [r4, #12]
 8008ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8008abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ac0:	4407      	add	r7, r0
 8008ac2:	eba8 0800 	sub.w	r8, r8, r0
 8008ac6:	e7e7      	b.n	8008a98 <__sflush_r+0xd4>
 8008ac8:	dfbffffe 	.word	0xdfbffffe

08008acc <_fflush_r>:
 8008acc:	b538      	push	{r3, r4, r5, lr}
 8008ace:	690b      	ldr	r3, [r1, #16]
 8008ad0:	4605      	mov	r5, r0
 8008ad2:	460c      	mov	r4, r1
 8008ad4:	b913      	cbnz	r3, 8008adc <_fflush_r+0x10>
 8008ad6:	2500      	movs	r5, #0
 8008ad8:	4628      	mov	r0, r5
 8008ada:	bd38      	pop	{r3, r4, r5, pc}
 8008adc:	b118      	cbz	r0, 8008ae6 <_fflush_r+0x1a>
 8008ade:	6a03      	ldr	r3, [r0, #32]
 8008ae0:	b90b      	cbnz	r3, 8008ae6 <_fflush_r+0x1a>
 8008ae2:	f7ff f9e9 	bl	8007eb8 <__sinit>
 8008ae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d0f3      	beq.n	8008ad6 <_fflush_r+0xa>
 8008aee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008af0:	07d0      	lsls	r0, r2, #31
 8008af2:	d404      	bmi.n	8008afe <_fflush_r+0x32>
 8008af4:	0599      	lsls	r1, r3, #22
 8008af6:	d402      	bmi.n	8008afe <_fflush_r+0x32>
 8008af8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008afa:	f7ff fb46 	bl	800818a <__retarget_lock_acquire_recursive>
 8008afe:	4628      	mov	r0, r5
 8008b00:	4621      	mov	r1, r4
 8008b02:	f7ff ff5f 	bl	80089c4 <__sflush_r>
 8008b06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b08:	07da      	lsls	r2, r3, #31
 8008b0a:	4605      	mov	r5, r0
 8008b0c:	d4e4      	bmi.n	8008ad8 <_fflush_r+0xc>
 8008b0e:	89a3      	ldrh	r3, [r4, #12]
 8008b10:	059b      	lsls	r3, r3, #22
 8008b12:	d4e1      	bmi.n	8008ad8 <_fflush_r+0xc>
 8008b14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b16:	f7ff fb39 	bl	800818c <__retarget_lock_release_recursive>
 8008b1a:	e7dd      	b.n	8008ad8 <_fflush_r+0xc>

08008b1c <fiprintf>:
 8008b1c:	b40e      	push	{r1, r2, r3}
 8008b1e:	b503      	push	{r0, r1, lr}
 8008b20:	4601      	mov	r1, r0
 8008b22:	ab03      	add	r3, sp, #12
 8008b24:	4805      	ldr	r0, [pc, #20]	@ (8008b3c <fiprintf+0x20>)
 8008b26:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b2a:	6800      	ldr	r0, [r0, #0]
 8008b2c:	9301      	str	r3, [sp, #4]
 8008b2e:	f000 f88f 	bl	8008c50 <_vfiprintf_r>
 8008b32:	b002      	add	sp, #8
 8008b34:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b38:	b003      	add	sp, #12
 8008b3a:	4770      	bx	lr
 8008b3c:	2000001c 	.word	0x2000001c

08008b40 <memmove>:
 8008b40:	4288      	cmp	r0, r1
 8008b42:	b510      	push	{r4, lr}
 8008b44:	eb01 0402 	add.w	r4, r1, r2
 8008b48:	d902      	bls.n	8008b50 <memmove+0x10>
 8008b4a:	4284      	cmp	r4, r0
 8008b4c:	4623      	mov	r3, r4
 8008b4e:	d807      	bhi.n	8008b60 <memmove+0x20>
 8008b50:	1e43      	subs	r3, r0, #1
 8008b52:	42a1      	cmp	r1, r4
 8008b54:	d008      	beq.n	8008b68 <memmove+0x28>
 8008b56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b5e:	e7f8      	b.n	8008b52 <memmove+0x12>
 8008b60:	4402      	add	r2, r0
 8008b62:	4601      	mov	r1, r0
 8008b64:	428a      	cmp	r2, r1
 8008b66:	d100      	bne.n	8008b6a <memmove+0x2a>
 8008b68:	bd10      	pop	{r4, pc}
 8008b6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b72:	e7f7      	b.n	8008b64 <memmove+0x24>

08008b74 <_sbrk_r>:
 8008b74:	b538      	push	{r3, r4, r5, lr}
 8008b76:	4d06      	ldr	r5, [pc, #24]	@ (8008b90 <_sbrk_r+0x1c>)
 8008b78:	2300      	movs	r3, #0
 8008b7a:	4604      	mov	r4, r0
 8008b7c:	4608      	mov	r0, r1
 8008b7e:	602b      	str	r3, [r5, #0]
 8008b80:	f7f8 fd16 	bl	80015b0 <_sbrk>
 8008b84:	1c43      	adds	r3, r0, #1
 8008b86:	d102      	bne.n	8008b8e <_sbrk_r+0x1a>
 8008b88:	682b      	ldr	r3, [r5, #0]
 8008b8a:	b103      	cbz	r3, 8008b8e <_sbrk_r+0x1a>
 8008b8c:	6023      	str	r3, [r4, #0]
 8008b8e:	bd38      	pop	{r3, r4, r5, pc}
 8008b90:	200046ec 	.word	0x200046ec

08008b94 <abort>:
 8008b94:	b508      	push	{r3, lr}
 8008b96:	2006      	movs	r0, #6
 8008b98:	f000 fa2e 	bl	8008ff8 <raise>
 8008b9c:	2001      	movs	r0, #1
 8008b9e:	f7f8 fc8f 	bl	80014c0 <_exit>

08008ba2 <_realloc_r>:
 8008ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ba6:	4680      	mov	r8, r0
 8008ba8:	4615      	mov	r5, r2
 8008baa:	460c      	mov	r4, r1
 8008bac:	b921      	cbnz	r1, 8008bb8 <_realloc_r+0x16>
 8008bae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bb2:	4611      	mov	r1, r2
 8008bb4:	f7ff bb94 	b.w	80082e0 <_malloc_r>
 8008bb8:	b92a      	cbnz	r2, 8008bc6 <_realloc_r+0x24>
 8008bba:	f7ff fb1d 	bl	80081f8 <_free_r>
 8008bbe:	2400      	movs	r4, #0
 8008bc0:	4620      	mov	r0, r4
 8008bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bc6:	f000 fa33 	bl	8009030 <_malloc_usable_size_r>
 8008bca:	4285      	cmp	r5, r0
 8008bcc:	4606      	mov	r6, r0
 8008bce:	d802      	bhi.n	8008bd6 <_realloc_r+0x34>
 8008bd0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008bd4:	d8f4      	bhi.n	8008bc0 <_realloc_r+0x1e>
 8008bd6:	4629      	mov	r1, r5
 8008bd8:	4640      	mov	r0, r8
 8008bda:	f7ff fb81 	bl	80082e0 <_malloc_r>
 8008bde:	4607      	mov	r7, r0
 8008be0:	2800      	cmp	r0, #0
 8008be2:	d0ec      	beq.n	8008bbe <_realloc_r+0x1c>
 8008be4:	42b5      	cmp	r5, r6
 8008be6:	462a      	mov	r2, r5
 8008be8:	4621      	mov	r1, r4
 8008bea:	bf28      	it	cs
 8008bec:	4632      	movcs	r2, r6
 8008bee:	f7ff fad6 	bl	800819e <memcpy>
 8008bf2:	4621      	mov	r1, r4
 8008bf4:	4640      	mov	r0, r8
 8008bf6:	f7ff faff 	bl	80081f8 <_free_r>
 8008bfa:	463c      	mov	r4, r7
 8008bfc:	e7e0      	b.n	8008bc0 <_realloc_r+0x1e>

08008bfe <__sfputc_r>:
 8008bfe:	6893      	ldr	r3, [r2, #8]
 8008c00:	3b01      	subs	r3, #1
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	b410      	push	{r4}
 8008c06:	6093      	str	r3, [r2, #8]
 8008c08:	da08      	bge.n	8008c1c <__sfputc_r+0x1e>
 8008c0a:	6994      	ldr	r4, [r2, #24]
 8008c0c:	42a3      	cmp	r3, r4
 8008c0e:	db01      	blt.n	8008c14 <__sfputc_r+0x16>
 8008c10:	290a      	cmp	r1, #10
 8008c12:	d103      	bne.n	8008c1c <__sfputc_r+0x1e>
 8008c14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c18:	f000 b932 	b.w	8008e80 <__swbuf_r>
 8008c1c:	6813      	ldr	r3, [r2, #0]
 8008c1e:	1c58      	adds	r0, r3, #1
 8008c20:	6010      	str	r0, [r2, #0]
 8008c22:	7019      	strb	r1, [r3, #0]
 8008c24:	4608      	mov	r0, r1
 8008c26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <__sfputs_r>:
 8008c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c2e:	4606      	mov	r6, r0
 8008c30:	460f      	mov	r7, r1
 8008c32:	4614      	mov	r4, r2
 8008c34:	18d5      	adds	r5, r2, r3
 8008c36:	42ac      	cmp	r4, r5
 8008c38:	d101      	bne.n	8008c3e <__sfputs_r+0x12>
 8008c3a:	2000      	movs	r0, #0
 8008c3c:	e007      	b.n	8008c4e <__sfputs_r+0x22>
 8008c3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c42:	463a      	mov	r2, r7
 8008c44:	4630      	mov	r0, r6
 8008c46:	f7ff ffda 	bl	8008bfe <__sfputc_r>
 8008c4a:	1c43      	adds	r3, r0, #1
 8008c4c:	d1f3      	bne.n	8008c36 <__sfputs_r+0xa>
 8008c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008c50 <_vfiprintf_r>:
 8008c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c54:	460d      	mov	r5, r1
 8008c56:	b09d      	sub	sp, #116	@ 0x74
 8008c58:	4614      	mov	r4, r2
 8008c5a:	4698      	mov	r8, r3
 8008c5c:	4606      	mov	r6, r0
 8008c5e:	b118      	cbz	r0, 8008c68 <_vfiprintf_r+0x18>
 8008c60:	6a03      	ldr	r3, [r0, #32]
 8008c62:	b90b      	cbnz	r3, 8008c68 <_vfiprintf_r+0x18>
 8008c64:	f7ff f928 	bl	8007eb8 <__sinit>
 8008c68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c6a:	07d9      	lsls	r1, r3, #31
 8008c6c:	d405      	bmi.n	8008c7a <_vfiprintf_r+0x2a>
 8008c6e:	89ab      	ldrh	r3, [r5, #12]
 8008c70:	059a      	lsls	r2, r3, #22
 8008c72:	d402      	bmi.n	8008c7a <_vfiprintf_r+0x2a>
 8008c74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c76:	f7ff fa88 	bl	800818a <__retarget_lock_acquire_recursive>
 8008c7a:	89ab      	ldrh	r3, [r5, #12]
 8008c7c:	071b      	lsls	r3, r3, #28
 8008c7e:	d501      	bpl.n	8008c84 <_vfiprintf_r+0x34>
 8008c80:	692b      	ldr	r3, [r5, #16]
 8008c82:	b99b      	cbnz	r3, 8008cac <_vfiprintf_r+0x5c>
 8008c84:	4629      	mov	r1, r5
 8008c86:	4630      	mov	r0, r6
 8008c88:	f000 f938 	bl	8008efc <__swsetup_r>
 8008c8c:	b170      	cbz	r0, 8008cac <_vfiprintf_r+0x5c>
 8008c8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c90:	07dc      	lsls	r4, r3, #31
 8008c92:	d504      	bpl.n	8008c9e <_vfiprintf_r+0x4e>
 8008c94:	f04f 30ff 	mov.w	r0, #4294967295
 8008c98:	b01d      	add	sp, #116	@ 0x74
 8008c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c9e:	89ab      	ldrh	r3, [r5, #12]
 8008ca0:	0598      	lsls	r0, r3, #22
 8008ca2:	d4f7      	bmi.n	8008c94 <_vfiprintf_r+0x44>
 8008ca4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ca6:	f7ff fa71 	bl	800818c <__retarget_lock_release_recursive>
 8008caa:	e7f3      	b.n	8008c94 <_vfiprintf_r+0x44>
 8008cac:	2300      	movs	r3, #0
 8008cae:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cb0:	2320      	movs	r3, #32
 8008cb2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008cb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cba:	2330      	movs	r3, #48	@ 0x30
 8008cbc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008e6c <_vfiprintf_r+0x21c>
 8008cc0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008cc4:	f04f 0901 	mov.w	r9, #1
 8008cc8:	4623      	mov	r3, r4
 8008cca:	469a      	mov	sl, r3
 8008ccc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cd0:	b10a      	cbz	r2, 8008cd6 <_vfiprintf_r+0x86>
 8008cd2:	2a25      	cmp	r2, #37	@ 0x25
 8008cd4:	d1f9      	bne.n	8008cca <_vfiprintf_r+0x7a>
 8008cd6:	ebba 0b04 	subs.w	fp, sl, r4
 8008cda:	d00b      	beq.n	8008cf4 <_vfiprintf_r+0xa4>
 8008cdc:	465b      	mov	r3, fp
 8008cde:	4622      	mov	r2, r4
 8008ce0:	4629      	mov	r1, r5
 8008ce2:	4630      	mov	r0, r6
 8008ce4:	f7ff ffa2 	bl	8008c2c <__sfputs_r>
 8008ce8:	3001      	adds	r0, #1
 8008cea:	f000 80a7 	beq.w	8008e3c <_vfiprintf_r+0x1ec>
 8008cee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008cf0:	445a      	add	r2, fp
 8008cf2:	9209      	str	r2, [sp, #36]	@ 0x24
 8008cf4:	f89a 3000 	ldrb.w	r3, [sl]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	f000 809f 	beq.w	8008e3c <_vfiprintf_r+0x1ec>
 8008cfe:	2300      	movs	r3, #0
 8008d00:	f04f 32ff 	mov.w	r2, #4294967295
 8008d04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d08:	f10a 0a01 	add.w	sl, sl, #1
 8008d0c:	9304      	str	r3, [sp, #16]
 8008d0e:	9307      	str	r3, [sp, #28]
 8008d10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d14:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d16:	4654      	mov	r4, sl
 8008d18:	2205      	movs	r2, #5
 8008d1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d1e:	4853      	ldr	r0, [pc, #332]	@ (8008e6c <_vfiprintf_r+0x21c>)
 8008d20:	f7f7 fa66 	bl	80001f0 <memchr>
 8008d24:	9a04      	ldr	r2, [sp, #16]
 8008d26:	b9d8      	cbnz	r0, 8008d60 <_vfiprintf_r+0x110>
 8008d28:	06d1      	lsls	r1, r2, #27
 8008d2a:	bf44      	itt	mi
 8008d2c:	2320      	movmi	r3, #32
 8008d2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d32:	0713      	lsls	r3, r2, #28
 8008d34:	bf44      	itt	mi
 8008d36:	232b      	movmi	r3, #43	@ 0x2b
 8008d38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d3c:	f89a 3000 	ldrb.w	r3, [sl]
 8008d40:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d42:	d015      	beq.n	8008d70 <_vfiprintf_r+0x120>
 8008d44:	9a07      	ldr	r2, [sp, #28]
 8008d46:	4654      	mov	r4, sl
 8008d48:	2000      	movs	r0, #0
 8008d4a:	f04f 0c0a 	mov.w	ip, #10
 8008d4e:	4621      	mov	r1, r4
 8008d50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d54:	3b30      	subs	r3, #48	@ 0x30
 8008d56:	2b09      	cmp	r3, #9
 8008d58:	d94b      	bls.n	8008df2 <_vfiprintf_r+0x1a2>
 8008d5a:	b1b0      	cbz	r0, 8008d8a <_vfiprintf_r+0x13a>
 8008d5c:	9207      	str	r2, [sp, #28]
 8008d5e:	e014      	b.n	8008d8a <_vfiprintf_r+0x13a>
 8008d60:	eba0 0308 	sub.w	r3, r0, r8
 8008d64:	fa09 f303 	lsl.w	r3, r9, r3
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	9304      	str	r3, [sp, #16]
 8008d6c:	46a2      	mov	sl, r4
 8008d6e:	e7d2      	b.n	8008d16 <_vfiprintf_r+0xc6>
 8008d70:	9b03      	ldr	r3, [sp, #12]
 8008d72:	1d19      	adds	r1, r3, #4
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	9103      	str	r1, [sp, #12]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	bfbb      	ittet	lt
 8008d7c:	425b      	neglt	r3, r3
 8008d7e:	f042 0202 	orrlt.w	r2, r2, #2
 8008d82:	9307      	strge	r3, [sp, #28]
 8008d84:	9307      	strlt	r3, [sp, #28]
 8008d86:	bfb8      	it	lt
 8008d88:	9204      	strlt	r2, [sp, #16]
 8008d8a:	7823      	ldrb	r3, [r4, #0]
 8008d8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d8e:	d10a      	bne.n	8008da6 <_vfiprintf_r+0x156>
 8008d90:	7863      	ldrb	r3, [r4, #1]
 8008d92:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d94:	d132      	bne.n	8008dfc <_vfiprintf_r+0x1ac>
 8008d96:	9b03      	ldr	r3, [sp, #12]
 8008d98:	1d1a      	adds	r2, r3, #4
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	9203      	str	r2, [sp, #12]
 8008d9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008da2:	3402      	adds	r4, #2
 8008da4:	9305      	str	r3, [sp, #20]
 8008da6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008e7c <_vfiprintf_r+0x22c>
 8008daa:	7821      	ldrb	r1, [r4, #0]
 8008dac:	2203      	movs	r2, #3
 8008dae:	4650      	mov	r0, sl
 8008db0:	f7f7 fa1e 	bl	80001f0 <memchr>
 8008db4:	b138      	cbz	r0, 8008dc6 <_vfiprintf_r+0x176>
 8008db6:	9b04      	ldr	r3, [sp, #16]
 8008db8:	eba0 000a 	sub.w	r0, r0, sl
 8008dbc:	2240      	movs	r2, #64	@ 0x40
 8008dbe:	4082      	lsls	r2, r0
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	3401      	adds	r4, #1
 8008dc4:	9304      	str	r3, [sp, #16]
 8008dc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dca:	4829      	ldr	r0, [pc, #164]	@ (8008e70 <_vfiprintf_r+0x220>)
 8008dcc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008dd0:	2206      	movs	r2, #6
 8008dd2:	f7f7 fa0d 	bl	80001f0 <memchr>
 8008dd6:	2800      	cmp	r0, #0
 8008dd8:	d03f      	beq.n	8008e5a <_vfiprintf_r+0x20a>
 8008dda:	4b26      	ldr	r3, [pc, #152]	@ (8008e74 <_vfiprintf_r+0x224>)
 8008ddc:	bb1b      	cbnz	r3, 8008e26 <_vfiprintf_r+0x1d6>
 8008dde:	9b03      	ldr	r3, [sp, #12]
 8008de0:	3307      	adds	r3, #7
 8008de2:	f023 0307 	bic.w	r3, r3, #7
 8008de6:	3308      	adds	r3, #8
 8008de8:	9303      	str	r3, [sp, #12]
 8008dea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dec:	443b      	add	r3, r7
 8008dee:	9309      	str	r3, [sp, #36]	@ 0x24
 8008df0:	e76a      	b.n	8008cc8 <_vfiprintf_r+0x78>
 8008df2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008df6:	460c      	mov	r4, r1
 8008df8:	2001      	movs	r0, #1
 8008dfa:	e7a8      	b.n	8008d4e <_vfiprintf_r+0xfe>
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	3401      	adds	r4, #1
 8008e00:	9305      	str	r3, [sp, #20]
 8008e02:	4619      	mov	r1, r3
 8008e04:	f04f 0c0a 	mov.w	ip, #10
 8008e08:	4620      	mov	r0, r4
 8008e0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e0e:	3a30      	subs	r2, #48	@ 0x30
 8008e10:	2a09      	cmp	r2, #9
 8008e12:	d903      	bls.n	8008e1c <_vfiprintf_r+0x1cc>
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d0c6      	beq.n	8008da6 <_vfiprintf_r+0x156>
 8008e18:	9105      	str	r1, [sp, #20]
 8008e1a:	e7c4      	b.n	8008da6 <_vfiprintf_r+0x156>
 8008e1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e20:	4604      	mov	r4, r0
 8008e22:	2301      	movs	r3, #1
 8008e24:	e7f0      	b.n	8008e08 <_vfiprintf_r+0x1b8>
 8008e26:	ab03      	add	r3, sp, #12
 8008e28:	9300      	str	r3, [sp, #0]
 8008e2a:	462a      	mov	r2, r5
 8008e2c:	4b12      	ldr	r3, [pc, #72]	@ (8008e78 <_vfiprintf_r+0x228>)
 8008e2e:	a904      	add	r1, sp, #16
 8008e30:	4630      	mov	r0, r6
 8008e32:	f3af 8000 	nop.w
 8008e36:	4607      	mov	r7, r0
 8008e38:	1c78      	adds	r0, r7, #1
 8008e3a:	d1d6      	bne.n	8008dea <_vfiprintf_r+0x19a>
 8008e3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e3e:	07d9      	lsls	r1, r3, #31
 8008e40:	d405      	bmi.n	8008e4e <_vfiprintf_r+0x1fe>
 8008e42:	89ab      	ldrh	r3, [r5, #12]
 8008e44:	059a      	lsls	r2, r3, #22
 8008e46:	d402      	bmi.n	8008e4e <_vfiprintf_r+0x1fe>
 8008e48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e4a:	f7ff f99f 	bl	800818c <__retarget_lock_release_recursive>
 8008e4e:	89ab      	ldrh	r3, [r5, #12]
 8008e50:	065b      	lsls	r3, r3, #25
 8008e52:	f53f af1f 	bmi.w	8008c94 <_vfiprintf_r+0x44>
 8008e56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e58:	e71e      	b.n	8008c98 <_vfiprintf_r+0x48>
 8008e5a:	ab03      	add	r3, sp, #12
 8008e5c:	9300      	str	r3, [sp, #0]
 8008e5e:	462a      	mov	r2, r5
 8008e60:	4b05      	ldr	r3, [pc, #20]	@ (8008e78 <_vfiprintf_r+0x228>)
 8008e62:	a904      	add	r1, sp, #16
 8008e64:	4630      	mov	r0, r6
 8008e66:	f7ff fc8d 	bl	8008784 <_printf_i>
 8008e6a:	e7e4      	b.n	8008e36 <_vfiprintf_r+0x1e6>
 8008e6c:	0800959b 	.word	0x0800959b
 8008e70:	080095a5 	.word	0x080095a5
 8008e74:	00000000 	.word	0x00000000
 8008e78:	08008c2d 	.word	0x08008c2d
 8008e7c:	080095a1 	.word	0x080095a1

08008e80 <__swbuf_r>:
 8008e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e82:	460e      	mov	r6, r1
 8008e84:	4614      	mov	r4, r2
 8008e86:	4605      	mov	r5, r0
 8008e88:	b118      	cbz	r0, 8008e92 <__swbuf_r+0x12>
 8008e8a:	6a03      	ldr	r3, [r0, #32]
 8008e8c:	b90b      	cbnz	r3, 8008e92 <__swbuf_r+0x12>
 8008e8e:	f7ff f813 	bl	8007eb8 <__sinit>
 8008e92:	69a3      	ldr	r3, [r4, #24]
 8008e94:	60a3      	str	r3, [r4, #8]
 8008e96:	89a3      	ldrh	r3, [r4, #12]
 8008e98:	071a      	lsls	r2, r3, #28
 8008e9a:	d501      	bpl.n	8008ea0 <__swbuf_r+0x20>
 8008e9c:	6923      	ldr	r3, [r4, #16]
 8008e9e:	b943      	cbnz	r3, 8008eb2 <__swbuf_r+0x32>
 8008ea0:	4621      	mov	r1, r4
 8008ea2:	4628      	mov	r0, r5
 8008ea4:	f000 f82a 	bl	8008efc <__swsetup_r>
 8008ea8:	b118      	cbz	r0, 8008eb2 <__swbuf_r+0x32>
 8008eaa:	f04f 37ff 	mov.w	r7, #4294967295
 8008eae:	4638      	mov	r0, r7
 8008eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008eb2:	6823      	ldr	r3, [r4, #0]
 8008eb4:	6922      	ldr	r2, [r4, #16]
 8008eb6:	1a98      	subs	r0, r3, r2
 8008eb8:	6963      	ldr	r3, [r4, #20]
 8008eba:	b2f6      	uxtb	r6, r6
 8008ebc:	4283      	cmp	r3, r0
 8008ebe:	4637      	mov	r7, r6
 8008ec0:	dc05      	bgt.n	8008ece <__swbuf_r+0x4e>
 8008ec2:	4621      	mov	r1, r4
 8008ec4:	4628      	mov	r0, r5
 8008ec6:	f7ff fe01 	bl	8008acc <_fflush_r>
 8008eca:	2800      	cmp	r0, #0
 8008ecc:	d1ed      	bne.n	8008eaa <__swbuf_r+0x2a>
 8008ece:	68a3      	ldr	r3, [r4, #8]
 8008ed0:	3b01      	subs	r3, #1
 8008ed2:	60a3      	str	r3, [r4, #8]
 8008ed4:	6823      	ldr	r3, [r4, #0]
 8008ed6:	1c5a      	adds	r2, r3, #1
 8008ed8:	6022      	str	r2, [r4, #0]
 8008eda:	701e      	strb	r6, [r3, #0]
 8008edc:	6962      	ldr	r2, [r4, #20]
 8008ede:	1c43      	adds	r3, r0, #1
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d004      	beq.n	8008eee <__swbuf_r+0x6e>
 8008ee4:	89a3      	ldrh	r3, [r4, #12]
 8008ee6:	07db      	lsls	r3, r3, #31
 8008ee8:	d5e1      	bpl.n	8008eae <__swbuf_r+0x2e>
 8008eea:	2e0a      	cmp	r6, #10
 8008eec:	d1df      	bne.n	8008eae <__swbuf_r+0x2e>
 8008eee:	4621      	mov	r1, r4
 8008ef0:	4628      	mov	r0, r5
 8008ef2:	f7ff fdeb 	bl	8008acc <_fflush_r>
 8008ef6:	2800      	cmp	r0, #0
 8008ef8:	d0d9      	beq.n	8008eae <__swbuf_r+0x2e>
 8008efa:	e7d6      	b.n	8008eaa <__swbuf_r+0x2a>

08008efc <__swsetup_r>:
 8008efc:	b538      	push	{r3, r4, r5, lr}
 8008efe:	4b29      	ldr	r3, [pc, #164]	@ (8008fa4 <__swsetup_r+0xa8>)
 8008f00:	4605      	mov	r5, r0
 8008f02:	6818      	ldr	r0, [r3, #0]
 8008f04:	460c      	mov	r4, r1
 8008f06:	b118      	cbz	r0, 8008f10 <__swsetup_r+0x14>
 8008f08:	6a03      	ldr	r3, [r0, #32]
 8008f0a:	b90b      	cbnz	r3, 8008f10 <__swsetup_r+0x14>
 8008f0c:	f7fe ffd4 	bl	8007eb8 <__sinit>
 8008f10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f14:	0719      	lsls	r1, r3, #28
 8008f16:	d422      	bmi.n	8008f5e <__swsetup_r+0x62>
 8008f18:	06da      	lsls	r2, r3, #27
 8008f1a:	d407      	bmi.n	8008f2c <__swsetup_r+0x30>
 8008f1c:	2209      	movs	r2, #9
 8008f1e:	602a      	str	r2, [r5, #0]
 8008f20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f24:	81a3      	strh	r3, [r4, #12]
 8008f26:	f04f 30ff 	mov.w	r0, #4294967295
 8008f2a:	e033      	b.n	8008f94 <__swsetup_r+0x98>
 8008f2c:	0758      	lsls	r0, r3, #29
 8008f2e:	d512      	bpl.n	8008f56 <__swsetup_r+0x5a>
 8008f30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f32:	b141      	cbz	r1, 8008f46 <__swsetup_r+0x4a>
 8008f34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f38:	4299      	cmp	r1, r3
 8008f3a:	d002      	beq.n	8008f42 <__swsetup_r+0x46>
 8008f3c:	4628      	mov	r0, r5
 8008f3e:	f7ff f95b 	bl	80081f8 <_free_r>
 8008f42:	2300      	movs	r3, #0
 8008f44:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f46:	89a3      	ldrh	r3, [r4, #12]
 8008f48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008f4c:	81a3      	strh	r3, [r4, #12]
 8008f4e:	2300      	movs	r3, #0
 8008f50:	6063      	str	r3, [r4, #4]
 8008f52:	6923      	ldr	r3, [r4, #16]
 8008f54:	6023      	str	r3, [r4, #0]
 8008f56:	89a3      	ldrh	r3, [r4, #12]
 8008f58:	f043 0308 	orr.w	r3, r3, #8
 8008f5c:	81a3      	strh	r3, [r4, #12]
 8008f5e:	6923      	ldr	r3, [r4, #16]
 8008f60:	b94b      	cbnz	r3, 8008f76 <__swsetup_r+0x7a>
 8008f62:	89a3      	ldrh	r3, [r4, #12]
 8008f64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008f68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f6c:	d003      	beq.n	8008f76 <__swsetup_r+0x7a>
 8008f6e:	4621      	mov	r1, r4
 8008f70:	4628      	mov	r0, r5
 8008f72:	f000 f88b 	bl	800908c <__smakebuf_r>
 8008f76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f7a:	f013 0201 	ands.w	r2, r3, #1
 8008f7e:	d00a      	beq.n	8008f96 <__swsetup_r+0x9a>
 8008f80:	2200      	movs	r2, #0
 8008f82:	60a2      	str	r2, [r4, #8]
 8008f84:	6962      	ldr	r2, [r4, #20]
 8008f86:	4252      	negs	r2, r2
 8008f88:	61a2      	str	r2, [r4, #24]
 8008f8a:	6922      	ldr	r2, [r4, #16]
 8008f8c:	b942      	cbnz	r2, 8008fa0 <__swsetup_r+0xa4>
 8008f8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008f92:	d1c5      	bne.n	8008f20 <__swsetup_r+0x24>
 8008f94:	bd38      	pop	{r3, r4, r5, pc}
 8008f96:	0799      	lsls	r1, r3, #30
 8008f98:	bf58      	it	pl
 8008f9a:	6962      	ldrpl	r2, [r4, #20]
 8008f9c:	60a2      	str	r2, [r4, #8]
 8008f9e:	e7f4      	b.n	8008f8a <__swsetup_r+0x8e>
 8008fa0:	2000      	movs	r0, #0
 8008fa2:	e7f7      	b.n	8008f94 <__swsetup_r+0x98>
 8008fa4:	2000001c 	.word	0x2000001c

08008fa8 <_raise_r>:
 8008fa8:	291f      	cmp	r1, #31
 8008faa:	b538      	push	{r3, r4, r5, lr}
 8008fac:	4605      	mov	r5, r0
 8008fae:	460c      	mov	r4, r1
 8008fb0:	d904      	bls.n	8008fbc <_raise_r+0x14>
 8008fb2:	2316      	movs	r3, #22
 8008fb4:	6003      	str	r3, [r0, #0]
 8008fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8008fba:	bd38      	pop	{r3, r4, r5, pc}
 8008fbc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008fbe:	b112      	cbz	r2, 8008fc6 <_raise_r+0x1e>
 8008fc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008fc4:	b94b      	cbnz	r3, 8008fda <_raise_r+0x32>
 8008fc6:	4628      	mov	r0, r5
 8008fc8:	f000 f830 	bl	800902c <_getpid_r>
 8008fcc:	4622      	mov	r2, r4
 8008fce:	4601      	mov	r1, r0
 8008fd0:	4628      	mov	r0, r5
 8008fd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fd6:	f000 b817 	b.w	8009008 <_kill_r>
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d00a      	beq.n	8008ff4 <_raise_r+0x4c>
 8008fde:	1c59      	adds	r1, r3, #1
 8008fe0:	d103      	bne.n	8008fea <_raise_r+0x42>
 8008fe2:	2316      	movs	r3, #22
 8008fe4:	6003      	str	r3, [r0, #0]
 8008fe6:	2001      	movs	r0, #1
 8008fe8:	e7e7      	b.n	8008fba <_raise_r+0x12>
 8008fea:	2100      	movs	r1, #0
 8008fec:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008ff0:	4620      	mov	r0, r4
 8008ff2:	4798      	blx	r3
 8008ff4:	2000      	movs	r0, #0
 8008ff6:	e7e0      	b.n	8008fba <_raise_r+0x12>

08008ff8 <raise>:
 8008ff8:	4b02      	ldr	r3, [pc, #8]	@ (8009004 <raise+0xc>)
 8008ffa:	4601      	mov	r1, r0
 8008ffc:	6818      	ldr	r0, [r3, #0]
 8008ffe:	f7ff bfd3 	b.w	8008fa8 <_raise_r>
 8009002:	bf00      	nop
 8009004:	2000001c 	.word	0x2000001c

08009008 <_kill_r>:
 8009008:	b538      	push	{r3, r4, r5, lr}
 800900a:	4d07      	ldr	r5, [pc, #28]	@ (8009028 <_kill_r+0x20>)
 800900c:	2300      	movs	r3, #0
 800900e:	4604      	mov	r4, r0
 8009010:	4608      	mov	r0, r1
 8009012:	4611      	mov	r1, r2
 8009014:	602b      	str	r3, [r5, #0]
 8009016:	f7f8 fa43 	bl	80014a0 <_kill>
 800901a:	1c43      	adds	r3, r0, #1
 800901c:	d102      	bne.n	8009024 <_kill_r+0x1c>
 800901e:	682b      	ldr	r3, [r5, #0]
 8009020:	b103      	cbz	r3, 8009024 <_kill_r+0x1c>
 8009022:	6023      	str	r3, [r4, #0]
 8009024:	bd38      	pop	{r3, r4, r5, pc}
 8009026:	bf00      	nop
 8009028:	200046ec 	.word	0x200046ec

0800902c <_getpid_r>:
 800902c:	f7f8 ba30 	b.w	8001490 <_getpid>

08009030 <_malloc_usable_size_r>:
 8009030:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009034:	1f18      	subs	r0, r3, #4
 8009036:	2b00      	cmp	r3, #0
 8009038:	bfbc      	itt	lt
 800903a:	580b      	ldrlt	r3, [r1, r0]
 800903c:	18c0      	addlt	r0, r0, r3
 800903e:	4770      	bx	lr

08009040 <__swhatbuf_r>:
 8009040:	b570      	push	{r4, r5, r6, lr}
 8009042:	460c      	mov	r4, r1
 8009044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009048:	2900      	cmp	r1, #0
 800904a:	b096      	sub	sp, #88	@ 0x58
 800904c:	4615      	mov	r5, r2
 800904e:	461e      	mov	r6, r3
 8009050:	da0d      	bge.n	800906e <__swhatbuf_r+0x2e>
 8009052:	89a3      	ldrh	r3, [r4, #12]
 8009054:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009058:	f04f 0100 	mov.w	r1, #0
 800905c:	bf14      	ite	ne
 800905e:	2340      	movne	r3, #64	@ 0x40
 8009060:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009064:	2000      	movs	r0, #0
 8009066:	6031      	str	r1, [r6, #0]
 8009068:	602b      	str	r3, [r5, #0]
 800906a:	b016      	add	sp, #88	@ 0x58
 800906c:	bd70      	pop	{r4, r5, r6, pc}
 800906e:	466a      	mov	r2, sp
 8009070:	f000 f848 	bl	8009104 <_fstat_r>
 8009074:	2800      	cmp	r0, #0
 8009076:	dbec      	blt.n	8009052 <__swhatbuf_r+0x12>
 8009078:	9901      	ldr	r1, [sp, #4]
 800907a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800907e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009082:	4259      	negs	r1, r3
 8009084:	4159      	adcs	r1, r3
 8009086:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800908a:	e7eb      	b.n	8009064 <__swhatbuf_r+0x24>

0800908c <__smakebuf_r>:
 800908c:	898b      	ldrh	r3, [r1, #12]
 800908e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009090:	079d      	lsls	r5, r3, #30
 8009092:	4606      	mov	r6, r0
 8009094:	460c      	mov	r4, r1
 8009096:	d507      	bpl.n	80090a8 <__smakebuf_r+0x1c>
 8009098:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800909c:	6023      	str	r3, [r4, #0]
 800909e:	6123      	str	r3, [r4, #16]
 80090a0:	2301      	movs	r3, #1
 80090a2:	6163      	str	r3, [r4, #20]
 80090a4:	b003      	add	sp, #12
 80090a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090a8:	ab01      	add	r3, sp, #4
 80090aa:	466a      	mov	r2, sp
 80090ac:	f7ff ffc8 	bl	8009040 <__swhatbuf_r>
 80090b0:	9f00      	ldr	r7, [sp, #0]
 80090b2:	4605      	mov	r5, r0
 80090b4:	4639      	mov	r1, r7
 80090b6:	4630      	mov	r0, r6
 80090b8:	f7ff f912 	bl	80082e0 <_malloc_r>
 80090bc:	b948      	cbnz	r0, 80090d2 <__smakebuf_r+0x46>
 80090be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090c2:	059a      	lsls	r2, r3, #22
 80090c4:	d4ee      	bmi.n	80090a4 <__smakebuf_r+0x18>
 80090c6:	f023 0303 	bic.w	r3, r3, #3
 80090ca:	f043 0302 	orr.w	r3, r3, #2
 80090ce:	81a3      	strh	r3, [r4, #12]
 80090d0:	e7e2      	b.n	8009098 <__smakebuf_r+0xc>
 80090d2:	89a3      	ldrh	r3, [r4, #12]
 80090d4:	6020      	str	r0, [r4, #0]
 80090d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090da:	81a3      	strh	r3, [r4, #12]
 80090dc:	9b01      	ldr	r3, [sp, #4]
 80090de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80090e2:	b15b      	cbz	r3, 80090fc <__smakebuf_r+0x70>
 80090e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090e8:	4630      	mov	r0, r6
 80090ea:	f000 f81d 	bl	8009128 <_isatty_r>
 80090ee:	b128      	cbz	r0, 80090fc <__smakebuf_r+0x70>
 80090f0:	89a3      	ldrh	r3, [r4, #12]
 80090f2:	f023 0303 	bic.w	r3, r3, #3
 80090f6:	f043 0301 	orr.w	r3, r3, #1
 80090fa:	81a3      	strh	r3, [r4, #12]
 80090fc:	89a3      	ldrh	r3, [r4, #12]
 80090fe:	431d      	orrs	r5, r3
 8009100:	81a5      	strh	r5, [r4, #12]
 8009102:	e7cf      	b.n	80090a4 <__smakebuf_r+0x18>

08009104 <_fstat_r>:
 8009104:	b538      	push	{r3, r4, r5, lr}
 8009106:	4d07      	ldr	r5, [pc, #28]	@ (8009124 <_fstat_r+0x20>)
 8009108:	2300      	movs	r3, #0
 800910a:	4604      	mov	r4, r0
 800910c:	4608      	mov	r0, r1
 800910e:	4611      	mov	r1, r2
 8009110:	602b      	str	r3, [r5, #0]
 8009112:	f7f8 fa25 	bl	8001560 <_fstat>
 8009116:	1c43      	adds	r3, r0, #1
 8009118:	d102      	bne.n	8009120 <_fstat_r+0x1c>
 800911a:	682b      	ldr	r3, [r5, #0]
 800911c:	b103      	cbz	r3, 8009120 <_fstat_r+0x1c>
 800911e:	6023      	str	r3, [r4, #0]
 8009120:	bd38      	pop	{r3, r4, r5, pc}
 8009122:	bf00      	nop
 8009124:	200046ec 	.word	0x200046ec

08009128 <_isatty_r>:
 8009128:	b538      	push	{r3, r4, r5, lr}
 800912a:	4d06      	ldr	r5, [pc, #24]	@ (8009144 <_isatty_r+0x1c>)
 800912c:	2300      	movs	r3, #0
 800912e:	4604      	mov	r4, r0
 8009130:	4608      	mov	r0, r1
 8009132:	602b      	str	r3, [r5, #0]
 8009134:	f7f8 fa24 	bl	8001580 <_isatty>
 8009138:	1c43      	adds	r3, r0, #1
 800913a:	d102      	bne.n	8009142 <_isatty_r+0x1a>
 800913c:	682b      	ldr	r3, [r5, #0]
 800913e:	b103      	cbz	r3, 8009142 <_isatty_r+0x1a>
 8009140:	6023      	str	r3, [r4, #0]
 8009142:	bd38      	pop	{r3, r4, r5, pc}
 8009144:	200046ec 	.word	0x200046ec

08009148 <_init>:
 8009148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800914a:	bf00      	nop
 800914c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800914e:	bc08      	pop	{r3}
 8009150:	469e      	mov	lr, r3
 8009152:	4770      	bx	lr

08009154 <_fini>:
 8009154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009156:	bf00      	nop
 8009158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800915a:	bc08      	pop	{r3}
 800915c:	469e      	mov	lr, r3
 800915e:	4770      	bx	lr
