
canproj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ae4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000314  08008c84  08008c84  00009c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f98  08008f98  0000a06c  2**0
                  CONTENTS
  4 .ARM          00000008  08008f98  08008f98  00009f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fa0  08008fa0  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fa0  08008fa0  00009fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008fa4  08008fa4  00009fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08008fa8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000045ec  2000006c  08009014  0000a06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004658  08009014  0000a658  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000192a3  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d62  00000000  00000000  0002333f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001748  00000000  00000000  000270a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000120c  00000000  00000000  000287f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a804  00000000  00000000  000299fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a274  00000000  00000000  00044200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a162b  00000000  00000000  0005e474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ffa9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d14  00000000  00000000  000ffae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001067f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008c6c 	.word	0x08008c6c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08008c6c 	.word	0x08008c6c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	4a07      	ldr	r2, [pc, #28]	@ (80005ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000590:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	4a06      	ldr	r2, [pc, #24]	@ (80005b0 <vApplicationGetIdleTaskMemory+0x30>)
 8000596:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2280      	movs	r2, #128	@ 0x80
 800059c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000088 	.word	0x20000088
 80005b0:	200000dc 	.word	0x200000dc

080005b4 <vApplicationGetTimerTaskMemory>:

//No idea what this doe, but needed for xEventGroupSetBitsFromISR
void vApplicationGetTimerTaskMemory(StaticTask_t **ppxTimerTaskTCBBuffer,
                                    StackType_t **ppxTimerTaskStackBuffer,
                                    uint32_t *pulTimerTaskStackSize)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;              // Provide TCB memory
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	4a07      	ldr	r2, [pc, #28]	@ (80005e0 <vApplicationGetTimerTaskMemory+0x2c>)
 80005c4:	601a      	str	r2, [r3, #0]
    *ppxTimerTaskStackBuffer = xTimerStack;               // Provide stack memory
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	4a06      	ldr	r2, [pc, #24]	@ (80005e4 <vApplicationGetTimerTaskMemory+0x30>)
 80005ca:	601a      	str	r2, [r3, #0]
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH; // Provide stack size
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2280      	movs	r2, #128	@ 0x80
 80005d0:	601a      	str	r2, [r3, #0]
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	200003ac 	.word	0x200003ac
 80005e4:	20000400 	.word	0x20000400

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b5b0      	push	{r4, r5, r7, lr}
 80005ea:	b09a      	sub	sp, #104	@ 0x68
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ee:	f000 ffe1 	bl	80015b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f2:	f000 f875 	bl	80006e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f6:	f000 f965 	bl	80008c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005fa:	f000 f939 	bl	8000870 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80005fe:	f000 f901 	bl	8000804 <MX_SPI1_Init>
  MX_RTC_Init();
 8000602:	f000 f8d9 	bl	80007b8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  mcp2515init();
 8000606:	f000 fae5 	bl	8000bd4 <mcp2515init>
  print("Program Started");
 800060a:	482c      	ldr	r0, [pc, #176]	@ (80006bc <main+0xd4>)
 800060c:	f000 f9e4 	bl	80009d8 <print>
  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  messageToRead = xEventGroupCreate();
 8000610:	f004 f959 	bl	80048c6 <xEventGroupCreate>
 8000614:	4603      	mov	r3, r0
 8000616:	4a2a      	ldr	r2, [pc, #168]	@ (80006c0 <main+0xd8>)
 8000618:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  osMailQDef(canMailQueue, 5, MessageCAN);
 800061a:	2305      	movs	r3, #5
 800061c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800061e:	2324      	movs	r3, #36	@ 0x24
 8000620:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000622:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000626:	663b      	str	r3, [r7, #96]	@ 0x60
  canMailQueueHandle = osMailCreate(osMailQ(canMailQueue), NULL);
 8000628:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f004 f808 	bl	8004644 <osMailCreate>
 8000634:	4603      	mov	r3, r0
 8000636:	4a23      	ldr	r2, [pc, #140]	@ (80006c4 <main+0xdc>)
 8000638:	6013      	str	r3, [r2, #0]
  if (canMailQueueHandle == NULL)
 800063a:	4b22      	ldr	r3, [pc, #136]	@ (80006c4 <main+0xdc>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d101      	bne.n	8000646 <main+0x5e>
  {
      // Handle error
      Error_Handler();
 8000642:	f000 fd27 	bl	8001094 <Error_Handler>
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000646:	4b20      	ldr	r3, [pc, #128]	@ (80006c8 <main+0xe0>)
 8000648:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800064c:	461d      	mov	r5, r3
 800064e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000650:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000652:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000656:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800065a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800065e:	2100      	movs	r1, #0
 8000660:	4618      	mov	r0, r3
 8000662:	f003 fe7c 	bl	800435e <osThreadCreate>
 8000666:	4603      	mov	r3, r0
 8000668:	4a18      	ldr	r2, [pc, #96]	@ (80006cc <main+0xe4>)
 800066a:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityAboveNormal, 0, 128);
 800066c:	4b18      	ldr	r3, [pc, #96]	@ (80006d0 <main+0xe8>)
 800066e:	f107 0420 	add.w	r4, r7, #32
 8000672:	461d      	mov	r5, r3
 8000674:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000676:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000678:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800067c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000680:	f107 0320 	add.w	r3, r7, #32
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f003 fe69 	bl	800435e <osThreadCreate>
 800068c:	4603      	mov	r3, r0
 800068e:	4a11      	ldr	r2, [pc, #68]	@ (80006d4 <main+0xec>)
 8000690:	6013      	str	r3, [r2, #0]

  /* definition and creation of sdCardMsgPost */
  osThreadDef(sdCardMsgPost, StartTask03, osPriorityAboveNormal, 0, 128);
 8000692:	4b11      	ldr	r3, [pc, #68]	@ (80006d8 <main+0xf0>)
 8000694:	1d3c      	adds	r4, r7, #4
 8000696:	461d      	mov	r5, r3
 8000698:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800069a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800069c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sdCardMsgPostHandle = osThreadCreate(osThread(sdCardMsgPost), NULL);
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	2100      	movs	r1, #0
 80006a8:	4618      	mov	r0, r3
 80006aa:	f003 fe58 	bl	800435e <osThreadCreate>
 80006ae:	4603      	mov	r3, r0
 80006b0:	4a0a      	ldr	r2, [pc, #40]	@ (80006dc <main+0xf4>)
 80006b2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006b4:	f003 fe4c 	bl	8004350 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b8:	bf00      	nop
 80006ba:	e7fd      	b.n	80006b8 <main+0xd0>
 80006bc:	08008c84 	.word	0x08008c84
 80006c0:	200003a8 	.word	0x200003a8
 80006c4:	20000600 	.word	0x20000600
 80006c8:	08008ca0 	.word	0x08008ca0
 80006cc:	2000039c 	.word	0x2000039c
 80006d0:	08008cc8 	.word	0x08008cc8
 80006d4:	200003a0 	.word	0x200003a0
 80006d8:	08008cf4 	.word	0x08008cf4
 80006dc:	200003a4 	.word	0x200003a4

080006e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b094      	sub	sp, #80	@ 0x50
 80006e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e6:	f107 0320 	add.w	r3, r7, #32
 80006ea:	2230      	movs	r2, #48	@ 0x30
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f007 fa51 	bl	8007b96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f4:	f107 030c 	add.w	r3, r7, #12
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000704:	2300      	movs	r3, #0
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	4b29      	ldr	r3, [pc, #164]	@ (80007b0 <SystemClock_Config+0xd0>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800070c:	4a28      	ldr	r2, [pc, #160]	@ (80007b0 <SystemClock_Config+0xd0>)
 800070e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000712:	6413      	str	r3, [r2, #64]	@ 0x40
 8000714:	4b26      	ldr	r3, [pc, #152]	@ (80007b0 <SystemClock_Config+0xd0>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000718:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000720:	2300      	movs	r3, #0
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	4b23      	ldr	r3, [pc, #140]	@ (80007b4 <SystemClock_Config+0xd4>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a22      	ldr	r2, [pc, #136]	@ (80007b4 <SystemClock_Config+0xd4>)
 800072a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800072e:	6013      	str	r3, [r2, #0]
 8000730:	4b20      	ldr	r3, [pc, #128]	@ (80007b4 <SystemClock_Config+0xd4>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800073c:	230a      	movs	r3, #10
 800073e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000740:	2301      	movs	r3, #1
 8000742:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000744:	2310      	movs	r3, #16
 8000746:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000748:	2301      	movs	r3, #1
 800074a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074c:	2302      	movs	r3, #2
 800074e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000750:	2300      	movs	r3, #0
 8000752:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000754:	2310      	movs	r3, #16
 8000756:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000758:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800075c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800075e:	2304      	movs	r3, #4
 8000760:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000762:	2304      	movs	r3, #4
 8000764:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000766:	f107 0320 	add.w	r3, r7, #32
 800076a:	4618      	mov	r0, r3
 800076c:	f001 fa38 	bl	8001be0 <HAL_RCC_OscConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000776:	f000 fc8d 	bl	8001094 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077a:	230f      	movs	r3, #15
 800077c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077e:	2302      	movs	r3, #2
 8000780:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000786:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800078a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	2102      	movs	r1, #2
 8000796:	4618      	mov	r0, r3
 8000798:	f001 fc9a 	bl	80020d0 <HAL_RCC_ClockConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007a2:	f000 fc77 	bl	8001094 <Error_Handler>
  }
}
 80007a6:	bf00      	nop
 80007a8:	3750      	adds	r7, #80	@ 0x50
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40007000 	.word	0x40007000

080007b8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	@ (80007fc <MX_RTC_Init+0x44>)
 80007be:	4a10      	ldr	r2, [pc, #64]	@ (8000800 <MX_RTC_Init+0x48>)
 80007c0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	@ (80007fc <MX_RTC_Init+0x44>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	@ (80007fc <MX_RTC_Init+0x44>)
 80007ca:	227f      	movs	r2, #127	@ 0x7f
 80007cc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	@ (80007fc <MX_RTC_Init+0x44>)
 80007d0:	22ff      	movs	r2, #255	@ 0xff
 80007d2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007d4:	4b09      	ldr	r3, [pc, #36]	@ (80007fc <MX_RTC_Init+0x44>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007da:	4b08      	ldr	r3, [pc, #32]	@ (80007fc <MX_RTC_Init+0x44>)
 80007dc:	2200      	movs	r2, #0
 80007de:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007e0:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <MX_RTC_Init+0x44>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	@ (80007fc <MX_RTC_Init+0x44>)
 80007e8:	f001 ffb4 	bl	8002754 <HAL_RTC_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80007f2:	f000 fc4f 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	200002dc 	.word	0x200002dc
 8000800:	40002800 	.word	0x40002800

08000804 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000808:	4b17      	ldr	r3, [pc, #92]	@ (8000868 <MX_SPI1_Init+0x64>)
 800080a:	4a18      	ldr	r2, [pc, #96]	@ (800086c <MX_SPI1_Init+0x68>)
 800080c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800080e:	4b16      	ldr	r3, [pc, #88]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000810:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000814:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000816:	4b14      	ldr	r3, [pc, #80]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800081c:	4b12      	ldr	r3, [pc, #72]	@ (8000868 <MX_SPI1_Init+0x64>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000822:	4b11      	ldr	r3, [pc, #68]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000828:	4b0f      	ldr	r3, [pc, #60]	@ (8000868 <MX_SPI1_Init+0x64>)
 800082a:	2200      	movs	r2, #0
 800082c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800082e:	4b0e      	ldr	r3, [pc, #56]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000830:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000834:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000836:	4b0c      	ldr	r3, [pc, #48]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000838:	2220      	movs	r2, #32
 800083a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800083c:	4b0a      	ldr	r3, [pc, #40]	@ (8000868 <MX_SPI1_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000842:	4b09      	ldr	r3, [pc, #36]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000844:	2200      	movs	r2, #0
 8000846:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000848:	4b07      	ldr	r3, [pc, #28]	@ (8000868 <MX_SPI1_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800084e:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000850:	220a      	movs	r2, #10
 8000852:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000854:	4804      	ldr	r0, [pc, #16]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000856:	f002 f8ff 	bl	8002a58 <HAL_SPI_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000860:	f000 fc18 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	200002fc 	.word	0x200002fc
 800086c:	40013000 	.word	0x40013000

08000870 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000874:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <MX_USART2_UART_Init+0x4c>)
 8000876:	4a12      	ldr	r2, [pc, #72]	@ (80008c0 <MX_USART2_UART_Init+0x50>)
 8000878:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800087a:	4b10      	ldr	r3, [pc, #64]	@ (80008bc <MX_USART2_UART_Init+0x4c>)
 800087c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000880:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000882:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <MX_USART2_UART_Init+0x4c>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000888:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <MX_USART2_UART_Init+0x4c>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800088e:	4b0b      	ldr	r3, [pc, #44]	@ (80008bc <MX_USART2_UART_Init+0x4c>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000894:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <MX_USART2_UART_Init+0x4c>)
 8000896:	220c      	movs	r2, #12
 8000898:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089a:	4b08      	ldr	r3, [pc, #32]	@ (80008bc <MX_USART2_UART_Init+0x4c>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a0:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <MX_USART2_UART_Init+0x4c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008a6:	4805      	ldr	r0, [pc, #20]	@ (80008bc <MX_USART2_UART_Init+0x4c>)
 80008a8:	f003 f91c 	bl	8003ae4 <HAL_UART_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008b2:	f000 fbef 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000354 	.word	0x20000354
 80008c0:	40004400 	.word	0x40004400

080008c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08a      	sub	sp, #40	@ 0x28
 80008c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
 80008d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	4b3a      	ldr	r3, [pc, #232]	@ (80009c8 <MX_GPIO_Init+0x104>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a39      	ldr	r2, [pc, #228]	@ (80009c8 <MX_GPIO_Init+0x104>)
 80008e4:	f043 0304 	orr.w	r3, r3, #4
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b37      	ldr	r3, [pc, #220]	@ (80009c8 <MX_GPIO_Init+0x104>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0304 	and.w	r3, r3, #4
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	4b33      	ldr	r3, [pc, #204]	@ (80009c8 <MX_GPIO_Init+0x104>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	4a32      	ldr	r2, [pc, #200]	@ (80009c8 <MX_GPIO_Init+0x104>)
 8000900:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000904:	6313      	str	r3, [r2, #48]	@ 0x30
 8000906:	4b30      	ldr	r3, [pc, #192]	@ (80009c8 <MX_GPIO_Init+0x104>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	4b2c      	ldr	r3, [pc, #176]	@ (80009c8 <MX_GPIO_Init+0x104>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	4a2b      	ldr	r2, [pc, #172]	@ (80009c8 <MX_GPIO_Init+0x104>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6313      	str	r3, [r2, #48]	@ 0x30
 8000922:	4b29      	ldr	r3, [pc, #164]	@ (80009c8 <MX_GPIO_Init+0x104>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	4b25      	ldr	r3, [pc, #148]	@ (80009c8 <MX_GPIO_Init+0x104>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a24      	ldr	r2, [pc, #144]	@ (80009c8 <MX_GPIO_Init+0x104>)
 8000938:	f043 0302 	orr.w	r3, r3, #2
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
 800093e:	4b22      	ldr	r3, [pc, #136]	@ (80009c8 <MX_GPIO_Init+0x104>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f003 0302 	and.w	r3, r3, #2
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	2140      	movs	r1, #64	@ 0x40
 800094e:	481f      	ldr	r0, [pc, #124]	@ (80009cc <MX_GPIO_Init+0x108>)
 8000950:	f001 f914 	bl	8001b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Btn_Int_Pin */
  GPIO_InitStruct.Pin = Btn_Int_Pin;
 8000954:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000958:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800095a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800095e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000960:	2301      	movs	r3, #1
 8000962:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Btn_Int_GPIO_Port, &GPIO_InitStruct);
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	4619      	mov	r1, r3
 800096a:	4819      	ldr	r0, [pc, #100]	@ (80009d0 <MX_GPIO_Init+0x10c>)
 800096c:	f000 ff6a 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_INT_Pin */
  GPIO_InitStruct.Pin = CAN_INT_Pin;
 8000970:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000976:	2300      	movs	r3, #0
 8000978:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800097a:	2301      	movs	r3, #1
 800097c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CAN_INT_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	4619      	mov	r1, r3
 8000984:	4813      	ldr	r0, [pc, #76]	@ (80009d4 <MX_GPIO_Init+0x110>)
 8000986:	f000 ff5d 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800098a:	2340      	movs	r3, #64	@ 0x40
 800098c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098e:	2301      	movs	r3, #1
 8000990:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	4619      	mov	r1, r3
 80009a0:	480a      	ldr	r0, [pc, #40]	@ (80009cc <MX_GPIO_Init+0x108>)
 80009a2:	f000 ff4f 	bl	8001844 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2105      	movs	r1, #5
 80009aa:	2028      	movs	r0, #40	@ 0x28
 80009ac:	f000 ff20 	bl	80017f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009b0:	2028      	movs	r0, #40	@ 0x28
 80009b2:	f000 ff39 	bl	8001828 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80009b6:	2201      	movs	r2, #1
 80009b8:	2140      	movs	r1, #64	@ 0x40
 80009ba:	4804      	ldr	r0, [pc, #16]	@ (80009cc <MX_GPIO_Init+0x108>)
 80009bc:	f001 f8de 	bl	8001b7c <HAL_GPIO_WritePin>

/* USER CODE END MX_GPIO_Init_2 */
}
 80009c0:	bf00      	nop
 80009c2:	3728      	adds	r7, #40	@ 0x28
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40020400 	.word	0x40020400
 80009d0:	40020800 	.word	0x40020800
 80009d4:	40020000 	.word	0x40020000

080009d8 <print>:

/* USER CODE BEGIN 4 */
void print(const char* buffer) {
 80009d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80009dc:	b087      	sub	sp, #28
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
 80009e2:	466b      	mov	r3, sp
 80009e4:	461e      	mov	r6, r3
    // Calculate the string length
    size_t length = strlen(buffer);
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f7ff fbfa 	bl	80001e0 <strlen>
 80009ec:	6178      	str	r0, [r7, #20]

    // Add space for the new line and carriage return
    char tempBuffer[length + 3]; // Original string + '\r' + '\n' + null terminator
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	1cd9      	adds	r1, r3, #3
 80009f2:	460b      	mov	r3, r1
 80009f4:	3b01      	subs	r3, #1
 80009f6:	613b      	str	r3, [r7, #16]
 80009f8:	2300      	movs	r3, #0
 80009fa:	4688      	mov	r8, r1
 80009fc:	4699      	mov	r9, r3
 80009fe:	f04f 0200 	mov.w	r2, #0
 8000a02:	f04f 0300 	mov.w	r3, #0
 8000a06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000a0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000a0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000a12:	2300      	movs	r3, #0
 8000a14:	460c      	mov	r4, r1
 8000a16:	461d      	mov	r5, r3
 8000a18:	f04f 0200 	mov.w	r2, #0
 8000a1c:	f04f 0300 	mov.w	r3, #0
 8000a20:	00eb      	lsls	r3, r5, #3
 8000a22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000a26:	00e2      	lsls	r2, r4, #3
 8000a28:	1dcb      	adds	r3, r1, #7
 8000a2a:	08db      	lsrs	r3, r3, #3
 8000a2c:	00db      	lsls	r3, r3, #3
 8000a2e:	ebad 0d03 	sub.w	sp, sp, r3
 8000a32:	466b      	mov	r3, sp
 8000a34:	3300      	adds	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]

    // Copy the original string into the temporary buffer
    strcpy(tempBuffer, buffer);
 8000a38:	6879      	ldr	r1, [r7, #4]
 8000a3a:	68f8      	ldr	r0, [r7, #12]
 8000a3c:	f007 f939 	bl	8007cb2 <strcpy>

    // Append the new line and carriage return
    tempBuffer[length] = '\r';     // Carriage return
 8000a40:	68fa      	ldr	r2, [r7, #12]
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	4413      	add	r3, r2
 8000a46:	220d      	movs	r2, #13
 8000a48:	701a      	strb	r2, [r3, #0]
    tempBuffer[length + 1] = '\n'; // New line
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	210a      	movs	r1, #10
 8000a52:	54d1      	strb	r1, [r2, r3]
    tempBuffer[length + 2] = '\0'; // Null terminator
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	3302      	adds	r3, #2
 8000a58:	68fa      	ldr	r2, [r7, #12]
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	54d1      	strb	r1, [r2, r3]

    // Transmit the modified string over UART
    HAL_UART_Transmit(&huart2, (uint8_t*)tempBuffer, strlen(tempBuffer), 100);
 8000a5e:	68f8      	ldr	r0, [r7, #12]
 8000a60:	f7ff fbbe 	bl	80001e0 <strlen>
 8000a64:	4603      	mov	r3, r0
 8000a66:	b29a      	uxth	r2, r3
 8000a68:	2364      	movs	r3, #100	@ 0x64
 8000a6a:	68f9      	ldr	r1, [r7, #12]
 8000a6c:	4804      	ldr	r0, [pc, #16]	@ (8000a80 <print+0xa8>)
 8000a6e:	f003 f889 	bl	8003b84 <HAL_UART_Transmit>
 8000a72:	46b5      	mov	sp, r6
}
 8000a74:	bf00      	nop
 8000a76:	371c      	adds	r7, #28
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000354 	.word	0x20000354

08000a84 <mcp2515writeRegister>:
void mcp2515writeRegister(uint8_t address, uint8_t data){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	460a      	mov	r2, r1
 8000a8e:	71fb      	strb	r3, [r7, #7]
 8000a90:	4613      	mov	r3, r2
 8000a92:	71bb      	strb	r3, [r7, #6]

	uint8_t txBuffer[3] = {0x02, address, data};
 8000a94:	2302      	movs	r3, #2
 8000a96:	733b      	strb	r3, [r7, #12]
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	737b      	strb	r3, [r7, #13]
 8000a9c:	79bb      	ldrb	r3, [r7, #6]
 8000a9e:	73bb      	strb	r3, [r7, #14]

	SPI1_CS_LOW();
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2140      	movs	r1, #64	@ 0x40
 8000aa4:	4809      	ldr	r0, [pc, #36]	@ (8000acc <mcp2515writeRegister+0x48>)
 8000aa6:	f001 f869 	bl	8001b7c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, txBuffer, sizeof(txBuffer), 100);
 8000aaa:	f107 010c 	add.w	r1, r7, #12
 8000aae:	2364      	movs	r3, #100	@ 0x64
 8000ab0:	2203      	movs	r2, #3
 8000ab2:	4807      	ldr	r0, [pc, #28]	@ (8000ad0 <mcp2515writeRegister+0x4c>)
 8000ab4:	f002 f859 	bl	8002b6a <HAL_SPI_Transmit>
	SPI1_CS_HIGH();
 8000ab8:	2201      	movs	r2, #1
 8000aba:	2140      	movs	r1, #64	@ 0x40
 8000abc:	4803      	ldr	r0, [pc, #12]	@ (8000acc <mcp2515writeRegister+0x48>)
 8000abe:	f001 f85d 	bl	8001b7c <HAL_GPIO_WritePin>
}
 8000ac2:	bf00      	nop
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40020400 	.word	0x40020400
 8000ad0:	200002fc 	.word	0x200002fc

08000ad4 <mcp2515readRegister>:


uint8_t mcp2515readRegister(uint8_t address){
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af02      	add	r7, sp, #8
 8000ada:	4603      	mov	r3, r0
 8000adc:	71fb      	strb	r3, [r7, #7]

	uint8_t txBuffer[3] = {0x03, address, 0xFF};
 8000ade:	2303      	movs	r3, #3
 8000ae0:	733b      	strb	r3, [r7, #12]
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	737b      	strb	r3, [r7, #13]
 8000ae6:	23ff      	movs	r3, #255	@ 0xff
 8000ae8:	73bb      	strb	r3, [r7, #14]
	uint8_t rxBuffer[3] = {0};
 8000aea:	4b12      	ldr	r3, [pc, #72]	@ (8000b34 <mcp2515readRegister+0x60>)
 8000aec:	881b      	ldrh	r3, [r3, #0]
 8000aee:	813b      	strh	r3, [r7, #8]
 8000af0:	2300      	movs	r3, #0
 8000af2:	72bb      	strb	r3, [r7, #10]

	HAL_StatusTypeDef status;

	SPI1_CS_LOW();
 8000af4:	2200      	movs	r2, #0
 8000af6:	2140      	movs	r1, #64	@ 0x40
 8000af8:	480f      	ldr	r0, [pc, #60]	@ (8000b38 <mcp2515readRegister+0x64>)
 8000afa:	f001 f83f 	bl	8001b7c <HAL_GPIO_WritePin>
    status = HAL_SPI_TransmitReceive(&hspi1, txBuffer, rxBuffer, sizeof(txBuffer), 100);
 8000afe:	f107 0208 	add.w	r2, r7, #8
 8000b02:	f107 010c 	add.w	r1, r7, #12
 8000b06:	2364      	movs	r3, #100	@ 0x64
 8000b08:	9300      	str	r3, [sp, #0]
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	480b      	ldr	r0, [pc, #44]	@ (8000b3c <mcp2515readRegister+0x68>)
 8000b0e:	f002 fa89 	bl	8003024 <HAL_SPI_TransmitReceive>
 8000b12:	4603      	mov	r3, r0
 8000b14:	73fb      	strb	r3, [r7, #15]
	SPI1_CS_HIGH();
 8000b16:	2201      	movs	r2, #1
 8000b18:	2140      	movs	r1, #64	@ 0x40
 8000b1a:	4807      	ldr	r0, [pc, #28]	@ (8000b38 <mcp2515readRegister+0x64>)
 8000b1c:	f001 f82e 	bl	8001b7c <HAL_GPIO_WritePin>

	if(status != HAL_OK){
 8000b20:	7bfb      	ldrb	r3, [r7, #15]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <mcp2515readRegister+0x56>

		Error_Handler();
 8000b26:	f000 fab5 	bl	8001094 <Error_Handler>
	}
	return rxBuffer[2];
 8000b2a:	7abb      	ldrb	r3, [r7, #10]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	08008d10 	.word	0x08008d10
 8000b38:	40020400 	.word	0x40020400
 8000b3c:	200002fc 	.word	0x200002fc

08000b40 <Timestamp>:


uint16_t Timestamp(void) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
    RTC_TimeTypeDef sTime = {0};
 8000b46:	463b      	mov	r3, r7
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
    uint16_t timeValue = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	82fb      	strh	r3, [r7, #22]

    // Retrieve time from RTC
    if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) == HAL_OK) {
 8000b58:	463b      	mov	r3, r7
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4814      	ldr	r0, [pc, #80]	@ (8000bb0 <Timestamp+0x70>)
 8000b60:	f001 fe7b 	bl	800285a <HAL_RTC_GetTime>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d11d      	bne.n	8000ba6 <Timestamp+0x66>
        // Convert hours and minutes into seconds, add seconds and milliseconds
        timeValue = (sTime.Hours * 3600) + (sTime.Minutes * 60) + sTime.Seconds;
 8000b6a:	783b      	ldrb	r3, [r7, #0]
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	0112      	lsls	r2, r2, #4
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	461a      	mov	r2, r3
 8000b74:	0112      	lsls	r2, r2, #4
 8000b76:	1ad3      	subs	r3, r2, r3
 8000b78:	011b      	lsls	r3, r3, #4
 8000b7a:	b29a      	uxth	r2, r3
 8000b7c:	787b      	ldrb	r3, [r7, #1]
 8000b7e:	4619      	mov	r1, r3
 8000b80:	0109      	lsls	r1, r1, #4
 8000b82:	1acb      	subs	r3, r1, r3
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	4413      	add	r3, r2
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	78ba      	ldrb	r2, [r7, #2]
 8000b8e:	4413      	add	r3, r2
 8000b90:	82fb      	strh	r3, [r7, #22]
        // RTC provides sub-second information; scale to milliseconds
        timeValue += (1000 - sTime.SubSeconds) / (1000 / 1024);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 8000b98:	2200      	movs	r2, #0
 8000b9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b9e:	b29a      	uxth	r2, r3
 8000ba0:	8afb      	ldrh	r3, [r7, #22]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	82fb      	strh	r3, [r7, #22]
    }

    return timeValue;
 8000ba6:	8afb      	ldrh	r3, [r7, #22]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3718      	adds	r7, #24
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	200002dc 	.word	0x200002dc

08000bb4 <mcp2515setTiming>:



void mcp2515setTiming(void){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	// Example configuration for 500 kbps with 8 MHz oscillator
	// Calculate CNF1, CNF2, CNF3 using the MCP2515 datasheet
	mcp2515writeRegister(0x2A, 0x00); // CNF1: SJW=1, BRP=0
 8000bb8:	2100      	movs	r1, #0
 8000bba:	202a      	movs	r0, #42	@ 0x2a
 8000bbc:	f7ff ff62 	bl	8000a84 <mcp2515writeRegister>
	mcp2515writeRegister(0x29, 0x90); // CNF2: BTLMODE=1, SAM=0, PHSEG1=3, PRSEG=1
 8000bc0:	2190      	movs	r1, #144	@ 0x90
 8000bc2:	2029      	movs	r0, #41	@ 0x29
 8000bc4:	f7ff ff5e 	bl	8000a84 <mcp2515writeRegister>
	mcp2515writeRegister(0x28, 0x02); // CNF3: SOF=0, WAKFIL=0, PHSEG2=3
 8000bc8:	2102      	movs	r1, #2
 8000bca:	2028      	movs	r0, #40	@ 0x28
 8000bcc:	f7ff ff5a 	bl	8000a84 <mcp2515writeRegister>
}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <mcp2515init>:
	mcp2515readRegister(0x0F);


}

void mcp2515init(void){
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0

	uint8_t resetOP[1] = {0xC0};
 8000bda:	23c0      	movs	r3, #192	@ 0xc0
 8000bdc:	703b      	strb	r3, [r7, #0]
	uint8_t status = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	71fb      	strb	r3, [r7, #7]
	SPI1_CS_HIGH();
 8000be2:	2201      	movs	r2, #1
 8000be4:	2140      	movs	r1, #64	@ 0x40
 8000be6:	4829      	ldr	r0, [pc, #164]	@ (8000c8c <mcp2515init+0xb8>)
 8000be8:	f000 ffc8 	bl	8001b7c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000bec:	200a      	movs	r0, #10
 8000bee:	f000 fd23 	bl	8001638 <HAL_Delay>

	mcp2515setTiming();
 8000bf2:	f7ff ffdf 	bl	8000bb4 <mcp2515setTiming>

	//Transmission to reset device
	SPI1_CS_LOW();
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2140      	movs	r1, #64	@ 0x40
 8000bfa:	4824      	ldr	r0, [pc, #144]	@ (8000c8c <mcp2515init+0xb8>)
 8000bfc:	f000 ffbe 	bl	8001b7c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, resetOP, sizeof(resetOP), 100);
 8000c00:	4639      	mov	r1, r7
 8000c02:	2364      	movs	r3, #100	@ 0x64
 8000c04:	2201      	movs	r2, #1
 8000c06:	4822      	ldr	r0, [pc, #136]	@ (8000c90 <mcp2515init+0xbc>)
 8000c08:	f001 ffaf 	bl	8002b6a <HAL_SPI_Transmit>
	SPI1_CS_HIGH();
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	2140      	movs	r1, #64	@ 0x40
 8000c10:	481e      	ldr	r0, [pc, #120]	@ (8000c8c <mcp2515init+0xb8>)
 8000c12:	f000 ffb3 	bl	8001b7c <HAL_GPIO_WritePin>

	HAL_Delay(1);
 8000c16:	2001      	movs	r0, #1
 8000c18:	f000 fd0e 	bl	8001638 <HAL_Delay>
	//Set to configuration Mode
	mcp2515writeRegister(0x0F,0x80);
 8000c1c:	2180      	movs	r1, #128	@ 0x80
 8000c1e:	200f      	movs	r0, #15
 8000c20:	f7ff ff30 	bl	8000a84 <mcp2515writeRegister>

	//Read back to confirm config mode
	uint8_t configResult = mcp2515readRegister(0x0E);
 8000c24:	200e      	movs	r0, #14
 8000c26:	f7ff ff55 	bl	8000ad4 <mcp2515readRegister>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	71bb      	strb	r3, [r7, #6]

	if (configResult != 0x80){
 8000c2e:	79bb      	ldrb	r3, [r7, #6]
 8000c30:	2b80      	cmp	r3, #128	@ 0x80
 8000c32:	d001      	beq.n	8000c38 <mcp2515init+0x64>
		Error_Handler();
 8000c34:	f000 fa2e 	bl	8001094 <Error_Handler>

	}
	//Write into the receive 0 buffer to receive any message coming through
	mcp2515writeRegister(0x60, 0x60);
 8000c38:	2160      	movs	r1, #96	@ 0x60
 8000c3a:	2060      	movs	r0, #96	@ 0x60
 8000c3c:	f7ff ff22 	bl	8000a84 <mcp2515writeRegister>

	uint8_t	buffer0ConfigResult = mcp2515readRegister(0x60);
 8000c40:	2060      	movs	r0, #96	@ 0x60
 8000c42:	f7ff ff47 	bl	8000ad4 <mcp2515readRegister>
 8000c46:	4603      	mov	r3, r0
 8000c48:	717b      	strb	r3, [r7, #5]

	if (buffer0ConfigResult != 0x60){
 8000c4a:	797b      	ldrb	r3, [r7, #5]
 8000c4c:	2b60      	cmp	r3, #96	@ 0x60
 8000c4e:	d001      	beq.n	8000c54 <mcp2515init+0x80>
		Error_Handler();
 8000c50:	f000 fa20 	bl	8001094 <Error_Handler>
//			Error_Handler();
//		}

	//Set register to accept any message

	HAL_Delay(10);
 8000c54:	200a      	movs	r0, #10
 8000c56:	f000 fcef 	bl	8001638 <HAL_Delay>
	//Write CAN status register into Normal Operation mode
	mcp2515writeRegister(0x0F,0x00);
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	200f      	movs	r0, #15
 8000c5e:	f7ff ff11 	bl	8000a84 <mcp2515writeRegister>
	HAL_Delay(10);
 8000c62:	200a      	movs	r0, #10
 8000c64:	f000 fce8 	bl	8001638 <HAL_Delay>

	//Read CAN status register to confirm normal operation mode
	uint8_t resultAfter = mcp2515readRegister(0x0E);
 8000c68:	200e      	movs	r0, #14
 8000c6a:	f7ff ff33 	bl	8000ad4 <mcp2515readRegister>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	713b      	strb	r3, [r7, #4]

	if (resultAfter != 0x00){
 8000c72:	793b      	ldrb	r3, [r7, #4]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <mcp2515init+0xa8>
		Error_Handler();
 8000c78:	f000 fa0c 	bl	8001094 <Error_Handler>
	}

	HAL_Delay (10);
 8000c7c:	200a      	movs	r0, #10
 8000c7e:	f000 fcdb 	bl	8001638 <HAL_Delay>
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40020400 	.word	0x40020400
 8000c90:	200002fc 	.word	0x200002fc

08000c94 <mcp2515messageAvailable>:

void mcp2515messageAvailable(void){
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0

	GPIO_PinState status;
	GPIO_PinState status1;


	status = HAL_GPIO_ReadPin(CAN_INT_GPIO_Port, CAN_INT_Pin);
 8000c9a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c9e:	4811      	ldr	r0, [pc, #68]	@ (8000ce4 <mcp2515messageAvailable+0x50>)
 8000ca0:	f000 ff54 	bl	8001b4c <HAL_GPIO_ReadPin>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	71fb      	strb	r3, [r7, #7]
	//Set the Interrupt flag from the RX0IF
	mcp2515writeRegister(0x2B, 0x01);
 8000ca8:	2101      	movs	r1, #1
 8000caa:	202b      	movs	r0, #43	@ 0x2b
 8000cac:	f7ff feea 	bl	8000a84 <mcp2515writeRegister>



	//read the result from the Interrupt enable register at RX0IE
	uint8_t result = mcp2515readRegister(0x2B);
 8000cb0:	202b      	movs	r0, #43	@ 0x2b
 8000cb2:	f7ff ff0f 	bl	8000ad4 <mcp2515readRegister>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71bb      	strb	r3, [r7, #6]
	result = mcp2515readRegister(0x0C);
 8000cba:	200c      	movs	r0, #12
 8000cbc:	f7ff ff0a 	bl	8000ad4 <mcp2515readRegister>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	71bb      	strb	r3, [r7, #6]
	mcp2515writeRegister(0x2C, 0x01);
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	202c      	movs	r0, #44	@ 0x2c
 8000cc8:	f7ff fedc 	bl	8000a84 <mcp2515writeRegister>

	if (result != 0x01){
		Error_Handler;
	}

	status1 = HAL_GPIO_ReadPin(CAN_INT_GPIO_Port, CAN_INT_Pin);
 8000ccc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cd0:	4804      	ldr	r0, [pc, #16]	@ (8000ce4 <mcp2515messageAvailable+0x50>)
 8000cd2:	f000 ff3b 	bl	8001b4c <HAL_GPIO_ReadPin>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	717b      	strb	r3, [r7, #5]
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40020000 	.word	0x40020000

08000ce8 <mcp2515readMessage>:


void mcp2515readMessage(bool random, uint8_t fixedData){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b0ae      	sub	sp, #184	@ 0xb8
 8000cec:	af02      	add	r7, sp, #8
 8000cee:	4603      	mov	r3, r0
 8000cf0:	460a      	mov	r2, r1
 8000cf2:	71fb      	strb	r3, [r7, #7]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	71bb      	strb	r3, [r7, #6]
	//Use this function to take the message and transform it into a readable CAN message packet to be read

	//Use the recevice function and return a random number in place of of it. Clears register as well

	//Sanity check for GPIO pin
	GPIO_PinState status = HAL_GPIO_ReadPin(CAN_INT_GPIO_Port, CAN_INT_Pin);
 8000cf8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cfc:	4873      	ldr	r0, [pc, #460]	@ (8000ecc <mcp2515readMessage+0x1e4>)
 8000cfe:	f000 ff25 	bl	8001b4c <HAL_GPIO_ReadPin>
 8000d02:	4603      	mov	r3, r0
 8000d04:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf

	if (status == GPIO_PIN_RESET){
 8000d08:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	f040 80d3 	bne.w	8000eb8 <mcp2515readMessage+0x1d0>
		uint8_t readRXB0[1] = {0x90};
 8000d12:	2390      	movs	r3, #144	@ 0x90
 8000d14:	f887 30a4 	strb.w	r3, [r7, #164]	@ 0xa4
		uint8_t RXB0Buffer[14] = {0};
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000d1e:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	811a      	strh	r2, [r3, #8]
		uint16_t RXB0Data[1] = {0};
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
		const char sensorName[20] = "Temp Sensor";
 8000d30:	4a67      	ldr	r2, [pc, #412]	@ (8000ed0 <mcp2515readMessage+0x1e8>)
 8000d32:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000d36:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d38:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000d3c:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]

		char outputBuffer[2];

		//Clear RXB0
		mcp2515writeRegister(0x2C, 0x00);
 8000d46:	2100      	movs	r1, #0
 8000d48:	202c      	movs	r0, #44	@ 0x2c
 8000d4a:	f7ff fe9b 	bl	8000a84 <mcp2515writeRegister>

		SPI1_CS_LOW();
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2140      	movs	r1, #64	@ 0x40
 8000d52:	4860      	ldr	r0, [pc, #384]	@ (8000ed4 <mcp2515readMessage+0x1ec>)
 8000d54:	f000 ff12 	bl	8001b7c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, readRXB0, 1, 100);
 8000d58:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8000d5c:	2364      	movs	r3, #100	@ 0x64
 8000d5e:	2201      	movs	r2, #1
 8000d60:	485d      	ldr	r0, [pc, #372]	@ (8000ed8 <mcp2515readMessage+0x1f0>)
 8000d62:	f001 ff02 	bl	8002b6a <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, RXB0Buffer, 14, 100);
 8000d66:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 8000d6a:	2364      	movs	r3, #100	@ 0x64
 8000d6c:	220e      	movs	r2, #14
 8000d6e:	485a      	ldr	r0, [pc, #360]	@ (8000ed8 <mcp2515readMessage+0x1f0>)
 8000d70:	f002 f83f 	bl	8002df2 <HAL_SPI_Receive>
		SPI1_CS_HIGH();
 8000d74:	2201      	movs	r2, #1
 8000d76:	2140      	movs	r1, #64	@ 0x40
 8000d78:	4856      	ldr	r0, [pc, #344]	@ (8000ed4 <mcp2515readMessage+0x1ec>)
 8000d7a:	f000 feff 	bl	8001b7c <HAL_GPIO_WritePin>

		// Convert the received byte to a null-terminated string
		outputBuffer[0] = (char)RXB0Buffer[1];
 8000d7e:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 8000d82:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
		outputBuffer[1] = '\0'; // Null-terminator
 8000d86:	2300      	movs	r3, #0
 8000d88:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79

		//Returns data of the message, can be random or fixed for testing
		if (random == true){
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d011      	beq.n	8000db6 <mcp2515readMessage+0xce>
			RXB0Data[0] = rand() % (255);
 8000d92:	f006 fd69 	bl	8007868 <rand>
 8000d96:	4602      	mov	r2, r0
 8000d98:	4b50      	ldr	r3, [pc, #320]	@ (8000edc <mcp2515readMessage+0x1f4>)
 8000d9a:	fb83 1302 	smull	r1, r3, r3, r2
 8000d9e:	4413      	add	r3, r2
 8000da0:	11d9      	asrs	r1, r3, #7
 8000da2:	17d3      	asrs	r3, r2, #31
 8000da4:	1ac9      	subs	r1, r1, r3
 8000da6:	460b      	mov	r3, r1
 8000da8:	021b      	lsls	r3, r3, #8
 8000daa:	1a5b      	subs	r3, r3, r1
 8000dac:	1ad1      	subs	r1, r2, r3
 8000dae:	b28b      	uxth	r3, r1
 8000db0:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8000db4:	e003      	b.n	8000dbe <mcp2515readMessage+0xd6>
		}
		else{

			RXB0Data[0] = fixedData;
 8000db6:	79bb      	ldrb	r3, [r7, #6]
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
		}

		uint16_t timestamp = Timestamp();
 8000dbe:	f7ff febf 	bl	8000b40 <Timestamp>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac

		//Allocate a memory space for the structure defined, nothing inside it yet though

		MessageCAN *msg = (MessageCAN *)osMailAlloc(canMailQueueHandle, osWaitForever);
 8000dc8:	4b45      	ldr	r3, [pc, #276]	@ (8000ee0 <mcp2515readMessage+0x1f8>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f003 fc8f 	bl	80046f4 <osMailAlloc>
 8000dd6:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8

		if (msg == NULL){
 8000dda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d105      	bne.n	8000dee <mcp2515readMessage+0x106>

			print("Error with allocating mail space");
 8000de2:	4840      	ldr	r0, [pc, #256]	@ (8000ee4 <mcp2515readMessage+0x1fc>)
 8000de4:	f7ff fdf8 	bl	80009d8 <print>
			Error_Handler();
 8000de8:	f000 f954 	bl	8001094 <Error_Handler>
 8000dec:	e01b      	b.n	8000e26 <mcp2515readMessage+0x13e>
		}
		else{
			//Fill the Mail msgpointer with parameters
			msg ->canID = 0x35;
 8000dee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000df2:	2235      	movs	r2, #53	@ 0x35
 8000df4:	701a      	strb	r2, [r3, #0]
			msg->data = RXB0Data[0];
 8000df6:	f8b7 2090 	ldrh.w	r2, [r7, #144]	@ 0x90
 8000dfa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000dfe:	805a      	strh	r2, [r3, #2]
			strncpy(msg->sensorName, sensorName, sizeof(msg->sensorName) - 1);
 8000e00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000e04:	3306      	adds	r3, #6
 8000e06:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 8000e0a:	221d      	movs	r2, #29
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f006 feca 	bl	8007ba6 <strncpy>
			msg->sensorName[sizeof(msg->sensorName) - 1] = '\0';  // Null-terminate to be safe
 8000e12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000e16:	2200      	movs	r2, #0
 8000e18:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
			msg->timeStamp = timestamp;
 8000e1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000e20:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	@ 0xac
 8000e24:	809a      	strh	r2, [r3, #4]
		}


		char bufffer[100];
		//Send the mail into the canMailQueue
		if (osMailPut(canMailQueueHandle, msg) == osOK){
 8000e26:	4b2e      	ldr	r3, [pc, #184]	@ (8000ee0 <mcp2515readMessage+0x1f8>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f003 fc76 	bl	8004720 <osMailPut>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d111      	bne.n	8000e5e <mcp2515readMessage+0x176>
			snprintf(bufffer, sizeof(bufffer), "Message Pointer Address freed: %p at time %d", (void *)msg,
					msg->timeStamp);
 8000e3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000e3e:	889b      	ldrh	r3, [r3, #4]
			snprintf(bufffer, sizeof(bufffer), "Message Pointer Address freed: %p at time %d", (void *)msg,
 8000e40:	f107 0008 	add.w	r0, r7, #8
 8000e44:	9300      	str	r3, [sp, #0]
 8000e46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000e4a:	4a27      	ldr	r2, [pc, #156]	@ (8000ee8 <mcp2515readMessage+0x200>)
 8000e4c:	2164      	movs	r1, #100	@ 0x64
 8000e4e:	f006 fe0b 	bl	8007a68 <sniprintf>
			print(bufffer);
 8000e52:	f107 0308 	add.w	r3, r7, #8
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff fdbe 	bl	80009d8 <print>
 8000e5c:	e00b      	b.n	8000e76 <mcp2515readMessage+0x18e>
		}
		else{
			osMailFree(canMailQueueHandle, msg);
 8000e5e:	4b20      	ldr	r3, [pc, #128]	@ (8000ee0 <mcp2515readMessage+0x1f8>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8000e66:	4618      	mov	r0, r3
 8000e68:	f003 fd0c 	bl	8004884 <osMailFree>
			print("Failed to put mail in the queue");
 8000e6c:	481f      	ldr	r0, [pc, #124]	@ (8000eec <mcp2515readMessage+0x204>)
 8000e6e:	f7ff fdb3 	bl	80009d8 <print>
			Error_Handler();
 8000e72:	f000 f90f 	bl	8001094 <Error_Handler>


		}


		if (osMessageAvailableSpace(canMailQueueHandle) ==  0){
 8000e76:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee0 <mcp2515readMessage+0x1f8>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f003 fd17 	bl	80048ae <osMessageAvailableSpace>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d105      	bne.n	8000e92 <mcp2515readMessage+0x1aa>

			xEventGroupSetBits(messageToRead, EVENT_BIT_2);
 8000e86:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef0 <mcp2515readMessage+0x208>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2102      	movs	r1, #2
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f003 fe07 	bl	8004aa0 <xEventGroupSetBits>
		}
		//Print confirmation to terminal
		char buffer[10];
		sprintf(buffer, "%d", msg->data);
 8000e92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000e96:	885b      	ldrh	r3, [r3, #2]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000e9e:	4915      	ldr	r1, [pc, #84]	@ (8000ef4 <mcp2515readMessage+0x20c>)
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f006 fe15 	bl	8007ad0 <siprintf>
		print("message received, data:");
 8000ea6:	4814      	ldr	r0, [pc, #80]	@ (8000ef8 <mcp2515readMessage+0x210>)
 8000ea8:	f7ff fd96 	bl	80009d8 <print>
		print(buffer);
 8000eac:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff fd91 	bl	80009d8 <print>
	}


	//Add message to mail queue
	//return RXB0Data;
}
 8000eb6:	e004      	b.n	8000ec2 <mcp2515readMessage+0x1da>
		print("no message in buffer, should not happen error");
 8000eb8:	4810      	ldr	r0, [pc, #64]	@ (8000efc <mcp2515readMessage+0x214>)
 8000eba:	f7ff fd8d 	bl	80009d8 <print>
		Error_Handler();
 8000ebe:	f000 f8e9 	bl	8001094 <Error_Handler>
}
 8000ec2:	bf00      	nop
 8000ec4:	37b0      	adds	r7, #176	@ 0xb0
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40020000 	.word	0x40020000
 8000ed0:	08008dd4 	.word	0x08008dd4
 8000ed4:	40020400 	.word	0x40020400
 8000ed8:	200002fc 	.word	0x200002fc
 8000edc:	80808081 	.word	0x80808081
 8000ee0:	20000600 	.word	0x20000600
 8000ee4:	08008d14 	.word	0x08008d14
 8000ee8:	08008d38 	.word	0x08008d38
 8000eec:	08008d68 	.word	0x08008d68
 8000ef0:	200003a8 	.word	0x200003a8
 8000ef4:	08008d88 	.word	0x08008d88
 8000ef8:	08008d8c 	.word	0x08008d8c
 8000efc:	08008da4 	.word	0x08008da4

08000f00 <sdCardMsgPost>:

void sdCardMsgPost(void){
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b0a0      	sub	sp, #128	@ 0x80
 8000f04:	af02      	add	r7, sp, #8


	//Create event to read the mail

	while(1){
		osEvent event = osMailGet(canMailQueueHandle, HAL_MAX_DELAY);  // Non-blocking
 8000f06:	4b1c      	ldr	r3, [pc, #112]	@ (8000f78 <sdCardMsgPost+0x78>)
 8000f08:	6819      	ldr	r1, [r3, #0]
 8000f0a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f12:	4618      	mov	r0, r3
 8000f14:	f003 fc42 	bl	800479c <osMailGet>

		if (event.status == osEventMail) {
 8000f18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000f1a:	2b20      	cmp	r3, #32
 8000f1c:	d128      	bne.n	8000f70 <sdCardMsgPost+0x70>
			// Cast the retrieved pointer to your structure type
			MessageCAN *msg = (MessageCAN*)event.value.p;
 8000f1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000f20:	677b      	str	r3, [r7, #116]	@ 0x74
			// Process the message (e.g., print or handle data)
			char buffer[100];

			// Print message details using `print`
			snprintf(buffer, sizeof(buffer), "Processing Message: CAN ID = 0x%X, Data = %d, Timestamp = %d",
					 msg->canID, msg->data, msg->timeStamp);
 8000f22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f24:	781b      	ldrb	r3, [r3, #0]
			snprintf(buffer, sizeof(buffer), "Processing Message: CAN ID = 0x%X, Data = %d, Timestamp = %d",
 8000f26:	4619      	mov	r1, r3
					 msg->canID, msg->data, msg->timeStamp);
 8000f28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f2a:	885b      	ldrh	r3, [r3, #2]
			snprintf(buffer, sizeof(buffer), "Processing Message: CAN ID = 0x%X, Data = %d, Timestamp = %d",
 8000f2c:	461a      	mov	r2, r3
					 msg->canID, msg->data, msg->timeStamp);
 8000f2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f30:	889b      	ldrh	r3, [r3, #4]
			snprintf(buffer, sizeof(buffer), "Processing Message: CAN ID = 0x%X, Data = %d, Timestamp = %d",
 8000f32:	1d38      	adds	r0, r7, #4
 8000f34:	9301      	str	r3, [sp, #4]
 8000f36:	9200      	str	r2, [sp, #0]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	4a10      	ldr	r2, [pc, #64]	@ (8000f7c <sdCardMsgPost+0x7c>)
 8000f3c:	2164      	movs	r1, #100	@ 0x64
 8000f3e:	f006 fd93 	bl	8007a68 <sniprintf>
			print(buffer);
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fd47 	bl	80009d8 <print>

			// Print pointer address of the message
			snprintf(buffer, sizeof(buffer), "Message Pointer Address freed: %p", (void *)msg);
 8000f4a:	1d38      	adds	r0, r7, #4
 8000f4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f4e:	4a0c      	ldr	r2, [pc, #48]	@ (8000f80 <sdCardMsgPost+0x80>)
 8000f50:	2164      	movs	r1, #100	@ 0x64
 8000f52:	f006 fd89 	bl	8007a68 <sniprintf>
			print(buffer);
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fd3d 	bl	80009d8 <print>

			// Free the message memory after processing
			osMailFree(canMailQueueHandle, msg);
 8000f5e:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <sdCardMsgPost+0x78>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8000f64:	4618      	mov	r0, r3
 8000f66:	f003 fc8d 	bl	8004884 <osMailFree>

			//Printout the message ID when this happens

			//TODO
			sdCardSpiTransmission();
 8000f6a:	f000 f80b 	bl	8000f84 <sdCardSpiTransmission>
	while(1){
 8000f6e:	e7ca      	b.n	8000f06 <sdCardMsgPost+0x6>
			// Exit loop if no more messages are in the queue
			break;
		}

	}
}
 8000f70:	bf00      	nop
 8000f72:	3778      	adds	r7, #120	@ 0x78
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000600 	.word	0x20000600
 8000f7c:	08008de8 	.word	0x08008de8
 8000f80:	08008e28 	.word	0x08008e28

08000f84 <sdCardSpiTransmission>:


void sdCardSpiTransmission(void){
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
	//Function to take in the buffer and transmit through SPI
	//Need to use an SPI mutex for multiple SPI operations
	return;
 8000f88:	bf00      	nop
}
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
	...

08000f94 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	80fb      	strh	r3, [r7, #6]

	print("Int Activated");
 8000f9e:	4809      	ldr	r0, [pc, #36]	@ (8000fc4 <HAL_GPIO_EXTI_Callback+0x30>)
 8000fa0:	f7ff fd1a 	bl	80009d8 <print>
	UNUSED(GPIO_Pin);
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60fb      	str	r3, [r7, #12]
	mcp2515messageAvailable();
 8000fa8:	f7ff fe74 	bl	8000c94 <mcp2515messageAvailable>
	xEventGroupSetBitsFromISR(messageToRead, EVENT_BIT_1, &xHigherPriorityTaskWoken);
 8000fac:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <HAL_GPIO_EXTI_Callback+0x34>)
 8000fae:	6819      	ldr	r1, [r3, #0]
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	4805      	ldr	r0, [pc, #20]	@ (8000fcc <HAL_GPIO_EXTI_Callback+0x38>)
 8000fb8:	f005 fff4 	bl	8006fa4 <xTimerPendFunctionCallFromISR>
}
 8000fbc:	bf00      	nop
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	08008e4c 	.word	0x08008e4c
 8000fc8:	200003a8 	.word	0x200003a8
 8000fcc:	08004bb9 	.word	0x08004bb9

08000fd0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    print("Idle Task");
 8000fd8:	4804      	ldr	r0, [pc, #16]	@ (8000fec <StartDefaultTask+0x1c>)
 8000fda:	f7ff fcfd 	bl	80009d8 <print>
    osDelay(500);
 8000fde:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000fe2:	f003 fa1b 	bl	800441c <osDelay>
    print("Idle Task");
 8000fe6:	bf00      	nop
 8000fe8:	e7f6      	b.n	8000fd8 <StartDefaultTask+0x8>
 8000fea:	bf00      	nop
 8000fec:	08008e5c 	.word	0x08008e5c

08000ff0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af02      	add	r7, sp, #8
 8000ff6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  print("Task Entered");
 8000ff8:	480d      	ldr	r0, [pc, #52]	@ (8001030 <StartTask02+0x40>)
 8000ffa:	f7ff fced 	bl	80009d8 <print>
	  EventBits_t uxBits = xEventGroupWaitBits(messageToRead, EVENT_BIT_1, pdTRUE, pdTRUE, portMAX_DELAY);
 8000ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8001034 <StartTask02+0x44>)
 8001000:	6818      	ldr	r0, [r3, #0]
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	2301      	movs	r3, #1
 800100a:	2201      	movs	r2, #1
 800100c:	2101      	movs	r1, #1
 800100e:	f003 fc75 	bl	80048fc <xEventGroupWaitBits>
 8001012:	60f8      	str	r0, [r7, #12]
	  print("Task Started");
 8001014:	4808      	ldr	r0, [pc, #32]	@ (8001038 <StartTask02+0x48>)
 8001016:	f7ff fcdf 	bl	80009d8 <print>
      mcp2515readMessage(false, 100);
 800101a:	2164      	movs	r1, #100	@ 0x64
 800101c:	2000      	movs	r0, #0
 800101e:	f7ff fe63 	bl	8000ce8 <mcp2515readMessage>
      osDelay(500);
 8001022:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001026:	f003 f9f9 	bl	800441c <osDelay>
  {
 800102a:	bf00      	nop
 800102c:	e7e4      	b.n	8000ff8 <StartTask02+0x8>
 800102e:	bf00      	nop
 8001030:	08008e68 	.word	0x08008e68
 8001034:	200003a8 	.word	0x200003a8
 8001038:	08008e78 	.word	0x08008e78

0800103c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af02      	add	r7, sp, #8
 8001042:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	 EventBits_t uxBits = xEventGroupWaitBits(messageToRead, EVENT_BIT_2, pdTRUE, pdTRUE, portMAX_DELAY);
 8001044:	4b09      	ldr	r3, [pc, #36]	@ (800106c <StartTask03+0x30>)
 8001046:	6818      	ldr	r0, [r3, #0]
 8001048:	f04f 33ff 	mov.w	r3, #4294967295
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	2301      	movs	r3, #1
 8001050:	2201      	movs	r2, #1
 8001052:	2102      	movs	r1, #2
 8001054:	f003 fc52 	bl	80048fc <xEventGroupWaitBits>
 8001058:	60f8      	str	r0, [r7, #12]
	 sdCardMsgPost();
 800105a:	f7ff ff51 	bl	8000f00 <sdCardMsgPost>
	 if (messageToRead == 0x02){
 800105e:	4b03      	ldr	r3, [pc, #12]	@ (800106c <StartTask03+0x30>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2b02      	cmp	r3, #2
 8001064:	d1ee      	bne.n	8001044 <StartTask03+0x8>
		 osThreadYield();
 8001066:	f003 f9c7 	bl	80043f8 <osThreadYield>
  {
 800106a:	e7eb      	b.n	8001044 <StartTask03+0x8>
 800106c:	200003a8 	.word	0x200003a8

08001070 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a04      	ldr	r2, [pc, #16]	@ (8001090 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d101      	bne.n	8001086 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001082:	f000 fab9 	bl	80015f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40010000 	.word	0x40010000

08001094 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001098:	b672      	cpsid	i
}
 800109a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <Error_Handler+0x8>

080010a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	607b      	str	r3, [r7, #4]
 80010aa:	4b12      	ldr	r3, [pc, #72]	@ (80010f4 <HAL_MspInit+0x54>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ae:	4a11      	ldr	r2, [pc, #68]	@ (80010f4 <HAL_MspInit+0x54>)
 80010b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010b6:	4b0f      	ldr	r3, [pc, #60]	@ (80010f4 <HAL_MspInit+0x54>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	603b      	str	r3, [r7, #0]
 80010c6:	4b0b      	ldr	r3, [pc, #44]	@ (80010f4 <HAL_MspInit+0x54>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ca:	4a0a      	ldr	r2, [pc, #40]	@ (80010f4 <HAL_MspInit+0x54>)
 80010cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80010d2:	4b08      	ldr	r3, [pc, #32]	@ (80010f4 <HAL_MspInit+0x54>)
 80010d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010da:	603b      	str	r3, [r7, #0]
 80010dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	210f      	movs	r1, #15
 80010e2:	f06f 0001 	mvn.w	r0, #1
 80010e6:	f000 fb83 	bl	80017f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40023800 	.word	0x40023800

080010f8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001100:	f107 0308 	add.w	r3, r7, #8
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
 8001110:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a0c      	ldr	r2, [pc, #48]	@ (8001148 <HAL_RTC_MspInit+0x50>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d111      	bne.n	8001140 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800111c:	2302      	movs	r3, #2
 800111e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001120:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001124:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001126:	f107 0308 	add.w	r3, r7, #8
 800112a:	4618      	mov	r0, r3
 800112c:	f001 fa22 	bl	8002574 <HAL_RCCEx_PeriphCLKConfig>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001136:	f7ff ffad 	bl	8001094 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800113a:	4b04      	ldr	r3, [pc, #16]	@ (800114c <HAL_RTC_MspInit+0x54>)
 800113c:	2201      	movs	r2, #1
 800113e:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001140:	bf00      	nop
 8001142:	3720      	adds	r7, #32
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40002800 	.word	0x40002800
 800114c:	42470e3c 	.word	0x42470e3c

08001150 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	@ 0x28
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a19      	ldr	r2, [pc, #100]	@ (80011d4 <HAL_SPI_MspInit+0x84>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d12b      	bne.n	80011ca <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	4b18      	ldr	r3, [pc, #96]	@ (80011d8 <HAL_SPI_MspInit+0x88>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800117a:	4a17      	ldr	r2, [pc, #92]	@ (80011d8 <HAL_SPI_MspInit+0x88>)
 800117c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001180:	6453      	str	r3, [r2, #68]	@ 0x44
 8001182:	4b15      	ldr	r3, [pc, #84]	@ (80011d8 <HAL_SPI_MspInit+0x88>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001186:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <HAL_SPI_MspInit+0x88>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	4a10      	ldr	r2, [pc, #64]	@ (80011d8 <HAL_SPI_MspInit+0x88>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6313      	str	r3, [r2, #48]	@ 0x30
 800119e:	4b0e      	ldr	r3, [pc, #56]	@ (80011d8 <HAL_SPI_MspInit+0x88>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80011aa:	23e0      	movs	r3, #224	@ 0xe0
 80011ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b6:	2303      	movs	r3, #3
 80011b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011ba:	2305      	movs	r3, #5
 80011bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	4619      	mov	r1, r3
 80011c4:	4805      	ldr	r0, [pc, #20]	@ (80011dc <HAL_SPI_MspInit+0x8c>)
 80011c6:	f000 fb3d 	bl	8001844 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80011ca:	bf00      	nop
 80011cc:	3728      	adds	r7, #40	@ 0x28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40013000 	.word	0x40013000
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020000 	.word	0x40020000

080011e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08a      	sub	sp, #40	@ 0x28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a19      	ldr	r2, [pc, #100]	@ (8001264 <HAL_UART_MspInit+0x84>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d12b      	bne.n	800125a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	4b18      	ldr	r3, [pc, #96]	@ (8001268 <HAL_UART_MspInit+0x88>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120a:	4a17      	ldr	r2, [pc, #92]	@ (8001268 <HAL_UART_MspInit+0x88>)
 800120c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001210:	6413      	str	r3, [r2, #64]	@ 0x40
 8001212:	4b15      	ldr	r3, [pc, #84]	@ (8001268 <HAL_UART_MspInit+0x88>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	4b11      	ldr	r3, [pc, #68]	@ (8001268 <HAL_UART_MspInit+0x88>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	4a10      	ldr	r2, [pc, #64]	@ (8001268 <HAL_UART_MspInit+0x88>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	6313      	str	r3, [r2, #48]	@ 0x30
 800122e:	4b0e      	ldr	r3, [pc, #56]	@ (8001268 <HAL_UART_MspInit+0x88>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800123a:	230c      	movs	r3, #12
 800123c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123e:	2302      	movs	r3, #2
 8001240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001246:	2303      	movs	r3, #3
 8001248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800124a:	2307      	movs	r3, #7
 800124c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124e:	f107 0314 	add.w	r3, r7, #20
 8001252:	4619      	mov	r1, r3
 8001254:	4805      	ldr	r0, [pc, #20]	@ (800126c <HAL_UART_MspInit+0x8c>)
 8001256:	f000 faf5 	bl	8001844 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800125a:	bf00      	nop
 800125c:	3728      	adds	r7, #40	@ 0x28
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40004400 	.word	0x40004400
 8001268:	40023800 	.word	0x40023800
 800126c:	40020000 	.word	0x40020000

08001270 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08c      	sub	sp, #48	@ 0x30
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001278:	2300      	movs	r3, #0
 800127a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800127c:	2300      	movs	r3, #0
 800127e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001280:	2300      	movs	r3, #0
 8001282:	60bb      	str	r3, [r7, #8]
 8001284:	4b2e      	ldr	r3, [pc, #184]	@ (8001340 <HAL_InitTick+0xd0>)
 8001286:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001288:	4a2d      	ldr	r2, [pc, #180]	@ (8001340 <HAL_InitTick+0xd0>)
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001290:	4b2b      	ldr	r3, [pc, #172]	@ (8001340 <HAL_InitTick+0xd0>)
 8001292:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800129c:	f107 020c 	add.w	r2, r7, #12
 80012a0:	f107 0310 	add.w	r3, r7, #16
 80012a4:	4611      	mov	r1, r2
 80012a6:	4618      	mov	r0, r3
 80012a8:	f001 f932 	bl	8002510 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80012ac:	f001 f91c 	bl	80024e8 <HAL_RCC_GetPCLK2Freq>
 80012b0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012b4:	4a23      	ldr	r2, [pc, #140]	@ (8001344 <HAL_InitTick+0xd4>)
 80012b6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ba:	0c9b      	lsrs	r3, r3, #18
 80012bc:	3b01      	subs	r3, #1
 80012be:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80012c0:	4b21      	ldr	r3, [pc, #132]	@ (8001348 <HAL_InitTick+0xd8>)
 80012c2:	4a22      	ldr	r2, [pc, #136]	@ (800134c <HAL_InitTick+0xdc>)
 80012c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80012c6:	4b20      	ldr	r3, [pc, #128]	@ (8001348 <HAL_InitTick+0xd8>)
 80012c8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012cc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80012ce:	4a1e      	ldr	r2, [pc, #120]	@ (8001348 <HAL_InitTick+0xd8>)
 80012d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80012d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001348 <HAL_InitTick+0xd8>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012da:	4b1b      	ldr	r3, [pc, #108]	@ (8001348 <HAL_InitTick+0xd8>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e0:	4b19      	ldr	r3, [pc, #100]	@ (8001348 <HAL_InitTick+0xd8>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80012e6:	4818      	ldr	r0, [pc, #96]	@ (8001348 <HAL_InitTick+0xd8>)
 80012e8:	f002 f988 	bl	80035fc <HAL_TIM_Base_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80012f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d11b      	bne.n	8001332 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80012fa:	4813      	ldr	r0, [pc, #76]	@ (8001348 <HAL_InitTick+0xd8>)
 80012fc:	f002 f9d8 	bl	80036b0 <HAL_TIM_Base_Start_IT>
 8001300:	4603      	mov	r3, r0
 8001302:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001306:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800130a:	2b00      	cmp	r3, #0
 800130c:	d111      	bne.n	8001332 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800130e:	2019      	movs	r0, #25
 8001310:	f000 fa8a 	bl	8001828 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b0f      	cmp	r3, #15
 8001318:	d808      	bhi.n	800132c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800131a:	2200      	movs	r2, #0
 800131c:	6879      	ldr	r1, [r7, #4]
 800131e:	2019      	movs	r0, #25
 8001320:	f000 fa66 	bl	80017f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001324:	4a0a      	ldr	r2, [pc, #40]	@ (8001350 <HAL_InitTick+0xe0>)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	e002      	b.n	8001332 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001332:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001336:	4618      	mov	r0, r3
 8001338:	3730      	adds	r7, #48	@ 0x30
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40023800 	.word	0x40023800
 8001344:	431bde83 	.word	0x431bde83
 8001348:	20000604 	.word	0x20000604
 800134c:	40010000 	.word	0x40010000
 8001350:	20000004 	.word	0x20000004

08001354 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001358:	bf00      	nop
 800135a:	e7fd      	b.n	8001358 <NMI_Handler+0x4>

0800135c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001360:	bf00      	nop
 8001362:	e7fd      	b.n	8001360 <HardFault_Handler+0x4>

08001364 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001368:	bf00      	nop
 800136a:	e7fd      	b.n	8001368 <MemManage_Handler+0x4>

0800136c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001370:	bf00      	nop
 8001372:	e7fd      	b.n	8001370 <BusFault_Handler+0x4>

08001374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001378:	bf00      	nop
 800137a:	e7fd      	b.n	8001378 <UsageFault_Handler+0x4>

0800137c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
	...

0800138c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001390:	4802      	ldr	r0, [pc, #8]	@ (800139c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001392:	f002 f9ef 	bl	8003774 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000604 	.word	0x20000604

080013a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Btn_Int_Pin);
 80013a4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80013a8:	f000 fc02 	bl	8001bb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return 1;
 80013b4:	2301      	movs	r3, #1
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <_kill>:

int _kill(int pid, int sig)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013ca:	f006 fc45 	bl	8007c58 <__errno>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2216      	movs	r2, #22
 80013d2:	601a      	str	r2, [r3, #0]
  return -1;
 80013d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <_exit>:

void _exit (int status)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013e8:	f04f 31ff 	mov.w	r1, #4294967295
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff ffe7 	bl	80013c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013f2:	bf00      	nop
 80013f4:	e7fd      	b.n	80013f2 <_exit+0x12>

080013f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b086      	sub	sp, #24
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	60f8      	str	r0, [r7, #12]
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]
 8001406:	e00a      	b.n	800141e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001408:	f3af 8000 	nop.w
 800140c:	4601      	mov	r1, r0
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	1c5a      	adds	r2, r3, #1
 8001412:	60ba      	str	r2, [r7, #8]
 8001414:	b2ca      	uxtb	r2, r1
 8001416:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	3301      	adds	r3, #1
 800141c:	617b      	str	r3, [r7, #20]
 800141e:	697a      	ldr	r2, [r7, #20]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	429a      	cmp	r2, r3
 8001424:	dbf0      	blt.n	8001408 <_read+0x12>
  }

  return len;
 8001426:	687b      	ldr	r3, [r7, #4]
}
 8001428:	4618      	mov	r0, r3
 800142a:	3718      	adds	r7, #24
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]
 8001440:	e009      	b.n	8001456 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	1c5a      	adds	r2, r3, #1
 8001446:	60ba      	str	r2, [r7, #8]
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	4618      	mov	r0, r3
 800144c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	3301      	adds	r3, #1
 8001454:	617b      	str	r3, [r7, #20]
 8001456:	697a      	ldr	r2, [r7, #20]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	429a      	cmp	r2, r3
 800145c:	dbf1      	blt.n	8001442 <_write+0x12>
  }
  return len;
 800145e:	687b      	ldr	r3, [r7, #4]
}
 8001460:	4618      	mov	r0, r3
 8001462:	3718      	adds	r7, #24
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <_close>:

int _close(int file)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001470:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001474:	4618      	mov	r0, r3
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001490:	605a      	str	r2, [r3, #4]
  return 0;
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <_isatty>:

int _isatty(int file)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014a8:	2301      	movs	r3, #1
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014b6:	b480      	push	{r7}
 80014b8:	b085      	sub	sp, #20
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	60f8      	str	r0, [r7, #12]
 80014be:	60b9      	str	r1, [r7, #8]
 80014c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014d8:	4a14      	ldr	r2, [pc, #80]	@ (800152c <_sbrk+0x5c>)
 80014da:	4b15      	ldr	r3, [pc, #84]	@ (8001530 <_sbrk+0x60>)
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014e4:	4b13      	ldr	r3, [pc, #76]	@ (8001534 <_sbrk+0x64>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d102      	bne.n	80014f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014ec:	4b11      	ldr	r3, [pc, #68]	@ (8001534 <_sbrk+0x64>)
 80014ee:	4a12      	ldr	r2, [pc, #72]	@ (8001538 <_sbrk+0x68>)
 80014f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014f2:	4b10      	ldr	r3, [pc, #64]	@ (8001534 <_sbrk+0x64>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d207      	bcs.n	8001510 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001500:	f006 fbaa 	bl	8007c58 <__errno>
 8001504:	4603      	mov	r3, r0
 8001506:	220c      	movs	r2, #12
 8001508:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800150a:	f04f 33ff 	mov.w	r3, #4294967295
 800150e:	e009      	b.n	8001524 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001510:	4b08      	ldr	r3, [pc, #32]	@ (8001534 <_sbrk+0x64>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001516:	4b07      	ldr	r3, [pc, #28]	@ (8001534 <_sbrk+0x64>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	4a05      	ldr	r2, [pc, #20]	@ (8001534 <_sbrk+0x64>)
 8001520:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001522:	68fb      	ldr	r3, [r7, #12]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20020000 	.word	0x20020000
 8001530:	00000400 	.word	0x00000400
 8001534:	2000064c 	.word	0x2000064c
 8001538:	20004658 	.word	0x20004658

0800153c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001540:	4b06      	ldr	r3, [pc, #24]	@ (800155c <SystemInit+0x20>)
 8001542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001546:	4a05      	ldr	r2, [pc, #20]	@ (800155c <SystemInit+0x20>)
 8001548:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800154c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001560:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001598 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001564:	f7ff ffea 	bl	800153c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001568:	480c      	ldr	r0, [pc, #48]	@ (800159c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800156a:	490d      	ldr	r1, [pc, #52]	@ (80015a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800156c:	4a0d      	ldr	r2, [pc, #52]	@ (80015a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800156e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001570:	e002      	b.n	8001578 <LoopCopyDataInit>

08001572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001576:	3304      	adds	r3, #4

08001578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800157a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800157c:	d3f9      	bcc.n	8001572 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800157e:	4a0a      	ldr	r2, [pc, #40]	@ (80015a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001580:	4c0a      	ldr	r4, [pc, #40]	@ (80015ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001584:	e001      	b.n	800158a <LoopFillZerobss>

08001586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001588:	3204      	adds	r2, #4

0800158a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800158a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800158c:	d3fb      	bcc.n	8001586 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800158e:	f006 fb69 	bl	8007c64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001592:	f7ff f829 	bl	80005e8 <main>
  bx  lr    
 8001596:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001598:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800159c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80015a4:	08008fa8 	.word	0x08008fa8
  ldr r2, =_sbss
 80015a8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80015ac:	20004658 	.word	0x20004658

080015b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015b0:	e7fe      	b.n	80015b0 <ADC_IRQHandler>
	...

080015b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015b8:	4b0e      	ldr	r3, [pc, #56]	@ (80015f4 <HAL_Init+0x40>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a0d      	ldr	r2, [pc, #52]	@ (80015f4 <HAL_Init+0x40>)
 80015be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015c4:	4b0b      	ldr	r3, [pc, #44]	@ (80015f4 <HAL_Init+0x40>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a0a      	ldr	r2, [pc, #40]	@ (80015f4 <HAL_Init+0x40>)
 80015ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015d0:	4b08      	ldr	r3, [pc, #32]	@ (80015f4 <HAL_Init+0x40>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a07      	ldr	r2, [pc, #28]	@ (80015f4 <HAL_Init+0x40>)
 80015d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015dc:	2003      	movs	r0, #3
 80015de:	f000 f8fc 	bl	80017da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015e2:	200f      	movs	r0, #15
 80015e4:	f7ff fe44 	bl	8001270 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015e8:	f7ff fd5a 	bl	80010a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40023c00 	.word	0x40023c00

080015f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015fc:	4b06      	ldr	r3, [pc, #24]	@ (8001618 <HAL_IncTick+0x20>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	461a      	mov	r2, r3
 8001602:	4b06      	ldr	r3, [pc, #24]	@ (800161c <HAL_IncTick+0x24>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4413      	add	r3, r2
 8001608:	4a04      	ldr	r2, [pc, #16]	@ (800161c <HAL_IncTick+0x24>)
 800160a:	6013      	str	r3, [r2, #0]
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	20000008 	.word	0x20000008
 800161c:	20000650 	.word	0x20000650

08001620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  return uwTick;
 8001624:	4b03      	ldr	r3, [pc, #12]	@ (8001634 <HAL_GetTick+0x14>)
 8001626:	681b      	ldr	r3, [r3, #0]
}
 8001628:	4618      	mov	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	20000650 	.word	0x20000650

08001638 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001640:	f7ff ffee 	bl	8001620 <HAL_GetTick>
 8001644:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001650:	d005      	beq.n	800165e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001652:	4b0a      	ldr	r3, [pc, #40]	@ (800167c <HAL_Delay+0x44>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	461a      	mov	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	4413      	add	r3, r2
 800165c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800165e:	bf00      	nop
 8001660:	f7ff ffde 	bl	8001620 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	68fa      	ldr	r2, [r7, #12]
 800166c:	429a      	cmp	r2, r3
 800166e:	d8f7      	bhi.n	8001660 <HAL_Delay+0x28>
  {
  }
}
 8001670:	bf00      	nop
 8001672:	bf00      	nop
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000008 	.word	0x20000008

08001680 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001690:	4b0c      	ldr	r3, [pc, #48]	@ (80016c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001696:	68ba      	ldr	r2, [r7, #8]
 8001698:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800169c:	4013      	ands	r3, r2
 800169e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016b2:	4a04      	ldr	r2, [pc, #16]	@ (80016c4 <__NVIC_SetPriorityGrouping+0x44>)
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	60d3      	str	r3, [r2, #12]
}
 80016b8:	bf00      	nop
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016cc:	4b04      	ldr	r3, [pc, #16]	@ (80016e0 <__NVIC_GetPriorityGrouping+0x18>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	0a1b      	lsrs	r3, r3, #8
 80016d2:	f003 0307 	and.w	r3, r3, #7
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	db0b      	blt.n	800170e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	f003 021f 	and.w	r2, r3, #31
 80016fc:	4907      	ldr	r1, [pc, #28]	@ (800171c <__NVIC_EnableIRQ+0x38>)
 80016fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001702:	095b      	lsrs	r3, r3, #5
 8001704:	2001      	movs	r0, #1
 8001706:	fa00 f202 	lsl.w	r2, r0, r2
 800170a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	e000e100 	.word	0xe000e100

08001720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	6039      	str	r1, [r7, #0]
 800172a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800172c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001730:	2b00      	cmp	r3, #0
 8001732:	db0a      	blt.n	800174a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	b2da      	uxtb	r2, r3
 8001738:	490c      	ldr	r1, [pc, #48]	@ (800176c <__NVIC_SetPriority+0x4c>)
 800173a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173e:	0112      	lsls	r2, r2, #4
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	440b      	add	r3, r1
 8001744:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001748:	e00a      	b.n	8001760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	b2da      	uxtb	r2, r3
 800174e:	4908      	ldr	r1, [pc, #32]	@ (8001770 <__NVIC_SetPriority+0x50>)
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	3b04      	subs	r3, #4
 8001758:	0112      	lsls	r2, r2, #4
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	440b      	add	r3, r1
 800175e:	761a      	strb	r2, [r3, #24]
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	e000e100 	.word	0xe000e100
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001774:	b480      	push	{r7}
 8001776:	b089      	sub	sp, #36	@ 0x24
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f1c3 0307 	rsb	r3, r3, #7
 800178e:	2b04      	cmp	r3, #4
 8001790:	bf28      	it	cs
 8001792:	2304      	movcs	r3, #4
 8001794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3304      	adds	r3, #4
 800179a:	2b06      	cmp	r3, #6
 800179c:	d902      	bls.n	80017a4 <NVIC_EncodePriority+0x30>
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3b03      	subs	r3, #3
 80017a2:	e000      	b.n	80017a6 <NVIC_EncodePriority+0x32>
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a8:	f04f 32ff 	mov.w	r2, #4294967295
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43da      	mvns	r2, r3
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	401a      	ands	r2, r3
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017bc:	f04f 31ff 	mov.w	r1, #4294967295
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	fa01 f303 	lsl.w	r3, r1, r3
 80017c6:	43d9      	mvns	r1, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017cc:	4313      	orrs	r3, r2
         );
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3724      	adds	r7, #36	@ 0x24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b082      	sub	sp, #8
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f7ff ff4c 	bl	8001680 <__NVIC_SetPriorityGrouping>
}
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
 80017fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001802:	f7ff ff61 	bl	80016c8 <__NVIC_GetPriorityGrouping>
 8001806:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	68b9      	ldr	r1, [r7, #8]
 800180c:	6978      	ldr	r0, [r7, #20]
 800180e:	f7ff ffb1 	bl	8001774 <NVIC_EncodePriority>
 8001812:	4602      	mov	r2, r0
 8001814:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001818:	4611      	mov	r1, r2
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff ff80 	bl	8001720 <__NVIC_SetPriority>
}
 8001820:	bf00      	nop
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff ff54 	bl	80016e4 <__NVIC_EnableIRQ>
}
 800183c:	bf00      	nop
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001844:	b480      	push	{r7}
 8001846:	b089      	sub	sp, #36	@ 0x24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001852:	2300      	movs	r3, #0
 8001854:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001856:	2300      	movs	r3, #0
 8001858:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
 800185e:	e159      	b.n	8001b14 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001860:	2201      	movs	r2, #1
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	697a      	ldr	r2, [r7, #20]
 8001870:	4013      	ands	r3, r2
 8001872:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	429a      	cmp	r2, r3
 800187a:	f040 8148 	bne.w	8001b0e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 0303 	and.w	r3, r3, #3
 8001886:	2b01      	cmp	r3, #1
 8001888:	d005      	beq.n	8001896 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001892:	2b02      	cmp	r3, #2
 8001894:	d130      	bne.n	80018f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	2203      	movs	r2, #3
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43db      	mvns	r3, r3
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4013      	ands	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	68da      	ldr	r2, [r3, #12]
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4313      	orrs	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018cc:	2201      	movs	r2, #1
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4013      	ands	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	091b      	lsrs	r3, r3, #4
 80018e2:	f003 0201 	and.w	r2, r3, #1
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f003 0303 	and.w	r3, r3, #3
 8001900:	2b03      	cmp	r3, #3
 8001902:	d017      	beq.n	8001934 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	2203      	movs	r2, #3
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4313      	orrs	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 0303 	and.w	r3, r3, #3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d123      	bne.n	8001988 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	08da      	lsrs	r2, r3, #3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3208      	adds	r2, #8
 8001948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800194c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	f003 0307 	and.w	r3, r3, #7
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	220f      	movs	r2, #15
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	691a      	ldr	r2, [r3, #16]
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	08da      	lsrs	r2, r3, #3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	3208      	adds	r2, #8
 8001982:	69b9      	ldr	r1, [r7, #24]
 8001984:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	2203      	movs	r2, #3
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 0203 	and.w	r2, r3, #3
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f000 80a2 	beq.w	8001b0e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	4b57      	ldr	r3, [pc, #348]	@ (8001b2c <HAL_GPIO_Init+0x2e8>)
 80019d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d2:	4a56      	ldr	r2, [pc, #344]	@ (8001b2c <HAL_GPIO_Init+0x2e8>)
 80019d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80019da:	4b54      	ldr	r3, [pc, #336]	@ (8001b2c <HAL_GPIO_Init+0x2e8>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019e6:	4a52      	ldr	r2, [pc, #328]	@ (8001b30 <HAL_GPIO_Init+0x2ec>)
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	089b      	lsrs	r3, r3, #2
 80019ec:	3302      	adds	r3, #2
 80019ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	f003 0303 	and.w	r3, r3, #3
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	220f      	movs	r2, #15
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43db      	mvns	r3, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4013      	ands	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a49      	ldr	r2, [pc, #292]	@ (8001b34 <HAL_GPIO_Init+0x2f0>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d019      	beq.n	8001a46 <HAL_GPIO_Init+0x202>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a48      	ldr	r2, [pc, #288]	@ (8001b38 <HAL_GPIO_Init+0x2f4>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d013      	beq.n	8001a42 <HAL_GPIO_Init+0x1fe>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a47      	ldr	r2, [pc, #284]	@ (8001b3c <HAL_GPIO_Init+0x2f8>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d00d      	beq.n	8001a3e <HAL_GPIO_Init+0x1fa>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a46      	ldr	r2, [pc, #280]	@ (8001b40 <HAL_GPIO_Init+0x2fc>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d007      	beq.n	8001a3a <HAL_GPIO_Init+0x1f6>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a45      	ldr	r2, [pc, #276]	@ (8001b44 <HAL_GPIO_Init+0x300>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d101      	bne.n	8001a36 <HAL_GPIO_Init+0x1f2>
 8001a32:	2304      	movs	r3, #4
 8001a34:	e008      	b.n	8001a48 <HAL_GPIO_Init+0x204>
 8001a36:	2307      	movs	r3, #7
 8001a38:	e006      	b.n	8001a48 <HAL_GPIO_Init+0x204>
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e004      	b.n	8001a48 <HAL_GPIO_Init+0x204>
 8001a3e:	2302      	movs	r3, #2
 8001a40:	e002      	b.n	8001a48 <HAL_GPIO_Init+0x204>
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <HAL_GPIO_Init+0x204>
 8001a46:	2300      	movs	r3, #0
 8001a48:	69fa      	ldr	r2, [r7, #28]
 8001a4a:	f002 0203 	and.w	r2, r2, #3
 8001a4e:	0092      	lsls	r2, r2, #2
 8001a50:	4093      	lsls	r3, r2
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a58:	4935      	ldr	r1, [pc, #212]	@ (8001b30 <HAL_GPIO_Init+0x2ec>)
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	089b      	lsrs	r3, r3, #2
 8001a5e:	3302      	adds	r3, #2
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a66:	4b38      	ldr	r3, [pc, #224]	@ (8001b48 <HAL_GPIO_Init+0x304>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4013      	ands	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a8a:	4a2f      	ldr	r2, [pc, #188]	@ (8001b48 <HAL_GPIO_Init+0x304>)
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a90:	4b2d      	ldr	r3, [pc, #180]	@ (8001b48 <HAL_GPIO_Init+0x304>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d003      	beq.n	8001ab4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ab4:	4a24      	ldr	r2, [pc, #144]	@ (8001b48 <HAL_GPIO_Init+0x304>)
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001aba:	4b23      	ldr	r3, [pc, #140]	@ (8001b48 <HAL_GPIO_Init+0x304>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ade:	4a1a      	ldr	r2, [pc, #104]	@ (8001b48 <HAL_GPIO_Init+0x304>)
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ae4:	4b18      	ldr	r3, [pc, #96]	@ (8001b48 <HAL_GPIO_Init+0x304>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d003      	beq.n	8001b08 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b08:	4a0f      	ldr	r2, [pc, #60]	@ (8001b48 <HAL_GPIO_Init+0x304>)
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	3301      	adds	r3, #1
 8001b12:	61fb      	str	r3, [r7, #28]
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	2b0f      	cmp	r3, #15
 8001b18:	f67f aea2 	bls.w	8001860 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b1c:	bf00      	nop
 8001b1e:	bf00      	nop
 8001b20:	3724      	adds	r7, #36	@ 0x24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40013800 	.word	0x40013800
 8001b34:	40020000 	.word	0x40020000
 8001b38:	40020400 	.word	0x40020400
 8001b3c:	40020800 	.word	0x40020800
 8001b40:	40020c00 	.word	0x40020c00
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40013c00 	.word	0x40013c00

08001b4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	460b      	mov	r3, r1
 8001b56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	691a      	ldr	r2, [r3, #16]
 8001b5c:	887b      	ldrh	r3, [r7, #2]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d002      	beq.n	8001b6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b64:	2301      	movs	r3, #1
 8001b66:	73fb      	strb	r3, [r7, #15]
 8001b68:	e001      	b.n	8001b6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	807b      	strh	r3, [r7, #2]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b8c:	787b      	ldrb	r3, [r7, #1]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b92:	887a      	ldrh	r2, [r7, #2]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b98:	e003      	b.n	8001ba2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b9a:	887b      	ldrh	r3, [r7, #2]
 8001b9c:	041a      	lsls	r2, r3, #16
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	619a      	str	r2, [r3, #24]
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
	...

08001bb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001bba:	4b08      	ldr	r3, [pc, #32]	@ (8001bdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bbc:	695a      	ldr	r2, [r3, #20]
 8001bbe:	88fb      	ldrh	r3, [r7, #6]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d006      	beq.n	8001bd4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bc6:	4a05      	ldr	r2, [pc, #20]	@ (8001bdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bc8:	88fb      	ldrh	r3, [r7, #6]
 8001bca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bcc:	88fb      	ldrh	r3, [r7, #6]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff f9e0 	bl	8000f94 <HAL_GPIO_EXTI_Callback>
  }
}
 8001bd4:	bf00      	nop
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40013c00 	.word	0x40013c00

08001be0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e267      	b.n	80020c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d075      	beq.n	8001cea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001bfe:	4b88      	ldr	r3, [pc, #544]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 030c 	and.w	r3, r3, #12
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d00c      	beq.n	8001c24 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c0a:	4b85      	ldr	r3, [pc, #532]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c12:	2b08      	cmp	r3, #8
 8001c14:	d112      	bne.n	8001c3c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c16:	4b82      	ldr	r3, [pc, #520]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c22:	d10b      	bne.n	8001c3c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c24:	4b7e      	ldr	r3, [pc, #504]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d05b      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x108>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d157      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e242      	b.n	80020c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c44:	d106      	bne.n	8001c54 <HAL_RCC_OscConfig+0x74>
 8001c46:	4b76      	ldr	r3, [pc, #472]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a75      	ldr	r2, [pc, #468]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001c4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	e01d      	b.n	8001c90 <HAL_RCC_OscConfig+0xb0>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c5c:	d10c      	bne.n	8001c78 <HAL_RCC_OscConfig+0x98>
 8001c5e:	4b70      	ldr	r3, [pc, #448]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a6f      	ldr	r2, [pc, #444]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001c64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	4b6d      	ldr	r3, [pc, #436]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a6c      	ldr	r2, [pc, #432]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001c70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	e00b      	b.n	8001c90 <HAL_RCC_OscConfig+0xb0>
 8001c78:	4b69      	ldr	r3, [pc, #420]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a68      	ldr	r2, [pc, #416]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001c7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	4b66      	ldr	r3, [pc, #408]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a65      	ldr	r2, [pc, #404]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001c8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d013      	beq.n	8001cc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c98:	f7ff fcc2 	bl	8001620 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca0:	f7ff fcbe 	bl	8001620 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b64      	cmp	r3, #100	@ 0x64
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e207      	b.n	80020c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb2:	4b5b      	ldr	r3, [pc, #364]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0f0      	beq.n	8001ca0 <HAL_RCC_OscConfig+0xc0>
 8001cbe:	e014      	b.n	8001cea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc0:	f7ff fcae 	bl	8001620 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc8:	f7ff fcaa 	bl	8001620 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b64      	cmp	r3, #100	@ 0x64
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e1f3      	b.n	80020c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cda:	4b51      	ldr	r3, [pc, #324]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f0      	bne.n	8001cc8 <HAL_RCC_OscConfig+0xe8>
 8001ce6:	e000      	b.n	8001cea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d063      	beq.n	8001dbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001cf6:	4b4a      	ldr	r3, [pc, #296]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 030c 	and.w	r3, r3, #12
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00b      	beq.n	8001d1a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d02:	4b47      	ldr	r3, [pc, #284]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d0a:	2b08      	cmp	r3, #8
 8001d0c:	d11c      	bne.n	8001d48 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d0e:	4b44      	ldr	r3, [pc, #272]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d116      	bne.n	8001d48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d1a:	4b41      	ldr	r3, [pc, #260]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d005      	beq.n	8001d32 <HAL_RCC_OscConfig+0x152>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d001      	beq.n	8001d32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e1c7      	b.n	80020c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d32:	4b3b      	ldr	r3, [pc, #236]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	4937      	ldr	r1, [pc, #220]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d46:	e03a      	b.n	8001dbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d020      	beq.n	8001d92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d50:	4b34      	ldr	r3, [pc, #208]	@ (8001e24 <HAL_RCC_OscConfig+0x244>)
 8001d52:	2201      	movs	r2, #1
 8001d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d56:	f7ff fc63 	bl	8001620 <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d5e:	f7ff fc5f 	bl	8001620 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e1a8      	b.n	80020c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d70:	4b2b      	ldr	r3, [pc, #172]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0f0      	beq.n	8001d5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7c:	4b28      	ldr	r3, [pc, #160]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	4925      	ldr	r1, [pc, #148]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	600b      	str	r3, [r1, #0]
 8001d90:	e015      	b.n	8001dbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d92:	4b24      	ldr	r3, [pc, #144]	@ (8001e24 <HAL_RCC_OscConfig+0x244>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d98:	f7ff fc42 	bl	8001620 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001da0:	f7ff fc3e 	bl	8001620 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e187      	b.n	80020c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db2:	4b1b      	ldr	r3, [pc, #108]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f0      	bne.n	8001da0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0308 	and.w	r3, r3, #8
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d036      	beq.n	8001e38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d016      	beq.n	8001e00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dd2:	4b15      	ldr	r3, [pc, #84]	@ (8001e28 <HAL_RCC_OscConfig+0x248>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd8:	f7ff fc22 	bl	8001620 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001de0:	f7ff fc1e 	bl	8001620 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e167      	b.n	80020c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df2:	4b0b      	ldr	r3, [pc, #44]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001df4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0f0      	beq.n	8001de0 <HAL_RCC_OscConfig+0x200>
 8001dfe:	e01b      	b.n	8001e38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e00:	4b09      	ldr	r3, [pc, #36]	@ (8001e28 <HAL_RCC_OscConfig+0x248>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e06:	f7ff fc0b 	bl	8001620 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e0c:	e00e      	b.n	8001e2c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e0e:	f7ff fc07 	bl	8001620 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d907      	bls.n	8001e2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e150      	b.n	80020c2 <HAL_RCC_OscConfig+0x4e2>
 8001e20:	40023800 	.word	0x40023800
 8001e24:	42470000 	.word	0x42470000
 8001e28:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e2c:	4b88      	ldr	r3, [pc, #544]	@ (8002050 <HAL_RCC_OscConfig+0x470>)
 8001e2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1ea      	bne.n	8001e0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f000 8097 	beq.w	8001f74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e46:	2300      	movs	r3, #0
 8001e48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e4a:	4b81      	ldr	r3, [pc, #516]	@ (8002050 <HAL_RCC_OscConfig+0x470>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10f      	bne.n	8001e76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	60bb      	str	r3, [r7, #8]
 8001e5a:	4b7d      	ldr	r3, [pc, #500]	@ (8002050 <HAL_RCC_OscConfig+0x470>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5e:	4a7c      	ldr	r2, [pc, #496]	@ (8002050 <HAL_RCC_OscConfig+0x470>)
 8001e60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e64:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e66:	4b7a      	ldr	r3, [pc, #488]	@ (8002050 <HAL_RCC_OscConfig+0x470>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e72:	2301      	movs	r3, #1
 8001e74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e76:	4b77      	ldr	r3, [pc, #476]	@ (8002054 <HAL_RCC_OscConfig+0x474>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d118      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e82:	4b74      	ldr	r3, [pc, #464]	@ (8002054 <HAL_RCC_OscConfig+0x474>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a73      	ldr	r2, [pc, #460]	@ (8002054 <HAL_RCC_OscConfig+0x474>)
 8001e88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e8e:	f7ff fbc7 	bl	8001620 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e96:	f7ff fbc3 	bl	8001620 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e10c      	b.n	80020c2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea8:	4b6a      	ldr	r3, [pc, #424]	@ (8002054 <HAL_RCC_OscConfig+0x474>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0f0      	beq.n	8001e96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d106      	bne.n	8001eca <HAL_RCC_OscConfig+0x2ea>
 8001ebc:	4b64      	ldr	r3, [pc, #400]	@ (8002050 <HAL_RCC_OscConfig+0x470>)
 8001ebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ec0:	4a63      	ldr	r2, [pc, #396]	@ (8002050 <HAL_RCC_OscConfig+0x470>)
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ec8:	e01c      	b.n	8001f04 <HAL_RCC_OscConfig+0x324>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	2b05      	cmp	r3, #5
 8001ed0:	d10c      	bne.n	8001eec <HAL_RCC_OscConfig+0x30c>
 8001ed2:	4b5f      	ldr	r3, [pc, #380]	@ (8002050 <HAL_RCC_OscConfig+0x470>)
 8001ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ed6:	4a5e      	ldr	r2, [pc, #376]	@ (8002050 <HAL_RCC_OscConfig+0x470>)
 8001ed8:	f043 0304 	orr.w	r3, r3, #4
 8001edc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ede:	4b5c      	ldr	r3, [pc, #368]	@ (8002050 <HAL_RCC_OscConfig+0x470>)
 8001ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ee2:	4a5b      	ldr	r2, [pc, #364]	@ (8002050 <HAL_RCC_OscConfig+0x470>)
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eea:	e00b      	b.n	8001f04 <HAL_RCC_OscConfig+0x324>
 8001eec:	4b58      	ldr	r3, [pc, #352]	@ (8002050 <HAL_RCC_OscConfig+0x470>)
 8001eee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ef0:	4a57      	ldr	r2, [pc, #348]	@ (8002050 <HAL_RCC_OscConfig+0x470>)
 8001ef2:	f023 0301 	bic.w	r3, r3, #1
 8001ef6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ef8:	4b55      	ldr	r3, [pc, #340]	@ (8002050 <HAL_RCC_OscConfig+0x470>)
 8001efa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001efc:	4a54      	ldr	r2, [pc, #336]	@ (8002050 <HAL_RCC_OscConfig+0x470>)
 8001efe:	f023 0304 	bic.w	r3, r3, #4
 8001f02:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d015      	beq.n	8001f38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0c:	f7ff fb88 	bl	8001620 <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f12:	e00a      	b.n	8001f2a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f14:	f7ff fb84 	bl	8001620 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e0cb      	b.n	80020c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f2a:	4b49      	ldr	r3, [pc, #292]	@ (8002050 <HAL_RCC_OscConfig+0x470>)
 8001f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0ee      	beq.n	8001f14 <HAL_RCC_OscConfig+0x334>
 8001f36:	e014      	b.n	8001f62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f38:	f7ff fb72 	bl	8001620 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f3e:	e00a      	b.n	8001f56 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f40:	f7ff fb6e 	bl	8001620 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e0b5      	b.n	80020c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f56:	4b3e      	ldr	r3, [pc, #248]	@ (8002050 <HAL_RCC_OscConfig+0x470>)
 8001f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1ee      	bne.n	8001f40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f62:	7dfb      	ldrb	r3, [r7, #23]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d105      	bne.n	8001f74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f68:	4b39      	ldr	r3, [pc, #228]	@ (8002050 <HAL_RCC_OscConfig+0x470>)
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6c:	4a38      	ldr	r2, [pc, #224]	@ (8002050 <HAL_RCC_OscConfig+0x470>)
 8001f6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f72:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f000 80a1 	beq.w	80020c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f7e:	4b34      	ldr	r3, [pc, #208]	@ (8002050 <HAL_RCC_OscConfig+0x470>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 030c 	and.w	r3, r3, #12
 8001f86:	2b08      	cmp	r3, #8
 8001f88:	d05c      	beq.n	8002044 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d141      	bne.n	8002016 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f92:	4b31      	ldr	r3, [pc, #196]	@ (8002058 <HAL_RCC_OscConfig+0x478>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f98:	f7ff fb42 	bl	8001620 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa0:	f7ff fb3e 	bl	8001620 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e087      	b.n	80020c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb2:	4b27      	ldr	r3, [pc, #156]	@ (8002050 <HAL_RCC_OscConfig+0x470>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1f0      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69da      	ldr	r2, [r3, #28]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fcc:	019b      	lsls	r3, r3, #6
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd4:	085b      	lsrs	r3, r3, #1
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	041b      	lsls	r3, r3, #16
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fe0:	061b      	lsls	r3, r3, #24
 8001fe2:	491b      	ldr	r1, [pc, #108]	@ (8002050 <HAL_RCC_OscConfig+0x470>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8002058 <HAL_RCC_OscConfig+0x478>)
 8001fea:	2201      	movs	r2, #1
 8001fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fee:	f7ff fb17 	bl	8001620 <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ff4:	e008      	b.n	8002008 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff6:	f7ff fb13 	bl	8001620 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e05c      	b.n	80020c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002008:	4b11      	ldr	r3, [pc, #68]	@ (8002050 <HAL_RCC_OscConfig+0x470>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0f0      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x416>
 8002014:	e054      	b.n	80020c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002016:	4b10      	ldr	r3, [pc, #64]	@ (8002058 <HAL_RCC_OscConfig+0x478>)
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201c:	f7ff fb00 	bl	8001620 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002024:	f7ff fafc 	bl	8001620 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e045      	b.n	80020c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002036:	4b06      	ldr	r3, [pc, #24]	@ (8002050 <HAL_RCC_OscConfig+0x470>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f0      	bne.n	8002024 <HAL_RCC_OscConfig+0x444>
 8002042:	e03d      	b.n	80020c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d107      	bne.n	800205c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e038      	b.n	80020c2 <HAL_RCC_OscConfig+0x4e2>
 8002050:	40023800 	.word	0x40023800
 8002054:	40007000 	.word	0x40007000
 8002058:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800205c:	4b1b      	ldr	r3, [pc, #108]	@ (80020cc <HAL_RCC_OscConfig+0x4ec>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d028      	beq.n	80020bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002074:	429a      	cmp	r2, r3
 8002076:	d121      	bne.n	80020bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002082:	429a      	cmp	r2, r3
 8002084:	d11a      	bne.n	80020bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800208c:	4013      	ands	r3, r2
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002092:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002094:	4293      	cmp	r3, r2
 8002096:	d111      	bne.n	80020bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a2:	085b      	lsrs	r3, r3, #1
 80020a4:	3b01      	subs	r3, #1
 80020a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d107      	bne.n	80020bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d001      	beq.n	80020c0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e000      	b.n	80020c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3718      	adds	r7, #24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40023800 	.word	0x40023800

080020d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e0cc      	b.n	800227e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020e4:	4b68      	ldr	r3, [pc, #416]	@ (8002288 <HAL_RCC_ClockConfig+0x1b8>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0307 	and.w	r3, r3, #7
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d90c      	bls.n	800210c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f2:	4b65      	ldr	r3, [pc, #404]	@ (8002288 <HAL_RCC_ClockConfig+0x1b8>)
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	b2d2      	uxtb	r2, r2
 80020f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fa:	4b63      	ldr	r3, [pc, #396]	@ (8002288 <HAL_RCC_ClockConfig+0x1b8>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	429a      	cmp	r2, r3
 8002106:	d001      	beq.n	800210c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e0b8      	b.n	800227e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d020      	beq.n	800215a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b00      	cmp	r3, #0
 8002122:	d005      	beq.n	8002130 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002124:	4b59      	ldr	r3, [pc, #356]	@ (800228c <HAL_RCC_ClockConfig+0x1bc>)
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	4a58      	ldr	r2, [pc, #352]	@ (800228c <HAL_RCC_ClockConfig+0x1bc>)
 800212a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800212e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0308 	and.w	r3, r3, #8
 8002138:	2b00      	cmp	r3, #0
 800213a:	d005      	beq.n	8002148 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800213c:	4b53      	ldr	r3, [pc, #332]	@ (800228c <HAL_RCC_ClockConfig+0x1bc>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	4a52      	ldr	r2, [pc, #328]	@ (800228c <HAL_RCC_ClockConfig+0x1bc>)
 8002142:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002146:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002148:	4b50      	ldr	r3, [pc, #320]	@ (800228c <HAL_RCC_ClockConfig+0x1bc>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	494d      	ldr	r1, [pc, #308]	@ (800228c <HAL_RCC_ClockConfig+0x1bc>)
 8002156:	4313      	orrs	r3, r2
 8002158:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b00      	cmp	r3, #0
 8002164:	d044      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d107      	bne.n	800217e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800216e:	4b47      	ldr	r3, [pc, #284]	@ (800228c <HAL_RCC_ClockConfig+0x1bc>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d119      	bne.n	80021ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e07f      	b.n	800227e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b02      	cmp	r3, #2
 8002184:	d003      	beq.n	800218e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800218a:	2b03      	cmp	r3, #3
 800218c:	d107      	bne.n	800219e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800218e:	4b3f      	ldr	r3, [pc, #252]	@ (800228c <HAL_RCC_ClockConfig+0x1bc>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d109      	bne.n	80021ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e06f      	b.n	800227e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800219e:	4b3b      	ldr	r3, [pc, #236]	@ (800228c <HAL_RCC_ClockConfig+0x1bc>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e067      	b.n	800227e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ae:	4b37      	ldr	r3, [pc, #220]	@ (800228c <HAL_RCC_ClockConfig+0x1bc>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f023 0203 	bic.w	r2, r3, #3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	4934      	ldr	r1, [pc, #208]	@ (800228c <HAL_RCC_ClockConfig+0x1bc>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021c0:	f7ff fa2e 	bl	8001620 <HAL_GetTick>
 80021c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c6:	e00a      	b.n	80021de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c8:	f7ff fa2a 	bl	8001620 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e04f      	b.n	800227e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021de:	4b2b      	ldr	r3, [pc, #172]	@ (800228c <HAL_RCC_ClockConfig+0x1bc>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 020c 	and.w	r2, r3, #12
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d1eb      	bne.n	80021c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021f0:	4b25      	ldr	r3, [pc, #148]	@ (8002288 <HAL_RCC_ClockConfig+0x1b8>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d20c      	bcs.n	8002218 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021fe:	4b22      	ldr	r3, [pc, #136]	@ (8002288 <HAL_RCC_ClockConfig+0x1b8>)
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	b2d2      	uxtb	r2, r2
 8002204:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002206:	4b20      	ldr	r3, [pc, #128]	@ (8002288 <HAL_RCC_ClockConfig+0x1b8>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	429a      	cmp	r2, r3
 8002212:	d001      	beq.n	8002218 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e032      	b.n	800227e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	2b00      	cmp	r3, #0
 8002222:	d008      	beq.n	8002236 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002224:	4b19      	ldr	r3, [pc, #100]	@ (800228c <HAL_RCC_ClockConfig+0x1bc>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	4916      	ldr	r1, [pc, #88]	@ (800228c <HAL_RCC_ClockConfig+0x1bc>)
 8002232:	4313      	orrs	r3, r2
 8002234:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0308 	and.w	r3, r3, #8
 800223e:	2b00      	cmp	r3, #0
 8002240:	d009      	beq.n	8002256 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002242:	4b12      	ldr	r3, [pc, #72]	@ (800228c <HAL_RCC_ClockConfig+0x1bc>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	490e      	ldr	r1, [pc, #56]	@ (800228c <HAL_RCC_ClockConfig+0x1bc>)
 8002252:	4313      	orrs	r3, r2
 8002254:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002256:	f000 f821 	bl	800229c <HAL_RCC_GetSysClockFreq>
 800225a:	4602      	mov	r2, r0
 800225c:	4b0b      	ldr	r3, [pc, #44]	@ (800228c <HAL_RCC_ClockConfig+0x1bc>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	091b      	lsrs	r3, r3, #4
 8002262:	f003 030f 	and.w	r3, r3, #15
 8002266:	490a      	ldr	r1, [pc, #40]	@ (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 8002268:	5ccb      	ldrb	r3, [r1, r3]
 800226a:	fa22 f303 	lsr.w	r3, r2, r3
 800226e:	4a09      	ldr	r2, [pc, #36]	@ (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 8002270:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002272:	4b09      	ldr	r3, [pc, #36]	@ (8002298 <HAL_RCC_ClockConfig+0x1c8>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe fffa 	bl	8001270 <HAL_InitTick>

  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40023c00 	.word	0x40023c00
 800228c:	40023800 	.word	0x40023800
 8002290:	08008ea0 	.word	0x08008ea0
 8002294:	20000000 	.word	0x20000000
 8002298:	20000004 	.word	0x20000004

0800229c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800229c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022a0:	b094      	sub	sp, #80	@ 0x50
 80022a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80022a4:	2300      	movs	r3, #0
 80022a6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80022a8:	2300      	movs	r3, #0
 80022aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80022ac:	2300      	movs	r3, #0
 80022ae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80022b0:	2300      	movs	r3, #0
 80022b2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022b4:	4b79      	ldr	r3, [pc, #484]	@ (800249c <HAL_RCC_GetSysClockFreq+0x200>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 030c 	and.w	r3, r3, #12
 80022bc:	2b08      	cmp	r3, #8
 80022be:	d00d      	beq.n	80022dc <HAL_RCC_GetSysClockFreq+0x40>
 80022c0:	2b08      	cmp	r3, #8
 80022c2:	f200 80e1 	bhi.w	8002488 <HAL_RCC_GetSysClockFreq+0x1ec>
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d002      	beq.n	80022d0 <HAL_RCC_GetSysClockFreq+0x34>
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	d003      	beq.n	80022d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80022ce:	e0db      	b.n	8002488 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022d0:	4b73      	ldr	r3, [pc, #460]	@ (80024a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80022d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80022d4:	e0db      	b.n	800248e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022d6:	4b73      	ldr	r3, [pc, #460]	@ (80024a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80022d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80022da:	e0d8      	b.n	800248e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022dc:	4b6f      	ldr	r3, [pc, #444]	@ (800249c <HAL_RCC_GetSysClockFreq+0x200>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022e4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022e6:	4b6d      	ldr	r3, [pc, #436]	@ (800249c <HAL_RCC_GetSysClockFreq+0x200>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d063      	beq.n	80023ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022f2:	4b6a      	ldr	r3, [pc, #424]	@ (800249c <HAL_RCC_GetSysClockFreq+0x200>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	099b      	lsrs	r3, r3, #6
 80022f8:	2200      	movs	r2, #0
 80022fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80022fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80022fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002300:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002304:	633b      	str	r3, [r7, #48]	@ 0x30
 8002306:	2300      	movs	r3, #0
 8002308:	637b      	str	r3, [r7, #52]	@ 0x34
 800230a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800230e:	4622      	mov	r2, r4
 8002310:	462b      	mov	r3, r5
 8002312:	f04f 0000 	mov.w	r0, #0
 8002316:	f04f 0100 	mov.w	r1, #0
 800231a:	0159      	lsls	r1, r3, #5
 800231c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002320:	0150      	lsls	r0, r2, #5
 8002322:	4602      	mov	r2, r0
 8002324:	460b      	mov	r3, r1
 8002326:	4621      	mov	r1, r4
 8002328:	1a51      	subs	r1, r2, r1
 800232a:	6139      	str	r1, [r7, #16]
 800232c:	4629      	mov	r1, r5
 800232e:	eb63 0301 	sbc.w	r3, r3, r1
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	f04f 0200 	mov.w	r2, #0
 8002338:	f04f 0300 	mov.w	r3, #0
 800233c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002340:	4659      	mov	r1, fp
 8002342:	018b      	lsls	r3, r1, #6
 8002344:	4651      	mov	r1, sl
 8002346:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800234a:	4651      	mov	r1, sl
 800234c:	018a      	lsls	r2, r1, #6
 800234e:	4651      	mov	r1, sl
 8002350:	ebb2 0801 	subs.w	r8, r2, r1
 8002354:	4659      	mov	r1, fp
 8002356:	eb63 0901 	sbc.w	r9, r3, r1
 800235a:	f04f 0200 	mov.w	r2, #0
 800235e:	f04f 0300 	mov.w	r3, #0
 8002362:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002366:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800236a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800236e:	4690      	mov	r8, r2
 8002370:	4699      	mov	r9, r3
 8002372:	4623      	mov	r3, r4
 8002374:	eb18 0303 	adds.w	r3, r8, r3
 8002378:	60bb      	str	r3, [r7, #8]
 800237a:	462b      	mov	r3, r5
 800237c:	eb49 0303 	adc.w	r3, r9, r3
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	f04f 0200 	mov.w	r2, #0
 8002386:	f04f 0300 	mov.w	r3, #0
 800238a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800238e:	4629      	mov	r1, r5
 8002390:	024b      	lsls	r3, r1, #9
 8002392:	4621      	mov	r1, r4
 8002394:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002398:	4621      	mov	r1, r4
 800239a:	024a      	lsls	r2, r1, #9
 800239c:	4610      	mov	r0, r2
 800239e:	4619      	mov	r1, r3
 80023a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023a2:	2200      	movs	r2, #0
 80023a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80023a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80023ac:	f7fd ff70 	bl	8000290 <__aeabi_uldivmod>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	4613      	mov	r3, r2
 80023b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023b8:	e058      	b.n	800246c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023ba:	4b38      	ldr	r3, [pc, #224]	@ (800249c <HAL_RCC_GetSysClockFreq+0x200>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	099b      	lsrs	r3, r3, #6
 80023c0:	2200      	movs	r2, #0
 80023c2:	4618      	mov	r0, r3
 80023c4:	4611      	mov	r1, r2
 80023c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80023ca:	623b      	str	r3, [r7, #32]
 80023cc:	2300      	movs	r3, #0
 80023ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80023d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80023d4:	4642      	mov	r2, r8
 80023d6:	464b      	mov	r3, r9
 80023d8:	f04f 0000 	mov.w	r0, #0
 80023dc:	f04f 0100 	mov.w	r1, #0
 80023e0:	0159      	lsls	r1, r3, #5
 80023e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023e6:	0150      	lsls	r0, r2, #5
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	4641      	mov	r1, r8
 80023ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80023f2:	4649      	mov	r1, r9
 80023f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80023f8:	f04f 0200 	mov.w	r2, #0
 80023fc:	f04f 0300 	mov.w	r3, #0
 8002400:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002404:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002408:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800240c:	ebb2 040a 	subs.w	r4, r2, sl
 8002410:	eb63 050b 	sbc.w	r5, r3, fp
 8002414:	f04f 0200 	mov.w	r2, #0
 8002418:	f04f 0300 	mov.w	r3, #0
 800241c:	00eb      	lsls	r3, r5, #3
 800241e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002422:	00e2      	lsls	r2, r4, #3
 8002424:	4614      	mov	r4, r2
 8002426:	461d      	mov	r5, r3
 8002428:	4643      	mov	r3, r8
 800242a:	18e3      	adds	r3, r4, r3
 800242c:	603b      	str	r3, [r7, #0]
 800242e:	464b      	mov	r3, r9
 8002430:	eb45 0303 	adc.w	r3, r5, r3
 8002434:	607b      	str	r3, [r7, #4]
 8002436:	f04f 0200 	mov.w	r2, #0
 800243a:	f04f 0300 	mov.w	r3, #0
 800243e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002442:	4629      	mov	r1, r5
 8002444:	028b      	lsls	r3, r1, #10
 8002446:	4621      	mov	r1, r4
 8002448:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800244c:	4621      	mov	r1, r4
 800244e:	028a      	lsls	r2, r1, #10
 8002450:	4610      	mov	r0, r2
 8002452:	4619      	mov	r1, r3
 8002454:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002456:	2200      	movs	r2, #0
 8002458:	61bb      	str	r3, [r7, #24]
 800245a:	61fa      	str	r2, [r7, #28]
 800245c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002460:	f7fd ff16 	bl	8000290 <__aeabi_uldivmod>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	4613      	mov	r3, r2
 800246a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800246c:	4b0b      	ldr	r3, [pc, #44]	@ (800249c <HAL_RCC_GetSysClockFreq+0x200>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	0c1b      	lsrs	r3, r3, #16
 8002472:	f003 0303 	and.w	r3, r3, #3
 8002476:	3301      	adds	r3, #1
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800247c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800247e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002480:	fbb2 f3f3 	udiv	r3, r2, r3
 8002484:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002486:	e002      	b.n	800248e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002488:	4b05      	ldr	r3, [pc, #20]	@ (80024a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800248a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800248c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800248e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002490:	4618      	mov	r0, r3
 8002492:	3750      	adds	r7, #80	@ 0x50
 8002494:	46bd      	mov	sp, r7
 8002496:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800249a:	bf00      	nop
 800249c:	40023800 	.word	0x40023800
 80024a0:	00f42400 	.word	0x00f42400
 80024a4:	007a1200 	.word	0x007a1200

080024a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024ac:	4b03      	ldr	r3, [pc, #12]	@ (80024bc <HAL_RCC_GetHCLKFreq+0x14>)
 80024ae:	681b      	ldr	r3, [r3, #0]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	20000000 	.word	0x20000000

080024c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024c4:	f7ff fff0 	bl	80024a8 <HAL_RCC_GetHCLKFreq>
 80024c8:	4602      	mov	r2, r0
 80024ca:	4b05      	ldr	r3, [pc, #20]	@ (80024e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	0a9b      	lsrs	r3, r3, #10
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	4903      	ldr	r1, [pc, #12]	@ (80024e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024d6:	5ccb      	ldrb	r3, [r1, r3]
 80024d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024dc:	4618      	mov	r0, r3
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40023800 	.word	0x40023800
 80024e4:	08008eb0 	.word	0x08008eb0

080024e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024ec:	f7ff ffdc 	bl	80024a8 <HAL_RCC_GetHCLKFreq>
 80024f0:	4602      	mov	r2, r0
 80024f2:	4b05      	ldr	r3, [pc, #20]	@ (8002508 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	0b5b      	lsrs	r3, r3, #13
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	4903      	ldr	r1, [pc, #12]	@ (800250c <HAL_RCC_GetPCLK2Freq+0x24>)
 80024fe:	5ccb      	ldrb	r3, [r1, r3]
 8002500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002504:	4618      	mov	r0, r3
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40023800 	.word	0x40023800
 800250c:	08008eb0 	.word	0x08008eb0

08002510 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	220f      	movs	r2, #15
 800251e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002520:	4b12      	ldr	r3, [pc, #72]	@ (800256c <HAL_RCC_GetClockConfig+0x5c>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 0203 	and.w	r2, r3, #3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800252c:	4b0f      	ldr	r3, [pc, #60]	@ (800256c <HAL_RCC_GetClockConfig+0x5c>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002538:	4b0c      	ldr	r3, [pc, #48]	@ (800256c <HAL_RCC_GetClockConfig+0x5c>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002544:	4b09      	ldr	r3, [pc, #36]	@ (800256c <HAL_RCC_GetClockConfig+0x5c>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	08db      	lsrs	r3, r3, #3
 800254a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002552:	4b07      	ldr	r3, [pc, #28]	@ (8002570 <HAL_RCC_GetClockConfig+0x60>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0207 	and.w	r2, r3, #7
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	601a      	str	r2, [r3, #0]
}
 800255e:	bf00      	nop
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	40023800 	.word	0x40023800
 8002570:	40023c00 	.word	0x40023c00

08002574 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002580:	2300      	movs	r3, #0
 8002582:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	2b00      	cmp	r3, #0
 800258e:	d105      	bne.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002598:	2b00      	cmp	r3, #0
 800259a:	d038      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800259c:	4b68      	ldr	r3, [pc, #416]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800259e:	2200      	movs	r2, #0
 80025a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80025a2:	f7ff f83d 	bl	8001620 <HAL_GetTick>
 80025a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025a8:	e008      	b.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80025aa:	f7ff f839 	bl	8001620 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d901      	bls.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e0bd      	b.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025bc:	4b61      	ldr	r3, [pc, #388]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1f0      	bne.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	019b      	lsls	r3, r3, #6
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	071b      	lsls	r3, r3, #28
 80025da:	495a      	ldr	r1, [pc, #360]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80025e2:	4b57      	ldr	r3, [pc, #348]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80025e4:	2201      	movs	r2, #1
 80025e6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80025e8:	f7ff f81a 	bl	8001620 <HAL_GetTick>
 80025ec:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80025ee:	e008      	b.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80025f0:	f7ff f816 	bl	8001620 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e09a      	b.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002602:	4b50      	ldr	r3, [pc, #320]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0f0      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 8083 	beq.w	8002722 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800261c:	2300      	movs	r3, #0
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	4b48      	ldr	r3, [pc, #288]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002624:	4a47      	ldr	r2, [pc, #284]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002626:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800262a:	6413      	str	r3, [r2, #64]	@ 0x40
 800262c:	4b45      	ldr	r3, [pc, #276]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800262e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002630:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002638:	4b43      	ldr	r3, [pc, #268]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a42      	ldr	r2, [pc, #264]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800263e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002642:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002644:	f7fe ffec 	bl	8001620 <HAL_GetTick>
 8002648:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800264a:	e008      	b.n	800265e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800264c:	f7fe ffe8 	bl	8001620 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d901      	bls.n	800265e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e06c      	b.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800265e:	4b3a      	ldr	r3, [pc, #232]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0f0      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800266a:	4b36      	ldr	r3, [pc, #216]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800266c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800266e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002672:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d02f      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x166>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	429a      	cmp	r2, r3
 8002686:	d028      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002688:	4b2e      	ldr	r3, [pc, #184]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800268a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800268c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002690:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002692:	4b2e      	ldr	r3, [pc, #184]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002694:	2201      	movs	r2, #1
 8002696:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002698:	4b2c      	ldr	r3, [pc, #176]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800269e:	4a29      	ldr	r2, [pc, #164]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80026a4:	4b27      	ldr	r3, [pc, #156]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d114      	bne.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80026b0:	f7fe ffb6 	bl	8001620 <HAL_GetTick>
 80026b4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b6:	e00a      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b8:	f7fe ffb2 	bl	8001620 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d901      	bls.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e034      	b.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0ee      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80026e6:	d10d      	bne.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80026e8:	4b16      	ldr	r3, [pc, #88]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80026f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026fc:	4911      	ldr	r1, [pc, #68]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	608b      	str	r3, [r1, #8]
 8002702:	e005      	b.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002704:	4b0f      	ldr	r3, [pc, #60]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	4a0e      	ldr	r2, [pc, #56]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800270a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800270e:	6093      	str	r3, [r2, #8]
 8002710:	4b0c      	ldr	r3, [pc, #48]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002712:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800271c:	4909      	ldr	r1, [pc, #36]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800271e:	4313      	orrs	r3, r2
 8002720:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0308 	and.w	r3, r3, #8
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	7d1a      	ldrb	r2, [r3, #20]
 8002732:	4b07      	ldr	r3, [pc, #28]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002734:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	42470068 	.word	0x42470068
 8002744:	40023800 	.word	0x40023800
 8002748:	40007000 	.word	0x40007000
 800274c:	42470e40 	.word	0x42470e40
 8002750:	424711e0 	.word	0x424711e0

08002754 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e073      	b.n	8002852 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	7f5b      	ldrb	r3, [r3, #29]
 800276e:	b2db      	uxtb	r3, r3
 8002770:	2b00      	cmp	r3, #0
 8002772:	d105      	bne.n	8002780 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7fe fcbc 	bl	80010f8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2202      	movs	r2, #2
 8002784:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f003 0310 	and.w	r3, r3, #16
 8002790:	2b10      	cmp	r3, #16
 8002792:	d055      	beq.n	8002840 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	22ca      	movs	r2, #202	@ 0xca
 800279a:	625a      	str	r2, [r3, #36]	@ 0x24
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2253      	movs	r2, #83	@ 0x53
 80027a2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 f8dd 	bl	8002964 <RTC_EnterInitMode>
 80027aa:	4603      	mov	r3, r0
 80027ac:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80027ae:	7bfb      	ldrb	r3, [r7, #15]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d12c      	bne.n	800280e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6812      	ldr	r2, [r2, #0]
 80027be:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80027c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80027c6:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6899      	ldr	r1, [r3, #8]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	431a      	orrs	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	431a      	orrs	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	430a      	orrs	r2, r1
 80027e4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	68d2      	ldr	r2, [r2, #12]
 80027ee:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6919      	ldr	r1, [r3, #16]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	041a      	lsls	r2, r3, #16
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 f8e4 	bl	80029d2 <RTC_ExitInitMode>
 800280a:	4603      	mov	r3, r0
 800280c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800280e:	7bfb      	ldrb	r3, [r7, #15]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d110      	bne.n	8002836 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002822:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	699a      	ldr	r2, [r3, #24]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	430a      	orrs	r2, r1
 8002834:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	22ff      	movs	r2, #255	@ 0xff
 800283c:	625a      	str	r2, [r3, #36]	@ 0x24
 800283e:	e001      	b.n	8002844 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002840:	2300      	movs	r3, #0
 8002842:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002844:	7bfb      	ldrb	r3, [r7, #15]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d102      	bne.n	8002850 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002850:	7bfb      	ldrb	r3, [r7, #15]
}
 8002852:	4618      	mov	r0, r3
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b086      	sub	sp, #24
 800285e:	af00      	add	r7, sp, #0
 8002860:	60f8      	str	r0, [r7, #12]
 8002862:	60b9      	str	r1, [r7, #8]
 8002864:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002866:	2300      	movs	r3, #0
 8002868:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800288c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002890:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	0c1b      	lsrs	r3, r3, #16
 8002896:	b2db      	uxtb	r3, r3
 8002898:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800289c:	b2da      	uxtb	r2, r3
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	0a1b      	lsrs	r3, r3, #8
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	0d9b      	lsrs	r3, r3, #22
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d11a      	bne.n	800290c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 f89e 	bl	8002a1c <RTC_Bcd2ToByte>
 80028e0:	4603      	mov	r3, r0
 80028e2:	461a      	mov	r2, r3
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	785b      	ldrb	r3, [r3, #1]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f000 f895 	bl	8002a1c <RTC_Bcd2ToByte>
 80028f2:	4603      	mov	r3, r0
 80028f4:	461a      	mov	r2, r3
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	789b      	ldrb	r3, [r3, #2]
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 f88c 	bl	8002a1c <RTC_Bcd2ToByte>
 8002904:	4603      	mov	r3, r0
 8002906:	461a      	mov	r2, r3
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
	...

08002918 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002920:	2300      	movs	r3, #0
 8002922:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a0d      	ldr	r2, [pc, #52]	@ (8002960 <HAL_RTC_WaitForSynchro+0x48>)
 800292a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800292c:	f7fe fe78 	bl	8001620 <HAL_GetTick>
 8002930:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002932:	e009      	b.n	8002948 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002934:	f7fe fe74 	bl	8001620 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002942:	d901      	bls.n	8002948 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e007      	b.n	8002958 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	f003 0320 	and.w	r3, r3, #32
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0ee      	beq.n	8002934 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	00013f5f 	.word	0x00013f5f

08002964 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800296c:	2300      	movs	r3, #0
 800296e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002970:	2300      	movs	r3, #0
 8002972:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800297e:	2b00      	cmp	r3, #0
 8002980:	d122      	bne.n	80029c8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68da      	ldr	r2, [r3, #12]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002990:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002992:	f7fe fe45 	bl	8001620 <HAL_GetTick>
 8002996:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002998:	e00c      	b.n	80029b4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800299a:	f7fe fe41 	bl	8001620 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80029a8:	d904      	bls.n	80029b4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2204      	movs	r2, #4
 80029ae:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d102      	bne.n	80029c8 <RTC_EnterInitMode+0x64>
 80029c2:	7bfb      	ldrb	r3, [r7, #15]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d1e8      	bne.n	800299a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80029c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b084      	sub	sp, #16
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029da:	2300      	movs	r3, #0
 80029dc:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68da      	ldr	r2, [r3, #12]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029ec:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f003 0320 	and.w	r3, r3, #32
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10a      	bne.n	8002a12 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f7ff ff8b 	bl	8002918 <HAL_RTC_WaitForSynchro>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d004      	beq.n	8002a12 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2204      	movs	r2, #4
 8002a0c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	4603      	mov	r3, r0
 8002a24:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8002a2a:	79fb      	ldrb	r3, [r7, #7]
 8002a2c:	091b      	lsrs	r3, r3, #4
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	461a      	mov	r2, r3
 8002a32:	4613      	mov	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	b2da      	uxtb	r2, r3
 8002a40:	79fb      	ldrb	r3, [r7, #7]
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	4413      	add	r3, r2
 8002a4a:	b2db      	uxtb	r3, r3
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e07b      	b.n	8002b62 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d108      	bne.n	8002a84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a7a:	d009      	beq.n	8002a90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	61da      	str	r2, [r3, #28]
 8002a82:	e005      	b.n	8002a90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d106      	bne.n	8002ab0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7fe fb50 	bl	8001150 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ac6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	431a      	orrs	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	431a      	orrs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b00:	431a      	orrs	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b14:	ea42 0103 	orr.w	r1, r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b1c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	0c1b      	lsrs	r3, r3, #16
 8002b2e:	f003 0104 	and.w	r1, r3, #4
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b36:	f003 0210 	and.w	r2, r3, #16
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	69da      	ldr	r2, [r3, #28]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b50:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b088      	sub	sp, #32
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	60f8      	str	r0, [r7, #12]
 8002b72:	60b9      	str	r1, [r7, #8]
 8002b74:	603b      	str	r3, [r7, #0]
 8002b76:	4613      	mov	r3, r2
 8002b78:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b7a:	f7fe fd51 	bl	8001620 <HAL_GetTick>
 8002b7e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002b80:	88fb      	ldrh	r3, [r7, #6]
 8002b82:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d001      	beq.n	8002b94 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002b90:	2302      	movs	r3, #2
 8002b92:	e12a      	b.n	8002dea <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d002      	beq.n	8002ba0 <HAL_SPI_Transmit+0x36>
 8002b9a:	88fb      	ldrh	r3, [r7, #6]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e122      	b.n	8002dea <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d101      	bne.n	8002bb2 <HAL_SPI_Transmit+0x48>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e11b      	b.n	8002dea <HAL_SPI_Transmit+0x280>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2203      	movs	r2, #3
 8002bbe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	68ba      	ldr	r2, [r7, #8]
 8002bcc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	88fa      	ldrh	r2, [r7, #6]
 8002bd2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	88fa      	ldrh	r2, [r7, #6]
 8002bd8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c00:	d10f      	bne.n	8002c22 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c20:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c2c:	2b40      	cmp	r3, #64	@ 0x40
 8002c2e:	d007      	beq.n	8002c40 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c48:	d152      	bne.n	8002cf0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d002      	beq.n	8002c58 <HAL_SPI_Transmit+0xee>
 8002c52:	8b7b      	ldrh	r3, [r7, #26]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d145      	bne.n	8002ce4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c5c:	881a      	ldrh	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c68:	1c9a      	adds	r2, r3, #2
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	3b01      	subs	r3, #1
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c7c:	e032      	b.n	8002ce4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d112      	bne.n	8002cb2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c90:	881a      	ldrh	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9c:	1c9a      	adds	r2, r3, #2
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002cb0:	e018      	b.n	8002ce4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cb2:	f7fe fcb5 	bl	8001620 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d803      	bhi.n	8002cca <HAL_SPI_Transmit+0x160>
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc8:	d102      	bne.n	8002cd0 <HAL_SPI_Transmit+0x166>
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d109      	bne.n	8002ce4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e082      	b.n	8002dea <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1c7      	bne.n	8002c7e <HAL_SPI_Transmit+0x114>
 8002cee:	e053      	b.n	8002d98 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d002      	beq.n	8002cfe <HAL_SPI_Transmit+0x194>
 8002cf8:	8b7b      	ldrh	r3, [r7, #26]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d147      	bne.n	8002d8e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	330c      	adds	r3, #12
 8002d08:	7812      	ldrb	r2, [r2, #0]
 8002d0a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d10:	1c5a      	adds	r2, r3, #1
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002d24:	e033      	b.n	8002d8e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d113      	bne.n	8002d5c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	330c      	adds	r3, #12
 8002d3e:	7812      	ldrb	r2, [r2, #0]
 8002d40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d46:	1c5a      	adds	r2, r3, #1
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	3b01      	subs	r3, #1
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002d5a:	e018      	b.n	8002d8e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d5c:	f7fe fc60 	bl	8001620 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	683a      	ldr	r2, [r7, #0]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d803      	bhi.n	8002d74 <HAL_SPI_Transmit+0x20a>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d72:	d102      	bne.n	8002d7a <HAL_SPI_Transmit+0x210>
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d109      	bne.n	8002d8e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e02d      	b.n	8002dea <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1c6      	bne.n	8002d26 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d98:	69fa      	ldr	r2, [r7, #28]
 8002d9a:	6839      	ldr	r1, [r7, #0]
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f000 fbd9 	bl	8003554 <SPI_EndRxTxTransaction>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d002      	beq.n	8002dae <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2220      	movs	r2, #32
 8002dac:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10a      	bne.n	8002dcc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002db6:	2300      	movs	r3, #0
 8002db8:	617b      	str	r3, [r7, #20]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	617b      	str	r3, [r7, #20]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	617b      	str	r3, [r7, #20]
 8002dca:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e000      	b.n	8002dea <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002de8:	2300      	movs	r3, #0
  }
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3720      	adds	r7, #32
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b088      	sub	sp, #32
 8002df6:	af02      	add	r7, sp, #8
 8002df8:	60f8      	str	r0, [r7, #12]
 8002dfa:	60b9      	str	r1, [r7, #8]
 8002dfc:	603b      	str	r3, [r7, #0]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d001      	beq.n	8002e12 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002e0e:	2302      	movs	r3, #2
 8002e10:	e104      	b.n	800301c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e1a:	d112      	bne.n	8002e42 <HAL_SPI_Receive+0x50>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10e      	bne.n	8002e42 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2204      	movs	r2, #4
 8002e28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002e2c:	88fa      	ldrh	r2, [r7, #6]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	4613      	mov	r3, r2
 8002e34:	68ba      	ldr	r2, [r7, #8]
 8002e36:	68b9      	ldr	r1, [r7, #8]
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f000 f8f3 	bl	8003024 <HAL_SPI_TransmitReceive>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	e0ec      	b.n	800301c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e42:	f7fe fbed 	bl	8001620 <HAL_GetTick>
 8002e46:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d002      	beq.n	8002e54 <HAL_SPI_Receive+0x62>
 8002e4e:	88fb      	ldrh	r3, [r7, #6]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d101      	bne.n	8002e58 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e0e1      	b.n	800301c <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d101      	bne.n	8002e66 <HAL_SPI_Receive+0x74>
 8002e62:	2302      	movs	r3, #2
 8002e64:	e0da      	b.n	800301c <HAL_SPI_Receive+0x22a>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2204      	movs	r2, #4
 8002e72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	88fa      	ldrh	r2, [r7, #6]
 8002e86:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	88fa      	ldrh	r2, [r7, #6]
 8002e8c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002eb4:	d10f      	bne.n	8002ed6 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ec4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002ed4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ee0:	2b40      	cmp	r3, #64	@ 0x40
 8002ee2:	d007      	beq.n	8002ef4 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ef2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d170      	bne.n	8002fde <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002efc:	e035      	b.n	8002f6a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d115      	bne.n	8002f38 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f103 020c 	add.w	r2, r3, #12
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f18:	7812      	ldrb	r2, [r2, #0]
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f22:	1c5a      	adds	r2, r3, #1
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f36:	e018      	b.n	8002f6a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f38:	f7fe fb72 	bl	8001620 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d803      	bhi.n	8002f50 <HAL_SPI_Receive+0x15e>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4e:	d102      	bne.n	8002f56 <HAL_SPI_Receive+0x164>
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d109      	bne.n	8002f6a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e058      	b.n	800301c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1c4      	bne.n	8002efe <HAL_SPI_Receive+0x10c>
 8002f74:	e038      	b.n	8002fe8 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d113      	bne.n	8002fac <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f8e:	b292      	uxth	r2, r2
 8002f90:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f96:	1c9a      	adds	r2, r3, #2
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002faa:	e018      	b.n	8002fde <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fac:	f7fe fb38 	bl	8001620 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d803      	bhi.n	8002fc4 <HAL_SPI_Receive+0x1d2>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc2:	d102      	bne.n	8002fca <HAL_SPI_Receive+0x1d8>
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d109      	bne.n	8002fde <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e01e      	b.n	800301c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1c6      	bne.n	8002f76 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	6839      	ldr	r1, [r7, #0]
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f000 fa4b 	bl	8003488 <SPI_EndRxTransaction>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d002      	beq.n	8002ffe <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e000      	b.n	800301c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800301a:	2300      	movs	r3, #0
  }
}
 800301c:	4618      	mov	r0, r3
 800301e:	3718      	adds	r7, #24
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b08a      	sub	sp, #40	@ 0x28
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
 8003030:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003032:	2301      	movs	r3, #1
 8003034:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003036:	f7fe faf3 	bl	8001620 <HAL_GetTick>
 800303a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003042:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800304a:	887b      	ldrh	r3, [r7, #2]
 800304c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800304e:	7ffb      	ldrb	r3, [r7, #31]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d00c      	beq.n	800306e <HAL_SPI_TransmitReceive+0x4a>
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800305a:	d106      	bne.n	800306a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d102      	bne.n	800306a <HAL_SPI_TransmitReceive+0x46>
 8003064:	7ffb      	ldrb	r3, [r7, #31]
 8003066:	2b04      	cmp	r3, #4
 8003068:	d001      	beq.n	800306e <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800306a:	2302      	movs	r3, #2
 800306c:	e17f      	b.n	800336e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d005      	beq.n	8003080 <HAL_SPI_TransmitReceive+0x5c>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <HAL_SPI_TransmitReceive+0x5c>
 800307a:	887b      	ldrh	r3, [r7, #2]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e174      	b.n	800336e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800308a:	2b01      	cmp	r3, #1
 800308c:	d101      	bne.n	8003092 <HAL_SPI_TransmitReceive+0x6e>
 800308e:	2302      	movs	r3, #2
 8003090:	e16d      	b.n	800336e <HAL_SPI_TransmitReceive+0x34a>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d003      	beq.n	80030ae <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2205      	movs	r2, #5
 80030aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	887a      	ldrh	r2, [r7, #2]
 80030be:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	887a      	ldrh	r2, [r7, #2]
 80030c4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	68ba      	ldr	r2, [r7, #8]
 80030ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	887a      	ldrh	r2, [r7, #2]
 80030d0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	887a      	ldrh	r2, [r7, #2]
 80030d6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030ee:	2b40      	cmp	r3, #64	@ 0x40
 80030f0:	d007      	beq.n	8003102 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003100:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800310a:	d17e      	bne.n	800320a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d002      	beq.n	800311a <HAL_SPI_TransmitReceive+0xf6>
 8003114:	8afb      	ldrh	r3, [r7, #22]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d16c      	bne.n	80031f4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311e:	881a      	ldrh	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312a:	1c9a      	adds	r2, r3, #2
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003134:	b29b      	uxth	r3, r3
 8003136:	3b01      	subs	r3, #1
 8003138:	b29a      	uxth	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800313e:	e059      	b.n	80031f4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b02      	cmp	r3, #2
 800314c:	d11b      	bne.n	8003186 <HAL_SPI_TransmitReceive+0x162>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003152:	b29b      	uxth	r3, r3
 8003154:	2b00      	cmp	r3, #0
 8003156:	d016      	beq.n	8003186 <HAL_SPI_TransmitReceive+0x162>
 8003158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315a:	2b01      	cmp	r3, #1
 800315c:	d113      	bne.n	8003186 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003162:	881a      	ldrh	r2, [r3, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316e:	1c9a      	adds	r2, r3, #2
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003178:	b29b      	uxth	r3, r3
 800317a:	3b01      	subs	r3, #1
 800317c:	b29a      	uxth	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003182:	2300      	movs	r3, #0
 8003184:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b01      	cmp	r3, #1
 8003192:	d119      	bne.n	80031c8 <HAL_SPI_TransmitReceive+0x1a4>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003198:	b29b      	uxth	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d014      	beq.n	80031c8 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68da      	ldr	r2, [r3, #12]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031a8:	b292      	uxth	r2, r2
 80031aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031b0:	1c9a      	adds	r2, r3, #2
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	3b01      	subs	r3, #1
 80031be:	b29a      	uxth	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031c4:	2301      	movs	r3, #1
 80031c6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80031c8:	f7fe fa2a 	bl	8001620 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	6a3b      	ldr	r3, [r7, #32]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d80d      	bhi.n	80031f4 <HAL_SPI_TransmitReceive+0x1d0>
 80031d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031de:	d009      	beq.n	80031f4 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e0bc      	b.n	800336e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1a0      	bne.n	8003140 <HAL_SPI_TransmitReceive+0x11c>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003202:	b29b      	uxth	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d19b      	bne.n	8003140 <HAL_SPI_TransmitReceive+0x11c>
 8003208:	e082      	b.n	8003310 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d002      	beq.n	8003218 <HAL_SPI_TransmitReceive+0x1f4>
 8003212:	8afb      	ldrh	r3, [r7, #22]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d171      	bne.n	80032fc <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	330c      	adds	r3, #12
 8003222:	7812      	ldrb	r2, [r2, #0]
 8003224:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322a:	1c5a      	adds	r2, r3, #1
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003234:	b29b      	uxth	r3, r3
 8003236:	3b01      	subs	r3, #1
 8003238:	b29a      	uxth	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800323e:	e05d      	b.n	80032fc <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b02      	cmp	r3, #2
 800324c:	d11c      	bne.n	8003288 <HAL_SPI_TransmitReceive+0x264>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003252:	b29b      	uxth	r3, r3
 8003254:	2b00      	cmp	r3, #0
 8003256:	d017      	beq.n	8003288 <HAL_SPI_TransmitReceive+0x264>
 8003258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325a:	2b01      	cmp	r3, #1
 800325c:	d114      	bne.n	8003288 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	330c      	adds	r3, #12
 8003268:	7812      	ldrb	r2, [r2, #0]
 800326a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003270:	1c5a      	adds	r2, r3, #1
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800327a:	b29b      	uxth	r3, r3
 800327c:	3b01      	subs	r3, #1
 800327e:	b29a      	uxth	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003284:	2300      	movs	r3, #0
 8003286:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b01      	cmp	r3, #1
 8003294:	d119      	bne.n	80032ca <HAL_SPI_TransmitReceive+0x2a6>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800329a:	b29b      	uxth	r3, r3
 800329c:	2b00      	cmp	r3, #0
 800329e:	d014      	beq.n	80032ca <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68da      	ldr	r2, [r3, #12]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032aa:	b2d2      	uxtb	r2, r2
 80032ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b2:	1c5a      	adds	r2, r3, #1
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032bc:	b29b      	uxth	r3, r3
 80032be:	3b01      	subs	r3, #1
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032c6:	2301      	movs	r3, #1
 80032c8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80032ca:	f7fe f9a9 	bl	8001620 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	6a3b      	ldr	r3, [r7, #32]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d803      	bhi.n	80032e2 <HAL_SPI_TransmitReceive+0x2be>
 80032da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e0:	d102      	bne.n	80032e8 <HAL_SPI_TransmitReceive+0x2c4>
 80032e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d109      	bne.n	80032fc <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e038      	b.n	800336e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003300:	b29b      	uxth	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d19c      	bne.n	8003240 <HAL_SPI_TransmitReceive+0x21c>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800330a:	b29b      	uxth	r3, r3
 800330c:	2b00      	cmp	r3, #0
 800330e:	d197      	bne.n	8003240 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003310:	6a3a      	ldr	r2, [r7, #32]
 8003312:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 f91d 	bl	8003554 <SPI_EndRxTxTransaction>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d008      	beq.n	8003332 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2220      	movs	r2, #32
 8003324:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e01d      	b.n	800336e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10a      	bne.n	8003350 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800333a:	2300      	movs	r3, #0
 800333c:	613b      	str	r3, [r7, #16]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	613b      	str	r3, [r7, #16]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	613b      	str	r3, [r7, #16]
 800334e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e000      	b.n	800336e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800336c:	2300      	movs	r3, #0
  }
}
 800336e:	4618      	mov	r0, r3
 8003370:	3728      	adds	r7, #40	@ 0x28
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
	...

08003378 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b088      	sub	sp, #32
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	603b      	str	r3, [r7, #0]
 8003384:	4613      	mov	r3, r2
 8003386:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003388:	f7fe f94a 	bl	8001620 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003390:	1a9b      	subs	r3, r3, r2
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	4413      	add	r3, r2
 8003396:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003398:	f7fe f942 	bl	8001620 <HAL_GetTick>
 800339c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800339e:	4b39      	ldr	r3, [pc, #228]	@ (8003484 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	015b      	lsls	r3, r3, #5
 80033a4:	0d1b      	lsrs	r3, r3, #20
 80033a6:	69fa      	ldr	r2, [r7, #28]
 80033a8:	fb02 f303 	mul.w	r3, r2, r3
 80033ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033ae:	e054      	b.n	800345a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b6:	d050      	beq.n	800345a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033b8:	f7fe f932 	bl	8001620 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	69fa      	ldr	r2, [r7, #28]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d902      	bls.n	80033ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d13d      	bne.n	800344a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80033dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033e6:	d111      	bne.n	800340c <SPI_WaitFlagStateUntilTimeout+0x94>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033f0:	d004      	beq.n	80033fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033fa:	d107      	bne.n	800340c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800340a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003410:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003414:	d10f      	bne.n	8003436 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003424:	601a      	str	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003434:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e017      	b.n	800347a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003450:	2300      	movs	r3, #0
 8003452:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	3b01      	subs	r3, #1
 8003458:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	4013      	ands	r3, r2
 8003464:	68ba      	ldr	r2, [r7, #8]
 8003466:	429a      	cmp	r2, r3
 8003468:	bf0c      	ite	eq
 800346a:	2301      	moveq	r3, #1
 800346c:	2300      	movne	r3, #0
 800346e:	b2db      	uxtb	r3, r3
 8003470:	461a      	mov	r2, r3
 8003472:	79fb      	ldrb	r3, [r7, #7]
 8003474:	429a      	cmp	r2, r3
 8003476:	d19b      	bne.n	80033b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3720      	adds	r7, #32
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	20000000 	.word	0x20000000

08003488 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af02      	add	r7, sp, #8
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800349c:	d111      	bne.n	80034c2 <SPI_EndRxTransaction+0x3a>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034a6:	d004      	beq.n	80034b2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034b0:	d107      	bne.n	80034c2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034c0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034ca:	d12a      	bne.n	8003522 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034d4:	d012      	beq.n	80034fc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	2200      	movs	r2, #0
 80034de:	2180      	movs	r1, #128	@ 0x80
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f7ff ff49 	bl	8003378 <SPI_WaitFlagStateUntilTimeout>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d02d      	beq.n	8003548 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034f0:	f043 0220 	orr.w	r2, r3, #32
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e026      	b.n	800354a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	2200      	movs	r2, #0
 8003504:	2101      	movs	r1, #1
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f7ff ff36 	bl	8003378 <SPI_WaitFlagStateUntilTimeout>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d01a      	beq.n	8003548 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003516:	f043 0220 	orr.w	r2, r3, #32
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e013      	b.n	800354a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	2200      	movs	r2, #0
 800352a:	2101      	movs	r1, #1
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f7ff ff23 	bl	8003378 <SPI_WaitFlagStateUntilTimeout>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d007      	beq.n	8003548 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800353c:	f043 0220 	orr.w	r2, r3, #32
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e000      	b.n	800354a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
	...

08003554 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b088      	sub	sp, #32
 8003558:	af02      	add	r7, sp, #8
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	2201      	movs	r2, #1
 8003568:	2102      	movs	r1, #2
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f7ff ff04 	bl	8003378 <SPI_WaitFlagStateUntilTimeout>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d007      	beq.n	8003586 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800357a:	f043 0220 	orr.w	r2, r3, #32
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e032      	b.n	80035ec <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003586:	4b1b      	ldr	r3, [pc, #108]	@ (80035f4 <SPI_EndRxTxTransaction+0xa0>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a1b      	ldr	r2, [pc, #108]	@ (80035f8 <SPI_EndRxTxTransaction+0xa4>)
 800358c:	fba2 2303 	umull	r2, r3, r2, r3
 8003590:	0d5b      	lsrs	r3, r3, #21
 8003592:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003596:	fb02 f303 	mul.w	r3, r2, r3
 800359a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035a4:	d112      	bne.n	80035cc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	2200      	movs	r2, #0
 80035ae:	2180      	movs	r1, #128	@ 0x80
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f7ff fee1 	bl	8003378 <SPI_WaitFlagStateUntilTimeout>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d016      	beq.n	80035ea <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035c0:	f043 0220 	orr.w	r2, r3, #32
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e00f      	b.n	80035ec <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00a      	beq.n	80035e8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	3b01      	subs	r3, #1
 80035d6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035e2:	2b80      	cmp	r3, #128	@ 0x80
 80035e4:	d0f2      	beq.n	80035cc <SPI_EndRxTxTransaction+0x78>
 80035e6:	e000      	b.n	80035ea <SPI_EndRxTxTransaction+0x96>
        break;
 80035e8:	bf00      	nop
  }

  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3718      	adds	r7, #24
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	20000000 	.word	0x20000000
 80035f8:	165e9f81 	.word	0x165e9f81

080035fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e041      	b.n	8003692 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d106      	bne.n	8003628 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f839 	bl	800369a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2202      	movs	r2, #2
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3304      	adds	r3, #4
 8003638:	4619      	mov	r1, r3
 800363a:	4610      	mov	r0, r2
 800363c:	f000 f9b2 	bl	80039a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800369a:	b480      	push	{r7}
 800369c:	b083      	sub	sp, #12
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80036a2:	bf00      	nop
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
	...

080036b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d001      	beq.n	80036c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e044      	b.n	8003752 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2202      	movs	r2, #2
 80036cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68da      	ldr	r2, [r3, #12]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0201 	orr.w	r2, r2, #1
 80036de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a1e      	ldr	r2, [pc, #120]	@ (8003760 <HAL_TIM_Base_Start_IT+0xb0>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d018      	beq.n	800371c <HAL_TIM_Base_Start_IT+0x6c>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036f2:	d013      	beq.n	800371c <HAL_TIM_Base_Start_IT+0x6c>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a1a      	ldr	r2, [pc, #104]	@ (8003764 <HAL_TIM_Base_Start_IT+0xb4>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d00e      	beq.n	800371c <HAL_TIM_Base_Start_IT+0x6c>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a19      	ldr	r2, [pc, #100]	@ (8003768 <HAL_TIM_Base_Start_IT+0xb8>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d009      	beq.n	800371c <HAL_TIM_Base_Start_IT+0x6c>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a17      	ldr	r2, [pc, #92]	@ (800376c <HAL_TIM_Base_Start_IT+0xbc>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d004      	beq.n	800371c <HAL_TIM_Base_Start_IT+0x6c>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a16      	ldr	r2, [pc, #88]	@ (8003770 <HAL_TIM_Base_Start_IT+0xc0>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d111      	bne.n	8003740 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2b06      	cmp	r3, #6
 800372c:	d010      	beq.n	8003750 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f042 0201 	orr.w	r2, r2, #1
 800373c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800373e:	e007      	b.n	8003750 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0201 	orr.w	r2, r2, #1
 800374e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3714      	adds	r7, #20
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	40010000 	.word	0x40010000
 8003764:	40000400 	.word	0x40000400
 8003768:	40000800 	.word	0x40000800
 800376c:	40000c00 	.word	0x40000c00
 8003770:	40014000 	.word	0x40014000

08003774 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d020      	beq.n	80037d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d01b      	beq.n	80037d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f06f 0202 	mvn.w	r2, #2
 80037a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	f003 0303 	and.w	r3, r3, #3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f8d2 	bl	8003968 <HAL_TIM_IC_CaptureCallback>
 80037c4:	e005      	b.n	80037d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f8c4 	bl	8003954 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 f8d5 	bl	800397c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	f003 0304 	and.w	r3, r3, #4
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d020      	beq.n	8003824 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d01b      	beq.n	8003824 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f06f 0204 	mvn.w	r2, #4
 80037f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2202      	movs	r2, #2
 80037fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f8ac 	bl	8003968 <HAL_TIM_IC_CaptureCallback>
 8003810:	e005      	b.n	800381e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f89e 	bl	8003954 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 f8af 	bl	800397c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	f003 0308 	and.w	r3, r3, #8
 800382a:	2b00      	cmp	r3, #0
 800382c:	d020      	beq.n	8003870 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f003 0308 	and.w	r3, r3, #8
 8003834:	2b00      	cmp	r3, #0
 8003836:	d01b      	beq.n	8003870 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f06f 0208 	mvn.w	r2, #8
 8003840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2204      	movs	r2, #4
 8003846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	f003 0303 	and.w	r3, r3, #3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d003      	beq.n	800385e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 f886 	bl	8003968 <HAL_TIM_IC_CaptureCallback>
 800385c:	e005      	b.n	800386a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f878 	bl	8003954 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 f889 	bl	800397c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	f003 0310 	and.w	r3, r3, #16
 8003876:	2b00      	cmp	r3, #0
 8003878:	d020      	beq.n	80038bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f003 0310 	and.w	r3, r3, #16
 8003880:	2b00      	cmp	r3, #0
 8003882:	d01b      	beq.n	80038bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f06f 0210 	mvn.w	r2, #16
 800388c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2208      	movs	r2, #8
 8003892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d003      	beq.n	80038aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f860 	bl	8003968 <HAL_TIM_IC_CaptureCallback>
 80038a8:	e005      	b.n	80038b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f852 	bl	8003954 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 f863 	bl	800397c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00c      	beq.n	80038e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d007      	beq.n	80038e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f06f 0201 	mvn.w	r2, #1
 80038d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7fd fbc8 	bl	8001070 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00c      	beq.n	8003904 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d007      	beq.n	8003904 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80038fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f8e6 	bl	8003ad0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00c      	beq.n	8003928 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003914:	2b00      	cmp	r3, #0
 8003916:	d007      	beq.n	8003928 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f834 	bl	8003990 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	f003 0320 	and.w	r3, r3, #32
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00c      	beq.n	800394c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f003 0320 	and.w	r3, r3, #32
 8003938:	2b00      	cmp	r3, #0
 800393a:	d007      	beq.n	800394c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f06f 0220 	mvn.w	r2, #32
 8003944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f8b8 	bl	8003abc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800394c:	bf00      	nop
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a3a      	ldr	r2, [pc, #232]	@ (8003aa0 <TIM_Base_SetConfig+0xfc>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d00f      	beq.n	80039dc <TIM_Base_SetConfig+0x38>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039c2:	d00b      	beq.n	80039dc <TIM_Base_SetConfig+0x38>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a37      	ldr	r2, [pc, #220]	@ (8003aa4 <TIM_Base_SetConfig+0x100>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d007      	beq.n	80039dc <TIM_Base_SetConfig+0x38>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a36      	ldr	r2, [pc, #216]	@ (8003aa8 <TIM_Base_SetConfig+0x104>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d003      	beq.n	80039dc <TIM_Base_SetConfig+0x38>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a35      	ldr	r2, [pc, #212]	@ (8003aac <TIM_Base_SetConfig+0x108>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d108      	bne.n	80039ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a2b      	ldr	r2, [pc, #172]	@ (8003aa0 <TIM_Base_SetConfig+0xfc>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d01b      	beq.n	8003a2e <TIM_Base_SetConfig+0x8a>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039fc:	d017      	beq.n	8003a2e <TIM_Base_SetConfig+0x8a>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a28      	ldr	r2, [pc, #160]	@ (8003aa4 <TIM_Base_SetConfig+0x100>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d013      	beq.n	8003a2e <TIM_Base_SetConfig+0x8a>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a27      	ldr	r2, [pc, #156]	@ (8003aa8 <TIM_Base_SetConfig+0x104>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d00f      	beq.n	8003a2e <TIM_Base_SetConfig+0x8a>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a26      	ldr	r2, [pc, #152]	@ (8003aac <TIM_Base_SetConfig+0x108>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d00b      	beq.n	8003a2e <TIM_Base_SetConfig+0x8a>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a25      	ldr	r2, [pc, #148]	@ (8003ab0 <TIM_Base_SetConfig+0x10c>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d007      	beq.n	8003a2e <TIM_Base_SetConfig+0x8a>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a24      	ldr	r2, [pc, #144]	@ (8003ab4 <TIM_Base_SetConfig+0x110>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d003      	beq.n	8003a2e <TIM_Base_SetConfig+0x8a>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a23      	ldr	r2, [pc, #140]	@ (8003ab8 <TIM_Base_SetConfig+0x114>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d108      	bne.n	8003a40 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a0e      	ldr	r2, [pc, #56]	@ (8003aa0 <TIM_Base_SetConfig+0xfc>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d103      	bne.n	8003a74 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	691a      	ldr	r2, [r3, #16]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d105      	bne.n	8003a92 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	f023 0201 	bic.w	r2, r3, #1
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	611a      	str	r2, [r3, #16]
  }
}
 8003a92:	bf00      	nop
 8003a94:	3714      	adds	r7, #20
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	40010000 	.word	0x40010000
 8003aa4:	40000400 	.word	0x40000400
 8003aa8:	40000800 	.word	0x40000800
 8003aac:	40000c00 	.word	0x40000c00
 8003ab0:	40014000 	.word	0x40014000
 8003ab4:	40014400 	.word	0x40014400
 8003ab8:	40014800 	.word	0x40014800

08003abc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e042      	b.n	8003b7c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d106      	bne.n	8003b10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7fd fb68 	bl	80011e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2224      	movs	r2, #36	@ 0x24
 8003b14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68da      	ldr	r2, [r3, #12]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 f973 	bl	8003e14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	691a      	ldr	r2, [r3, #16]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	695a      	ldr	r2, [r3, #20]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68da      	ldr	r2, [r3, #12]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2220      	movs	r2, #32
 8003b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b08a      	sub	sp, #40	@ 0x28
 8003b88:	af02      	add	r7, sp, #8
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	603b      	str	r3, [r7, #0]
 8003b90:	4613      	mov	r3, r2
 8003b92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b94:	2300      	movs	r3, #0
 8003b96:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b20      	cmp	r3, #32
 8003ba2:	d175      	bne.n	8003c90 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d002      	beq.n	8003bb0 <HAL_UART_Transmit+0x2c>
 8003baa:	88fb      	ldrh	r3, [r7, #6]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d101      	bne.n	8003bb4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e06e      	b.n	8003c92 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2221      	movs	r2, #33	@ 0x21
 8003bbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bc2:	f7fd fd2d 	bl	8001620 <HAL_GetTick>
 8003bc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	88fa      	ldrh	r2, [r7, #6]
 8003bcc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	88fa      	ldrh	r2, [r7, #6]
 8003bd2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bdc:	d108      	bne.n	8003bf0 <HAL_UART_Transmit+0x6c>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d104      	bne.n	8003bf0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003be6:	2300      	movs	r3, #0
 8003be8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	61bb      	str	r3, [r7, #24]
 8003bee:	e003      	b.n	8003bf8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003bf8:	e02e      	b.n	8003c58 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	2200      	movs	r2, #0
 8003c02:	2180      	movs	r1, #128	@ 0x80
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f000 f848 	bl	8003c9a <UART_WaitOnFlagUntilTimeout>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d005      	beq.n	8003c1c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2220      	movs	r2, #32
 8003c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e03a      	b.n	8003c92 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10b      	bne.n	8003c3a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	881b      	ldrh	r3, [r3, #0]
 8003c26:	461a      	mov	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	3302      	adds	r3, #2
 8003c36:	61bb      	str	r3, [r7, #24]
 8003c38:	e007      	b.n	8003c4a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	781a      	ldrb	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	3301      	adds	r3, #1
 8003c48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	3b01      	subs	r3, #1
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1cb      	bne.n	8003bfa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	9300      	str	r3, [sp, #0]
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	2140      	movs	r1, #64	@ 0x40
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 f814 	bl	8003c9a <UART_WaitOnFlagUntilTimeout>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d005      	beq.n	8003c84 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e006      	b.n	8003c92 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2220      	movs	r2, #32
 8003c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	e000      	b.n	8003c92 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003c90:	2302      	movs	r3, #2
  }
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3720      	adds	r7, #32
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b086      	sub	sp, #24
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	60f8      	str	r0, [r7, #12]
 8003ca2:	60b9      	str	r1, [r7, #8]
 8003ca4:	603b      	str	r3, [r7, #0]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003caa:	e03b      	b.n	8003d24 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cac:	6a3b      	ldr	r3, [r7, #32]
 8003cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb2:	d037      	beq.n	8003d24 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cb4:	f7fd fcb4 	bl	8001620 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	6a3a      	ldr	r2, [r7, #32]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d302      	bcc.n	8003cca <UART_WaitOnFlagUntilTimeout+0x30>
 8003cc4:	6a3b      	ldr	r3, [r7, #32]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e03a      	b.n	8003d44 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d023      	beq.n	8003d24 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	2b80      	cmp	r3, #128	@ 0x80
 8003ce0:	d020      	beq.n	8003d24 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	2b40      	cmp	r3, #64	@ 0x40
 8003ce6:	d01d      	beq.n	8003d24 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0308 	and.w	r3, r3, #8
 8003cf2:	2b08      	cmp	r3, #8
 8003cf4:	d116      	bne.n	8003d24 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	617b      	str	r3, [r7, #20]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	617b      	str	r3, [r7, #20]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	617b      	str	r3, [r7, #20]
 8003d0a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f000 f81d 	bl	8003d4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2208      	movs	r2, #8
 8003d16:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e00f      	b.n	8003d44 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	bf0c      	ite	eq
 8003d34:	2301      	moveq	r3, #1
 8003d36:	2300      	movne	r3, #0
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	79fb      	ldrb	r3, [r7, #7]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d0b4      	beq.n	8003cac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3718      	adds	r7, #24
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b095      	sub	sp, #84	@ 0x54
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	330c      	adds	r3, #12
 8003d5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d5e:	e853 3f00 	ldrex	r3, [r3]
 8003d62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	330c      	adds	r3, #12
 8003d72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d74:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d7c:	e841 2300 	strex	r3, r2, [r1]
 8003d80:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1e5      	bne.n	8003d54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	3314      	adds	r3, #20
 8003d8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d90:	6a3b      	ldr	r3, [r7, #32]
 8003d92:	e853 3f00 	ldrex	r3, [r3]
 8003d96:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	f023 0301 	bic.w	r3, r3, #1
 8003d9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	3314      	adds	r3, #20
 8003da6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003da8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003daa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003dae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003db0:	e841 2300 	strex	r3, r2, [r1]
 8003db4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1e5      	bne.n	8003d88 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d119      	bne.n	8003df8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	330c      	adds	r3, #12
 8003dca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	e853 3f00 	ldrex	r3, [r3]
 8003dd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	f023 0310 	bic.w	r3, r3, #16
 8003dda:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	330c      	adds	r3, #12
 8003de2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003de4:	61ba      	str	r2, [r7, #24]
 8003de6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de8:	6979      	ldr	r1, [r7, #20]
 8003dea:	69ba      	ldr	r2, [r7, #24]
 8003dec:	e841 2300 	strex	r3, r2, [r1]
 8003df0:	613b      	str	r3, [r7, #16]
   return(result);
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1e5      	bne.n	8003dc4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003e06:	bf00      	nop
 8003e08:	3754      	adds	r7, #84	@ 0x54
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
	...

08003e14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e18:	b0c0      	sub	sp, #256	@ 0x100
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e30:	68d9      	ldr	r1, [r3, #12]
 8003e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	ea40 0301 	orr.w	r3, r0, r1
 8003e3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	431a      	orrs	r2, r3
 8003e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e58:	69db      	ldr	r3, [r3, #28]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003e6c:	f021 010c 	bic.w	r1, r1, #12
 8003e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003e7a:	430b      	orrs	r3, r1
 8003e7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e8e:	6999      	ldr	r1, [r3, #24]
 8003e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	ea40 0301 	orr.w	r3, r0, r1
 8003e9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	4b8f      	ldr	r3, [pc, #572]	@ (80040e0 <UART_SetConfig+0x2cc>)
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d005      	beq.n	8003eb4 <UART_SetConfig+0xa0>
 8003ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	4b8d      	ldr	r3, [pc, #564]	@ (80040e4 <UART_SetConfig+0x2d0>)
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d104      	bne.n	8003ebe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003eb4:	f7fe fb18 	bl	80024e8 <HAL_RCC_GetPCLK2Freq>
 8003eb8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003ebc:	e003      	b.n	8003ec6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ebe:	f7fe faff 	bl	80024c0 <HAL_RCC_GetPCLK1Freq>
 8003ec2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ed0:	f040 810c 	bne.w	80040ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ed4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003ede:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003ee2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003ee6:	4622      	mov	r2, r4
 8003ee8:	462b      	mov	r3, r5
 8003eea:	1891      	adds	r1, r2, r2
 8003eec:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003eee:	415b      	adcs	r3, r3
 8003ef0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ef2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003ef6:	4621      	mov	r1, r4
 8003ef8:	eb12 0801 	adds.w	r8, r2, r1
 8003efc:	4629      	mov	r1, r5
 8003efe:	eb43 0901 	adc.w	r9, r3, r1
 8003f02:	f04f 0200 	mov.w	r2, #0
 8003f06:	f04f 0300 	mov.w	r3, #0
 8003f0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f16:	4690      	mov	r8, r2
 8003f18:	4699      	mov	r9, r3
 8003f1a:	4623      	mov	r3, r4
 8003f1c:	eb18 0303 	adds.w	r3, r8, r3
 8003f20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003f24:	462b      	mov	r3, r5
 8003f26:	eb49 0303 	adc.w	r3, r9, r3
 8003f2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003f3a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003f3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003f42:	460b      	mov	r3, r1
 8003f44:	18db      	adds	r3, r3, r3
 8003f46:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f48:	4613      	mov	r3, r2
 8003f4a:	eb42 0303 	adc.w	r3, r2, r3
 8003f4e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003f54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003f58:	f7fc f99a 	bl	8000290 <__aeabi_uldivmod>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	460b      	mov	r3, r1
 8003f60:	4b61      	ldr	r3, [pc, #388]	@ (80040e8 <UART_SetConfig+0x2d4>)
 8003f62:	fba3 2302 	umull	r2, r3, r3, r2
 8003f66:	095b      	lsrs	r3, r3, #5
 8003f68:	011c      	lsls	r4, r3, #4
 8003f6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f74:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003f78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003f7c:	4642      	mov	r2, r8
 8003f7e:	464b      	mov	r3, r9
 8003f80:	1891      	adds	r1, r2, r2
 8003f82:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003f84:	415b      	adcs	r3, r3
 8003f86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003f8c:	4641      	mov	r1, r8
 8003f8e:	eb12 0a01 	adds.w	sl, r2, r1
 8003f92:	4649      	mov	r1, r9
 8003f94:	eb43 0b01 	adc.w	fp, r3, r1
 8003f98:	f04f 0200 	mov.w	r2, #0
 8003f9c:	f04f 0300 	mov.w	r3, #0
 8003fa0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003fa4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003fa8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fac:	4692      	mov	sl, r2
 8003fae:	469b      	mov	fp, r3
 8003fb0:	4643      	mov	r3, r8
 8003fb2:	eb1a 0303 	adds.w	r3, sl, r3
 8003fb6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003fba:	464b      	mov	r3, r9
 8003fbc:	eb4b 0303 	adc.w	r3, fp, r3
 8003fc0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003fd0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003fd4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003fd8:	460b      	mov	r3, r1
 8003fda:	18db      	adds	r3, r3, r3
 8003fdc:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fde:	4613      	mov	r3, r2
 8003fe0:	eb42 0303 	adc.w	r3, r2, r3
 8003fe4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fe6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003fea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003fee:	f7fc f94f 	bl	8000290 <__aeabi_uldivmod>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	4611      	mov	r1, r2
 8003ff8:	4b3b      	ldr	r3, [pc, #236]	@ (80040e8 <UART_SetConfig+0x2d4>)
 8003ffa:	fba3 2301 	umull	r2, r3, r3, r1
 8003ffe:	095b      	lsrs	r3, r3, #5
 8004000:	2264      	movs	r2, #100	@ 0x64
 8004002:	fb02 f303 	mul.w	r3, r2, r3
 8004006:	1acb      	subs	r3, r1, r3
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800400e:	4b36      	ldr	r3, [pc, #216]	@ (80040e8 <UART_SetConfig+0x2d4>)
 8004010:	fba3 2302 	umull	r2, r3, r3, r2
 8004014:	095b      	lsrs	r3, r3, #5
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800401c:	441c      	add	r4, r3
 800401e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004022:	2200      	movs	r2, #0
 8004024:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004028:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800402c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004030:	4642      	mov	r2, r8
 8004032:	464b      	mov	r3, r9
 8004034:	1891      	adds	r1, r2, r2
 8004036:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004038:	415b      	adcs	r3, r3
 800403a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800403c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004040:	4641      	mov	r1, r8
 8004042:	1851      	adds	r1, r2, r1
 8004044:	6339      	str	r1, [r7, #48]	@ 0x30
 8004046:	4649      	mov	r1, r9
 8004048:	414b      	adcs	r3, r1
 800404a:	637b      	str	r3, [r7, #52]	@ 0x34
 800404c:	f04f 0200 	mov.w	r2, #0
 8004050:	f04f 0300 	mov.w	r3, #0
 8004054:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004058:	4659      	mov	r1, fp
 800405a:	00cb      	lsls	r3, r1, #3
 800405c:	4651      	mov	r1, sl
 800405e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004062:	4651      	mov	r1, sl
 8004064:	00ca      	lsls	r2, r1, #3
 8004066:	4610      	mov	r0, r2
 8004068:	4619      	mov	r1, r3
 800406a:	4603      	mov	r3, r0
 800406c:	4642      	mov	r2, r8
 800406e:	189b      	adds	r3, r3, r2
 8004070:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004074:	464b      	mov	r3, r9
 8004076:	460a      	mov	r2, r1
 8004078:	eb42 0303 	adc.w	r3, r2, r3
 800407c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800408c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004090:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004094:	460b      	mov	r3, r1
 8004096:	18db      	adds	r3, r3, r3
 8004098:	62bb      	str	r3, [r7, #40]	@ 0x28
 800409a:	4613      	mov	r3, r2
 800409c:	eb42 0303 	adc.w	r3, r2, r3
 80040a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80040a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80040aa:	f7fc f8f1 	bl	8000290 <__aeabi_uldivmod>
 80040ae:	4602      	mov	r2, r0
 80040b0:	460b      	mov	r3, r1
 80040b2:	4b0d      	ldr	r3, [pc, #52]	@ (80040e8 <UART_SetConfig+0x2d4>)
 80040b4:	fba3 1302 	umull	r1, r3, r3, r2
 80040b8:	095b      	lsrs	r3, r3, #5
 80040ba:	2164      	movs	r1, #100	@ 0x64
 80040bc:	fb01 f303 	mul.w	r3, r1, r3
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	00db      	lsls	r3, r3, #3
 80040c4:	3332      	adds	r3, #50	@ 0x32
 80040c6:	4a08      	ldr	r2, [pc, #32]	@ (80040e8 <UART_SetConfig+0x2d4>)
 80040c8:	fba2 2303 	umull	r2, r3, r2, r3
 80040cc:	095b      	lsrs	r3, r3, #5
 80040ce:	f003 0207 	and.w	r2, r3, #7
 80040d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4422      	add	r2, r4
 80040da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80040dc:	e106      	b.n	80042ec <UART_SetConfig+0x4d8>
 80040de:	bf00      	nop
 80040e0:	40011000 	.word	0x40011000
 80040e4:	40011400 	.word	0x40011400
 80040e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040f0:	2200      	movs	r2, #0
 80040f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80040f6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80040fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80040fe:	4642      	mov	r2, r8
 8004100:	464b      	mov	r3, r9
 8004102:	1891      	adds	r1, r2, r2
 8004104:	6239      	str	r1, [r7, #32]
 8004106:	415b      	adcs	r3, r3
 8004108:	627b      	str	r3, [r7, #36]	@ 0x24
 800410a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800410e:	4641      	mov	r1, r8
 8004110:	1854      	adds	r4, r2, r1
 8004112:	4649      	mov	r1, r9
 8004114:	eb43 0501 	adc.w	r5, r3, r1
 8004118:	f04f 0200 	mov.w	r2, #0
 800411c:	f04f 0300 	mov.w	r3, #0
 8004120:	00eb      	lsls	r3, r5, #3
 8004122:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004126:	00e2      	lsls	r2, r4, #3
 8004128:	4614      	mov	r4, r2
 800412a:	461d      	mov	r5, r3
 800412c:	4643      	mov	r3, r8
 800412e:	18e3      	adds	r3, r4, r3
 8004130:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004134:	464b      	mov	r3, r9
 8004136:	eb45 0303 	adc.w	r3, r5, r3
 800413a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800413e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800414a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800414e:	f04f 0200 	mov.w	r2, #0
 8004152:	f04f 0300 	mov.w	r3, #0
 8004156:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800415a:	4629      	mov	r1, r5
 800415c:	008b      	lsls	r3, r1, #2
 800415e:	4621      	mov	r1, r4
 8004160:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004164:	4621      	mov	r1, r4
 8004166:	008a      	lsls	r2, r1, #2
 8004168:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800416c:	f7fc f890 	bl	8000290 <__aeabi_uldivmod>
 8004170:	4602      	mov	r2, r0
 8004172:	460b      	mov	r3, r1
 8004174:	4b60      	ldr	r3, [pc, #384]	@ (80042f8 <UART_SetConfig+0x4e4>)
 8004176:	fba3 2302 	umull	r2, r3, r3, r2
 800417a:	095b      	lsrs	r3, r3, #5
 800417c:	011c      	lsls	r4, r3, #4
 800417e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004182:	2200      	movs	r2, #0
 8004184:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004188:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800418c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004190:	4642      	mov	r2, r8
 8004192:	464b      	mov	r3, r9
 8004194:	1891      	adds	r1, r2, r2
 8004196:	61b9      	str	r1, [r7, #24]
 8004198:	415b      	adcs	r3, r3
 800419a:	61fb      	str	r3, [r7, #28]
 800419c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041a0:	4641      	mov	r1, r8
 80041a2:	1851      	adds	r1, r2, r1
 80041a4:	6139      	str	r1, [r7, #16]
 80041a6:	4649      	mov	r1, r9
 80041a8:	414b      	adcs	r3, r1
 80041aa:	617b      	str	r3, [r7, #20]
 80041ac:	f04f 0200 	mov.w	r2, #0
 80041b0:	f04f 0300 	mov.w	r3, #0
 80041b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041b8:	4659      	mov	r1, fp
 80041ba:	00cb      	lsls	r3, r1, #3
 80041bc:	4651      	mov	r1, sl
 80041be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041c2:	4651      	mov	r1, sl
 80041c4:	00ca      	lsls	r2, r1, #3
 80041c6:	4610      	mov	r0, r2
 80041c8:	4619      	mov	r1, r3
 80041ca:	4603      	mov	r3, r0
 80041cc:	4642      	mov	r2, r8
 80041ce:	189b      	adds	r3, r3, r2
 80041d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80041d4:	464b      	mov	r3, r9
 80041d6:	460a      	mov	r2, r1
 80041d8:	eb42 0303 	adc.w	r3, r2, r3
 80041dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80041e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80041ec:	f04f 0200 	mov.w	r2, #0
 80041f0:	f04f 0300 	mov.w	r3, #0
 80041f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80041f8:	4649      	mov	r1, r9
 80041fa:	008b      	lsls	r3, r1, #2
 80041fc:	4641      	mov	r1, r8
 80041fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004202:	4641      	mov	r1, r8
 8004204:	008a      	lsls	r2, r1, #2
 8004206:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800420a:	f7fc f841 	bl	8000290 <__aeabi_uldivmod>
 800420e:	4602      	mov	r2, r0
 8004210:	460b      	mov	r3, r1
 8004212:	4611      	mov	r1, r2
 8004214:	4b38      	ldr	r3, [pc, #224]	@ (80042f8 <UART_SetConfig+0x4e4>)
 8004216:	fba3 2301 	umull	r2, r3, r3, r1
 800421a:	095b      	lsrs	r3, r3, #5
 800421c:	2264      	movs	r2, #100	@ 0x64
 800421e:	fb02 f303 	mul.w	r3, r2, r3
 8004222:	1acb      	subs	r3, r1, r3
 8004224:	011b      	lsls	r3, r3, #4
 8004226:	3332      	adds	r3, #50	@ 0x32
 8004228:	4a33      	ldr	r2, [pc, #204]	@ (80042f8 <UART_SetConfig+0x4e4>)
 800422a:	fba2 2303 	umull	r2, r3, r2, r3
 800422e:	095b      	lsrs	r3, r3, #5
 8004230:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004234:	441c      	add	r4, r3
 8004236:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800423a:	2200      	movs	r2, #0
 800423c:	673b      	str	r3, [r7, #112]	@ 0x70
 800423e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004240:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004244:	4642      	mov	r2, r8
 8004246:	464b      	mov	r3, r9
 8004248:	1891      	adds	r1, r2, r2
 800424a:	60b9      	str	r1, [r7, #8]
 800424c:	415b      	adcs	r3, r3
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004254:	4641      	mov	r1, r8
 8004256:	1851      	adds	r1, r2, r1
 8004258:	6039      	str	r1, [r7, #0]
 800425a:	4649      	mov	r1, r9
 800425c:	414b      	adcs	r3, r1
 800425e:	607b      	str	r3, [r7, #4]
 8004260:	f04f 0200 	mov.w	r2, #0
 8004264:	f04f 0300 	mov.w	r3, #0
 8004268:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800426c:	4659      	mov	r1, fp
 800426e:	00cb      	lsls	r3, r1, #3
 8004270:	4651      	mov	r1, sl
 8004272:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004276:	4651      	mov	r1, sl
 8004278:	00ca      	lsls	r2, r1, #3
 800427a:	4610      	mov	r0, r2
 800427c:	4619      	mov	r1, r3
 800427e:	4603      	mov	r3, r0
 8004280:	4642      	mov	r2, r8
 8004282:	189b      	adds	r3, r3, r2
 8004284:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004286:	464b      	mov	r3, r9
 8004288:	460a      	mov	r2, r1
 800428a:	eb42 0303 	adc.w	r3, r2, r3
 800428e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	663b      	str	r3, [r7, #96]	@ 0x60
 800429a:	667a      	str	r2, [r7, #100]	@ 0x64
 800429c:	f04f 0200 	mov.w	r2, #0
 80042a0:	f04f 0300 	mov.w	r3, #0
 80042a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80042a8:	4649      	mov	r1, r9
 80042aa:	008b      	lsls	r3, r1, #2
 80042ac:	4641      	mov	r1, r8
 80042ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042b2:	4641      	mov	r1, r8
 80042b4:	008a      	lsls	r2, r1, #2
 80042b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80042ba:	f7fb ffe9 	bl	8000290 <__aeabi_uldivmod>
 80042be:	4602      	mov	r2, r0
 80042c0:	460b      	mov	r3, r1
 80042c2:	4b0d      	ldr	r3, [pc, #52]	@ (80042f8 <UART_SetConfig+0x4e4>)
 80042c4:	fba3 1302 	umull	r1, r3, r3, r2
 80042c8:	095b      	lsrs	r3, r3, #5
 80042ca:	2164      	movs	r1, #100	@ 0x64
 80042cc:	fb01 f303 	mul.w	r3, r1, r3
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	011b      	lsls	r3, r3, #4
 80042d4:	3332      	adds	r3, #50	@ 0x32
 80042d6:	4a08      	ldr	r2, [pc, #32]	@ (80042f8 <UART_SetConfig+0x4e4>)
 80042d8:	fba2 2303 	umull	r2, r3, r2, r3
 80042dc:	095b      	lsrs	r3, r3, #5
 80042de:	f003 020f 	and.w	r2, r3, #15
 80042e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4422      	add	r2, r4
 80042ea:	609a      	str	r2, [r3, #8]
}
 80042ec:	bf00      	nop
 80042ee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80042f2:	46bd      	mov	sp, r7
 80042f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042f8:	51eb851f 	.word	0x51eb851f

080042fc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	4603      	mov	r3, r0
 8004304:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004306:	2300      	movs	r3, #0
 8004308:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800430a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800430e:	2b84      	cmp	r3, #132	@ 0x84
 8004310:	d005      	beq.n	800431e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004312:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	4413      	add	r3, r2
 800431a:	3303      	adds	r3, #3
 800431c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800431e:	68fb      	ldr	r3, [r7, #12]
}
 8004320:	4618      	mov	r0, r3
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004332:	f3ef 8305 	mrs	r3, IPSR
 8004336:	607b      	str	r3, [r7, #4]
  return(result);
 8004338:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800433a:	2b00      	cmp	r3, #0
 800433c:	bf14      	ite	ne
 800433e:	2301      	movne	r3, #1
 8004340:	2300      	moveq	r3, #0
 8004342:	b2db      	uxtb	r3, r3
}
 8004344:	4618      	mov	r0, r3
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004354:	f001 fcba 	bl	8005ccc <vTaskStartScheduler>
  
  return osOK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	bd80      	pop	{r7, pc}

0800435e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800435e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004360:	b089      	sub	sp, #36	@ 0x24
 8004362:	af04      	add	r7, sp, #16
 8004364:	6078      	str	r0, [r7, #4]
 8004366:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d020      	beq.n	80043b2 <osThreadCreate+0x54>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d01c      	beq.n	80043b2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685c      	ldr	r4, [r3, #4]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	691e      	ldr	r6, [r3, #16]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff ffb6 	bl	80042fc <makeFreeRtosPriority>
 8004390:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800439a:	9202      	str	r2, [sp, #8]
 800439c:	9301      	str	r3, [sp, #4]
 800439e:	9100      	str	r1, [sp, #0]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	4632      	mov	r2, r6
 80043a4:	4629      	mov	r1, r5
 80043a6:	4620      	mov	r0, r4
 80043a8:	f001 fac2 	bl	8005930 <xTaskCreateStatic>
 80043ac:	4603      	mov	r3, r0
 80043ae:	60fb      	str	r3, [r7, #12]
 80043b0:	e01c      	b.n	80043ec <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685c      	ldr	r4, [r3, #4]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80043be:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7ff ff98 	bl	80042fc <makeFreeRtosPriority>
 80043cc:	4602      	mov	r2, r0
 80043ce:	f107 030c 	add.w	r3, r7, #12
 80043d2:	9301      	str	r3, [sp, #4]
 80043d4:	9200      	str	r2, [sp, #0]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	4632      	mov	r2, r6
 80043da:	4629      	mov	r1, r5
 80043dc:	4620      	mov	r0, r4
 80043de:	f001 fb07 	bl	80059f0 <xTaskCreate>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d001      	beq.n	80043ec <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80043e8:	2300      	movs	r3, #0
 80043ea:	e000      	b.n	80043ee <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80043ec:	68fb      	ldr	r3, [r7, #12]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3714      	adds	r7, #20
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080043f8 <osThreadYield>:
* @brief  Pass control to next thread that is in state \b READY.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadYield shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadYield (void)
{
 80043f8:	b480      	push	{r7}
 80043fa:	af00      	add	r7, sp, #0
  taskYIELD();
 80043fc:	4b06      	ldr	r3, [pc, #24]	@ (8004418 <osThreadYield+0x20>)
 80043fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004402:	601a      	str	r2, [r3, #0]
 8004404:	f3bf 8f4f 	dsb	sy
 8004408:	f3bf 8f6f 	isb	sy
  
  return osOK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr
 8004418:	e000ed04 	.word	0xe000ed04

0800441c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <osDelay+0x16>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	e000      	b.n	8004434 <osDelay+0x18>
 8004432:	2301      	movs	r3, #1
 8004434:	4618      	mov	r0, r3
 8004436:	f001 fc13 	bl	8005c60 <vTaskDelay>
  
  return osOK;
 800443a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800443c:	4618      	mov	r0, r3
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	3303      	adds	r3, #3
 8004452:	f023 0303 	bic.w	r3, r3, #3
 8004456:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8004458:	2014      	movs	r0, #20
 800445a:	f003 f817 	bl	800748c <pvPortMalloc>
 800445e:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d046      	beq.n	80044f4 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	2200      	movs	r2, #0
 8004478:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4618      	mov	r0, r3
 8004480:	f003 f804 	bl	800748c <pvPortMalloc>
 8004484:	4602      	mov	r2, r0
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d02b      	beq.n	80044ea <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	fb02 f303 	mul.w	r3, r2, r3
 800449c:	4618      	mov	r0, r3
 800449e:	f002 fff5 	bl	800748c <pvPortMalloc>
 80044a2:	4602      	mov	r2, r0
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d011      	beq.n	80044d4 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 80044b0:	2300      	movs	r3, #0
 80044b2:	613b      	str	r3, [r7, #16]
 80044b4:	e008      	b.n	80044c8 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	685a      	ldr	r2, [r3, #4]
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	4413      	add	r3, r2
 80044be:	2200      	movs	r2, #0
 80044c0:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	3301      	adds	r3, #1
 80044c6:	613b      	str	r3, [r7, #16]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d3f1      	bcc.n	80044b6 <osPoolCreate+0x72>
 80044d2:	e00f      	b.n	80044f4 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	4618      	mov	r0, r3
 80044da:	f003 f8a5 	bl	8007628 <vPortFree>
        vPortFree(thePool);
 80044de:	6978      	ldr	r0, [r7, #20]
 80044e0:	f003 f8a2 	bl	8007628 <vPortFree>
        thePool = NULL;
 80044e4:	2300      	movs	r3, #0
 80044e6:	617b      	str	r3, [r7, #20]
 80044e8:	e004      	b.n	80044f4 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 80044ea:	6978      	ldr	r0, [r7, #20]
 80044ec:	f003 f89c 	bl	8007628 <vPortFree>
      thePool = NULL;
 80044f0:	2300      	movs	r3, #0
 80044f2:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 80044f4:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3718      	adds	r7, #24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b08a      	sub	sp, #40	@ 0x28
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8004506:	2300      	movs	r3, #0
 8004508:	627b      	str	r3, [r7, #36]	@ 0x24
  void *p = NULL;
 800450a:	2300      	movs	r3, #0
 800450c:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 800450e:	f7ff ff0d 	bl	800432c <inHandlerMode>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00e      	beq.n	8004536 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004518:	f3ef 8211 	mrs	r2, BASEPRI
 800451c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004520:	f383 8811 	msr	BASEPRI, r3
 8004524:	f3bf 8f6f 	isb	sy
 8004528:	f3bf 8f4f 	dsb	sy
 800452c:	617a      	str	r2, [r7, #20]
 800452e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004530:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8004532:	627b      	str	r3, [r7, #36]	@ 0x24
 8004534:	e001      	b.n	800453a <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8004536:	f002 fe87 	bl	8007248 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 800453a:	2300      	movs	r3, #0
 800453c:	61fb      	str	r3, [r7, #28]
 800453e:	e029      	b.n	8004594 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	691a      	ldr	r2, [r3, #16]
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	4413      	add	r3, r2
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	6892      	ldr	r2, [r2, #8]
 800454c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004550:	fb01 f202 	mul.w	r2, r1, r2
 8004554:	1a9b      	subs	r3, r3, r2
 8004556:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	4413      	add	r3, r2
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d113      	bne.n	800458e <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	4413      	add	r3, r2
 800456e:	2201      	movs	r2, #1
 8004570:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4619      	mov	r1, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	69ba      	ldr	r2, [r7, #24]
 800457e:	fb02 f303 	mul.w	r3, r2, r3
 8004582:	440b      	add	r3, r1
 8004584:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	69ba      	ldr	r2, [r7, #24]
 800458a:	611a      	str	r2, [r3, #16]
      break;
 800458c:	e007      	b.n	800459e <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	3301      	adds	r3, #1
 8004592:	61fb      	str	r3, [r7, #28]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	69fa      	ldr	r2, [r7, #28]
 800459a:	429a      	cmp	r2, r3
 800459c:	d3d0      	bcc.n	8004540 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 800459e:	f7ff fec5 	bl	800432c <inHandlerMode>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d005      	beq.n	80045b4 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 80045a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045aa:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80045b2:	e001      	b.n	80045b8 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 80045b4:	f002 fe7a 	bl	80072ac <vPortExitCritical>
  }
  
  return p;
 80045b8:	6a3b      	ldr	r3, [r7, #32]
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3728      	adds	r7, #40	@ 0x28
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 80045c2:	b480      	push	{r7}
 80045c4:	b085      	sub	sp, #20
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
 80045ca:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <osPoolFree+0x14>
    return osErrorParameter;
 80045d2:	2380      	movs	r3, #128	@ 0x80
 80045d4:	e030      	b.n	8004638 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <osPoolFree+0x1e>
    return osErrorParameter;
 80045dc:	2380      	movs	r3, #128	@ 0x80
 80045de:	e02b      	b.n	8004638 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d201      	bcs.n	80045ee <osPoolFree+0x2c>
    return osErrorParameter;
 80045ea:	2380      	movs	r3, #128	@ 0x80
 80045ec:	e024      	b.n	8004638 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	6812      	ldr	r2, [r2, #0]
 80045f4:	1a9b      	subs	r3, r3, r2
 80045f6:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68da      	ldr	r2, [r3, #12]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8004602:	fb01 f202 	mul.w	r2, r1, r2
 8004606:	1a9b      	subs	r3, r3, r2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d001      	beq.n	8004610 <osPoolFree+0x4e>
    return osErrorParameter;
 800460c:	2380      	movs	r3, #128	@ 0x80
 800460e:	e013      	b.n	8004638 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	fbb2 f3f3 	udiv	r3, r2, r3
 800461a:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	429a      	cmp	r2, r3
 8004624:	d301      	bcc.n	800462a <osPoolFree+0x68>
    return osErrorParameter;
 8004626:	2380      	movs	r3, #128	@ 0x80
 8004628:	e006      	b.n	8004638 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	4413      	add	r3, r2
 8004632:	2200      	movs	r2, #0
 8004634:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3714      	adds	r7, #20
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8004644:	b590      	push	{r4, r7, lr}
 8004646:	b087      	sub	sp, #28
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	60fb      	str	r3, [r7, #12]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	613b      	str	r3, [r7, #16]
 800465a:	2300      	movs	r3, #0
 800465c:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	689c      	ldr	r4, [r3, #8]
 8004662:	200c      	movs	r0, #12
 8004664:	f002 ff12 	bl	800748c <pvPortMalloc>
 8004668:	4603      	mov	r3, r0
 800466a:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <osMailCreate+0x36>
    return NULL;
 8004676:	2300      	movs	r3, #0
 8004678:	e038      	b.n	80046ec <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6818      	ldr	r0, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	681c      	ldr	r4, [r3, #0]
 800468e:	2200      	movs	r2, #0
 8004690:	2104      	movs	r1, #4
 8004692:	f000 fc5c 	bl	8004f4e <xQueueGenericCreate>
 8004696:	4603      	mov	r3, r0
 8004698:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d107      	bne.n	80046b6 <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f002 ffbb 	bl	8007628 <vPortFree>
    return NULL;
 80046b2:	2300      	movs	r3, #0
 80046b4:	e01a      	b.n	80046ec <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	681c      	ldr	r4, [r3, #0]
 80046bc:	f107 030c 	add.w	r3, r7, #12
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7ff febf 	bl	8004444 <osPoolCreate>
 80046c6:	4603      	mov	r3, r0
 80046c8:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d107      	bne.n	80046e6 <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4618      	mov	r0, r3
 80046de:	f002 ffa3 	bl	8007628 <vPortFree>
    return NULL;
 80046e2:	2300      	movs	r3, #0
 80046e4:	e002      	b.n	80046ec <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	371c      	adds	r7, #28
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd90      	pop	{r4, r7, pc}

080046f4 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <osMailAlloc+0x14>
    return NULL;
 8004704:	2300      	movs	r3, #0
 8004706:	e006      	b.n	8004716 <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	4618      	mov	r0, r3
 800470e:	f7ff fef6 	bl	80044fe <osPoolAlloc>
 8004712:	60f8      	str	r0, [r7, #12]
  
  return p;
 8004714:	68fb      	ldr	r3, [r7, #12]
}
 8004716:	4618      	mov	r0, r3
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
	...

08004720 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d101      	bne.n	8004734 <osMailPut+0x14>
    return osErrorParameter;
 8004730:	2380      	movs	r3, #128	@ 0x80
 8004732:	e02c      	b.n	800478e <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8004734:	2300      	movs	r3, #0
 8004736:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8004738:	f7ff fdf8 	bl	800432c <inHandlerMode>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d018      	beq.n	8004774 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6858      	ldr	r0, [r3, #4]
 8004746:	f107 020c 	add.w	r2, r7, #12
 800474a:	4639      	mov	r1, r7
 800474c:	2300      	movs	r3, #0
 800474e:	f000 fd5b 	bl	8005208 <xQueueGenericSendFromISR>
 8004752:	4603      	mov	r3, r0
 8004754:	2b01      	cmp	r3, #1
 8004756:	d001      	beq.n	800475c <osMailPut+0x3c>
      return osErrorOS;
 8004758:	23ff      	movs	r3, #255	@ 0xff
 800475a:	e018      	b.n	800478e <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d014      	beq.n	800478c <osMailPut+0x6c>
 8004762:	4b0d      	ldr	r3, [pc, #52]	@ (8004798 <osMailPut+0x78>)
 8004764:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	f3bf 8f6f 	isb	sy
 8004772:	e00b      	b.n	800478c <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6858      	ldr	r0, [r3, #4]
 8004778:	4639      	mov	r1, r7
 800477a:	2300      	movs	r3, #0
 800477c:	2200      	movs	r2, #0
 800477e:	f000 fc41 	bl	8005004 <xQueueGenericSend>
 8004782:	4603      	mov	r3, r0
 8004784:	2b01      	cmp	r3, #1
 8004786:	d001      	beq.n	800478c <osMailPut+0x6c>
      return osErrorOS;
 8004788:	23ff      	movs	r3, #255	@ 0xff
 800478a:	e000      	b.n	800478e <osMailPut+0x6e>
    }
  }
  
  return osOK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	e000ed04 	.word	0xe000ed04

0800479c <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 800479c:	b590      	push	{r4, r7, lr}
 800479e:	b08b      	sub	sp, #44	@ 0x2c
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10a      	bne.n	80047c8 <osMailGet+0x2c>
    event.status = osErrorParameter;
 80047b2:	2380      	movs	r3, #128	@ 0x80
 80047b4:	617b      	str	r3, [r7, #20]
    return event;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	461c      	mov	r4, r3
 80047ba:	f107 0314 	add.w	r3, r7, #20
 80047be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80047c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80047c6:	e056      	b.n	8004876 <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80047c8:	2300      	movs	r3, #0
 80047ca:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80047cc:	2300      	movs	r3, #0
 80047ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d6:	d103      	bne.n	80047e0 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 80047d8:	f04f 33ff 	mov.w	r3, #4294967295
 80047dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80047de:	e009      	b.n	80047f4 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d006      	beq.n	80047f4 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 80047ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d101      	bne.n	80047f4 <osMailGet+0x58>
      ticks = 1;
 80047f0:	2301      	movs	r3, #1
 80047f2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 80047f4:	f7ff fd9a 	bl	800432c <inHandlerMode>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d01d      	beq.n	800483a <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	6858      	ldr	r0, [r3, #4]
 8004802:	f107 0220 	add.w	r2, r7, #32
 8004806:	f107 0314 	add.w	r3, r7, #20
 800480a:	3304      	adds	r3, #4
 800480c:	4619      	mov	r1, r3
 800480e:	f000 fe7b 	bl	8005508 <xQueueReceiveFromISR>
 8004812:	4603      	mov	r3, r0
 8004814:	2b01      	cmp	r3, #1
 8004816:	d102      	bne.n	800481e <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8004818:	2320      	movs	r3, #32
 800481a:	617b      	str	r3, [r7, #20]
 800481c:	e001      	b.n	8004822 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 800481e:	2300      	movs	r3, #0
 8004820:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004822:	6a3b      	ldr	r3, [r7, #32]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d01e      	beq.n	8004866 <osMailGet+0xca>
 8004828:	4b15      	ldr	r3, [pc, #84]	@ (8004880 <osMailGet+0xe4>)
 800482a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	f3bf 8f4f 	dsb	sy
 8004834:	f3bf 8f6f 	isb	sy
 8004838:	e015      	b.n	8004866 <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	6858      	ldr	r0, [r3, #4]
 800483e:	f107 0314 	add.w	r3, r7, #20
 8004842:	3304      	adds	r3, #4
 8004844:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004846:	4619      	mov	r1, r3
 8004848:	f000 fd7c 	bl	8005344 <xQueueReceive>
 800484c:	4603      	mov	r3, r0
 800484e:	2b01      	cmp	r3, #1
 8004850:	d102      	bne.n	8004858 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8004852:	2320      	movs	r3, #32
 8004854:	617b      	str	r3, [r7, #20]
 8004856:	e006      	b.n	8004866 <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <osMailGet+0xc6>
 800485e:	2300      	movs	r3, #0
 8004860:	e000      	b.n	8004864 <osMailGet+0xc8>
 8004862:	2340      	movs	r3, #64	@ 0x40
 8004864:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	461c      	mov	r4, r3
 800486a:	f107 0314 	add.w	r3, r7, #20
 800486e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004872:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	372c      	adds	r7, #44	@ 0x2c
 800487a:	46bd      	mov	sp, r7
 800487c:	bd90      	pop	{r4, r7, pc}
 800487e:	bf00      	nop
 8004880:	e000ed04 	.word	0xe000ed04

08004884 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <osMailFree+0x14>
    return osErrorParameter;
 8004894:	2380      	movs	r3, #128	@ 0x80
 8004896:	e006      	b.n	80048a6 <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	6839      	ldr	r1, [r7, #0]
 800489e:	4618      	mov	r0, r3
 80048a0:	f7ff fe8f 	bl	80045c2 <osPoolFree>
 80048a4:	4603      	mov	r3, r0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3708      	adds	r7, #8
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <osMessageAvailableSpace>:
* @brief  Get the available space in a message queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval available space in a message queue.
*/
uint32_t osMessageAvailableSpace(osMessageQId queue_id)  
{
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b082      	sub	sp, #8
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
  return uxQueueSpacesAvailable(queue_id);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 fea8 	bl	800560c <uxQueueSpacesAvailable>
 80048bc:	4603      	mov	r3, r0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b082      	sub	sp, #8
 80048ca:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80048cc:	201c      	movs	r0, #28
 80048ce:	f002 fddd 	bl	800748c <pvPortMalloc>
 80048d2:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00a      	beq.n	80048f0 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	3304      	adds	r3, #4
 80048e4:	4618      	mov	r0, r3
 80048e6:	f000 f996 	bl	8004c16 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80048f0:	687b      	ldr	r3, [r7, #4]
	}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3708      	adds	r7, #8
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
	...

080048fc <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b090      	sub	sp, #64	@ 0x40
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
 8004908:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800490e:	2300      	movs	r3, #0
 8004910:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8004912:	2300      	movs	r3, #0
 8004914:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10b      	bne.n	8004934 <xEventGroupWaitBits+0x38>
	__asm volatile
 800491c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004920:	f383 8811 	msr	BASEPRI, r3
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	f3bf 8f4f 	dsb	sy
 800492c:	623b      	str	r3, [r7, #32]
}
 800492e:	bf00      	nop
 8004930:	bf00      	nop
 8004932:	e7fd      	b.n	8004930 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800493a:	d30b      	bcc.n	8004954 <xEventGroupWaitBits+0x58>
	__asm volatile
 800493c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004940:	f383 8811 	msr	BASEPRI, r3
 8004944:	f3bf 8f6f 	isb	sy
 8004948:	f3bf 8f4f 	dsb	sy
 800494c:	61fb      	str	r3, [r7, #28]
}
 800494e:	bf00      	nop
 8004950:	bf00      	nop
 8004952:	e7fd      	b.n	8004950 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10b      	bne.n	8004972 <xEventGroupWaitBits+0x76>
	__asm volatile
 800495a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800495e:	f383 8811 	msr	BASEPRI, r3
 8004962:	f3bf 8f6f 	isb	sy
 8004966:	f3bf 8f4f 	dsb	sy
 800496a:	61bb      	str	r3, [r7, #24]
}
 800496c:	bf00      	nop
 800496e:	bf00      	nop
 8004970:	e7fd      	b.n	800496e <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004972:	f001 fe99 	bl	80066a8 <xTaskGetSchedulerState>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d102      	bne.n	8004982 <xEventGroupWaitBits+0x86>
 800497c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <xEventGroupWaitBits+0x8a>
 8004982:	2301      	movs	r3, #1
 8004984:	e000      	b.n	8004988 <xEventGroupWaitBits+0x8c>
 8004986:	2300      	movs	r3, #0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d10b      	bne.n	80049a4 <xEventGroupWaitBits+0xa8>
	__asm volatile
 800498c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004990:	f383 8811 	msr	BASEPRI, r3
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	617b      	str	r3, [r7, #20]
}
 800499e:	bf00      	nop
 80049a0:	bf00      	nop
 80049a2:	e7fd      	b.n	80049a0 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 80049a4:	f001 f9fa 	bl	8005d9c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80049a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80049ae:	683a      	ldr	r2, [r7, #0]
 80049b0:	68b9      	ldr	r1, [r7, #8]
 80049b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80049b4:	f000 f90d 	bl	8004bd2 <prvTestWaitCondition>
 80049b8:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 80049ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00e      	beq.n	80049de <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80049c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80049c4:	2300      	movs	r3, #0
 80049c6:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d028      	beq.n	8004a20 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80049ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	43db      	mvns	r3, r3
 80049d6:	401a      	ands	r2, r3
 80049d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049da:	601a      	str	r2, [r3, #0]
 80049dc:	e020      	b.n	8004a20 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80049de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d104      	bne.n	80049ee <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80049e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 80049e8:	2301      	movs	r3, #1
 80049ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80049ec:	e018      	b.n	8004a20 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d003      	beq.n	80049fc <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80049f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049fa:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8004a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a04:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004a08:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8004a0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a0c:	1d18      	adds	r0, r3, #4
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a12:	4313      	orrs	r3, r2
 8004a14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a16:	4619      	mov	r1, r3
 8004a18:	f001 fbb8 	bl	800618c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8004a20:	f001 f9ca 	bl	8005db8 <xTaskResumeAll>
 8004a24:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8004a26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d031      	beq.n	8004a90 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d107      	bne.n	8004a42 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 8004a32:	4b1a      	ldr	r3, [pc, #104]	@ (8004a9c <xEventGroupWaitBits+0x1a0>)
 8004a34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a38:	601a      	str	r2, [r3, #0]
 8004a3a:	f3bf 8f4f 	dsb	sy
 8004a3e:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8004a42:	f001 fed7 	bl	80067f4 <uxTaskResetEventItemValue>
 8004a46:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8004a48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d11a      	bne.n	8004a88 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 8004a52:	f002 fbf9 	bl	8007248 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8004a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8004a5c:	683a      	ldr	r2, [r7, #0]
 8004a5e:	68b9      	ldr	r1, [r7, #8]
 8004a60:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004a62:	f000 f8b6 	bl	8004bd2 <prvTestWaitCondition>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d009      	beq.n	8004a80 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d006      	beq.n	8004a80 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004a72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	43db      	mvns	r3, r3
 8004a7a:	401a      	ands	r2, r3
 8004a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a7e:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8004a80:	2301      	movs	r3, #1
 8004a82:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 8004a84:	f002 fc12 	bl	80072ac <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004a88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a8a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8004a90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3740      	adds	r7, #64	@ 0x40
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	e000ed04 	.word	0xe000ed04

08004aa0 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b08e      	sub	sp, #56	@ 0x38
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d10b      	bne.n	8004ad4 <xEventGroupSetBits+0x34>
	__asm volatile
 8004abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ac0:	f383 8811 	msr	BASEPRI, r3
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	f3bf 8f4f 	dsb	sy
 8004acc:	613b      	str	r3, [r7, #16]
}
 8004ace:	bf00      	nop
 8004ad0:	bf00      	nop
 8004ad2:	e7fd      	b.n	8004ad0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ada:	d30b      	bcc.n	8004af4 <xEventGroupSetBits+0x54>
	__asm volatile
 8004adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ae0:	f383 8811 	msr	BASEPRI, r3
 8004ae4:	f3bf 8f6f 	isb	sy
 8004ae8:	f3bf 8f4f 	dsb	sy
 8004aec:	60fb      	str	r3, [r7, #12]
}
 8004aee:	bf00      	nop
 8004af0:	bf00      	nop
 8004af2:	e7fd      	b.n	8004af0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8004af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af6:	3304      	adds	r3, #4
 8004af8:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004afc:	3308      	adds	r3, #8
 8004afe:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8004b00:	f001 f94c 	bl	8005d9c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8004b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8004b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	431a      	orrs	r2, r3
 8004b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b14:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8004b16:	e03c      	b.n	8004b92 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8004b18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8004b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8004b24:	2300      	movs	r3, #0
 8004b26:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8004b2e:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004b36:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d108      	bne.n	8004b54 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8004b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	4013      	ands	r3, r2
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00b      	beq.n	8004b66 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b52:	e008      	b.n	8004b66 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8004b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d101      	bne.n	8004b66 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8004b62:	2301      	movs	r3, #1
 8004b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8004b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d010      	beq.n	8004b8e <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d003      	beq.n	8004b7e <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8004b76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8004b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004b86:	4619      	mov	r1, r3
 8004b88:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004b8a:	f001 fbcd 	bl	8006328 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 8004b92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004b94:	6a3b      	ldr	r3, [r7, #32]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d1be      	bne.n	8004b18 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8004b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba0:	43db      	mvns	r3, r3
 8004ba2:	401a      	ands	r2, r3
 8004ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ba6:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8004ba8:	f001 f906 	bl	8005db8 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8004bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bae:	681b      	ldr	r3, [r3, #0]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3738      	adds	r7, #56	@ 0x38
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8004bc2:	6839      	ldr	r1, [r7, #0]
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f7ff ff6b 	bl	8004aa0 <xEventGroupSetBits>
}
 8004bca:	bf00      	nop
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b087      	sub	sp, #28
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	60f8      	str	r0, [r7, #12]
 8004bda:	60b9      	str	r1, [r7, #8]
 8004bdc:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8004bde:	2300      	movs	r3, #0
 8004be0:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d107      	bne.n	8004bf8 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	4013      	ands	r3, r2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00a      	beq.n	8004c08 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	617b      	str	r3, [r7, #20]
 8004bf6:	e007      	b.n	8004c08 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d101      	bne.n	8004c08 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004c04:	2301      	movs	r3, #1
 8004c06:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8004c08:	697b      	ldr	r3, [r7, #20]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	371c      	adds	r7, #28
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004c16:	b480      	push	{r7}
 8004c18:	b083      	sub	sp, #12
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f103 0208 	add.w	r2, r3, #8
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c2e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f103 0208 	add.w	r2, r3, #8
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f103 0208 	add.w	r2, r3, #8
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004c4a:	bf00      	nop
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004c56:	b480      	push	{r7}
 8004c58:	b083      	sub	sp, #12
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	689a      	ldr	r2, [r3, #8]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	683a      	ldr	r2, [r7, #0]
 8004c94:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	683a      	ldr	r2, [r7, #0]
 8004c9a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	1c5a      	adds	r2, r3, #1
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	601a      	str	r2, [r3, #0]
}
 8004cac:	bf00      	nop
 8004cae:	3714      	adds	r7, #20
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cce:	d103      	bne.n	8004cd8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	60fb      	str	r3, [r7, #12]
 8004cd6:	e00c      	b.n	8004cf2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	3308      	adds	r3, #8
 8004cdc:	60fb      	str	r3, [r7, #12]
 8004cde:	e002      	b.n	8004ce6 <vListInsert+0x2e>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	60fb      	str	r3, [r7, #12]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d2f6      	bcs.n	8004ce0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	683a      	ldr	r2, [r7, #0]
 8004d00:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	683a      	ldr	r2, [r7, #0]
 8004d0c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	1c5a      	adds	r2, r3, #1
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	601a      	str	r2, [r3, #0]
}
 8004d1e:	bf00      	nop
 8004d20:	3714      	adds	r7, #20
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr

08004d2a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b085      	sub	sp, #20
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	6892      	ldr	r2, [r2, #8]
 8004d40:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	6852      	ldr	r2, [r2, #4]
 8004d4a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d103      	bne.n	8004d5e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	689a      	ldr	r2, [r3, #8]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	1e5a      	subs	r2, r3, #1
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3714      	adds	r7, #20
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
	...

08004d80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10b      	bne.n	8004dac <xQueueGenericReset+0x2c>
	__asm volatile
 8004d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d98:	f383 8811 	msr	BASEPRI, r3
 8004d9c:	f3bf 8f6f 	isb	sy
 8004da0:	f3bf 8f4f 	dsb	sy
 8004da4:	60bb      	str	r3, [r7, #8]
}
 8004da6:	bf00      	nop
 8004da8:	bf00      	nop
 8004daa:	e7fd      	b.n	8004da8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004dac:	f002 fa4c 	bl	8007248 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004db8:	68f9      	ldr	r1, [r7, #12]
 8004dba:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004dbc:	fb01 f303 	mul.w	r3, r1, r3
 8004dc0:	441a      	add	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	68f9      	ldr	r1, [r7, #12]
 8004de0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004de2:	fb01 f303 	mul.w	r3, r1, r3
 8004de6:	441a      	add	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	22ff      	movs	r2, #255	@ 0xff
 8004df0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	22ff      	movs	r2, #255	@ 0xff
 8004df8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d114      	bne.n	8004e2c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d01a      	beq.n	8004e40 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	3310      	adds	r3, #16
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f001 fa26 	bl	8006260 <xTaskRemoveFromEventList>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d012      	beq.n	8004e40 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e50 <xQueueGenericReset+0xd0>)
 8004e1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e20:	601a      	str	r2, [r3, #0]
 8004e22:	f3bf 8f4f 	dsb	sy
 8004e26:	f3bf 8f6f 	isb	sy
 8004e2a:	e009      	b.n	8004e40 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	3310      	adds	r3, #16
 8004e30:	4618      	mov	r0, r3
 8004e32:	f7ff fef0 	bl	8004c16 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	3324      	adds	r3, #36	@ 0x24
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7ff feeb 	bl	8004c16 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004e40:	f002 fa34 	bl	80072ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004e44:	2301      	movs	r3, #1
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	e000ed04 	.word	0xe000ed04

08004e54 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b08e      	sub	sp, #56	@ 0x38
 8004e58:	af02      	add	r7, sp, #8
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
 8004e60:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d10b      	bne.n	8004e80 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e6c:	f383 8811 	msr	BASEPRI, r3
 8004e70:	f3bf 8f6f 	isb	sy
 8004e74:	f3bf 8f4f 	dsb	sy
 8004e78:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004e7a:	bf00      	nop
 8004e7c:	bf00      	nop
 8004e7e:	e7fd      	b.n	8004e7c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10b      	bne.n	8004e9e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e8a:	f383 8811 	msr	BASEPRI, r3
 8004e8e:	f3bf 8f6f 	isb	sy
 8004e92:	f3bf 8f4f 	dsb	sy
 8004e96:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004e98:	bf00      	nop
 8004e9a:	bf00      	nop
 8004e9c:	e7fd      	b.n	8004e9a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d002      	beq.n	8004eaa <xQueueGenericCreateStatic+0x56>
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <xQueueGenericCreateStatic+0x5a>
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e000      	b.n	8004eb0 <xQueueGenericCreateStatic+0x5c>
 8004eae:	2300      	movs	r3, #0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d10b      	bne.n	8004ecc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eb8:	f383 8811 	msr	BASEPRI, r3
 8004ebc:	f3bf 8f6f 	isb	sy
 8004ec0:	f3bf 8f4f 	dsb	sy
 8004ec4:	623b      	str	r3, [r7, #32]
}
 8004ec6:	bf00      	nop
 8004ec8:	bf00      	nop
 8004eca:	e7fd      	b.n	8004ec8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d102      	bne.n	8004ed8 <xQueueGenericCreateStatic+0x84>
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d101      	bne.n	8004edc <xQueueGenericCreateStatic+0x88>
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e000      	b.n	8004ede <xQueueGenericCreateStatic+0x8a>
 8004edc:	2300      	movs	r3, #0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10b      	bne.n	8004efa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee6:	f383 8811 	msr	BASEPRI, r3
 8004eea:	f3bf 8f6f 	isb	sy
 8004eee:	f3bf 8f4f 	dsb	sy
 8004ef2:	61fb      	str	r3, [r7, #28]
}
 8004ef4:	bf00      	nop
 8004ef6:	bf00      	nop
 8004ef8:	e7fd      	b.n	8004ef6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004efa:	2348      	movs	r3, #72	@ 0x48
 8004efc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	2b48      	cmp	r3, #72	@ 0x48
 8004f02:	d00b      	beq.n	8004f1c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f08:	f383 8811 	msr	BASEPRI, r3
 8004f0c:	f3bf 8f6f 	isb	sy
 8004f10:	f3bf 8f4f 	dsb	sy
 8004f14:	61bb      	str	r3, [r7, #24]
}
 8004f16:	bf00      	nop
 8004f18:	bf00      	nop
 8004f1a:	e7fd      	b.n	8004f18 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004f1c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00d      	beq.n	8004f44 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f30:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f36:	9300      	str	r3, [sp, #0]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	68b9      	ldr	r1, [r7, #8]
 8004f3e:	68f8      	ldr	r0, [r7, #12]
 8004f40:	f000 f840 	bl	8004fc4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3730      	adds	r7, #48	@ 0x30
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b08a      	sub	sp, #40	@ 0x28
 8004f52:	af02      	add	r7, sp, #8
 8004f54:	60f8      	str	r0, [r7, #12]
 8004f56:	60b9      	str	r1, [r7, #8]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d10b      	bne.n	8004f7a <xQueueGenericCreate+0x2c>
	__asm volatile
 8004f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f66:	f383 8811 	msr	BASEPRI, r3
 8004f6a:	f3bf 8f6f 	isb	sy
 8004f6e:	f3bf 8f4f 	dsb	sy
 8004f72:	613b      	str	r3, [r7, #16]
}
 8004f74:	bf00      	nop
 8004f76:	bf00      	nop
 8004f78:	e7fd      	b.n	8004f76 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	fb02 f303 	mul.w	r3, r2, r3
 8004f82:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	3348      	adds	r3, #72	@ 0x48
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f002 fa7f 	bl	800748c <pvPortMalloc>
 8004f8e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d011      	beq.n	8004fba <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	3348      	adds	r3, #72	@ 0x48
 8004f9e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004fa8:	79fa      	ldrb	r2, [r7, #7]
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	697a      	ldr	r2, [r7, #20]
 8004fb2:	68b9      	ldr	r1, [r7, #8]
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f000 f805 	bl	8004fc4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004fba:	69bb      	ldr	r3, [r7, #24]
	}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3720      	adds	r7, #32
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
 8004fd0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d103      	bne.n	8004fe0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	69ba      	ldr	r2, [r7, #24]
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	e002      	b.n	8004fe6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004ff2:	2101      	movs	r1, #1
 8004ff4:	69b8      	ldr	r0, [r7, #24]
 8004ff6:	f7ff fec3 	bl	8004d80 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004ffa:	bf00      	nop
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
	...

08005004 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b08e      	sub	sp, #56	@ 0x38
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]
 8005010:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005012:	2300      	movs	r3, #0
 8005014:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800501a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10b      	bne.n	8005038 <xQueueGenericSend+0x34>
	__asm volatile
 8005020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005024:	f383 8811 	msr	BASEPRI, r3
 8005028:	f3bf 8f6f 	isb	sy
 800502c:	f3bf 8f4f 	dsb	sy
 8005030:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005032:	bf00      	nop
 8005034:	bf00      	nop
 8005036:	e7fd      	b.n	8005034 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d103      	bne.n	8005046 <xQueueGenericSend+0x42>
 800503e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <xQueueGenericSend+0x46>
 8005046:	2301      	movs	r3, #1
 8005048:	e000      	b.n	800504c <xQueueGenericSend+0x48>
 800504a:	2300      	movs	r3, #0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10b      	bne.n	8005068 <xQueueGenericSend+0x64>
	__asm volatile
 8005050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005054:	f383 8811 	msr	BASEPRI, r3
 8005058:	f3bf 8f6f 	isb	sy
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005062:	bf00      	nop
 8005064:	bf00      	nop
 8005066:	e7fd      	b.n	8005064 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	2b02      	cmp	r3, #2
 800506c:	d103      	bne.n	8005076 <xQueueGenericSend+0x72>
 800506e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005072:	2b01      	cmp	r3, #1
 8005074:	d101      	bne.n	800507a <xQueueGenericSend+0x76>
 8005076:	2301      	movs	r3, #1
 8005078:	e000      	b.n	800507c <xQueueGenericSend+0x78>
 800507a:	2300      	movs	r3, #0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10b      	bne.n	8005098 <xQueueGenericSend+0x94>
	__asm volatile
 8005080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005084:	f383 8811 	msr	BASEPRI, r3
 8005088:	f3bf 8f6f 	isb	sy
 800508c:	f3bf 8f4f 	dsb	sy
 8005090:	623b      	str	r3, [r7, #32]
}
 8005092:	bf00      	nop
 8005094:	bf00      	nop
 8005096:	e7fd      	b.n	8005094 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005098:	f001 fb06 	bl	80066a8 <xTaskGetSchedulerState>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d102      	bne.n	80050a8 <xQueueGenericSend+0xa4>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d101      	bne.n	80050ac <xQueueGenericSend+0xa8>
 80050a8:	2301      	movs	r3, #1
 80050aa:	e000      	b.n	80050ae <xQueueGenericSend+0xaa>
 80050ac:	2300      	movs	r3, #0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d10b      	bne.n	80050ca <xQueueGenericSend+0xc6>
	__asm volatile
 80050b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b6:	f383 8811 	msr	BASEPRI, r3
 80050ba:	f3bf 8f6f 	isb	sy
 80050be:	f3bf 8f4f 	dsb	sy
 80050c2:	61fb      	str	r3, [r7, #28]
}
 80050c4:	bf00      	nop
 80050c6:	bf00      	nop
 80050c8:	e7fd      	b.n	80050c6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80050ca:	f002 f8bd 	bl	8007248 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80050ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d302      	bcc.n	80050e0 <xQueueGenericSend+0xdc>
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d129      	bne.n	8005134 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80050e0:	683a      	ldr	r2, [r7, #0]
 80050e2:	68b9      	ldr	r1, [r7, #8]
 80050e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80050e6:	f000 fab5 	bl	8005654 <prvCopyDataToQueue>
 80050ea:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d010      	beq.n	8005116 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f6:	3324      	adds	r3, #36	@ 0x24
 80050f8:	4618      	mov	r0, r3
 80050fa:	f001 f8b1 	bl	8006260 <xTaskRemoveFromEventList>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d013      	beq.n	800512c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005104:	4b3f      	ldr	r3, [pc, #252]	@ (8005204 <xQueueGenericSend+0x200>)
 8005106:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	f3bf 8f4f 	dsb	sy
 8005110:	f3bf 8f6f 	isb	sy
 8005114:	e00a      	b.n	800512c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005118:	2b00      	cmp	r3, #0
 800511a:	d007      	beq.n	800512c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800511c:	4b39      	ldr	r3, [pc, #228]	@ (8005204 <xQueueGenericSend+0x200>)
 800511e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005122:	601a      	str	r2, [r3, #0]
 8005124:	f3bf 8f4f 	dsb	sy
 8005128:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800512c:	f002 f8be 	bl	80072ac <vPortExitCritical>
				return pdPASS;
 8005130:	2301      	movs	r3, #1
 8005132:	e063      	b.n	80051fc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d103      	bne.n	8005142 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800513a:	f002 f8b7 	bl	80072ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800513e:	2300      	movs	r3, #0
 8005140:	e05c      	b.n	80051fc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005144:	2b00      	cmp	r3, #0
 8005146:	d106      	bne.n	8005156 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005148:	f107 0314 	add.w	r3, r7, #20
 800514c:	4618      	mov	r0, r3
 800514e:	f001 f94f 	bl	80063f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005152:	2301      	movs	r3, #1
 8005154:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005156:	f002 f8a9 	bl	80072ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800515a:	f000 fe1f 	bl	8005d9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800515e:	f002 f873 	bl	8007248 <vPortEnterCritical>
 8005162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005164:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005168:	b25b      	sxtb	r3, r3
 800516a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516e:	d103      	bne.n	8005178 <xQueueGenericSend+0x174>
 8005170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005172:	2200      	movs	r2, #0
 8005174:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800517a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800517e:	b25b      	sxtb	r3, r3
 8005180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005184:	d103      	bne.n	800518e <xQueueGenericSend+0x18a>
 8005186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005188:	2200      	movs	r2, #0
 800518a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800518e:	f002 f88d 	bl	80072ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005192:	1d3a      	adds	r2, r7, #4
 8005194:	f107 0314 	add.w	r3, r7, #20
 8005198:	4611      	mov	r1, r2
 800519a:	4618      	mov	r0, r3
 800519c:	f001 f93e 	bl	800641c <xTaskCheckForTimeOut>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d124      	bne.n	80051f0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80051a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051a8:	f000 fb4c 	bl	8005844 <prvIsQueueFull>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d018      	beq.n	80051e4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80051b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b4:	3310      	adds	r3, #16
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	4611      	mov	r1, r2
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 ffc0 	bl	8006140 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80051c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051c2:	f000 fad7 	bl	8005774 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80051c6:	f000 fdf7 	bl	8005db8 <xTaskResumeAll>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f47f af7c 	bne.w	80050ca <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80051d2:	4b0c      	ldr	r3, [pc, #48]	@ (8005204 <xQueueGenericSend+0x200>)
 80051d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051d8:	601a      	str	r2, [r3, #0]
 80051da:	f3bf 8f4f 	dsb	sy
 80051de:	f3bf 8f6f 	isb	sy
 80051e2:	e772      	b.n	80050ca <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80051e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051e6:	f000 fac5 	bl	8005774 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80051ea:	f000 fde5 	bl	8005db8 <xTaskResumeAll>
 80051ee:	e76c      	b.n	80050ca <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80051f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051f2:	f000 fabf 	bl	8005774 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80051f6:	f000 fddf 	bl	8005db8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80051fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3738      	adds	r7, #56	@ 0x38
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	e000ed04 	.word	0xe000ed04

08005208 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b090      	sub	sp, #64	@ 0x40
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
 8005214:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800521a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10b      	bne.n	8005238 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005224:	f383 8811 	msr	BASEPRI, r3
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005232:	bf00      	nop
 8005234:	bf00      	nop
 8005236:	e7fd      	b.n	8005234 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d103      	bne.n	8005246 <xQueueGenericSendFromISR+0x3e>
 800523e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <xQueueGenericSendFromISR+0x42>
 8005246:	2301      	movs	r3, #1
 8005248:	e000      	b.n	800524c <xQueueGenericSendFromISR+0x44>
 800524a:	2300      	movs	r3, #0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10b      	bne.n	8005268 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005254:	f383 8811 	msr	BASEPRI, r3
 8005258:	f3bf 8f6f 	isb	sy
 800525c:	f3bf 8f4f 	dsb	sy
 8005260:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005262:	bf00      	nop
 8005264:	bf00      	nop
 8005266:	e7fd      	b.n	8005264 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	2b02      	cmp	r3, #2
 800526c:	d103      	bne.n	8005276 <xQueueGenericSendFromISR+0x6e>
 800526e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005272:	2b01      	cmp	r3, #1
 8005274:	d101      	bne.n	800527a <xQueueGenericSendFromISR+0x72>
 8005276:	2301      	movs	r3, #1
 8005278:	e000      	b.n	800527c <xQueueGenericSendFromISR+0x74>
 800527a:	2300      	movs	r3, #0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d10b      	bne.n	8005298 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005284:	f383 8811 	msr	BASEPRI, r3
 8005288:	f3bf 8f6f 	isb	sy
 800528c:	f3bf 8f4f 	dsb	sy
 8005290:	623b      	str	r3, [r7, #32]
}
 8005292:	bf00      	nop
 8005294:	bf00      	nop
 8005296:	e7fd      	b.n	8005294 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005298:	f002 f8b6 	bl	8007408 <vPortValidateInterruptPriority>
	__asm volatile
 800529c:	f3ef 8211 	mrs	r2, BASEPRI
 80052a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a4:	f383 8811 	msr	BASEPRI, r3
 80052a8:	f3bf 8f6f 	isb	sy
 80052ac:	f3bf 8f4f 	dsb	sy
 80052b0:	61fa      	str	r2, [r7, #28]
 80052b2:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80052b4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80052b6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80052b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d302      	bcc.n	80052ca <xQueueGenericSendFromISR+0xc2>
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d12f      	bne.n	800532a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80052ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80052d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	68b9      	ldr	r1, [r7, #8]
 80052de:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80052e0:	f000 f9b8 	bl	8005654 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80052e4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80052e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ec:	d112      	bne.n	8005314 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d016      	beq.n	8005324 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052f8:	3324      	adds	r3, #36	@ 0x24
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 ffb0 	bl	8006260 <xTaskRemoveFromEventList>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00e      	beq.n	8005324 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00b      	beq.n	8005324 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	601a      	str	r2, [r3, #0]
 8005312:	e007      	b.n	8005324 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005314:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005318:	3301      	adds	r3, #1
 800531a:	b2db      	uxtb	r3, r3
 800531c:	b25a      	sxtb	r2, r3
 800531e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005320:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005324:	2301      	movs	r3, #1
 8005326:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005328:	e001      	b.n	800532e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800532a:	2300      	movs	r3, #0
 800532c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800532e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005330:	617b      	str	r3, [r7, #20]
	__asm volatile
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	f383 8811 	msr	BASEPRI, r3
}
 8005338:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800533a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800533c:	4618      	mov	r0, r3
 800533e:	3740      	adds	r7, #64	@ 0x40
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b08c      	sub	sp, #48	@ 0x30
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005350:	2300      	movs	r3, #0
 8005352:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800535a:	2b00      	cmp	r3, #0
 800535c:	d10b      	bne.n	8005376 <xQueueReceive+0x32>
	__asm volatile
 800535e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005362:	f383 8811 	msr	BASEPRI, r3
 8005366:	f3bf 8f6f 	isb	sy
 800536a:	f3bf 8f4f 	dsb	sy
 800536e:	623b      	str	r3, [r7, #32]
}
 8005370:	bf00      	nop
 8005372:	bf00      	nop
 8005374:	e7fd      	b.n	8005372 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d103      	bne.n	8005384 <xQueueReceive+0x40>
 800537c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800537e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005380:	2b00      	cmp	r3, #0
 8005382:	d101      	bne.n	8005388 <xQueueReceive+0x44>
 8005384:	2301      	movs	r3, #1
 8005386:	e000      	b.n	800538a <xQueueReceive+0x46>
 8005388:	2300      	movs	r3, #0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d10b      	bne.n	80053a6 <xQueueReceive+0x62>
	__asm volatile
 800538e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005392:	f383 8811 	msr	BASEPRI, r3
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	61fb      	str	r3, [r7, #28]
}
 80053a0:	bf00      	nop
 80053a2:	bf00      	nop
 80053a4:	e7fd      	b.n	80053a2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053a6:	f001 f97f 	bl	80066a8 <xTaskGetSchedulerState>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d102      	bne.n	80053b6 <xQueueReceive+0x72>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d101      	bne.n	80053ba <xQueueReceive+0x76>
 80053b6:	2301      	movs	r3, #1
 80053b8:	e000      	b.n	80053bc <xQueueReceive+0x78>
 80053ba:	2300      	movs	r3, #0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d10b      	bne.n	80053d8 <xQueueReceive+0x94>
	__asm volatile
 80053c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053c4:	f383 8811 	msr	BASEPRI, r3
 80053c8:	f3bf 8f6f 	isb	sy
 80053cc:	f3bf 8f4f 	dsb	sy
 80053d0:	61bb      	str	r3, [r7, #24]
}
 80053d2:	bf00      	nop
 80053d4:	bf00      	nop
 80053d6:	e7fd      	b.n	80053d4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053d8:	f001 ff36 	bl	8007248 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80053e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d01f      	beq.n	8005428 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80053e8:	68b9      	ldr	r1, [r7, #8]
 80053ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053ec:	f000 f99c 	bl	8005728 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80053f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f2:	1e5a      	subs	r2, r3, #1
 80053f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00f      	beq.n	8005420 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005402:	3310      	adds	r3, #16
 8005404:	4618      	mov	r0, r3
 8005406:	f000 ff2b 	bl	8006260 <xTaskRemoveFromEventList>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d007      	beq.n	8005420 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005410:	4b3c      	ldr	r3, [pc, #240]	@ (8005504 <xQueueReceive+0x1c0>)
 8005412:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005416:	601a      	str	r2, [r3, #0]
 8005418:	f3bf 8f4f 	dsb	sy
 800541c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005420:	f001 ff44 	bl	80072ac <vPortExitCritical>
				return pdPASS;
 8005424:	2301      	movs	r3, #1
 8005426:	e069      	b.n	80054fc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d103      	bne.n	8005436 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800542e:	f001 ff3d 	bl	80072ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005432:	2300      	movs	r3, #0
 8005434:	e062      	b.n	80054fc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005438:	2b00      	cmp	r3, #0
 800543a:	d106      	bne.n	800544a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800543c:	f107 0310 	add.w	r3, r7, #16
 8005440:	4618      	mov	r0, r3
 8005442:	f000 ffd5 	bl	80063f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005446:	2301      	movs	r3, #1
 8005448:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800544a:	f001 ff2f 	bl	80072ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800544e:	f000 fca5 	bl	8005d9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005452:	f001 fef9 	bl	8007248 <vPortEnterCritical>
 8005456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005458:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800545c:	b25b      	sxtb	r3, r3
 800545e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005462:	d103      	bne.n	800546c <xQueueReceive+0x128>
 8005464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005466:	2200      	movs	r2, #0
 8005468:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800546c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800546e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005472:	b25b      	sxtb	r3, r3
 8005474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005478:	d103      	bne.n	8005482 <xQueueReceive+0x13e>
 800547a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005482:	f001 ff13 	bl	80072ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005486:	1d3a      	adds	r2, r7, #4
 8005488:	f107 0310 	add.w	r3, r7, #16
 800548c:	4611      	mov	r1, r2
 800548e:	4618      	mov	r0, r3
 8005490:	f000 ffc4 	bl	800641c <xTaskCheckForTimeOut>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d123      	bne.n	80054e2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800549a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800549c:	f000 f9bc 	bl	8005818 <prvIsQueueEmpty>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d017      	beq.n	80054d6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80054a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a8:	3324      	adds	r3, #36	@ 0x24
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	4611      	mov	r1, r2
 80054ae:	4618      	mov	r0, r3
 80054b0:	f000 fe46 	bl	8006140 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80054b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054b6:	f000 f95d 	bl	8005774 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80054ba:	f000 fc7d 	bl	8005db8 <xTaskResumeAll>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d189      	bne.n	80053d8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80054c4:	4b0f      	ldr	r3, [pc, #60]	@ (8005504 <xQueueReceive+0x1c0>)
 80054c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054ca:	601a      	str	r2, [r3, #0]
 80054cc:	f3bf 8f4f 	dsb	sy
 80054d0:	f3bf 8f6f 	isb	sy
 80054d4:	e780      	b.n	80053d8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80054d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054d8:	f000 f94c 	bl	8005774 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80054dc:	f000 fc6c 	bl	8005db8 <xTaskResumeAll>
 80054e0:	e77a      	b.n	80053d8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80054e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054e4:	f000 f946 	bl	8005774 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80054e8:	f000 fc66 	bl	8005db8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054ee:	f000 f993 	bl	8005818 <prvIsQueueEmpty>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	f43f af6f 	beq.w	80053d8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80054fa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3730      	adds	r7, #48	@ 0x30
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	e000ed04 	.word	0xe000ed04

08005508 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b08e      	sub	sp, #56	@ 0x38
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10b      	bne.n	8005536 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800551e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005522:	f383 8811 	msr	BASEPRI, r3
 8005526:	f3bf 8f6f 	isb	sy
 800552a:	f3bf 8f4f 	dsb	sy
 800552e:	623b      	str	r3, [r7, #32]
}
 8005530:	bf00      	nop
 8005532:	bf00      	nop
 8005534:	e7fd      	b.n	8005532 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d103      	bne.n	8005544 <xQueueReceiveFromISR+0x3c>
 800553c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800553e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005540:	2b00      	cmp	r3, #0
 8005542:	d101      	bne.n	8005548 <xQueueReceiveFromISR+0x40>
 8005544:	2301      	movs	r3, #1
 8005546:	e000      	b.n	800554a <xQueueReceiveFromISR+0x42>
 8005548:	2300      	movs	r3, #0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10b      	bne.n	8005566 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800554e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	61fb      	str	r3, [r7, #28]
}
 8005560:	bf00      	nop
 8005562:	bf00      	nop
 8005564:	e7fd      	b.n	8005562 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005566:	f001 ff4f 	bl	8007408 <vPortValidateInterruptPriority>
	__asm volatile
 800556a:	f3ef 8211 	mrs	r2, BASEPRI
 800556e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005572:	f383 8811 	msr	BASEPRI, r3
 8005576:	f3bf 8f6f 	isb	sy
 800557a:	f3bf 8f4f 	dsb	sy
 800557e:	61ba      	str	r2, [r7, #24]
 8005580:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005582:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005584:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800558a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800558c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800558e:	2b00      	cmp	r3, #0
 8005590:	d02f      	beq.n	80055f2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005594:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005598:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800559c:	68b9      	ldr	r1, [r7, #8]
 800559e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055a0:	f000 f8c2 	bl	8005728 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80055a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a6:	1e5a      	subs	r2, r3, #1
 80055a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055aa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80055ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80055b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b4:	d112      	bne.n	80055dc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d016      	beq.n	80055ec <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c0:	3310      	adds	r3, #16
 80055c2:	4618      	mov	r0, r3
 80055c4:	f000 fe4c 	bl	8006260 <xTaskRemoveFromEventList>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00e      	beq.n	80055ec <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00b      	beq.n	80055ec <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	601a      	str	r2, [r3, #0]
 80055da:	e007      	b.n	80055ec <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80055dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80055e0:	3301      	adds	r3, #1
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	b25a      	sxtb	r2, r3
 80055e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80055ec:	2301      	movs	r3, #1
 80055ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80055f0:	e001      	b.n	80055f6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80055f2:	2300      	movs	r3, #0
 80055f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80055f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055f8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	f383 8811 	msr	BASEPRI, r3
}
 8005600:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005604:	4618      	mov	r0, r3
 8005606:	3738      	adds	r7, #56	@ 0x38
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b086      	sub	sp, #24
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d10b      	bne.n	8005636 <uxQueueSpacesAvailable+0x2a>
	__asm volatile
 800561e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005622:	f383 8811 	msr	BASEPRI, r3
 8005626:	f3bf 8f6f 	isb	sy
 800562a:	f3bf 8f4f 	dsb	sy
 800562e:	60fb      	str	r3, [r7, #12]
}
 8005630:	bf00      	nop
 8005632:	bf00      	nop
 8005634:	e7fd      	b.n	8005632 <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 8005636:	f001 fe07 	bl	8007248 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8005646:	f001 fe31 	bl	80072ac <vPortExitCritical>

	return uxReturn;
 800564a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800564c:	4618      	mov	r0, r3
 800564e:	3718      	adds	r7, #24
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005660:	2300      	movs	r3, #0
 8005662:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005668:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800566e:	2b00      	cmp	r3, #0
 8005670:	d10d      	bne.n	800568e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d14d      	bne.n	8005716 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	4618      	mov	r0, r3
 8005680:	f001 f830 	bl	80066e4 <xTaskPriorityDisinherit>
 8005684:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	609a      	str	r2, [r3, #8]
 800568c:	e043      	b.n	8005716 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d119      	bne.n	80056c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6858      	ldr	r0, [r3, #4]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800569c:	461a      	mov	r2, r3
 800569e:	68b9      	ldr	r1, [r7, #8]
 80056a0:	f002 fb0f 	bl	8007cc2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ac:	441a      	add	r2, r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d32b      	bcc.n	8005716 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	605a      	str	r2, [r3, #4]
 80056c6:	e026      	b.n	8005716 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	68d8      	ldr	r0, [r3, #12]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d0:	461a      	mov	r2, r3
 80056d2:	68b9      	ldr	r1, [r7, #8]
 80056d4:	f002 faf5 	bl	8007cc2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	68da      	ldr	r2, [r3, #12]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e0:	425b      	negs	r3, r3
 80056e2:	441a      	add	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	68da      	ldr	r2, [r3, #12]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d207      	bcs.n	8005704 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	689a      	ldr	r2, [r3, #8]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fc:	425b      	negs	r3, r3
 80056fe:	441a      	add	r2, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b02      	cmp	r3, #2
 8005708:	d105      	bne.n	8005716 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d002      	beq.n	8005716 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	3b01      	subs	r3, #1
 8005714:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	1c5a      	adds	r2, r3, #1
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800571e:	697b      	ldr	r3, [r7, #20]
}
 8005720:	4618      	mov	r0, r3
 8005722:	3718      	adds	r7, #24
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005736:	2b00      	cmp	r3, #0
 8005738:	d018      	beq.n	800576c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	68da      	ldr	r2, [r3, #12]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005742:	441a      	add	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	68da      	ldr	r2, [r3, #12]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	429a      	cmp	r2, r3
 8005752:	d303      	bcc.n	800575c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	68d9      	ldr	r1, [r3, #12]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005764:	461a      	mov	r2, r3
 8005766:	6838      	ldr	r0, [r7, #0]
 8005768:	f002 faab 	bl	8007cc2 <memcpy>
	}
}
 800576c:	bf00      	nop
 800576e:	3708      	adds	r7, #8
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800577c:	f001 fd64 	bl	8007248 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005786:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005788:	e011      	b.n	80057ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800578e:	2b00      	cmp	r3, #0
 8005790:	d012      	beq.n	80057b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	3324      	adds	r3, #36	@ 0x24
 8005796:	4618      	mov	r0, r3
 8005798:	f000 fd62 	bl	8006260 <xTaskRemoveFromEventList>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d001      	beq.n	80057a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80057a2:	f000 fe9f 	bl	80064e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80057a6:	7bfb      	ldrb	r3, [r7, #15]
 80057a8:	3b01      	subs	r3, #1
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	dce9      	bgt.n	800578a <prvUnlockQueue+0x16>
 80057b6:	e000      	b.n	80057ba <prvUnlockQueue+0x46>
					break;
 80057b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	22ff      	movs	r2, #255	@ 0xff
 80057be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80057c2:	f001 fd73 	bl	80072ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80057c6:	f001 fd3f 	bl	8007248 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80057d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80057d2:	e011      	b.n	80057f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d012      	beq.n	8005802 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	3310      	adds	r3, #16
 80057e0:	4618      	mov	r0, r3
 80057e2:	f000 fd3d 	bl	8006260 <xTaskRemoveFromEventList>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d001      	beq.n	80057f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80057ec:	f000 fe7a 	bl	80064e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80057f0:	7bbb      	ldrb	r3, [r7, #14]
 80057f2:	3b01      	subs	r3, #1
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80057f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	dce9      	bgt.n	80057d4 <prvUnlockQueue+0x60>
 8005800:	e000      	b.n	8005804 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005802:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	22ff      	movs	r2, #255	@ 0xff
 8005808:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800580c:	f001 fd4e 	bl	80072ac <vPortExitCritical>
}
 8005810:	bf00      	nop
 8005812:	3710      	adds	r7, #16
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005820:	f001 fd12 	bl	8007248 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005828:	2b00      	cmp	r3, #0
 800582a:	d102      	bne.n	8005832 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800582c:	2301      	movs	r3, #1
 800582e:	60fb      	str	r3, [r7, #12]
 8005830:	e001      	b.n	8005836 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005832:	2300      	movs	r3, #0
 8005834:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005836:	f001 fd39 	bl	80072ac <vPortExitCritical>

	return xReturn;
 800583a:	68fb      	ldr	r3, [r7, #12]
}
 800583c:	4618      	mov	r0, r3
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800584c:	f001 fcfc 	bl	8007248 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005858:	429a      	cmp	r2, r3
 800585a:	d102      	bne.n	8005862 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800585c:	2301      	movs	r3, #1
 800585e:	60fb      	str	r3, [r7, #12]
 8005860:	e001      	b.n	8005866 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005862:	2300      	movs	r3, #0
 8005864:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005866:	f001 fd21 	bl	80072ac <vPortExitCritical>

	return xReturn;
 800586a:	68fb      	ldr	r3, [r7, #12]
}
 800586c:	4618      	mov	r0, r3
 800586e:	3710      	adds	r7, #16
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800587e:	2300      	movs	r3, #0
 8005880:	60fb      	str	r3, [r7, #12]
 8005882:	e014      	b.n	80058ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005884:	4a0f      	ldr	r2, [pc, #60]	@ (80058c4 <vQueueAddToRegistry+0x50>)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d10b      	bne.n	80058a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005890:	490c      	ldr	r1, [pc, #48]	@ (80058c4 <vQueueAddToRegistry+0x50>)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	683a      	ldr	r2, [r7, #0]
 8005896:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800589a:	4a0a      	ldr	r2, [pc, #40]	@ (80058c4 <vQueueAddToRegistry+0x50>)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	4413      	add	r3, r2
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80058a6:	e006      	b.n	80058b6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	3301      	adds	r3, #1
 80058ac:	60fb      	str	r3, [r7, #12]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2b07      	cmp	r3, #7
 80058b2:	d9e7      	bls.n	8005884 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80058b4:	bf00      	nop
 80058b6:	bf00      	nop
 80058b8:	3714      	adds	r7, #20
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	20000654 	.word	0x20000654

080058c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b086      	sub	sp, #24
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80058d8:	f001 fcb6 	bl	8007248 <vPortEnterCritical>
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80058e2:	b25b      	sxtb	r3, r3
 80058e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e8:	d103      	bne.n	80058f2 <vQueueWaitForMessageRestricted+0x2a>
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80058f8:	b25b      	sxtb	r3, r3
 80058fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058fe:	d103      	bne.n	8005908 <vQueueWaitForMessageRestricted+0x40>
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005908:	f001 fcd0 	bl	80072ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005910:	2b00      	cmp	r3, #0
 8005912:	d106      	bne.n	8005922 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	3324      	adds	r3, #36	@ 0x24
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	68b9      	ldr	r1, [r7, #8]
 800591c:	4618      	mov	r0, r3
 800591e:	f000 fc73 	bl	8006208 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005922:	6978      	ldr	r0, [r7, #20]
 8005924:	f7ff ff26 	bl	8005774 <prvUnlockQueue>
	}
 8005928:	bf00      	nop
 800592a:	3718      	adds	r7, #24
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005930:	b580      	push	{r7, lr}
 8005932:	b08e      	sub	sp, #56	@ 0x38
 8005934:	af04      	add	r7, sp, #16
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	607a      	str	r2, [r7, #4]
 800593c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800593e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005940:	2b00      	cmp	r3, #0
 8005942:	d10b      	bne.n	800595c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005948:	f383 8811 	msr	BASEPRI, r3
 800594c:	f3bf 8f6f 	isb	sy
 8005950:	f3bf 8f4f 	dsb	sy
 8005954:	623b      	str	r3, [r7, #32]
}
 8005956:	bf00      	nop
 8005958:	bf00      	nop
 800595a:	e7fd      	b.n	8005958 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800595c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800595e:	2b00      	cmp	r3, #0
 8005960:	d10b      	bne.n	800597a <xTaskCreateStatic+0x4a>
	__asm volatile
 8005962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005966:	f383 8811 	msr	BASEPRI, r3
 800596a:	f3bf 8f6f 	isb	sy
 800596e:	f3bf 8f4f 	dsb	sy
 8005972:	61fb      	str	r3, [r7, #28]
}
 8005974:	bf00      	nop
 8005976:	bf00      	nop
 8005978:	e7fd      	b.n	8005976 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800597a:	2354      	movs	r3, #84	@ 0x54
 800597c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	2b54      	cmp	r3, #84	@ 0x54
 8005982:	d00b      	beq.n	800599c <xTaskCreateStatic+0x6c>
	__asm volatile
 8005984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005988:	f383 8811 	msr	BASEPRI, r3
 800598c:	f3bf 8f6f 	isb	sy
 8005990:	f3bf 8f4f 	dsb	sy
 8005994:	61bb      	str	r3, [r7, #24]
}
 8005996:	bf00      	nop
 8005998:	bf00      	nop
 800599a:	e7fd      	b.n	8005998 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800599c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800599e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d01e      	beq.n	80059e2 <xTaskCreateStatic+0xb2>
 80059a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d01b      	beq.n	80059e2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80059aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ac:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80059ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80059b2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80059b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b6:	2202      	movs	r2, #2
 80059b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80059bc:	2300      	movs	r3, #0
 80059be:	9303      	str	r3, [sp, #12]
 80059c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c2:	9302      	str	r3, [sp, #8]
 80059c4:	f107 0314 	add.w	r3, r7, #20
 80059c8:	9301      	str	r3, [sp, #4]
 80059ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059cc:	9300      	str	r3, [sp, #0]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	68b9      	ldr	r1, [r7, #8]
 80059d4:	68f8      	ldr	r0, [r7, #12]
 80059d6:	f000 f850 	bl	8005a7a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80059da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80059dc:	f000 f8d6 	bl	8005b8c <prvAddNewTaskToReadyList>
 80059e0:	e001      	b.n	80059e6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80059e2:	2300      	movs	r3, #0
 80059e4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80059e6:	697b      	ldr	r3, [r7, #20]
	}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3728      	adds	r7, #40	@ 0x28
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b08c      	sub	sp, #48	@ 0x30
 80059f4:	af04      	add	r7, sp, #16
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	603b      	str	r3, [r7, #0]
 80059fc:	4613      	mov	r3, r2
 80059fe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005a00:	88fb      	ldrh	r3, [r7, #6]
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4618      	mov	r0, r3
 8005a06:	f001 fd41 	bl	800748c <pvPortMalloc>
 8005a0a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00e      	beq.n	8005a30 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005a12:	2054      	movs	r0, #84	@ 0x54
 8005a14:	f001 fd3a 	bl	800748c <pvPortMalloc>
 8005a18:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d003      	beq.n	8005a28 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a26:	e005      	b.n	8005a34 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005a28:	6978      	ldr	r0, [r7, #20]
 8005a2a:	f001 fdfd 	bl	8007628 <vPortFree>
 8005a2e:	e001      	b.n	8005a34 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005a30:	2300      	movs	r3, #0
 8005a32:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d017      	beq.n	8005a6a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005a42:	88fa      	ldrh	r2, [r7, #6]
 8005a44:	2300      	movs	r3, #0
 8005a46:	9303      	str	r3, [sp, #12]
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	9302      	str	r3, [sp, #8]
 8005a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a4e:	9301      	str	r3, [sp, #4]
 8005a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a52:	9300      	str	r3, [sp, #0]
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	68b9      	ldr	r1, [r7, #8]
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	f000 f80e 	bl	8005a7a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a5e:	69f8      	ldr	r0, [r7, #28]
 8005a60:	f000 f894 	bl	8005b8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005a64:	2301      	movs	r3, #1
 8005a66:	61bb      	str	r3, [r7, #24]
 8005a68:	e002      	b.n	8005a70 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a6e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005a70:	69bb      	ldr	r3, [r7, #24]
	}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3720      	adds	r7, #32
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	b088      	sub	sp, #32
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	60f8      	str	r0, [r7, #12]
 8005a82:	60b9      	str	r1, [r7, #8]
 8005a84:	607a      	str	r2, [r7, #4]
 8005a86:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005a92:	3b01      	subs	r3, #1
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	4413      	add	r3, r2
 8005a98:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	f023 0307 	bic.w	r3, r3, #7
 8005aa0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	f003 0307 	and.w	r3, r3, #7
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00b      	beq.n	8005ac4 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ab0:	f383 8811 	msr	BASEPRI, r3
 8005ab4:	f3bf 8f6f 	isb	sy
 8005ab8:	f3bf 8f4f 	dsb	sy
 8005abc:	617b      	str	r3, [r7, #20]
}
 8005abe:	bf00      	nop
 8005ac0:	bf00      	nop
 8005ac2:	e7fd      	b.n	8005ac0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d01f      	beq.n	8005b0a <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005aca:	2300      	movs	r3, #0
 8005acc:	61fb      	str	r3, [r7, #28]
 8005ace:	e012      	b.n	8005af6 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ad0:	68ba      	ldr	r2, [r7, #8]
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	7819      	ldrb	r1, [r3, #0]
 8005ad8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	4413      	add	r3, r2
 8005ade:	3334      	adds	r3, #52	@ 0x34
 8005ae0:	460a      	mov	r2, r1
 8005ae2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	4413      	add	r3, r2
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d006      	beq.n	8005afe <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	3301      	adds	r3, #1
 8005af4:	61fb      	str	r3, [r7, #28]
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	2b0f      	cmp	r3, #15
 8005afa:	d9e9      	bls.n	8005ad0 <prvInitialiseNewTask+0x56>
 8005afc:	e000      	b.n	8005b00 <prvInitialiseNewTask+0x86>
			{
				break;
 8005afe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b08:	e003      	b.n	8005b12 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b14:	2b06      	cmp	r3, #6
 8005b16:	d901      	bls.n	8005b1c <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005b18:	2306      	movs	r3, #6
 8005b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b20:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b26:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b30:	3304      	adds	r3, #4
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7ff f88f 	bl	8004c56 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b3a:	3318      	adds	r3, #24
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f7ff f88a 	bl	8004c56 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b46:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b4a:	f1c3 0207 	rsb	r2, r3, #7
 8005b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b50:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b56:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005b66:	683a      	ldr	r2, [r7, #0]
 8005b68:	68f9      	ldr	r1, [r7, #12]
 8005b6a:	69b8      	ldr	r0, [r7, #24]
 8005b6c:	f001 fa3a 	bl	8006fe4 <pxPortInitialiseStack>
 8005b70:	4602      	mov	r2, r0
 8005b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b74:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d002      	beq.n	8005b82 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b82:	bf00      	nop
 8005b84:	3720      	adds	r7, #32
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
	...

08005b8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005b94:	f001 fb58 	bl	8007248 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005b98:	4b2a      	ldr	r3, [pc, #168]	@ (8005c44 <prvAddNewTaskToReadyList+0xb8>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	4a29      	ldr	r2, [pc, #164]	@ (8005c44 <prvAddNewTaskToReadyList+0xb8>)
 8005ba0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005ba2:	4b29      	ldr	r3, [pc, #164]	@ (8005c48 <prvAddNewTaskToReadyList+0xbc>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d109      	bne.n	8005bbe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005baa:	4a27      	ldr	r2, [pc, #156]	@ (8005c48 <prvAddNewTaskToReadyList+0xbc>)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005bb0:	4b24      	ldr	r3, [pc, #144]	@ (8005c44 <prvAddNewTaskToReadyList+0xb8>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d110      	bne.n	8005bda <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005bb8:	f000 fcb8 	bl	800652c <prvInitialiseTaskLists>
 8005bbc:	e00d      	b.n	8005bda <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005bbe:	4b23      	ldr	r3, [pc, #140]	@ (8005c4c <prvAddNewTaskToReadyList+0xc0>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d109      	bne.n	8005bda <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005bc6:	4b20      	ldr	r3, [pc, #128]	@ (8005c48 <prvAddNewTaskToReadyList+0xbc>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d802      	bhi.n	8005bda <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005bd4:	4a1c      	ldr	r2, [pc, #112]	@ (8005c48 <prvAddNewTaskToReadyList+0xbc>)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005bda:	4b1d      	ldr	r3, [pc, #116]	@ (8005c50 <prvAddNewTaskToReadyList+0xc4>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	3301      	adds	r3, #1
 8005be0:	4a1b      	ldr	r2, [pc, #108]	@ (8005c50 <prvAddNewTaskToReadyList+0xc4>)
 8005be2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be8:	2201      	movs	r2, #1
 8005bea:	409a      	lsls	r2, r3
 8005bec:	4b19      	ldr	r3, [pc, #100]	@ (8005c54 <prvAddNewTaskToReadyList+0xc8>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	4a18      	ldr	r2, [pc, #96]	@ (8005c54 <prvAddNewTaskToReadyList+0xc8>)
 8005bf4:	6013      	str	r3, [r2, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4413      	add	r3, r2
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	4a15      	ldr	r2, [pc, #84]	@ (8005c58 <prvAddNewTaskToReadyList+0xcc>)
 8005c04:	441a      	add	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	3304      	adds	r3, #4
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	4610      	mov	r0, r2
 8005c0e:	f7ff f82f 	bl	8004c70 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005c12:	f001 fb4b 	bl	80072ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005c16:	4b0d      	ldr	r3, [pc, #52]	@ (8005c4c <prvAddNewTaskToReadyList+0xc0>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00e      	beq.n	8005c3c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8005c48 <prvAddNewTaskToReadyList+0xbc>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d207      	bcs.n	8005c3c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8005c5c <prvAddNewTaskToReadyList+0xd0>)
 8005c2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c32:	601a      	str	r2, [r3, #0]
 8005c34:	f3bf 8f4f 	dsb	sy
 8005c38:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c3c:	bf00      	nop
 8005c3e:	3708      	adds	r7, #8
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	20000794 	.word	0x20000794
 8005c48:	20000694 	.word	0x20000694
 8005c4c:	200007a0 	.word	0x200007a0
 8005c50:	200007b0 	.word	0x200007b0
 8005c54:	2000079c 	.word	0x2000079c
 8005c58:	20000698 	.word	0x20000698
 8005c5c:	e000ed04 	.word	0xe000ed04

08005c60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d018      	beq.n	8005ca4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005c72:	4b14      	ldr	r3, [pc, #80]	@ (8005cc4 <vTaskDelay+0x64>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00b      	beq.n	8005c92 <vTaskDelay+0x32>
	__asm volatile
 8005c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c7e:	f383 8811 	msr	BASEPRI, r3
 8005c82:	f3bf 8f6f 	isb	sy
 8005c86:	f3bf 8f4f 	dsb	sy
 8005c8a:	60bb      	str	r3, [r7, #8]
}
 8005c8c:	bf00      	nop
 8005c8e:	bf00      	nop
 8005c90:	e7fd      	b.n	8005c8e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005c92:	f000 f883 	bl	8005d9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005c96:	2100      	movs	r1, #0
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 fdc3 	bl	8006824 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005c9e:	f000 f88b 	bl	8005db8 <xTaskResumeAll>
 8005ca2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d107      	bne.n	8005cba <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005caa:	4b07      	ldr	r3, [pc, #28]	@ (8005cc8 <vTaskDelay+0x68>)
 8005cac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cb0:	601a      	str	r2, [r3, #0]
 8005cb2:	f3bf 8f4f 	dsb	sy
 8005cb6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005cba:	bf00      	nop
 8005cbc:	3710      	adds	r7, #16
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	200007bc 	.word	0x200007bc
 8005cc8:	e000ed04 	.word	0xe000ed04

08005ccc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b08a      	sub	sp, #40	@ 0x28
 8005cd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005cda:	463a      	mov	r2, r7
 8005cdc:	1d39      	adds	r1, r7, #4
 8005cde:	f107 0308 	add.w	r3, r7, #8
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7fa fc4c 	bl	8000580 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005ce8:	6839      	ldr	r1, [r7, #0]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	9202      	str	r2, [sp, #8]
 8005cf0:	9301      	str	r3, [sp, #4]
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	9300      	str	r3, [sp, #0]
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	460a      	mov	r2, r1
 8005cfa:	4922      	ldr	r1, [pc, #136]	@ (8005d84 <vTaskStartScheduler+0xb8>)
 8005cfc:	4822      	ldr	r0, [pc, #136]	@ (8005d88 <vTaskStartScheduler+0xbc>)
 8005cfe:	f7ff fe17 	bl	8005930 <xTaskCreateStatic>
 8005d02:	4603      	mov	r3, r0
 8005d04:	4a21      	ldr	r2, [pc, #132]	@ (8005d8c <vTaskStartScheduler+0xc0>)
 8005d06:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005d08:	4b20      	ldr	r3, [pc, #128]	@ (8005d8c <vTaskStartScheduler+0xc0>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d002      	beq.n	8005d16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005d10:	2301      	movs	r3, #1
 8005d12:	617b      	str	r3, [r7, #20]
 8005d14:	e001      	b.n	8005d1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005d16:	2300      	movs	r3, #0
 8005d18:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d102      	bne.n	8005d26 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005d20:	f000 fde6 	bl	80068f0 <xTimerCreateTimerTask>
 8005d24:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d116      	bne.n	8005d5a <vTaskStartScheduler+0x8e>
	__asm volatile
 8005d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d30:	f383 8811 	msr	BASEPRI, r3
 8005d34:	f3bf 8f6f 	isb	sy
 8005d38:	f3bf 8f4f 	dsb	sy
 8005d3c:	613b      	str	r3, [r7, #16]
}
 8005d3e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005d40:	4b13      	ldr	r3, [pc, #76]	@ (8005d90 <vTaskStartScheduler+0xc4>)
 8005d42:	f04f 32ff 	mov.w	r2, #4294967295
 8005d46:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005d48:	4b12      	ldr	r3, [pc, #72]	@ (8005d94 <vTaskStartScheduler+0xc8>)
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005d4e:	4b12      	ldr	r3, [pc, #72]	@ (8005d98 <vTaskStartScheduler+0xcc>)
 8005d50:	2200      	movs	r2, #0
 8005d52:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005d54:	f001 f9d4 	bl	8007100 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005d58:	e00f      	b.n	8005d7a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d60:	d10b      	bne.n	8005d7a <vTaskStartScheduler+0xae>
	__asm volatile
 8005d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d66:	f383 8811 	msr	BASEPRI, r3
 8005d6a:	f3bf 8f6f 	isb	sy
 8005d6e:	f3bf 8f4f 	dsb	sy
 8005d72:	60fb      	str	r3, [r7, #12]
}
 8005d74:	bf00      	nop
 8005d76:	bf00      	nop
 8005d78:	e7fd      	b.n	8005d76 <vTaskStartScheduler+0xaa>
}
 8005d7a:	bf00      	nop
 8005d7c:	3718      	adds	r7, #24
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	08008e88 	.word	0x08008e88
 8005d88:	080064fd 	.word	0x080064fd
 8005d8c:	200007b8 	.word	0x200007b8
 8005d90:	200007b4 	.word	0x200007b4
 8005d94:	200007a0 	.word	0x200007a0
 8005d98:	20000798 	.word	0x20000798

08005d9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005da0:	4b04      	ldr	r3, [pc, #16]	@ (8005db4 <vTaskSuspendAll+0x18>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	3301      	adds	r3, #1
 8005da6:	4a03      	ldr	r2, [pc, #12]	@ (8005db4 <vTaskSuspendAll+0x18>)
 8005da8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005daa:	bf00      	nop
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr
 8005db4:	200007bc 	.word	0x200007bc

08005db8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005dc6:	4b42      	ldr	r3, [pc, #264]	@ (8005ed0 <xTaskResumeAll+0x118>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d10b      	bne.n	8005de6 <xTaskResumeAll+0x2e>
	__asm volatile
 8005dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dd2:	f383 8811 	msr	BASEPRI, r3
 8005dd6:	f3bf 8f6f 	isb	sy
 8005dda:	f3bf 8f4f 	dsb	sy
 8005dde:	603b      	str	r3, [r7, #0]
}
 8005de0:	bf00      	nop
 8005de2:	bf00      	nop
 8005de4:	e7fd      	b.n	8005de2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005de6:	f001 fa2f 	bl	8007248 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005dea:	4b39      	ldr	r3, [pc, #228]	@ (8005ed0 <xTaskResumeAll+0x118>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	3b01      	subs	r3, #1
 8005df0:	4a37      	ldr	r2, [pc, #220]	@ (8005ed0 <xTaskResumeAll+0x118>)
 8005df2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005df4:	4b36      	ldr	r3, [pc, #216]	@ (8005ed0 <xTaskResumeAll+0x118>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d161      	bne.n	8005ec0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005dfc:	4b35      	ldr	r3, [pc, #212]	@ (8005ed4 <xTaskResumeAll+0x11c>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d05d      	beq.n	8005ec0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e04:	e02e      	b.n	8005e64 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e06:	4b34      	ldr	r3, [pc, #208]	@ (8005ed8 <xTaskResumeAll+0x120>)
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	3318      	adds	r3, #24
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7fe ff89 	bl	8004d2a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	3304      	adds	r3, #4
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7fe ff84 	bl	8004d2a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e26:	2201      	movs	r2, #1
 8005e28:	409a      	lsls	r2, r3
 8005e2a:	4b2c      	ldr	r3, [pc, #176]	@ (8005edc <xTaskResumeAll+0x124>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	4a2a      	ldr	r2, [pc, #168]	@ (8005edc <xTaskResumeAll+0x124>)
 8005e32:	6013      	str	r3, [r2, #0]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e38:	4613      	mov	r3, r2
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4413      	add	r3, r2
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	4a27      	ldr	r2, [pc, #156]	@ (8005ee0 <xTaskResumeAll+0x128>)
 8005e42:	441a      	add	r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	3304      	adds	r3, #4
 8005e48:	4619      	mov	r1, r3
 8005e4a:	4610      	mov	r0, r2
 8005e4c:	f7fe ff10 	bl	8004c70 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e54:	4b23      	ldr	r3, [pc, #140]	@ (8005ee4 <xTaskResumeAll+0x12c>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d302      	bcc.n	8005e64 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005e5e:	4b22      	ldr	r3, [pc, #136]	@ (8005ee8 <xTaskResumeAll+0x130>)
 8005e60:	2201      	movs	r2, #1
 8005e62:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e64:	4b1c      	ldr	r3, [pc, #112]	@ (8005ed8 <xTaskResumeAll+0x120>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1cc      	bne.n	8005e06 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d001      	beq.n	8005e76 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005e72:	f000 fbf9 	bl	8006668 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005e76:	4b1d      	ldr	r3, [pc, #116]	@ (8005eec <xTaskResumeAll+0x134>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d010      	beq.n	8005ea4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005e82:	f000 f847 	bl	8005f14 <xTaskIncrementTick>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d002      	beq.n	8005e92 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005e8c:	4b16      	ldr	r3, [pc, #88]	@ (8005ee8 <xTaskResumeAll+0x130>)
 8005e8e:	2201      	movs	r2, #1
 8005e90:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	3b01      	subs	r3, #1
 8005e96:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d1f1      	bne.n	8005e82 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005e9e:	4b13      	ldr	r3, [pc, #76]	@ (8005eec <xTaskResumeAll+0x134>)
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005ea4:	4b10      	ldr	r3, [pc, #64]	@ (8005ee8 <xTaskResumeAll+0x130>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d009      	beq.n	8005ec0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005eac:	2301      	movs	r3, #1
 8005eae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8005ef0 <xTaskResumeAll+0x138>)
 8005eb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005eb6:	601a      	str	r2, [r3, #0]
 8005eb8:	f3bf 8f4f 	dsb	sy
 8005ebc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ec0:	f001 f9f4 	bl	80072ac <vPortExitCritical>

	return xAlreadyYielded;
 8005ec4:	68bb      	ldr	r3, [r7, #8]
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	200007bc 	.word	0x200007bc
 8005ed4:	20000794 	.word	0x20000794
 8005ed8:	20000754 	.word	0x20000754
 8005edc:	2000079c 	.word	0x2000079c
 8005ee0:	20000698 	.word	0x20000698
 8005ee4:	20000694 	.word	0x20000694
 8005ee8:	200007a8 	.word	0x200007a8
 8005eec:	200007a4 	.word	0x200007a4
 8005ef0:	e000ed04 	.word	0xe000ed04

08005ef4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005efa:	4b05      	ldr	r3, [pc, #20]	@ (8005f10 <xTaskGetTickCount+0x1c>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005f00:	687b      	ldr	r3, [r7, #4]
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	370c      	adds	r7, #12
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	20000798 	.word	0x20000798

08005f14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f1e:	4b4f      	ldr	r3, [pc, #316]	@ (800605c <xTaskIncrementTick+0x148>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f040 808f 	bne.w	8006046 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005f28:	4b4d      	ldr	r3, [pc, #308]	@ (8006060 <xTaskIncrementTick+0x14c>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005f30:	4a4b      	ldr	r2, [pc, #300]	@ (8006060 <xTaskIncrementTick+0x14c>)
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d121      	bne.n	8005f80 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005f3c:	4b49      	ldr	r3, [pc, #292]	@ (8006064 <xTaskIncrementTick+0x150>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00b      	beq.n	8005f5e <xTaskIncrementTick+0x4a>
	__asm volatile
 8005f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f4a:	f383 8811 	msr	BASEPRI, r3
 8005f4e:	f3bf 8f6f 	isb	sy
 8005f52:	f3bf 8f4f 	dsb	sy
 8005f56:	603b      	str	r3, [r7, #0]
}
 8005f58:	bf00      	nop
 8005f5a:	bf00      	nop
 8005f5c:	e7fd      	b.n	8005f5a <xTaskIncrementTick+0x46>
 8005f5e:	4b41      	ldr	r3, [pc, #260]	@ (8006064 <xTaskIncrementTick+0x150>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	60fb      	str	r3, [r7, #12]
 8005f64:	4b40      	ldr	r3, [pc, #256]	@ (8006068 <xTaskIncrementTick+0x154>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a3e      	ldr	r2, [pc, #248]	@ (8006064 <xTaskIncrementTick+0x150>)
 8005f6a:	6013      	str	r3, [r2, #0]
 8005f6c:	4a3e      	ldr	r2, [pc, #248]	@ (8006068 <xTaskIncrementTick+0x154>)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6013      	str	r3, [r2, #0]
 8005f72:	4b3e      	ldr	r3, [pc, #248]	@ (800606c <xTaskIncrementTick+0x158>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	3301      	adds	r3, #1
 8005f78:	4a3c      	ldr	r2, [pc, #240]	@ (800606c <xTaskIncrementTick+0x158>)
 8005f7a:	6013      	str	r3, [r2, #0]
 8005f7c:	f000 fb74 	bl	8006668 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005f80:	4b3b      	ldr	r3, [pc, #236]	@ (8006070 <xTaskIncrementTick+0x15c>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d348      	bcc.n	800601c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f8a:	4b36      	ldr	r3, [pc, #216]	@ (8006064 <xTaskIncrementTick+0x150>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d104      	bne.n	8005f9e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f94:	4b36      	ldr	r3, [pc, #216]	@ (8006070 <xTaskIncrementTick+0x15c>)
 8005f96:	f04f 32ff 	mov.w	r2, #4294967295
 8005f9a:	601a      	str	r2, [r3, #0]
					break;
 8005f9c:	e03e      	b.n	800601c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f9e:	4b31      	ldr	r3, [pc, #196]	@ (8006064 <xTaskIncrementTick+0x150>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005fae:	693a      	ldr	r2, [r7, #16]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d203      	bcs.n	8005fbe <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005fb6:	4a2e      	ldr	r2, [pc, #184]	@ (8006070 <xTaskIncrementTick+0x15c>)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005fbc:	e02e      	b.n	800601c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	3304      	adds	r3, #4
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f7fe feb1 	bl	8004d2a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d004      	beq.n	8005fda <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	3318      	adds	r3, #24
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f7fe fea8 	bl	8004d2a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fde:	2201      	movs	r2, #1
 8005fe0:	409a      	lsls	r2, r3
 8005fe2:	4b24      	ldr	r3, [pc, #144]	@ (8006074 <xTaskIncrementTick+0x160>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	4a22      	ldr	r2, [pc, #136]	@ (8006074 <xTaskIncrementTick+0x160>)
 8005fea:	6013      	str	r3, [r2, #0]
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	4413      	add	r3, r2
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4a1f      	ldr	r2, [pc, #124]	@ (8006078 <xTaskIncrementTick+0x164>)
 8005ffa:	441a      	add	r2, r3
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	3304      	adds	r3, #4
 8006000:	4619      	mov	r1, r3
 8006002:	4610      	mov	r0, r2
 8006004:	f7fe fe34 	bl	8004c70 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800600c:	4b1b      	ldr	r3, [pc, #108]	@ (800607c <xTaskIncrementTick+0x168>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006012:	429a      	cmp	r2, r3
 8006014:	d3b9      	bcc.n	8005f8a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006016:	2301      	movs	r3, #1
 8006018:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800601a:	e7b6      	b.n	8005f8a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800601c:	4b17      	ldr	r3, [pc, #92]	@ (800607c <xTaskIncrementTick+0x168>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006022:	4915      	ldr	r1, [pc, #84]	@ (8006078 <xTaskIncrementTick+0x164>)
 8006024:	4613      	mov	r3, r2
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	4413      	add	r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	440b      	add	r3, r1
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d901      	bls.n	8006038 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006034:	2301      	movs	r3, #1
 8006036:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006038:	4b11      	ldr	r3, [pc, #68]	@ (8006080 <xTaskIncrementTick+0x16c>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d007      	beq.n	8006050 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006040:	2301      	movs	r3, #1
 8006042:	617b      	str	r3, [r7, #20]
 8006044:	e004      	b.n	8006050 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006046:	4b0f      	ldr	r3, [pc, #60]	@ (8006084 <xTaskIncrementTick+0x170>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	3301      	adds	r3, #1
 800604c:	4a0d      	ldr	r2, [pc, #52]	@ (8006084 <xTaskIncrementTick+0x170>)
 800604e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006050:	697b      	ldr	r3, [r7, #20]
}
 8006052:	4618      	mov	r0, r3
 8006054:	3718      	adds	r7, #24
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	200007bc 	.word	0x200007bc
 8006060:	20000798 	.word	0x20000798
 8006064:	2000074c 	.word	0x2000074c
 8006068:	20000750 	.word	0x20000750
 800606c:	200007ac 	.word	0x200007ac
 8006070:	200007b4 	.word	0x200007b4
 8006074:	2000079c 	.word	0x2000079c
 8006078:	20000698 	.word	0x20000698
 800607c:	20000694 	.word	0x20000694
 8006080:	200007a8 	.word	0x200007a8
 8006084:	200007a4 	.word	0x200007a4

08006088 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006088:	b480      	push	{r7}
 800608a:	b087      	sub	sp, #28
 800608c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800608e:	4b27      	ldr	r3, [pc, #156]	@ (800612c <vTaskSwitchContext+0xa4>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d003      	beq.n	800609e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006096:	4b26      	ldr	r3, [pc, #152]	@ (8006130 <vTaskSwitchContext+0xa8>)
 8006098:	2201      	movs	r2, #1
 800609a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800609c:	e040      	b.n	8006120 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800609e:	4b24      	ldr	r3, [pc, #144]	@ (8006130 <vTaskSwitchContext+0xa8>)
 80060a0:	2200      	movs	r2, #0
 80060a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060a4:	4b23      	ldr	r3, [pc, #140]	@ (8006134 <vTaskSwitchContext+0xac>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	fab3 f383 	clz	r3, r3
 80060b0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80060b2:	7afb      	ldrb	r3, [r7, #11]
 80060b4:	f1c3 031f 	rsb	r3, r3, #31
 80060b8:	617b      	str	r3, [r7, #20]
 80060ba:	491f      	ldr	r1, [pc, #124]	@ (8006138 <vTaskSwitchContext+0xb0>)
 80060bc:	697a      	ldr	r2, [r7, #20]
 80060be:	4613      	mov	r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	4413      	add	r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	440b      	add	r3, r1
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d10b      	bne.n	80060e6 <vTaskSwitchContext+0x5e>
	__asm volatile
 80060ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d2:	f383 8811 	msr	BASEPRI, r3
 80060d6:	f3bf 8f6f 	isb	sy
 80060da:	f3bf 8f4f 	dsb	sy
 80060de:	607b      	str	r3, [r7, #4]
}
 80060e0:	bf00      	nop
 80060e2:	bf00      	nop
 80060e4:	e7fd      	b.n	80060e2 <vTaskSwitchContext+0x5a>
 80060e6:	697a      	ldr	r2, [r7, #20]
 80060e8:	4613      	mov	r3, r2
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	4413      	add	r3, r2
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	4a11      	ldr	r2, [pc, #68]	@ (8006138 <vTaskSwitchContext+0xb0>)
 80060f2:	4413      	add	r3, r2
 80060f4:	613b      	str	r3, [r7, #16]
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	685a      	ldr	r2, [r3, #4]
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	605a      	str	r2, [r3, #4]
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	685a      	ldr	r2, [r3, #4]
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	3308      	adds	r3, #8
 8006108:	429a      	cmp	r2, r3
 800610a:	d104      	bne.n	8006116 <vTaskSwitchContext+0x8e>
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	685a      	ldr	r2, [r3, #4]
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	605a      	str	r2, [r3, #4]
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	4a07      	ldr	r2, [pc, #28]	@ (800613c <vTaskSwitchContext+0xb4>)
 800611e:	6013      	str	r3, [r2, #0]
}
 8006120:	bf00      	nop
 8006122:	371c      	adds	r7, #28
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr
 800612c:	200007bc 	.word	0x200007bc
 8006130:	200007a8 	.word	0x200007a8
 8006134:	2000079c 	.word	0x2000079c
 8006138:	20000698 	.word	0x20000698
 800613c:	20000694 	.word	0x20000694

08006140 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10b      	bne.n	8006168 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006154:	f383 8811 	msr	BASEPRI, r3
 8006158:	f3bf 8f6f 	isb	sy
 800615c:	f3bf 8f4f 	dsb	sy
 8006160:	60fb      	str	r3, [r7, #12]
}
 8006162:	bf00      	nop
 8006164:	bf00      	nop
 8006166:	e7fd      	b.n	8006164 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006168:	4b07      	ldr	r3, [pc, #28]	@ (8006188 <vTaskPlaceOnEventList+0x48>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	3318      	adds	r3, #24
 800616e:	4619      	mov	r1, r3
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f7fe fda1 	bl	8004cb8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006176:	2101      	movs	r1, #1
 8006178:	6838      	ldr	r0, [r7, #0]
 800617a:	f000 fb53 	bl	8006824 <prvAddCurrentTaskToDelayedList>
}
 800617e:	bf00      	nop
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	20000694 	.word	0x20000694

0800618c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b086      	sub	sp, #24
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d10b      	bne.n	80061b6 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 800619e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061a2:	f383 8811 	msr	BASEPRI, r3
 80061a6:	f3bf 8f6f 	isb	sy
 80061aa:	f3bf 8f4f 	dsb	sy
 80061ae:	617b      	str	r3, [r7, #20]
}
 80061b0:	bf00      	nop
 80061b2:	bf00      	nop
 80061b4:	e7fd      	b.n	80061b2 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80061b6:	4b12      	ldr	r3, [pc, #72]	@ (8006200 <vTaskPlaceOnUnorderedEventList+0x74>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d10b      	bne.n	80061d6 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 80061be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061c2:	f383 8811 	msr	BASEPRI, r3
 80061c6:	f3bf 8f6f 	isb	sy
 80061ca:	f3bf 8f4f 	dsb	sy
 80061ce:	613b      	str	r3, [r7, #16]
}
 80061d0:	bf00      	nop
 80061d2:	bf00      	nop
 80061d4:	e7fd      	b.n	80061d2 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80061d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006204 <vTaskPlaceOnUnorderedEventList+0x78>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80061e0:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80061e2:	4b08      	ldr	r3, [pc, #32]	@ (8006204 <vTaskPlaceOnUnorderedEventList+0x78>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	3318      	adds	r3, #24
 80061e8:	4619      	mov	r1, r3
 80061ea:	68f8      	ldr	r0, [r7, #12]
 80061ec:	f7fe fd40 	bl	8004c70 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80061f0:	2101      	movs	r1, #1
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 fb16 	bl	8006824 <prvAddCurrentTaskToDelayedList>
}
 80061f8:	bf00      	nop
 80061fa:	3718      	adds	r7, #24
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	200007bc 	.word	0x200007bc
 8006204:	20000694 	.word	0x20000694

08006208 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006208:	b580      	push	{r7, lr}
 800620a:	b086      	sub	sp, #24
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d10b      	bne.n	8006232 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800621a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800621e:	f383 8811 	msr	BASEPRI, r3
 8006222:	f3bf 8f6f 	isb	sy
 8006226:	f3bf 8f4f 	dsb	sy
 800622a:	617b      	str	r3, [r7, #20]
}
 800622c:	bf00      	nop
 800622e:	bf00      	nop
 8006230:	e7fd      	b.n	800622e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006232:	4b0a      	ldr	r3, [pc, #40]	@ (800625c <vTaskPlaceOnEventListRestricted+0x54>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	3318      	adds	r3, #24
 8006238:	4619      	mov	r1, r3
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	f7fe fd18 	bl	8004c70 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d002      	beq.n	800624c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006246:	f04f 33ff 	mov.w	r3, #4294967295
 800624a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800624c:	6879      	ldr	r1, [r7, #4]
 800624e:	68b8      	ldr	r0, [r7, #8]
 8006250:	f000 fae8 	bl	8006824 <prvAddCurrentTaskToDelayedList>
	}
 8006254:	bf00      	nop
 8006256:	3718      	adds	r7, #24
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	20000694 	.word	0x20000694

08006260 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b086      	sub	sp, #24
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d10b      	bne.n	800628e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800627a:	f383 8811 	msr	BASEPRI, r3
 800627e:	f3bf 8f6f 	isb	sy
 8006282:	f3bf 8f4f 	dsb	sy
 8006286:	60fb      	str	r3, [r7, #12]
}
 8006288:	bf00      	nop
 800628a:	bf00      	nop
 800628c:	e7fd      	b.n	800628a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	3318      	adds	r3, #24
 8006292:	4618      	mov	r0, r3
 8006294:	f7fe fd49 	bl	8004d2a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006298:	4b1d      	ldr	r3, [pc, #116]	@ (8006310 <xTaskRemoveFromEventList+0xb0>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d11c      	bne.n	80062da <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	3304      	adds	r3, #4
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7fe fd40 	bl	8004d2a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ae:	2201      	movs	r2, #1
 80062b0:	409a      	lsls	r2, r3
 80062b2:	4b18      	ldr	r3, [pc, #96]	@ (8006314 <xTaskRemoveFromEventList+0xb4>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	4a16      	ldr	r2, [pc, #88]	@ (8006314 <xTaskRemoveFromEventList+0xb4>)
 80062ba:	6013      	str	r3, [r2, #0]
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062c0:	4613      	mov	r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	4413      	add	r3, r2
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	4a13      	ldr	r2, [pc, #76]	@ (8006318 <xTaskRemoveFromEventList+0xb8>)
 80062ca:	441a      	add	r2, r3
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	3304      	adds	r3, #4
 80062d0:	4619      	mov	r1, r3
 80062d2:	4610      	mov	r0, r2
 80062d4:	f7fe fccc 	bl	8004c70 <vListInsertEnd>
 80062d8:	e005      	b.n	80062e6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	3318      	adds	r3, #24
 80062de:	4619      	mov	r1, r3
 80062e0:	480e      	ldr	r0, [pc, #56]	@ (800631c <xTaskRemoveFromEventList+0xbc>)
 80062e2:	f7fe fcc5 	bl	8004c70 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006320 <xTaskRemoveFromEventList+0xc0>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d905      	bls.n	8006300 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80062f4:	2301      	movs	r3, #1
 80062f6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80062f8:	4b0a      	ldr	r3, [pc, #40]	@ (8006324 <xTaskRemoveFromEventList+0xc4>)
 80062fa:	2201      	movs	r2, #1
 80062fc:	601a      	str	r2, [r3, #0]
 80062fe:	e001      	b.n	8006304 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006300:	2300      	movs	r3, #0
 8006302:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006304:	697b      	ldr	r3, [r7, #20]
}
 8006306:	4618      	mov	r0, r3
 8006308:	3718      	adds	r7, #24
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	200007bc 	.word	0x200007bc
 8006314:	2000079c 	.word	0x2000079c
 8006318:	20000698 	.word	0x20000698
 800631c:	20000754 	.word	0x20000754
 8006320:	20000694 	.word	0x20000694
 8006324:	200007a8 	.word	0x200007a8

08006328 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b086      	sub	sp, #24
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8006332:	4b2a      	ldr	r3, [pc, #168]	@ (80063dc <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d10b      	bne.n	8006352 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 800633a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800633e:	f383 8811 	msr	BASEPRI, r3
 8006342:	f3bf 8f6f 	isb	sy
 8006346:	f3bf 8f4f 	dsb	sy
 800634a:	613b      	str	r3, [r7, #16]
}
 800634c:	bf00      	nop
 800634e:	bf00      	nop
 8006350:	e7fd      	b.n	800634e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10b      	bne.n	8006380 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 8006368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800636c:	f383 8811 	msr	BASEPRI, r3
 8006370:	f3bf 8f6f 	isb	sy
 8006374:	f3bf 8f4f 	dsb	sy
 8006378:	60fb      	str	r3, [r7, #12]
}
 800637a:	bf00      	nop
 800637c:	bf00      	nop
 800637e:	e7fd      	b.n	800637c <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f7fe fcd2 	bl	8004d2a <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	3304      	adds	r3, #4
 800638a:	4618      	mov	r0, r3
 800638c:	f7fe fccd 	bl	8004d2a <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006394:	2201      	movs	r2, #1
 8006396:	409a      	lsls	r2, r3
 8006398:	4b11      	ldr	r3, [pc, #68]	@ (80063e0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4313      	orrs	r3, r2
 800639e:	4a10      	ldr	r2, [pc, #64]	@ (80063e0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80063a0:	6013      	str	r3, [r2, #0]
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063a6:	4613      	mov	r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	4413      	add	r3, r2
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	4a0d      	ldr	r2, [pc, #52]	@ (80063e4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80063b0:	441a      	add	r2, r3
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	3304      	adds	r3, #4
 80063b6:	4619      	mov	r1, r3
 80063b8:	4610      	mov	r0, r2
 80063ba:	f7fe fc59 	bl	8004c70 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063c2:	4b09      	ldr	r3, [pc, #36]	@ (80063e8 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d902      	bls.n	80063d2 <vTaskRemoveFromUnorderedEventList+0xaa>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80063cc:	4b07      	ldr	r3, [pc, #28]	@ (80063ec <vTaskRemoveFromUnorderedEventList+0xc4>)
 80063ce:	2201      	movs	r2, #1
 80063d0:	601a      	str	r2, [r3, #0]
	}
}
 80063d2:	bf00      	nop
 80063d4:	3718      	adds	r7, #24
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	200007bc 	.word	0x200007bc
 80063e0:	2000079c 	.word	0x2000079c
 80063e4:	20000698 	.word	0x20000698
 80063e8:	20000694 	.word	0x20000694
 80063ec:	200007a8 	.word	0x200007a8

080063f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80063f8:	4b06      	ldr	r3, [pc, #24]	@ (8006414 <vTaskInternalSetTimeOutState+0x24>)
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006400:	4b05      	ldr	r3, [pc, #20]	@ (8006418 <vTaskInternalSetTimeOutState+0x28>)
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	605a      	str	r2, [r3, #4]
}
 8006408:	bf00      	nop
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr
 8006414:	200007ac 	.word	0x200007ac
 8006418:	20000798 	.word	0x20000798

0800641c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b088      	sub	sp, #32
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d10b      	bne.n	8006444 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800642c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006430:	f383 8811 	msr	BASEPRI, r3
 8006434:	f3bf 8f6f 	isb	sy
 8006438:	f3bf 8f4f 	dsb	sy
 800643c:	613b      	str	r3, [r7, #16]
}
 800643e:	bf00      	nop
 8006440:	bf00      	nop
 8006442:	e7fd      	b.n	8006440 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10b      	bne.n	8006462 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800644a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800644e:	f383 8811 	msr	BASEPRI, r3
 8006452:	f3bf 8f6f 	isb	sy
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	60fb      	str	r3, [r7, #12]
}
 800645c:	bf00      	nop
 800645e:	bf00      	nop
 8006460:	e7fd      	b.n	800645e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006462:	f000 fef1 	bl	8007248 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006466:	4b1d      	ldr	r3, [pc, #116]	@ (80064dc <xTaskCheckForTimeOut+0xc0>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	69ba      	ldr	r2, [r7, #24]
 8006472:	1ad3      	subs	r3, r2, r3
 8006474:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800647e:	d102      	bne.n	8006486 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006480:	2300      	movs	r3, #0
 8006482:	61fb      	str	r3, [r7, #28]
 8006484:	e023      	b.n	80064ce <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	4b15      	ldr	r3, [pc, #84]	@ (80064e0 <xTaskCheckForTimeOut+0xc4>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	429a      	cmp	r2, r3
 8006490:	d007      	beq.n	80064a2 <xTaskCheckForTimeOut+0x86>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	69ba      	ldr	r2, [r7, #24]
 8006498:	429a      	cmp	r2, r3
 800649a:	d302      	bcc.n	80064a2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800649c:	2301      	movs	r3, #1
 800649e:	61fb      	str	r3, [r7, #28]
 80064a0:	e015      	b.n	80064ce <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	697a      	ldr	r2, [r7, #20]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d20b      	bcs.n	80064c4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	1ad2      	subs	r2, r2, r3
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f7ff ff99 	bl	80063f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80064be:	2300      	movs	r3, #0
 80064c0:	61fb      	str	r3, [r7, #28]
 80064c2:	e004      	b.n	80064ce <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	2200      	movs	r2, #0
 80064c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80064ca:	2301      	movs	r3, #1
 80064cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80064ce:	f000 feed 	bl	80072ac <vPortExitCritical>

	return xReturn;
 80064d2:	69fb      	ldr	r3, [r7, #28]
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3720      	adds	r7, #32
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	20000798 	.word	0x20000798
 80064e0:	200007ac 	.word	0x200007ac

080064e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80064e4:	b480      	push	{r7}
 80064e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80064e8:	4b03      	ldr	r3, [pc, #12]	@ (80064f8 <vTaskMissedYield+0x14>)
 80064ea:	2201      	movs	r2, #1
 80064ec:	601a      	str	r2, [r3, #0]
}
 80064ee:	bf00      	nop
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr
 80064f8:	200007a8 	.word	0x200007a8

080064fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006504:	f000 f852 	bl	80065ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006508:	4b06      	ldr	r3, [pc, #24]	@ (8006524 <prvIdleTask+0x28>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2b01      	cmp	r3, #1
 800650e:	d9f9      	bls.n	8006504 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006510:	4b05      	ldr	r3, [pc, #20]	@ (8006528 <prvIdleTask+0x2c>)
 8006512:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006516:	601a      	str	r2, [r3, #0]
 8006518:	f3bf 8f4f 	dsb	sy
 800651c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006520:	e7f0      	b.n	8006504 <prvIdleTask+0x8>
 8006522:	bf00      	nop
 8006524:	20000698 	.word	0x20000698
 8006528:	e000ed04 	.word	0xe000ed04

0800652c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006532:	2300      	movs	r3, #0
 8006534:	607b      	str	r3, [r7, #4]
 8006536:	e00c      	b.n	8006552 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	4613      	mov	r3, r2
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	4413      	add	r3, r2
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	4a12      	ldr	r2, [pc, #72]	@ (800658c <prvInitialiseTaskLists+0x60>)
 8006544:	4413      	add	r3, r2
 8006546:	4618      	mov	r0, r3
 8006548:	f7fe fb65 	bl	8004c16 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	3301      	adds	r3, #1
 8006550:	607b      	str	r3, [r7, #4]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2b06      	cmp	r3, #6
 8006556:	d9ef      	bls.n	8006538 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006558:	480d      	ldr	r0, [pc, #52]	@ (8006590 <prvInitialiseTaskLists+0x64>)
 800655a:	f7fe fb5c 	bl	8004c16 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800655e:	480d      	ldr	r0, [pc, #52]	@ (8006594 <prvInitialiseTaskLists+0x68>)
 8006560:	f7fe fb59 	bl	8004c16 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006564:	480c      	ldr	r0, [pc, #48]	@ (8006598 <prvInitialiseTaskLists+0x6c>)
 8006566:	f7fe fb56 	bl	8004c16 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800656a:	480c      	ldr	r0, [pc, #48]	@ (800659c <prvInitialiseTaskLists+0x70>)
 800656c:	f7fe fb53 	bl	8004c16 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006570:	480b      	ldr	r0, [pc, #44]	@ (80065a0 <prvInitialiseTaskLists+0x74>)
 8006572:	f7fe fb50 	bl	8004c16 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006576:	4b0b      	ldr	r3, [pc, #44]	@ (80065a4 <prvInitialiseTaskLists+0x78>)
 8006578:	4a05      	ldr	r2, [pc, #20]	@ (8006590 <prvInitialiseTaskLists+0x64>)
 800657a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800657c:	4b0a      	ldr	r3, [pc, #40]	@ (80065a8 <prvInitialiseTaskLists+0x7c>)
 800657e:	4a05      	ldr	r2, [pc, #20]	@ (8006594 <prvInitialiseTaskLists+0x68>)
 8006580:	601a      	str	r2, [r3, #0]
}
 8006582:	bf00      	nop
 8006584:	3708      	adds	r7, #8
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	20000698 	.word	0x20000698
 8006590:	20000724 	.word	0x20000724
 8006594:	20000738 	.word	0x20000738
 8006598:	20000754 	.word	0x20000754
 800659c:	20000768 	.word	0x20000768
 80065a0:	20000780 	.word	0x20000780
 80065a4:	2000074c 	.word	0x2000074c
 80065a8:	20000750 	.word	0x20000750

080065ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065b2:	e019      	b.n	80065e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80065b4:	f000 fe48 	bl	8007248 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065b8:	4b10      	ldr	r3, [pc, #64]	@ (80065fc <prvCheckTasksWaitingTermination+0x50>)
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	3304      	adds	r3, #4
 80065c4:	4618      	mov	r0, r3
 80065c6:	f7fe fbb0 	bl	8004d2a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80065ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006600 <prvCheckTasksWaitingTermination+0x54>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	3b01      	subs	r3, #1
 80065d0:	4a0b      	ldr	r2, [pc, #44]	@ (8006600 <prvCheckTasksWaitingTermination+0x54>)
 80065d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80065d4:	4b0b      	ldr	r3, [pc, #44]	@ (8006604 <prvCheckTasksWaitingTermination+0x58>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	3b01      	subs	r3, #1
 80065da:	4a0a      	ldr	r2, [pc, #40]	@ (8006604 <prvCheckTasksWaitingTermination+0x58>)
 80065dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80065de:	f000 fe65 	bl	80072ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 f810 	bl	8006608 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065e8:	4b06      	ldr	r3, [pc, #24]	@ (8006604 <prvCheckTasksWaitingTermination+0x58>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1e1      	bne.n	80065b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80065f0:	bf00      	nop
 80065f2:	bf00      	nop
 80065f4:	3708      	adds	r7, #8
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	20000768 	.word	0x20000768
 8006600:	20000794 	.word	0x20000794
 8006604:	2000077c 	.word	0x2000077c

08006608 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006616:	2b00      	cmp	r3, #0
 8006618:	d108      	bne.n	800662c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800661e:	4618      	mov	r0, r3
 8006620:	f001 f802 	bl	8007628 <vPortFree>
				vPortFree( pxTCB );
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 ffff 	bl	8007628 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800662a:	e019      	b.n	8006660 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006632:	2b01      	cmp	r3, #1
 8006634:	d103      	bne.n	800663e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 fff6 	bl	8007628 <vPortFree>
	}
 800663c:	e010      	b.n	8006660 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006644:	2b02      	cmp	r3, #2
 8006646:	d00b      	beq.n	8006660 <prvDeleteTCB+0x58>
	__asm volatile
 8006648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800664c:	f383 8811 	msr	BASEPRI, r3
 8006650:	f3bf 8f6f 	isb	sy
 8006654:	f3bf 8f4f 	dsb	sy
 8006658:	60fb      	str	r3, [r7, #12]
}
 800665a:	bf00      	nop
 800665c:	bf00      	nop
 800665e:	e7fd      	b.n	800665c <prvDeleteTCB+0x54>
	}
 8006660:	bf00      	nop
 8006662:	3710      	adds	r7, #16
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800666e:	4b0c      	ldr	r3, [pc, #48]	@ (80066a0 <prvResetNextTaskUnblockTime+0x38>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d104      	bne.n	8006682 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006678:	4b0a      	ldr	r3, [pc, #40]	@ (80066a4 <prvResetNextTaskUnblockTime+0x3c>)
 800667a:	f04f 32ff 	mov.w	r2, #4294967295
 800667e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006680:	e008      	b.n	8006694 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006682:	4b07      	ldr	r3, [pc, #28]	@ (80066a0 <prvResetNextTaskUnblockTime+0x38>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	4a04      	ldr	r2, [pc, #16]	@ (80066a4 <prvResetNextTaskUnblockTime+0x3c>)
 8006692:	6013      	str	r3, [r2, #0]
}
 8006694:	bf00      	nop
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr
 80066a0:	2000074c 	.word	0x2000074c
 80066a4:	200007b4 	.word	0x200007b4

080066a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80066ae:	4b0b      	ldr	r3, [pc, #44]	@ (80066dc <xTaskGetSchedulerState+0x34>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d102      	bne.n	80066bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80066b6:	2301      	movs	r3, #1
 80066b8:	607b      	str	r3, [r7, #4]
 80066ba:	e008      	b.n	80066ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066bc:	4b08      	ldr	r3, [pc, #32]	@ (80066e0 <xTaskGetSchedulerState+0x38>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d102      	bne.n	80066ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80066c4:	2302      	movs	r3, #2
 80066c6:	607b      	str	r3, [r7, #4]
 80066c8:	e001      	b.n	80066ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80066ca:	2300      	movs	r3, #0
 80066cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80066ce:	687b      	ldr	r3, [r7, #4]
	}
 80066d0:	4618      	mov	r0, r3
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr
 80066dc:	200007a0 	.word	0x200007a0
 80066e0:	200007bc 	.word	0x200007bc

080066e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b086      	sub	sp, #24
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80066f0:	2300      	movs	r3, #0
 80066f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d070      	beq.n	80067dc <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80066fa:	4b3b      	ldr	r3, [pc, #236]	@ (80067e8 <xTaskPriorityDisinherit+0x104>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	429a      	cmp	r2, r3
 8006702:	d00b      	beq.n	800671c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006708:	f383 8811 	msr	BASEPRI, r3
 800670c:	f3bf 8f6f 	isb	sy
 8006710:	f3bf 8f4f 	dsb	sy
 8006714:	60fb      	str	r3, [r7, #12]
}
 8006716:	bf00      	nop
 8006718:	bf00      	nop
 800671a:	e7fd      	b.n	8006718 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006720:	2b00      	cmp	r3, #0
 8006722:	d10b      	bne.n	800673c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006728:	f383 8811 	msr	BASEPRI, r3
 800672c:	f3bf 8f6f 	isb	sy
 8006730:	f3bf 8f4f 	dsb	sy
 8006734:	60bb      	str	r3, [r7, #8]
}
 8006736:	bf00      	nop
 8006738:	bf00      	nop
 800673a:	e7fd      	b.n	8006738 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006740:	1e5a      	subs	r2, r3, #1
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800674e:	429a      	cmp	r2, r3
 8006750:	d044      	beq.n	80067dc <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006756:	2b00      	cmp	r3, #0
 8006758:	d140      	bne.n	80067dc <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	3304      	adds	r3, #4
 800675e:	4618      	mov	r0, r3
 8006760:	f7fe fae3 	bl	8004d2a <uxListRemove>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d115      	bne.n	8006796 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800676e:	491f      	ldr	r1, [pc, #124]	@ (80067ec <xTaskPriorityDisinherit+0x108>)
 8006770:	4613      	mov	r3, r2
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	4413      	add	r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	440b      	add	r3, r1
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10a      	bne.n	8006796 <xTaskPriorityDisinherit+0xb2>
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006784:	2201      	movs	r2, #1
 8006786:	fa02 f303 	lsl.w	r3, r2, r3
 800678a:	43da      	mvns	r2, r3
 800678c:	4b18      	ldr	r3, [pc, #96]	@ (80067f0 <xTaskPriorityDisinherit+0x10c>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4013      	ands	r3, r2
 8006792:	4a17      	ldr	r2, [pc, #92]	@ (80067f0 <xTaskPriorityDisinherit+0x10c>)
 8006794:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067a2:	f1c3 0207 	rsb	r2, r3, #7
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ae:	2201      	movs	r2, #1
 80067b0:	409a      	lsls	r2, r3
 80067b2:	4b0f      	ldr	r3, [pc, #60]	@ (80067f0 <xTaskPriorityDisinherit+0x10c>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	4a0d      	ldr	r2, [pc, #52]	@ (80067f0 <xTaskPriorityDisinherit+0x10c>)
 80067ba:	6013      	str	r3, [r2, #0]
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067c0:	4613      	mov	r3, r2
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	4413      	add	r3, r2
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	4a08      	ldr	r2, [pc, #32]	@ (80067ec <xTaskPriorityDisinherit+0x108>)
 80067ca:	441a      	add	r2, r3
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	3304      	adds	r3, #4
 80067d0:	4619      	mov	r1, r3
 80067d2:	4610      	mov	r0, r2
 80067d4:	f7fe fa4c 	bl	8004c70 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80067d8:	2301      	movs	r3, #1
 80067da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80067dc:	697b      	ldr	r3, [r7, #20]
	}
 80067de:	4618      	mov	r0, r3
 80067e0:	3718      	adds	r7, #24
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	20000694 	.word	0x20000694
 80067ec:	20000698 	.word	0x20000698
 80067f0:	2000079c 	.word	0x2000079c

080067f4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80067fa:	4b09      	ldr	r3, [pc, #36]	@ (8006820 <uxTaskResetEventItemValue+0x2c>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	699b      	ldr	r3, [r3, #24]
 8006800:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006802:	4b07      	ldr	r3, [pc, #28]	@ (8006820 <uxTaskResetEventItemValue+0x2c>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006808:	4b05      	ldr	r3, [pc, #20]	@ (8006820 <uxTaskResetEventItemValue+0x2c>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f1c2 0207 	rsb	r2, r2, #7
 8006810:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8006812:	687b      	ldr	r3, [r7, #4]
}
 8006814:	4618      	mov	r0, r3
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr
 8006820:	20000694 	.word	0x20000694

08006824 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800682e:	4b29      	ldr	r3, [pc, #164]	@ (80068d4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006834:	4b28      	ldr	r3, [pc, #160]	@ (80068d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	3304      	adds	r3, #4
 800683a:	4618      	mov	r0, r3
 800683c:	f7fe fa75 	bl	8004d2a <uxListRemove>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d10b      	bne.n	800685e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006846:	4b24      	ldr	r3, [pc, #144]	@ (80068d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800684c:	2201      	movs	r2, #1
 800684e:	fa02 f303 	lsl.w	r3, r2, r3
 8006852:	43da      	mvns	r2, r3
 8006854:	4b21      	ldr	r3, [pc, #132]	@ (80068dc <prvAddCurrentTaskToDelayedList+0xb8>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4013      	ands	r3, r2
 800685a:	4a20      	ldr	r2, [pc, #128]	@ (80068dc <prvAddCurrentTaskToDelayedList+0xb8>)
 800685c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006864:	d10a      	bne.n	800687c <prvAddCurrentTaskToDelayedList+0x58>
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d007      	beq.n	800687c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800686c:	4b1a      	ldr	r3, [pc, #104]	@ (80068d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	3304      	adds	r3, #4
 8006872:	4619      	mov	r1, r3
 8006874:	481a      	ldr	r0, [pc, #104]	@ (80068e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006876:	f7fe f9fb 	bl	8004c70 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800687a:	e026      	b.n	80068ca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4413      	add	r3, r2
 8006882:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006884:	4b14      	ldr	r3, [pc, #80]	@ (80068d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68ba      	ldr	r2, [r7, #8]
 800688a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800688c:	68ba      	ldr	r2, [r7, #8]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	429a      	cmp	r2, r3
 8006892:	d209      	bcs.n	80068a8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006894:	4b13      	ldr	r3, [pc, #76]	@ (80068e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	4b0f      	ldr	r3, [pc, #60]	@ (80068d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	3304      	adds	r3, #4
 800689e:	4619      	mov	r1, r3
 80068a0:	4610      	mov	r0, r2
 80068a2:	f7fe fa09 	bl	8004cb8 <vListInsert>
}
 80068a6:	e010      	b.n	80068ca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068a8:	4b0f      	ldr	r3, [pc, #60]	@ (80068e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	4b0a      	ldr	r3, [pc, #40]	@ (80068d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	3304      	adds	r3, #4
 80068b2:	4619      	mov	r1, r3
 80068b4:	4610      	mov	r0, r2
 80068b6:	f7fe f9ff 	bl	8004cb8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80068ba:	4b0c      	ldr	r3, [pc, #48]	@ (80068ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68ba      	ldr	r2, [r7, #8]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d202      	bcs.n	80068ca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80068c4:	4a09      	ldr	r2, [pc, #36]	@ (80068ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	6013      	str	r3, [r2, #0]
}
 80068ca:	bf00      	nop
 80068cc:	3710      	adds	r7, #16
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	20000798 	.word	0x20000798
 80068d8:	20000694 	.word	0x20000694
 80068dc:	2000079c 	.word	0x2000079c
 80068e0:	20000780 	.word	0x20000780
 80068e4:	20000750 	.word	0x20000750
 80068e8:	2000074c 	.word	0x2000074c
 80068ec:	200007b4 	.word	0x200007b4

080068f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b08a      	sub	sp, #40	@ 0x28
 80068f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80068f6:	2300      	movs	r3, #0
 80068f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80068fa:	f000 fb13 	bl	8006f24 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80068fe:	4b1d      	ldr	r3, [pc, #116]	@ (8006974 <xTimerCreateTimerTask+0x84>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d021      	beq.n	800694a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006906:	2300      	movs	r3, #0
 8006908:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800690a:	2300      	movs	r3, #0
 800690c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800690e:	1d3a      	adds	r2, r7, #4
 8006910:	f107 0108 	add.w	r1, r7, #8
 8006914:	f107 030c 	add.w	r3, r7, #12
 8006918:	4618      	mov	r0, r3
 800691a:	f7f9 fe4b 	bl	80005b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800691e:	6879      	ldr	r1, [r7, #4]
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	9202      	str	r2, [sp, #8]
 8006926:	9301      	str	r3, [sp, #4]
 8006928:	2306      	movs	r3, #6
 800692a:	9300      	str	r3, [sp, #0]
 800692c:	2300      	movs	r3, #0
 800692e:	460a      	mov	r2, r1
 8006930:	4911      	ldr	r1, [pc, #68]	@ (8006978 <xTimerCreateTimerTask+0x88>)
 8006932:	4812      	ldr	r0, [pc, #72]	@ (800697c <xTimerCreateTimerTask+0x8c>)
 8006934:	f7fe fffc 	bl	8005930 <xTaskCreateStatic>
 8006938:	4603      	mov	r3, r0
 800693a:	4a11      	ldr	r2, [pc, #68]	@ (8006980 <xTimerCreateTimerTask+0x90>)
 800693c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800693e:	4b10      	ldr	r3, [pc, #64]	@ (8006980 <xTimerCreateTimerTask+0x90>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d001      	beq.n	800694a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006946:	2301      	movs	r3, #1
 8006948:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d10b      	bne.n	8006968 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006954:	f383 8811 	msr	BASEPRI, r3
 8006958:	f3bf 8f6f 	isb	sy
 800695c:	f3bf 8f4f 	dsb	sy
 8006960:	613b      	str	r3, [r7, #16]
}
 8006962:	bf00      	nop
 8006964:	bf00      	nop
 8006966:	e7fd      	b.n	8006964 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006968:	697b      	ldr	r3, [r7, #20]
}
 800696a:	4618      	mov	r0, r3
 800696c:	3718      	adds	r7, #24
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	200007f0 	.word	0x200007f0
 8006978:	08008e90 	.word	0x08008e90
 800697c:	08006abd 	.word	0x08006abd
 8006980:	200007f4 	.word	0x200007f4

08006984 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b08a      	sub	sp, #40	@ 0x28
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	607a      	str	r2, [r7, #4]
 8006990:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006992:	2300      	movs	r3, #0
 8006994:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d10b      	bne.n	80069b4 <xTimerGenericCommand+0x30>
	__asm volatile
 800699c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a0:	f383 8811 	msr	BASEPRI, r3
 80069a4:	f3bf 8f6f 	isb	sy
 80069a8:	f3bf 8f4f 	dsb	sy
 80069ac:	623b      	str	r3, [r7, #32]
}
 80069ae:	bf00      	nop
 80069b0:	bf00      	nop
 80069b2:	e7fd      	b.n	80069b0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80069b4:	4b19      	ldr	r3, [pc, #100]	@ (8006a1c <xTimerGenericCommand+0x98>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d02a      	beq.n	8006a12 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	2b05      	cmp	r3, #5
 80069cc:	dc18      	bgt.n	8006a00 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80069ce:	f7ff fe6b 	bl	80066a8 <xTaskGetSchedulerState>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	d109      	bne.n	80069ec <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80069d8:	4b10      	ldr	r3, [pc, #64]	@ (8006a1c <xTimerGenericCommand+0x98>)
 80069da:	6818      	ldr	r0, [r3, #0]
 80069dc:	f107 0110 	add.w	r1, r7, #16
 80069e0:	2300      	movs	r3, #0
 80069e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069e4:	f7fe fb0e 	bl	8005004 <xQueueGenericSend>
 80069e8:	6278      	str	r0, [r7, #36]	@ 0x24
 80069ea:	e012      	b.n	8006a12 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80069ec:	4b0b      	ldr	r3, [pc, #44]	@ (8006a1c <xTimerGenericCommand+0x98>)
 80069ee:	6818      	ldr	r0, [r3, #0]
 80069f0:	f107 0110 	add.w	r1, r7, #16
 80069f4:	2300      	movs	r3, #0
 80069f6:	2200      	movs	r2, #0
 80069f8:	f7fe fb04 	bl	8005004 <xQueueGenericSend>
 80069fc:	6278      	str	r0, [r7, #36]	@ 0x24
 80069fe:	e008      	b.n	8006a12 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006a00:	4b06      	ldr	r3, [pc, #24]	@ (8006a1c <xTimerGenericCommand+0x98>)
 8006a02:	6818      	ldr	r0, [r3, #0]
 8006a04:	f107 0110 	add.w	r1, r7, #16
 8006a08:	2300      	movs	r3, #0
 8006a0a:	683a      	ldr	r2, [r7, #0]
 8006a0c:	f7fe fbfc 	bl	8005208 <xQueueGenericSendFromISR>
 8006a10:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3728      	adds	r7, #40	@ 0x28
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	200007f0 	.word	0x200007f0

08006a20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b088      	sub	sp, #32
 8006a24:	af02      	add	r7, sp, #8
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a2a:	4b23      	ldr	r3, [pc, #140]	@ (8006ab8 <prvProcessExpiredTimer+0x98>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	3304      	adds	r3, #4
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f7fe f976 	bl	8004d2a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006a44:	f003 0304 	and.w	r3, r3, #4
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d023      	beq.n	8006a94 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	699a      	ldr	r2, [r3, #24]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	18d1      	adds	r1, r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	683a      	ldr	r2, [r7, #0]
 8006a58:	6978      	ldr	r0, [r7, #20]
 8006a5a:	f000 f8d5 	bl	8006c08 <prvInsertTimerInActiveList>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d020      	beq.n	8006aa6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a64:	2300      	movs	r3, #0
 8006a66:	9300      	str	r3, [sp, #0]
 8006a68:	2300      	movs	r3, #0
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	2100      	movs	r1, #0
 8006a6e:	6978      	ldr	r0, [r7, #20]
 8006a70:	f7ff ff88 	bl	8006984 <xTimerGenericCommand>
 8006a74:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d114      	bne.n	8006aa6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a80:	f383 8811 	msr	BASEPRI, r3
 8006a84:	f3bf 8f6f 	isb	sy
 8006a88:	f3bf 8f4f 	dsb	sy
 8006a8c:	60fb      	str	r3, [r7, #12]
}
 8006a8e:	bf00      	nop
 8006a90:	bf00      	nop
 8006a92:	e7fd      	b.n	8006a90 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006a9a:	f023 0301 	bic.w	r3, r3, #1
 8006a9e:	b2da      	uxtb	r2, r3
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	6a1b      	ldr	r3, [r3, #32]
 8006aaa:	6978      	ldr	r0, [r7, #20]
 8006aac:	4798      	blx	r3
}
 8006aae:	bf00      	nop
 8006ab0:	3718      	adds	r7, #24
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	200007e8 	.word	0x200007e8

08006abc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ac4:	f107 0308 	add.w	r3, r7, #8
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f000 f859 	bl	8006b80 <prvGetNextExpireTime>
 8006ace:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f000 f805 	bl	8006ae4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006ada:	f000 f8d7 	bl	8006c8c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ade:	bf00      	nop
 8006ae0:	e7f0      	b.n	8006ac4 <prvTimerTask+0x8>
	...

08006ae4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006aee:	f7ff f955 	bl	8005d9c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006af2:	f107 0308 	add.w	r3, r7, #8
 8006af6:	4618      	mov	r0, r3
 8006af8:	f000 f866 	bl	8006bc8 <prvSampleTimeNow>
 8006afc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d130      	bne.n	8006b66 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d10a      	bne.n	8006b20 <prvProcessTimerOrBlockTask+0x3c>
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d806      	bhi.n	8006b20 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006b12:	f7ff f951 	bl	8005db8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006b16:	68f9      	ldr	r1, [r7, #12]
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f7ff ff81 	bl	8006a20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006b1e:	e024      	b.n	8006b6a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d008      	beq.n	8006b38 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006b26:	4b13      	ldr	r3, [pc, #76]	@ (8006b74 <prvProcessTimerOrBlockTask+0x90>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d101      	bne.n	8006b34 <prvProcessTimerOrBlockTask+0x50>
 8006b30:	2301      	movs	r3, #1
 8006b32:	e000      	b.n	8006b36 <prvProcessTimerOrBlockTask+0x52>
 8006b34:	2300      	movs	r3, #0
 8006b36:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006b38:	4b0f      	ldr	r3, [pc, #60]	@ (8006b78 <prvProcessTimerOrBlockTask+0x94>)
 8006b3a:	6818      	ldr	r0, [r3, #0]
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	683a      	ldr	r2, [r7, #0]
 8006b44:	4619      	mov	r1, r3
 8006b46:	f7fe febf 	bl	80058c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006b4a:	f7ff f935 	bl	8005db8 <xTaskResumeAll>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d10a      	bne.n	8006b6a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006b54:	4b09      	ldr	r3, [pc, #36]	@ (8006b7c <prvProcessTimerOrBlockTask+0x98>)
 8006b56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b5a:	601a      	str	r2, [r3, #0]
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	f3bf 8f6f 	isb	sy
}
 8006b64:	e001      	b.n	8006b6a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006b66:	f7ff f927 	bl	8005db8 <xTaskResumeAll>
}
 8006b6a:	bf00      	nop
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop
 8006b74:	200007ec 	.word	0x200007ec
 8006b78:	200007f0 	.word	0x200007f0
 8006b7c:	e000ed04 	.word	0xe000ed04

08006b80 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006b80:	b480      	push	{r7}
 8006b82:	b085      	sub	sp, #20
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006b88:	4b0e      	ldr	r3, [pc, #56]	@ (8006bc4 <prvGetNextExpireTime+0x44>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d101      	bne.n	8006b96 <prvGetNextExpireTime+0x16>
 8006b92:	2201      	movs	r2, #1
 8006b94:	e000      	b.n	8006b98 <prvGetNextExpireTime+0x18>
 8006b96:	2200      	movs	r2, #0
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d105      	bne.n	8006bb0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ba4:	4b07      	ldr	r3, [pc, #28]	@ (8006bc4 <prvGetNextExpireTime+0x44>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	60fb      	str	r3, [r7, #12]
 8006bae:	e001      	b.n	8006bb4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3714      	adds	r7, #20
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop
 8006bc4:	200007e8 	.word	0x200007e8

08006bc8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006bd0:	f7ff f990 	bl	8005ef4 <xTaskGetTickCount>
 8006bd4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8006c04 <prvSampleTimeNow+0x3c>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d205      	bcs.n	8006bec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006be0:	f000 f93a 	bl	8006e58 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	601a      	str	r2, [r3, #0]
 8006bea:	e002      	b.n	8006bf2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006bf2:	4a04      	ldr	r2, [pc, #16]	@ (8006c04 <prvSampleTimeNow+0x3c>)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	200007f8 	.word	0x200007f8

08006c08 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b086      	sub	sp, #24
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	607a      	str	r2, [r7, #4]
 8006c14:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006c16:	2300      	movs	r3, #0
 8006c18:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	68ba      	ldr	r2, [r7, #8]
 8006c1e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006c26:	68ba      	ldr	r2, [r7, #8]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d812      	bhi.n	8006c54 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	1ad2      	subs	r2, r2, r3
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	699b      	ldr	r3, [r3, #24]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d302      	bcc.n	8006c42 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	617b      	str	r3, [r7, #20]
 8006c40:	e01b      	b.n	8006c7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006c42:	4b10      	ldr	r3, [pc, #64]	@ (8006c84 <prvInsertTimerInActiveList+0x7c>)
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	3304      	adds	r3, #4
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	4610      	mov	r0, r2
 8006c4e:	f7fe f833 	bl	8004cb8 <vListInsert>
 8006c52:	e012      	b.n	8006c7a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d206      	bcs.n	8006c6a <prvInsertTimerInActiveList+0x62>
 8006c5c:	68ba      	ldr	r2, [r7, #8]
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d302      	bcc.n	8006c6a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006c64:	2301      	movs	r3, #1
 8006c66:	617b      	str	r3, [r7, #20]
 8006c68:	e007      	b.n	8006c7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c6a:	4b07      	ldr	r3, [pc, #28]	@ (8006c88 <prvInsertTimerInActiveList+0x80>)
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	3304      	adds	r3, #4
 8006c72:	4619      	mov	r1, r3
 8006c74:	4610      	mov	r0, r2
 8006c76:	f7fe f81f 	bl	8004cb8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006c7a:	697b      	ldr	r3, [r7, #20]
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3718      	adds	r7, #24
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	200007ec 	.word	0x200007ec
 8006c88:	200007e8 	.word	0x200007e8

08006c8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b08e      	sub	sp, #56	@ 0x38
 8006c90:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c92:	e0ce      	b.n	8006e32 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	da19      	bge.n	8006cce <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006c9a:	1d3b      	adds	r3, r7, #4
 8006c9c:	3304      	adds	r3, #4
 8006c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d10b      	bne.n	8006cbe <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006caa:	f383 8811 	msr	BASEPRI, r3
 8006cae:	f3bf 8f6f 	isb	sy
 8006cb2:	f3bf 8f4f 	dsb	sy
 8006cb6:	61fb      	str	r3, [r7, #28]
}
 8006cb8:	bf00      	nop
 8006cba:	bf00      	nop
 8006cbc:	e7fd      	b.n	8006cba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cc4:	6850      	ldr	r0, [r2, #4]
 8006cc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cc8:	6892      	ldr	r2, [r2, #8]
 8006cca:	4611      	mov	r1, r2
 8006ccc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f2c0 80ae 	blt.w	8006e32 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cdc:	695b      	ldr	r3, [r3, #20]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d004      	beq.n	8006cec <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ce4:	3304      	adds	r3, #4
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f7fe f81f 	bl	8004d2a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006cec:	463b      	mov	r3, r7
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7ff ff6a 	bl	8006bc8 <prvSampleTimeNow>
 8006cf4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2b09      	cmp	r3, #9
 8006cfa:	f200 8097 	bhi.w	8006e2c <prvProcessReceivedCommands+0x1a0>
 8006cfe:	a201      	add	r2, pc, #4	@ (adr r2, 8006d04 <prvProcessReceivedCommands+0x78>)
 8006d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d04:	08006d2d 	.word	0x08006d2d
 8006d08:	08006d2d 	.word	0x08006d2d
 8006d0c:	08006d2d 	.word	0x08006d2d
 8006d10:	08006da3 	.word	0x08006da3
 8006d14:	08006db7 	.word	0x08006db7
 8006d18:	08006e03 	.word	0x08006e03
 8006d1c:	08006d2d 	.word	0x08006d2d
 8006d20:	08006d2d 	.word	0x08006d2d
 8006d24:	08006da3 	.word	0x08006da3
 8006d28:	08006db7 	.word	0x08006db7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d2e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006d32:	f043 0301 	orr.w	r3, r3, #1
 8006d36:	b2da      	uxtb	r2, r3
 8006d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006d3e:	68ba      	ldr	r2, [r7, #8]
 8006d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	18d1      	adds	r1, r2, r3
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d4c:	f7ff ff5c 	bl	8006c08 <prvInsertTimerInActiveList>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d06c      	beq.n	8006e30 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d58:	6a1b      	ldr	r3, [r3, #32]
 8006d5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d60:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006d64:	f003 0304 	and.w	r3, r3, #4
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d061      	beq.n	8006e30 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006d6c:	68ba      	ldr	r2, [r7, #8]
 8006d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d70:	699b      	ldr	r3, [r3, #24]
 8006d72:	441a      	add	r2, r3
 8006d74:	2300      	movs	r3, #0
 8006d76:	9300      	str	r3, [sp, #0]
 8006d78:	2300      	movs	r3, #0
 8006d7a:	2100      	movs	r1, #0
 8006d7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d7e:	f7ff fe01 	bl	8006984 <xTimerGenericCommand>
 8006d82:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006d84:	6a3b      	ldr	r3, [r7, #32]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d152      	bne.n	8006e30 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d8e:	f383 8811 	msr	BASEPRI, r3
 8006d92:	f3bf 8f6f 	isb	sy
 8006d96:	f3bf 8f4f 	dsb	sy
 8006d9a:	61bb      	str	r3, [r7, #24]
}
 8006d9c:	bf00      	nop
 8006d9e:	bf00      	nop
 8006da0:	e7fd      	b.n	8006d9e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006da4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006da8:	f023 0301 	bic.w	r3, r3, #1
 8006dac:	b2da      	uxtb	r2, r3
 8006dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006db0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8006db4:	e03d      	b.n	8006e32 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006db8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006dbc:	f043 0301 	orr.w	r3, r3, #1
 8006dc0:	b2da      	uxtb	r2, r3
 8006dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dc4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006dc8:	68ba      	ldr	r2, [r7, #8]
 8006dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dcc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd0:	699b      	ldr	r3, [r3, #24]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d10b      	bne.n	8006dee <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dda:	f383 8811 	msr	BASEPRI, r3
 8006dde:	f3bf 8f6f 	isb	sy
 8006de2:	f3bf 8f4f 	dsb	sy
 8006de6:	617b      	str	r3, [r7, #20]
}
 8006de8:	bf00      	nop
 8006dea:	bf00      	nop
 8006dec:	e7fd      	b.n	8006dea <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006df0:	699a      	ldr	r2, [r3, #24]
 8006df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df4:	18d1      	adds	r1, r2, r3
 8006df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006dfc:	f7ff ff04 	bl	8006c08 <prvInsertTimerInActiveList>
					break;
 8006e00:	e017      	b.n	8006e32 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e04:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006e08:	f003 0302 	and.w	r3, r3, #2
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d103      	bne.n	8006e18 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006e10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e12:	f000 fc09 	bl	8007628 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006e16:	e00c      	b.n	8006e32 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e1a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006e1e:	f023 0301 	bic.w	r3, r3, #1
 8006e22:	b2da      	uxtb	r2, r3
 8006e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8006e2a:	e002      	b.n	8006e32 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006e2c:	bf00      	nop
 8006e2e:	e000      	b.n	8006e32 <prvProcessReceivedCommands+0x1a6>
					break;
 8006e30:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e32:	4b08      	ldr	r3, [pc, #32]	@ (8006e54 <prvProcessReceivedCommands+0x1c8>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	1d39      	adds	r1, r7, #4
 8006e38:	2200      	movs	r2, #0
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7fe fa82 	bl	8005344 <xQueueReceive>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	f47f af26 	bne.w	8006c94 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006e48:	bf00      	nop
 8006e4a:	bf00      	nop
 8006e4c:	3730      	adds	r7, #48	@ 0x30
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	200007f0 	.word	0x200007f0

08006e58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b088      	sub	sp, #32
 8006e5c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e5e:	e049      	b.n	8006ef4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e60:	4b2e      	ldr	r3, [pc, #184]	@ (8006f1c <prvSwitchTimerLists+0xc4>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e6a:	4b2c      	ldr	r3, [pc, #176]	@ (8006f1c <prvSwitchTimerLists+0xc4>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	3304      	adds	r3, #4
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f7fd ff56 	bl	8004d2a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6a1b      	ldr	r3, [r3, #32]
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006e8c:	f003 0304 	and.w	r3, r3, #4
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d02f      	beq.n	8006ef4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	699b      	ldr	r3, [r3, #24]
 8006e98:	693a      	ldr	r2, [r7, #16]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006e9e:	68ba      	ldr	r2, [r7, #8]
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d90e      	bls.n	8006ec4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	68ba      	ldr	r2, [r7, #8]
 8006eaa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006eb2:	4b1a      	ldr	r3, [pc, #104]	@ (8006f1c <prvSwitchTimerLists+0xc4>)
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	3304      	adds	r3, #4
 8006eba:	4619      	mov	r1, r3
 8006ebc:	4610      	mov	r0, r2
 8006ebe:	f7fd fefb 	bl	8004cb8 <vListInsert>
 8006ec2:	e017      	b.n	8006ef4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	9300      	str	r3, [sp, #0]
 8006ec8:	2300      	movs	r3, #0
 8006eca:	693a      	ldr	r2, [r7, #16]
 8006ecc:	2100      	movs	r1, #0
 8006ece:	68f8      	ldr	r0, [r7, #12]
 8006ed0:	f7ff fd58 	bl	8006984 <xTimerGenericCommand>
 8006ed4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d10b      	bne.n	8006ef4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ee0:	f383 8811 	msr	BASEPRI, r3
 8006ee4:	f3bf 8f6f 	isb	sy
 8006ee8:	f3bf 8f4f 	dsb	sy
 8006eec:	603b      	str	r3, [r7, #0]
}
 8006eee:	bf00      	nop
 8006ef0:	bf00      	nop
 8006ef2:	e7fd      	b.n	8006ef0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006ef4:	4b09      	ldr	r3, [pc, #36]	@ (8006f1c <prvSwitchTimerLists+0xc4>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d1b0      	bne.n	8006e60 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006efe:	4b07      	ldr	r3, [pc, #28]	@ (8006f1c <prvSwitchTimerLists+0xc4>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006f04:	4b06      	ldr	r3, [pc, #24]	@ (8006f20 <prvSwitchTimerLists+0xc8>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a04      	ldr	r2, [pc, #16]	@ (8006f1c <prvSwitchTimerLists+0xc4>)
 8006f0a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006f0c:	4a04      	ldr	r2, [pc, #16]	@ (8006f20 <prvSwitchTimerLists+0xc8>)
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	6013      	str	r3, [r2, #0]
}
 8006f12:	bf00      	nop
 8006f14:	3718      	adds	r7, #24
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	200007e8 	.word	0x200007e8
 8006f20:	200007ec 	.word	0x200007ec

08006f24 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006f2a:	f000 f98d 	bl	8007248 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006f2e:	4b15      	ldr	r3, [pc, #84]	@ (8006f84 <prvCheckForValidListAndQueue+0x60>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d120      	bne.n	8006f78 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006f36:	4814      	ldr	r0, [pc, #80]	@ (8006f88 <prvCheckForValidListAndQueue+0x64>)
 8006f38:	f7fd fe6d 	bl	8004c16 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006f3c:	4813      	ldr	r0, [pc, #76]	@ (8006f8c <prvCheckForValidListAndQueue+0x68>)
 8006f3e:	f7fd fe6a 	bl	8004c16 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006f42:	4b13      	ldr	r3, [pc, #76]	@ (8006f90 <prvCheckForValidListAndQueue+0x6c>)
 8006f44:	4a10      	ldr	r2, [pc, #64]	@ (8006f88 <prvCheckForValidListAndQueue+0x64>)
 8006f46:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006f48:	4b12      	ldr	r3, [pc, #72]	@ (8006f94 <prvCheckForValidListAndQueue+0x70>)
 8006f4a:	4a10      	ldr	r2, [pc, #64]	@ (8006f8c <prvCheckForValidListAndQueue+0x68>)
 8006f4c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006f4e:	2300      	movs	r3, #0
 8006f50:	9300      	str	r3, [sp, #0]
 8006f52:	4b11      	ldr	r3, [pc, #68]	@ (8006f98 <prvCheckForValidListAndQueue+0x74>)
 8006f54:	4a11      	ldr	r2, [pc, #68]	@ (8006f9c <prvCheckForValidListAndQueue+0x78>)
 8006f56:	2110      	movs	r1, #16
 8006f58:	200a      	movs	r0, #10
 8006f5a:	f7fd ff7b 	bl	8004e54 <xQueueGenericCreateStatic>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	4a08      	ldr	r2, [pc, #32]	@ (8006f84 <prvCheckForValidListAndQueue+0x60>)
 8006f62:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006f64:	4b07      	ldr	r3, [pc, #28]	@ (8006f84 <prvCheckForValidListAndQueue+0x60>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d005      	beq.n	8006f78 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006f6c:	4b05      	ldr	r3, [pc, #20]	@ (8006f84 <prvCheckForValidListAndQueue+0x60>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	490b      	ldr	r1, [pc, #44]	@ (8006fa0 <prvCheckForValidListAndQueue+0x7c>)
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7fe fc7e 	bl	8005874 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f78:	f000 f998 	bl	80072ac <vPortExitCritical>
}
 8006f7c:	bf00      	nop
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	200007f0 	.word	0x200007f0
 8006f88:	200007c0 	.word	0x200007c0
 8006f8c:	200007d4 	.word	0x200007d4
 8006f90:	200007e8 	.word	0x200007e8
 8006f94:	200007ec 	.word	0x200007ec
 8006f98:	2000089c 	.word	0x2000089c
 8006f9c:	200007fc 	.word	0x200007fc
 8006fa0:	08008e98 	.word	0x08008e98

08006fa4 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b08a      	sub	sp, #40	@ 0x28
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	607a      	str	r2, [r7, #4]
 8006fb0:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8006fb2:	f06f 0301 	mvn.w	r3, #1
 8006fb6:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006fc4:	4b06      	ldr	r3, [pc, #24]	@ (8006fe0 <xTimerPendFunctionCallFromISR+0x3c>)
 8006fc6:	6818      	ldr	r0, [r3, #0]
 8006fc8:	f107 0114 	add.w	r1, r7, #20
 8006fcc:	2300      	movs	r3, #0
 8006fce:	683a      	ldr	r2, [r7, #0]
 8006fd0:	f7fe f91a 	bl	8005208 <xQueueGenericSendFromISR>
 8006fd4:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8006fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3728      	adds	r7, #40	@ 0x28
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}
 8006fe0:	200007f0 	.word	0x200007f0

08006fe4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b085      	sub	sp, #20
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	3b04      	subs	r3, #4
 8006ff4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006ffc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	3b04      	subs	r3, #4
 8007002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	f023 0201 	bic.w	r2, r3, #1
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	3b04      	subs	r3, #4
 8007012:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007014:	4a0c      	ldr	r2, [pc, #48]	@ (8007048 <pxPortInitialiseStack+0x64>)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	3b14      	subs	r3, #20
 800701e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	3b04      	subs	r3, #4
 800702a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f06f 0202 	mvn.w	r2, #2
 8007032:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	3b20      	subs	r3, #32
 8007038:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800703a:	68fb      	ldr	r3, [r7, #12]
}
 800703c:	4618      	mov	r0, r3
 800703e:	3714      	adds	r7, #20
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr
 8007048:	0800704d 	.word	0x0800704d

0800704c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800704c:	b480      	push	{r7}
 800704e:	b085      	sub	sp, #20
 8007050:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007052:	2300      	movs	r3, #0
 8007054:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007056:	4b13      	ldr	r3, [pc, #76]	@ (80070a4 <prvTaskExitError+0x58>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800705e:	d00b      	beq.n	8007078 <prvTaskExitError+0x2c>
	__asm volatile
 8007060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007064:	f383 8811 	msr	BASEPRI, r3
 8007068:	f3bf 8f6f 	isb	sy
 800706c:	f3bf 8f4f 	dsb	sy
 8007070:	60fb      	str	r3, [r7, #12]
}
 8007072:	bf00      	nop
 8007074:	bf00      	nop
 8007076:	e7fd      	b.n	8007074 <prvTaskExitError+0x28>
	__asm volatile
 8007078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800707c:	f383 8811 	msr	BASEPRI, r3
 8007080:	f3bf 8f6f 	isb	sy
 8007084:	f3bf 8f4f 	dsb	sy
 8007088:	60bb      	str	r3, [r7, #8]
}
 800708a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800708c:	bf00      	nop
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d0fc      	beq.n	800708e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007094:	bf00      	nop
 8007096:	bf00      	nop
 8007098:	3714      	adds	r7, #20
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	2000000c 	.word	0x2000000c
	...

080070b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80070b0:	4b07      	ldr	r3, [pc, #28]	@ (80070d0 <pxCurrentTCBConst2>)
 80070b2:	6819      	ldr	r1, [r3, #0]
 80070b4:	6808      	ldr	r0, [r1, #0]
 80070b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070ba:	f380 8809 	msr	PSP, r0
 80070be:	f3bf 8f6f 	isb	sy
 80070c2:	f04f 0000 	mov.w	r0, #0
 80070c6:	f380 8811 	msr	BASEPRI, r0
 80070ca:	4770      	bx	lr
 80070cc:	f3af 8000 	nop.w

080070d0 <pxCurrentTCBConst2>:
 80070d0:	20000694 	.word	0x20000694
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80070d4:	bf00      	nop
 80070d6:	bf00      	nop

080070d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80070d8:	4808      	ldr	r0, [pc, #32]	@ (80070fc <prvPortStartFirstTask+0x24>)
 80070da:	6800      	ldr	r0, [r0, #0]
 80070dc:	6800      	ldr	r0, [r0, #0]
 80070de:	f380 8808 	msr	MSP, r0
 80070e2:	f04f 0000 	mov.w	r0, #0
 80070e6:	f380 8814 	msr	CONTROL, r0
 80070ea:	b662      	cpsie	i
 80070ec:	b661      	cpsie	f
 80070ee:	f3bf 8f4f 	dsb	sy
 80070f2:	f3bf 8f6f 	isb	sy
 80070f6:	df00      	svc	0
 80070f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80070fa:	bf00      	nop
 80070fc:	e000ed08 	.word	0xe000ed08

08007100 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b086      	sub	sp, #24
 8007104:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007106:	4b47      	ldr	r3, [pc, #284]	@ (8007224 <xPortStartScheduler+0x124>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a47      	ldr	r2, [pc, #284]	@ (8007228 <xPortStartScheduler+0x128>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d10b      	bne.n	8007128 <xPortStartScheduler+0x28>
	__asm volatile
 8007110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007114:	f383 8811 	msr	BASEPRI, r3
 8007118:	f3bf 8f6f 	isb	sy
 800711c:	f3bf 8f4f 	dsb	sy
 8007120:	613b      	str	r3, [r7, #16]
}
 8007122:	bf00      	nop
 8007124:	bf00      	nop
 8007126:	e7fd      	b.n	8007124 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007128:	4b3e      	ldr	r3, [pc, #248]	@ (8007224 <xPortStartScheduler+0x124>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a3f      	ldr	r2, [pc, #252]	@ (800722c <xPortStartScheduler+0x12c>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d10b      	bne.n	800714a <xPortStartScheduler+0x4a>
	__asm volatile
 8007132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007136:	f383 8811 	msr	BASEPRI, r3
 800713a:	f3bf 8f6f 	isb	sy
 800713e:	f3bf 8f4f 	dsb	sy
 8007142:	60fb      	str	r3, [r7, #12]
}
 8007144:	bf00      	nop
 8007146:	bf00      	nop
 8007148:	e7fd      	b.n	8007146 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800714a:	4b39      	ldr	r3, [pc, #228]	@ (8007230 <xPortStartScheduler+0x130>)
 800714c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	b2db      	uxtb	r3, r3
 8007154:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	22ff      	movs	r2, #255	@ 0xff
 800715a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	b2db      	uxtb	r3, r3
 8007162:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007164:	78fb      	ldrb	r3, [r7, #3]
 8007166:	b2db      	uxtb	r3, r3
 8007168:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800716c:	b2da      	uxtb	r2, r3
 800716e:	4b31      	ldr	r3, [pc, #196]	@ (8007234 <xPortStartScheduler+0x134>)
 8007170:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007172:	4b31      	ldr	r3, [pc, #196]	@ (8007238 <xPortStartScheduler+0x138>)
 8007174:	2207      	movs	r2, #7
 8007176:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007178:	e009      	b.n	800718e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800717a:	4b2f      	ldr	r3, [pc, #188]	@ (8007238 <xPortStartScheduler+0x138>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	3b01      	subs	r3, #1
 8007180:	4a2d      	ldr	r2, [pc, #180]	@ (8007238 <xPortStartScheduler+0x138>)
 8007182:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007184:	78fb      	ldrb	r3, [r7, #3]
 8007186:	b2db      	uxtb	r3, r3
 8007188:	005b      	lsls	r3, r3, #1
 800718a:	b2db      	uxtb	r3, r3
 800718c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800718e:	78fb      	ldrb	r3, [r7, #3]
 8007190:	b2db      	uxtb	r3, r3
 8007192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007196:	2b80      	cmp	r3, #128	@ 0x80
 8007198:	d0ef      	beq.n	800717a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800719a:	4b27      	ldr	r3, [pc, #156]	@ (8007238 <xPortStartScheduler+0x138>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f1c3 0307 	rsb	r3, r3, #7
 80071a2:	2b04      	cmp	r3, #4
 80071a4:	d00b      	beq.n	80071be <xPortStartScheduler+0xbe>
	__asm volatile
 80071a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071aa:	f383 8811 	msr	BASEPRI, r3
 80071ae:	f3bf 8f6f 	isb	sy
 80071b2:	f3bf 8f4f 	dsb	sy
 80071b6:	60bb      	str	r3, [r7, #8]
}
 80071b8:	bf00      	nop
 80071ba:	bf00      	nop
 80071bc:	e7fd      	b.n	80071ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80071be:	4b1e      	ldr	r3, [pc, #120]	@ (8007238 <xPortStartScheduler+0x138>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	021b      	lsls	r3, r3, #8
 80071c4:	4a1c      	ldr	r2, [pc, #112]	@ (8007238 <xPortStartScheduler+0x138>)
 80071c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80071c8:	4b1b      	ldr	r3, [pc, #108]	@ (8007238 <xPortStartScheduler+0x138>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80071d0:	4a19      	ldr	r2, [pc, #100]	@ (8007238 <xPortStartScheduler+0x138>)
 80071d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	b2da      	uxtb	r2, r3
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80071dc:	4b17      	ldr	r3, [pc, #92]	@ (800723c <xPortStartScheduler+0x13c>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a16      	ldr	r2, [pc, #88]	@ (800723c <xPortStartScheduler+0x13c>)
 80071e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80071e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80071e8:	4b14      	ldr	r3, [pc, #80]	@ (800723c <xPortStartScheduler+0x13c>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a13      	ldr	r2, [pc, #76]	@ (800723c <xPortStartScheduler+0x13c>)
 80071ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80071f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80071f4:	f000 f8da 	bl	80073ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80071f8:	4b11      	ldr	r3, [pc, #68]	@ (8007240 <xPortStartScheduler+0x140>)
 80071fa:	2200      	movs	r2, #0
 80071fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80071fe:	f000 f8f9 	bl	80073f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007202:	4b10      	ldr	r3, [pc, #64]	@ (8007244 <xPortStartScheduler+0x144>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a0f      	ldr	r2, [pc, #60]	@ (8007244 <xPortStartScheduler+0x144>)
 8007208:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800720c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800720e:	f7ff ff63 	bl	80070d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007212:	f7fe ff39 	bl	8006088 <vTaskSwitchContext>
	prvTaskExitError();
 8007216:	f7ff ff19 	bl	800704c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800721a:	2300      	movs	r3, #0
}
 800721c:	4618      	mov	r0, r3
 800721e:	3718      	adds	r7, #24
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	e000ed00 	.word	0xe000ed00
 8007228:	410fc271 	.word	0x410fc271
 800722c:	410fc270 	.word	0x410fc270
 8007230:	e000e400 	.word	0xe000e400
 8007234:	200008e4 	.word	0x200008e4
 8007238:	200008e8 	.word	0x200008e8
 800723c:	e000ed20 	.word	0xe000ed20
 8007240:	2000000c 	.word	0x2000000c
 8007244:	e000ef34 	.word	0xe000ef34

08007248 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
	__asm volatile
 800724e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007252:	f383 8811 	msr	BASEPRI, r3
 8007256:	f3bf 8f6f 	isb	sy
 800725a:	f3bf 8f4f 	dsb	sy
 800725e:	607b      	str	r3, [r7, #4]
}
 8007260:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007262:	4b10      	ldr	r3, [pc, #64]	@ (80072a4 <vPortEnterCritical+0x5c>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	3301      	adds	r3, #1
 8007268:	4a0e      	ldr	r2, [pc, #56]	@ (80072a4 <vPortEnterCritical+0x5c>)
 800726a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800726c:	4b0d      	ldr	r3, [pc, #52]	@ (80072a4 <vPortEnterCritical+0x5c>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2b01      	cmp	r3, #1
 8007272:	d110      	bne.n	8007296 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007274:	4b0c      	ldr	r3, [pc, #48]	@ (80072a8 <vPortEnterCritical+0x60>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	b2db      	uxtb	r3, r3
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00b      	beq.n	8007296 <vPortEnterCritical+0x4e>
	__asm volatile
 800727e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007282:	f383 8811 	msr	BASEPRI, r3
 8007286:	f3bf 8f6f 	isb	sy
 800728a:	f3bf 8f4f 	dsb	sy
 800728e:	603b      	str	r3, [r7, #0]
}
 8007290:	bf00      	nop
 8007292:	bf00      	nop
 8007294:	e7fd      	b.n	8007292 <vPortEnterCritical+0x4a>
	}
}
 8007296:	bf00      	nop
 8007298:	370c      	adds	r7, #12
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	2000000c 	.word	0x2000000c
 80072a8:	e000ed04 	.word	0xe000ed04

080072ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80072b2:	4b12      	ldr	r3, [pc, #72]	@ (80072fc <vPortExitCritical+0x50>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d10b      	bne.n	80072d2 <vPortExitCritical+0x26>
	__asm volatile
 80072ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072be:	f383 8811 	msr	BASEPRI, r3
 80072c2:	f3bf 8f6f 	isb	sy
 80072c6:	f3bf 8f4f 	dsb	sy
 80072ca:	607b      	str	r3, [r7, #4]
}
 80072cc:	bf00      	nop
 80072ce:	bf00      	nop
 80072d0:	e7fd      	b.n	80072ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80072d2:	4b0a      	ldr	r3, [pc, #40]	@ (80072fc <vPortExitCritical+0x50>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	3b01      	subs	r3, #1
 80072d8:	4a08      	ldr	r2, [pc, #32]	@ (80072fc <vPortExitCritical+0x50>)
 80072da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80072dc:	4b07      	ldr	r3, [pc, #28]	@ (80072fc <vPortExitCritical+0x50>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d105      	bne.n	80072f0 <vPortExitCritical+0x44>
 80072e4:	2300      	movs	r3, #0
 80072e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	f383 8811 	msr	BASEPRI, r3
}
 80072ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80072f0:	bf00      	nop
 80072f2:	370c      	adds	r7, #12
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr
 80072fc:	2000000c 	.word	0x2000000c

08007300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007300:	f3ef 8009 	mrs	r0, PSP
 8007304:	f3bf 8f6f 	isb	sy
 8007308:	4b15      	ldr	r3, [pc, #84]	@ (8007360 <pxCurrentTCBConst>)
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	f01e 0f10 	tst.w	lr, #16
 8007310:	bf08      	it	eq
 8007312:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007316:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800731a:	6010      	str	r0, [r2, #0]
 800731c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007320:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007324:	f380 8811 	msr	BASEPRI, r0
 8007328:	f3bf 8f4f 	dsb	sy
 800732c:	f3bf 8f6f 	isb	sy
 8007330:	f7fe feaa 	bl	8006088 <vTaskSwitchContext>
 8007334:	f04f 0000 	mov.w	r0, #0
 8007338:	f380 8811 	msr	BASEPRI, r0
 800733c:	bc09      	pop	{r0, r3}
 800733e:	6819      	ldr	r1, [r3, #0]
 8007340:	6808      	ldr	r0, [r1, #0]
 8007342:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007346:	f01e 0f10 	tst.w	lr, #16
 800734a:	bf08      	it	eq
 800734c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007350:	f380 8809 	msr	PSP, r0
 8007354:	f3bf 8f6f 	isb	sy
 8007358:	4770      	bx	lr
 800735a:	bf00      	nop
 800735c:	f3af 8000 	nop.w

08007360 <pxCurrentTCBConst>:
 8007360:	20000694 	.word	0x20000694
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007364:	bf00      	nop
 8007366:	bf00      	nop

08007368 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
	__asm volatile
 800736e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007372:	f383 8811 	msr	BASEPRI, r3
 8007376:	f3bf 8f6f 	isb	sy
 800737a:	f3bf 8f4f 	dsb	sy
 800737e:	607b      	str	r3, [r7, #4]
}
 8007380:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007382:	f7fe fdc7 	bl	8005f14 <xTaskIncrementTick>
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d003      	beq.n	8007394 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800738c:	4b06      	ldr	r3, [pc, #24]	@ (80073a8 <SysTick_Handler+0x40>)
 800738e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007392:	601a      	str	r2, [r3, #0]
 8007394:	2300      	movs	r3, #0
 8007396:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	f383 8811 	msr	BASEPRI, r3
}
 800739e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80073a0:	bf00      	nop
 80073a2:	3708      	adds	r7, #8
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	e000ed04 	.word	0xe000ed04

080073ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80073ac:	b480      	push	{r7}
 80073ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80073b0:	4b0b      	ldr	r3, [pc, #44]	@ (80073e0 <vPortSetupTimerInterrupt+0x34>)
 80073b2:	2200      	movs	r2, #0
 80073b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80073b6:	4b0b      	ldr	r3, [pc, #44]	@ (80073e4 <vPortSetupTimerInterrupt+0x38>)
 80073b8:	2200      	movs	r2, #0
 80073ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80073bc:	4b0a      	ldr	r3, [pc, #40]	@ (80073e8 <vPortSetupTimerInterrupt+0x3c>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a0a      	ldr	r2, [pc, #40]	@ (80073ec <vPortSetupTimerInterrupt+0x40>)
 80073c2:	fba2 2303 	umull	r2, r3, r2, r3
 80073c6:	099b      	lsrs	r3, r3, #6
 80073c8:	4a09      	ldr	r2, [pc, #36]	@ (80073f0 <vPortSetupTimerInterrupt+0x44>)
 80073ca:	3b01      	subs	r3, #1
 80073cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80073ce:	4b04      	ldr	r3, [pc, #16]	@ (80073e0 <vPortSetupTimerInterrupt+0x34>)
 80073d0:	2207      	movs	r2, #7
 80073d2:	601a      	str	r2, [r3, #0]
}
 80073d4:	bf00      	nop
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr
 80073de:	bf00      	nop
 80073e0:	e000e010 	.word	0xe000e010
 80073e4:	e000e018 	.word	0xe000e018
 80073e8:	20000000 	.word	0x20000000
 80073ec:	10624dd3 	.word	0x10624dd3
 80073f0:	e000e014 	.word	0xe000e014

080073f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80073f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007404 <vPortEnableVFP+0x10>
 80073f8:	6801      	ldr	r1, [r0, #0]
 80073fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80073fe:	6001      	str	r1, [r0, #0]
 8007400:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007402:	bf00      	nop
 8007404:	e000ed88 	.word	0xe000ed88

08007408 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007408:	b480      	push	{r7}
 800740a:	b085      	sub	sp, #20
 800740c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800740e:	f3ef 8305 	mrs	r3, IPSR
 8007412:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2b0f      	cmp	r3, #15
 8007418:	d915      	bls.n	8007446 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800741a:	4a18      	ldr	r2, [pc, #96]	@ (800747c <vPortValidateInterruptPriority+0x74>)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	4413      	add	r3, r2
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007424:	4b16      	ldr	r3, [pc, #88]	@ (8007480 <vPortValidateInterruptPriority+0x78>)
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	7afa      	ldrb	r2, [r7, #11]
 800742a:	429a      	cmp	r2, r3
 800742c:	d20b      	bcs.n	8007446 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800742e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007432:	f383 8811 	msr	BASEPRI, r3
 8007436:	f3bf 8f6f 	isb	sy
 800743a:	f3bf 8f4f 	dsb	sy
 800743e:	607b      	str	r3, [r7, #4]
}
 8007440:	bf00      	nop
 8007442:	bf00      	nop
 8007444:	e7fd      	b.n	8007442 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007446:	4b0f      	ldr	r3, [pc, #60]	@ (8007484 <vPortValidateInterruptPriority+0x7c>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800744e:	4b0e      	ldr	r3, [pc, #56]	@ (8007488 <vPortValidateInterruptPriority+0x80>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	429a      	cmp	r2, r3
 8007454:	d90b      	bls.n	800746e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800745a:	f383 8811 	msr	BASEPRI, r3
 800745e:	f3bf 8f6f 	isb	sy
 8007462:	f3bf 8f4f 	dsb	sy
 8007466:	603b      	str	r3, [r7, #0]
}
 8007468:	bf00      	nop
 800746a:	bf00      	nop
 800746c:	e7fd      	b.n	800746a <vPortValidateInterruptPriority+0x62>
	}
 800746e:	bf00      	nop
 8007470:	3714      	adds	r7, #20
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop
 800747c:	e000e3f0 	.word	0xe000e3f0
 8007480:	200008e4 	.word	0x200008e4
 8007484:	e000ed0c 	.word	0xe000ed0c
 8007488:	200008e8 	.word	0x200008e8

0800748c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b08a      	sub	sp, #40	@ 0x28
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007494:	2300      	movs	r3, #0
 8007496:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007498:	f7fe fc80 	bl	8005d9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800749c:	4b5c      	ldr	r3, [pc, #368]	@ (8007610 <pvPortMalloc+0x184>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d101      	bne.n	80074a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80074a4:	f000 f924 	bl	80076f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80074a8:	4b5a      	ldr	r3, [pc, #360]	@ (8007614 <pvPortMalloc+0x188>)
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4013      	ands	r3, r2
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	f040 8095 	bne.w	80075e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d01e      	beq.n	80074fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80074bc:	2208      	movs	r2, #8
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4413      	add	r3, r2
 80074c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f003 0307 	and.w	r3, r3, #7
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d015      	beq.n	80074fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f023 0307 	bic.w	r3, r3, #7
 80074d4:	3308      	adds	r3, #8
 80074d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f003 0307 	and.w	r3, r3, #7
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00b      	beq.n	80074fa <pvPortMalloc+0x6e>
	__asm volatile
 80074e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074e6:	f383 8811 	msr	BASEPRI, r3
 80074ea:	f3bf 8f6f 	isb	sy
 80074ee:	f3bf 8f4f 	dsb	sy
 80074f2:	617b      	str	r3, [r7, #20]
}
 80074f4:	bf00      	nop
 80074f6:	bf00      	nop
 80074f8:	e7fd      	b.n	80074f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d06f      	beq.n	80075e0 <pvPortMalloc+0x154>
 8007500:	4b45      	ldr	r3, [pc, #276]	@ (8007618 <pvPortMalloc+0x18c>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	429a      	cmp	r2, r3
 8007508:	d86a      	bhi.n	80075e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800750a:	4b44      	ldr	r3, [pc, #272]	@ (800761c <pvPortMalloc+0x190>)
 800750c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800750e:	4b43      	ldr	r3, [pc, #268]	@ (800761c <pvPortMalloc+0x190>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007514:	e004      	b.n	8007520 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007518:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800751a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	429a      	cmp	r2, r3
 8007528:	d903      	bls.n	8007532 <pvPortMalloc+0xa6>
 800752a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1f1      	bne.n	8007516 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007532:	4b37      	ldr	r3, [pc, #220]	@ (8007610 <pvPortMalloc+0x184>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007538:	429a      	cmp	r2, r3
 800753a:	d051      	beq.n	80075e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800753c:	6a3b      	ldr	r3, [r7, #32]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2208      	movs	r2, #8
 8007542:	4413      	add	r3, r2
 8007544:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	6a3b      	ldr	r3, [r7, #32]
 800754c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800754e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007550:	685a      	ldr	r2, [r3, #4]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	1ad2      	subs	r2, r2, r3
 8007556:	2308      	movs	r3, #8
 8007558:	005b      	lsls	r3, r3, #1
 800755a:	429a      	cmp	r2, r3
 800755c:	d920      	bls.n	80075a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800755e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4413      	add	r3, r2
 8007564:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	f003 0307 	and.w	r3, r3, #7
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00b      	beq.n	8007588 <pvPortMalloc+0xfc>
	__asm volatile
 8007570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007574:	f383 8811 	msr	BASEPRI, r3
 8007578:	f3bf 8f6f 	isb	sy
 800757c:	f3bf 8f4f 	dsb	sy
 8007580:	613b      	str	r3, [r7, #16]
}
 8007582:	bf00      	nop
 8007584:	bf00      	nop
 8007586:	e7fd      	b.n	8007584 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800758a:	685a      	ldr	r2, [r3, #4]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	1ad2      	subs	r2, r2, r3
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800759a:	69b8      	ldr	r0, [r7, #24]
 800759c:	f000 f90a 	bl	80077b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80075a0:	4b1d      	ldr	r3, [pc, #116]	@ (8007618 <pvPortMalloc+0x18c>)
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	1ad3      	subs	r3, r2, r3
 80075aa:	4a1b      	ldr	r2, [pc, #108]	@ (8007618 <pvPortMalloc+0x18c>)
 80075ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80075ae:	4b1a      	ldr	r3, [pc, #104]	@ (8007618 <pvPortMalloc+0x18c>)
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	4b1b      	ldr	r3, [pc, #108]	@ (8007620 <pvPortMalloc+0x194>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d203      	bcs.n	80075c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80075ba:	4b17      	ldr	r3, [pc, #92]	@ (8007618 <pvPortMalloc+0x18c>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a18      	ldr	r2, [pc, #96]	@ (8007620 <pvPortMalloc+0x194>)
 80075c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80075c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c4:	685a      	ldr	r2, [r3, #4]
 80075c6:	4b13      	ldr	r3, [pc, #76]	@ (8007614 <pvPortMalloc+0x188>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	431a      	orrs	r2, r3
 80075cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80075d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d2:	2200      	movs	r2, #0
 80075d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80075d6:	4b13      	ldr	r3, [pc, #76]	@ (8007624 <pvPortMalloc+0x198>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	3301      	adds	r3, #1
 80075dc:	4a11      	ldr	r2, [pc, #68]	@ (8007624 <pvPortMalloc+0x198>)
 80075de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80075e0:	f7fe fbea 	bl	8005db8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80075e4:	69fb      	ldr	r3, [r7, #28]
 80075e6:	f003 0307 	and.w	r3, r3, #7
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00b      	beq.n	8007606 <pvPortMalloc+0x17a>
	__asm volatile
 80075ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f2:	f383 8811 	msr	BASEPRI, r3
 80075f6:	f3bf 8f6f 	isb	sy
 80075fa:	f3bf 8f4f 	dsb	sy
 80075fe:	60fb      	str	r3, [r7, #12]
}
 8007600:	bf00      	nop
 8007602:	bf00      	nop
 8007604:	e7fd      	b.n	8007602 <pvPortMalloc+0x176>
	return pvReturn;
 8007606:	69fb      	ldr	r3, [r7, #28]
}
 8007608:	4618      	mov	r0, r3
 800760a:	3728      	adds	r7, #40	@ 0x28
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}
 8007610:	200044f4 	.word	0x200044f4
 8007614:	20004508 	.word	0x20004508
 8007618:	200044f8 	.word	0x200044f8
 800761c:	200044ec 	.word	0x200044ec
 8007620:	200044fc 	.word	0x200044fc
 8007624:	20004500 	.word	0x20004500

08007628 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b086      	sub	sp, #24
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d04f      	beq.n	80076da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800763a:	2308      	movs	r3, #8
 800763c:	425b      	negs	r3, r3
 800763e:	697a      	ldr	r2, [r7, #20]
 8007640:	4413      	add	r3, r2
 8007642:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	685a      	ldr	r2, [r3, #4]
 800764c:	4b25      	ldr	r3, [pc, #148]	@ (80076e4 <vPortFree+0xbc>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4013      	ands	r3, r2
 8007652:	2b00      	cmp	r3, #0
 8007654:	d10b      	bne.n	800766e <vPortFree+0x46>
	__asm volatile
 8007656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800765a:	f383 8811 	msr	BASEPRI, r3
 800765e:	f3bf 8f6f 	isb	sy
 8007662:	f3bf 8f4f 	dsb	sy
 8007666:	60fb      	str	r3, [r7, #12]
}
 8007668:	bf00      	nop
 800766a:	bf00      	nop
 800766c:	e7fd      	b.n	800766a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00b      	beq.n	800768e <vPortFree+0x66>
	__asm volatile
 8007676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800767a:	f383 8811 	msr	BASEPRI, r3
 800767e:	f3bf 8f6f 	isb	sy
 8007682:	f3bf 8f4f 	dsb	sy
 8007686:	60bb      	str	r3, [r7, #8]
}
 8007688:	bf00      	nop
 800768a:	bf00      	nop
 800768c:	e7fd      	b.n	800768a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	685a      	ldr	r2, [r3, #4]
 8007692:	4b14      	ldr	r3, [pc, #80]	@ (80076e4 <vPortFree+0xbc>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4013      	ands	r3, r2
 8007698:	2b00      	cmp	r3, #0
 800769a:	d01e      	beq.n	80076da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d11a      	bne.n	80076da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	685a      	ldr	r2, [r3, #4]
 80076a8:	4b0e      	ldr	r3, [pc, #56]	@ (80076e4 <vPortFree+0xbc>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	43db      	mvns	r3, r3
 80076ae:	401a      	ands	r2, r3
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80076b4:	f7fe fb72 	bl	8005d9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	685a      	ldr	r2, [r3, #4]
 80076bc:	4b0a      	ldr	r3, [pc, #40]	@ (80076e8 <vPortFree+0xc0>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4413      	add	r3, r2
 80076c2:	4a09      	ldr	r2, [pc, #36]	@ (80076e8 <vPortFree+0xc0>)
 80076c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80076c6:	6938      	ldr	r0, [r7, #16]
 80076c8:	f000 f874 	bl	80077b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80076cc:	4b07      	ldr	r3, [pc, #28]	@ (80076ec <vPortFree+0xc4>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	3301      	adds	r3, #1
 80076d2:	4a06      	ldr	r2, [pc, #24]	@ (80076ec <vPortFree+0xc4>)
 80076d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80076d6:	f7fe fb6f 	bl	8005db8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80076da:	bf00      	nop
 80076dc:	3718      	adds	r7, #24
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	20004508 	.word	0x20004508
 80076e8:	200044f8 	.word	0x200044f8
 80076ec:	20004504 	.word	0x20004504

080076f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80076f0:	b480      	push	{r7}
 80076f2:	b085      	sub	sp, #20
 80076f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80076f6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80076fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80076fc:	4b27      	ldr	r3, [pc, #156]	@ (800779c <prvHeapInit+0xac>)
 80076fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f003 0307 	and.w	r3, r3, #7
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00c      	beq.n	8007724 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	3307      	adds	r3, #7
 800770e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f023 0307 	bic.w	r3, r3, #7
 8007716:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007718:	68ba      	ldr	r2, [r7, #8]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	1ad3      	subs	r3, r2, r3
 800771e:	4a1f      	ldr	r2, [pc, #124]	@ (800779c <prvHeapInit+0xac>)
 8007720:	4413      	add	r3, r2
 8007722:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007728:	4a1d      	ldr	r2, [pc, #116]	@ (80077a0 <prvHeapInit+0xb0>)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800772e:	4b1c      	ldr	r3, [pc, #112]	@ (80077a0 <prvHeapInit+0xb0>)
 8007730:	2200      	movs	r2, #0
 8007732:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	68ba      	ldr	r2, [r7, #8]
 8007738:	4413      	add	r3, r2
 800773a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800773c:	2208      	movs	r2, #8
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	1a9b      	subs	r3, r3, r2
 8007742:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f023 0307 	bic.w	r3, r3, #7
 800774a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	4a15      	ldr	r2, [pc, #84]	@ (80077a4 <prvHeapInit+0xb4>)
 8007750:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007752:	4b14      	ldr	r3, [pc, #80]	@ (80077a4 <prvHeapInit+0xb4>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	2200      	movs	r2, #0
 8007758:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800775a:	4b12      	ldr	r3, [pc, #72]	@ (80077a4 <prvHeapInit+0xb4>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2200      	movs	r2, #0
 8007760:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	68fa      	ldr	r2, [r7, #12]
 800776a:	1ad2      	subs	r2, r2, r3
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007770:	4b0c      	ldr	r3, [pc, #48]	@ (80077a4 <prvHeapInit+0xb4>)
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	4a0a      	ldr	r2, [pc, #40]	@ (80077a8 <prvHeapInit+0xb8>)
 800777e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	4a09      	ldr	r2, [pc, #36]	@ (80077ac <prvHeapInit+0xbc>)
 8007786:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007788:	4b09      	ldr	r3, [pc, #36]	@ (80077b0 <prvHeapInit+0xc0>)
 800778a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800778e:	601a      	str	r2, [r3, #0]
}
 8007790:	bf00      	nop
 8007792:	3714      	adds	r7, #20
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr
 800779c:	200008ec 	.word	0x200008ec
 80077a0:	200044ec 	.word	0x200044ec
 80077a4:	200044f4 	.word	0x200044f4
 80077a8:	200044fc 	.word	0x200044fc
 80077ac:	200044f8 	.word	0x200044f8
 80077b0:	20004508 	.word	0x20004508

080077b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80077b4:	b480      	push	{r7}
 80077b6:	b085      	sub	sp, #20
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80077bc:	4b28      	ldr	r3, [pc, #160]	@ (8007860 <prvInsertBlockIntoFreeList+0xac>)
 80077be:	60fb      	str	r3, [r7, #12]
 80077c0:	e002      	b.n	80077c8 <prvInsertBlockIntoFreeList+0x14>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	60fb      	str	r3, [r7, #12]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d8f7      	bhi.n	80077c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	68ba      	ldr	r2, [r7, #8]
 80077dc:	4413      	add	r3, r2
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d108      	bne.n	80077f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	685a      	ldr	r2, [r3, #4]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	441a      	add	r2, r3
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	68ba      	ldr	r2, [r7, #8]
 8007800:	441a      	add	r2, r3
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	429a      	cmp	r2, r3
 8007808:	d118      	bne.n	800783c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	4b15      	ldr	r3, [pc, #84]	@ (8007864 <prvInsertBlockIntoFreeList+0xb0>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	429a      	cmp	r2, r3
 8007814:	d00d      	beq.n	8007832 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	685a      	ldr	r2, [r3, #4]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	441a      	add	r2, r3
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	601a      	str	r2, [r3, #0]
 8007830:	e008      	b.n	8007844 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007832:	4b0c      	ldr	r3, [pc, #48]	@ (8007864 <prvInsertBlockIntoFreeList+0xb0>)
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	601a      	str	r2, [r3, #0]
 800783a:	e003      	b.n	8007844 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007844:	68fa      	ldr	r2, [r7, #12]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	429a      	cmp	r2, r3
 800784a:	d002      	beq.n	8007852 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007852:	bf00      	nop
 8007854:	3714      	adds	r7, #20
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr
 800785e:	bf00      	nop
 8007860:	200044ec 	.word	0x200044ec
 8007864:	200044f4 	.word	0x200044f4

08007868 <rand>:
 8007868:	4b16      	ldr	r3, [pc, #88]	@ (80078c4 <rand+0x5c>)
 800786a:	b510      	push	{r4, lr}
 800786c:	681c      	ldr	r4, [r3, #0]
 800786e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007870:	b9b3      	cbnz	r3, 80078a0 <rand+0x38>
 8007872:	2018      	movs	r0, #24
 8007874:	f000 fa9c 	bl	8007db0 <malloc>
 8007878:	4602      	mov	r2, r0
 800787a:	6320      	str	r0, [r4, #48]	@ 0x30
 800787c:	b920      	cbnz	r0, 8007888 <rand+0x20>
 800787e:	4b12      	ldr	r3, [pc, #72]	@ (80078c8 <rand+0x60>)
 8007880:	4812      	ldr	r0, [pc, #72]	@ (80078cc <rand+0x64>)
 8007882:	2152      	movs	r1, #82	@ 0x52
 8007884:	f000 fa2c 	bl	8007ce0 <__assert_func>
 8007888:	4911      	ldr	r1, [pc, #68]	@ (80078d0 <rand+0x68>)
 800788a:	4b12      	ldr	r3, [pc, #72]	@ (80078d4 <rand+0x6c>)
 800788c:	e9c0 1300 	strd	r1, r3, [r0]
 8007890:	4b11      	ldr	r3, [pc, #68]	@ (80078d8 <rand+0x70>)
 8007892:	6083      	str	r3, [r0, #8]
 8007894:	230b      	movs	r3, #11
 8007896:	8183      	strh	r3, [r0, #12]
 8007898:	2100      	movs	r1, #0
 800789a:	2001      	movs	r0, #1
 800789c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80078a0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80078a2:	480e      	ldr	r0, [pc, #56]	@ (80078dc <rand+0x74>)
 80078a4:	690b      	ldr	r3, [r1, #16]
 80078a6:	694c      	ldr	r4, [r1, #20]
 80078a8:	4a0d      	ldr	r2, [pc, #52]	@ (80078e0 <rand+0x78>)
 80078aa:	4358      	muls	r0, r3
 80078ac:	fb02 0004 	mla	r0, r2, r4, r0
 80078b0:	fba3 3202 	umull	r3, r2, r3, r2
 80078b4:	3301      	adds	r3, #1
 80078b6:	eb40 0002 	adc.w	r0, r0, r2
 80078ba:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80078be:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80078c2:	bd10      	pop	{r4, pc}
 80078c4:	2000001c 	.word	0x2000001c
 80078c8:	08008eb8 	.word	0x08008eb8
 80078cc:	08008ecf 	.word	0x08008ecf
 80078d0:	abcd330e 	.word	0xabcd330e
 80078d4:	e66d1234 	.word	0xe66d1234
 80078d8:	0005deec 	.word	0x0005deec
 80078dc:	5851f42d 	.word	0x5851f42d
 80078e0:	4c957f2d 	.word	0x4c957f2d

080078e4 <std>:
 80078e4:	2300      	movs	r3, #0
 80078e6:	b510      	push	{r4, lr}
 80078e8:	4604      	mov	r4, r0
 80078ea:	e9c0 3300 	strd	r3, r3, [r0]
 80078ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80078f2:	6083      	str	r3, [r0, #8]
 80078f4:	8181      	strh	r1, [r0, #12]
 80078f6:	6643      	str	r3, [r0, #100]	@ 0x64
 80078f8:	81c2      	strh	r2, [r0, #14]
 80078fa:	6183      	str	r3, [r0, #24]
 80078fc:	4619      	mov	r1, r3
 80078fe:	2208      	movs	r2, #8
 8007900:	305c      	adds	r0, #92	@ 0x5c
 8007902:	f000 f948 	bl	8007b96 <memset>
 8007906:	4b0d      	ldr	r3, [pc, #52]	@ (800793c <std+0x58>)
 8007908:	6263      	str	r3, [r4, #36]	@ 0x24
 800790a:	4b0d      	ldr	r3, [pc, #52]	@ (8007940 <std+0x5c>)
 800790c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800790e:	4b0d      	ldr	r3, [pc, #52]	@ (8007944 <std+0x60>)
 8007910:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007912:	4b0d      	ldr	r3, [pc, #52]	@ (8007948 <std+0x64>)
 8007914:	6323      	str	r3, [r4, #48]	@ 0x30
 8007916:	4b0d      	ldr	r3, [pc, #52]	@ (800794c <std+0x68>)
 8007918:	6224      	str	r4, [r4, #32]
 800791a:	429c      	cmp	r4, r3
 800791c:	d006      	beq.n	800792c <std+0x48>
 800791e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007922:	4294      	cmp	r4, r2
 8007924:	d002      	beq.n	800792c <std+0x48>
 8007926:	33d0      	adds	r3, #208	@ 0xd0
 8007928:	429c      	cmp	r4, r3
 800792a:	d105      	bne.n	8007938 <std+0x54>
 800792c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007934:	f000 b9ba 	b.w	8007cac <__retarget_lock_init_recursive>
 8007938:	bd10      	pop	{r4, pc}
 800793a:	bf00      	nop
 800793c:	08007b11 	.word	0x08007b11
 8007940:	08007b33 	.word	0x08007b33
 8007944:	08007b6b 	.word	0x08007b6b
 8007948:	08007b8f 	.word	0x08007b8f
 800794c:	2000450c 	.word	0x2000450c

08007950 <stdio_exit_handler>:
 8007950:	4a02      	ldr	r2, [pc, #8]	@ (800795c <stdio_exit_handler+0xc>)
 8007952:	4903      	ldr	r1, [pc, #12]	@ (8007960 <stdio_exit_handler+0x10>)
 8007954:	4803      	ldr	r0, [pc, #12]	@ (8007964 <stdio_exit_handler+0x14>)
 8007956:	f000 b869 	b.w	8007a2c <_fwalk_sglue>
 800795a:	bf00      	nop
 800795c:	20000010 	.word	0x20000010
 8007960:	080085f1 	.word	0x080085f1
 8007964:	20000020 	.word	0x20000020

08007968 <cleanup_stdio>:
 8007968:	6841      	ldr	r1, [r0, #4]
 800796a:	4b0c      	ldr	r3, [pc, #48]	@ (800799c <cleanup_stdio+0x34>)
 800796c:	4299      	cmp	r1, r3
 800796e:	b510      	push	{r4, lr}
 8007970:	4604      	mov	r4, r0
 8007972:	d001      	beq.n	8007978 <cleanup_stdio+0x10>
 8007974:	f000 fe3c 	bl	80085f0 <_fflush_r>
 8007978:	68a1      	ldr	r1, [r4, #8]
 800797a:	4b09      	ldr	r3, [pc, #36]	@ (80079a0 <cleanup_stdio+0x38>)
 800797c:	4299      	cmp	r1, r3
 800797e:	d002      	beq.n	8007986 <cleanup_stdio+0x1e>
 8007980:	4620      	mov	r0, r4
 8007982:	f000 fe35 	bl	80085f0 <_fflush_r>
 8007986:	68e1      	ldr	r1, [r4, #12]
 8007988:	4b06      	ldr	r3, [pc, #24]	@ (80079a4 <cleanup_stdio+0x3c>)
 800798a:	4299      	cmp	r1, r3
 800798c:	d004      	beq.n	8007998 <cleanup_stdio+0x30>
 800798e:	4620      	mov	r0, r4
 8007990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007994:	f000 be2c 	b.w	80085f0 <_fflush_r>
 8007998:	bd10      	pop	{r4, pc}
 800799a:	bf00      	nop
 800799c:	2000450c 	.word	0x2000450c
 80079a0:	20004574 	.word	0x20004574
 80079a4:	200045dc 	.word	0x200045dc

080079a8 <global_stdio_init.part.0>:
 80079a8:	b510      	push	{r4, lr}
 80079aa:	4b0b      	ldr	r3, [pc, #44]	@ (80079d8 <global_stdio_init.part.0+0x30>)
 80079ac:	4c0b      	ldr	r4, [pc, #44]	@ (80079dc <global_stdio_init.part.0+0x34>)
 80079ae:	4a0c      	ldr	r2, [pc, #48]	@ (80079e0 <global_stdio_init.part.0+0x38>)
 80079b0:	601a      	str	r2, [r3, #0]
 80079b2:	4620      	mov	r0, r4
 80079b4:	2200      	movs	r2, #0
 80079b6:	2104      	movs	r1, #4
 80079b8:	f7ff ff94 	bl	80078e4 <std>
 80079bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80079c0:	2201      	movs	r2, #1
 80079c2:	2109      	movs	r1, #9
 80079c4:	f7ff ff8e 	bl	80078e4 <std>
 80079c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80079cc:	2202      	movs	r2, #2
 80079ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079d2:	2112      	movs	r1, #18
 80079d4:	f7ff bf86 	b.w	80078e4 <std>
 80079d8:	20004644 	.word	0x20004644
 80079dc:	2000450c 	.word	0x2000450c
 80079e0:	08007951 	.word	0x08007951

080079e4 <__sfp_lock_acquire>:
 80079e4:	4801      	ldr	r0, [pc, #4]	@ (80079ec <__sfp_lock_acquire+0x8>)
 80079e6:	f000 b962 	b.w	8007cae <__retarget_lock_acquire_recursive>
 80079ea:	bf00      	nop
 80079ec:	2000464d 	.word	0x2000464d

080079f0 <__sfp_lock_release>:
 80079f0:	4801      	ldr	r0, [pc, #4]	@ (80079f8 <__sfp_lock_release+0x8>)
 80079f2:	f000 b95d 	b.w	8007cb0 <__retarget_lock_release_recursive>
 80079f6:	bf00      	nop
 80079f8:	2000464d 	.word	0x2000464d

080079fc <__sinit>:
 80079fc:	b510      	push	{r4, lr}
 80079fe:	4604      	mov	r4, r0
 8007a00:	f7ff fff0 	bl	80079e4 <__sfp_lock_acquire>
 8007a04:	6a23      	ldr	r3, [r4, #32]
 8007a06:	b11b      	cbz	r3, 8007a10 <__sinit+0x14>
 8007a08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a0c:	f7ff bff0 	b.w	80079f0 <__sfp_lock_release>
 8007a10:	4b04      	ldr	r3, [pc, #16]	@ (8007a24 <__sinit+0x28>)
 8007a12:	6223      	str	r3, [r4, #32]
 8007a14:	4b04      	ldr	r3, [pc, #16]	@ (8007a28 <__sinit+0x2c>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d1f5      	bne.n	8007a08 <__sinit+0xc>
 8007a1c:	f7ff ffc4 	bl	80079a8 <global_stdio_init.part.0>
 8007a20:	e7f2      	b.n	8007a08 <__sinit+0xc>
 8007a22:	bf00      	nop
 8007a24:	08007969 	.word	0x08007969
 8007a28:	20004644 	.word	0x20004644

08007a2c <_fwalk_sglue>:
 8007a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a30:	4607      	mov	r7, r0
 8007a32:	4688      	mov	r8, r1
 8007a34:	4614      	mov	r4, r2
 8007a36:	2600      	movs	r6, #0
 8007a38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a3c:	f1b9 0901 	subs.w	r9, r9, #1
 8007a40:	d505      	bpl.n	8007a4e <_fwalk_sglue+0x22>
 8007a42:	6824      	ldr	r4, [r4, #0]
 8007a44:	2c00      	cmp	r4, #0
 8007a46:	d1f7      	bne.n	8007a38 <_fwalk_sglue+0xc>
 8007a48:	4630      	mov	r0, r6
 8007a4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a4e:	89ab      	ldrh	r3, [r5, #12]
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d907      	bls.n	8007a64 <_fwalk_sglue+0x38>
 8007a54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a58:	3301      	adds	r3, #1
 8007a5a:	d003      	beq.n	8007a64 <_fwalk_sglue+0x38>
 8007a5c:	4629      	mov	r1, r5
 8007a5e:	4638      	mov	r0, r7
 8007a60:	47c0      	blx	r8
 8007a62:	4306      	orrs	r6, r0
 8007a64:	3568      	adds	r5, #104	@ 0x68
 8007a66:	e7e9      	b.n	8007a3c <_fwalk_sglue+0x10>

08007a68 <sniprintf>:
 8007a68:	b40c      	push	{r2, r3}
 8007a6a:	b530      	push	{r4, r5, lr}
 8007a6c:	4b17      	ldr	r3, [pc, #92]	@ (8007acc <sniprintf+0x64>)
 8007a6e:	1e0c      	subs	r4, r1, #0
 8007a70:	681d      	ldr	r5, [r3, #0]
 8007a72:	b09d      	sub	sp, #116	@ 0x74
 8007a74:	da08      	bge.n	8007a88 <sniprintf+0x20>
 8007a76:	238b      	movs	r3, #139	@ 0x8b
 8007a78:	602b      	str	r3, [r5, #0]
 8007a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a7e:	b01d      	add	sp, #116	@ 0x74
 8007a80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a84:	b002      	add	sp, #8
 8007a86:	4770      	bx	lr
 8007a88:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007a8c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007a90:	bf14      	ite	ne
 8007a92:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007a96:	4623      	moveq	r3, r4
 8007a98:	9304      	str	r3, [sp, #16]
 8007a9a:	9307      	str	r3, [sp, #28]
 8007a9c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007aa0:	9002      	str	r0, [sp, #8]
 8007aa2:	9006      	str	r0, [sp, #24]
 8007aa4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007aa8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007aaa:	ab21      	add	r3, sp, #132	@ 0x84
 8007aac:	a902      	add	r1, sp, #8
 8007aae:	4628      	mov	r0, r5
 8007ab0:	9301      	str	r3, [sp, #4]
 8007ab2:	f000 fa8f 	bl	8007fd4 <_svfiprintf_r>
 8007ab6:	1c43      	adds	r3, r0, #1
 8007ab8:	bfbc      	itt	lt
 8007aba:	238b      	movlt	r3, #139	@ 0x8b
 8007abc:	602b      	strlt	r3, [r5, #0]
 8007abe:	2c00      	cmp	r4, #0
 8007ac0:	d0dd      	beq.n	8007a7e <sniprintf+0x16>
 8007ac2:	9b02      	ldr	r3, [sp, #8]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	701a      	strb	r2, [r3, #0]
 8007ac8:	e7d9      	b.n	8007a7e <sniprintf+0x16>
 8007aca:	bf00      	nop
 8007acc:	2000001c 	.word	0x2000001c

08007ad0 <siprintf>:
 8007ad0:	b40e      	push	{r1, r2, r3}
 8007ad2:	b500      	push	{lr}
 8007ad4:	b09c      	sub	sp, #112	@ 0x70
 8007ad6:	ab1d      	add	r3, sp, #116	@ 0x74
 8007ad8:	9002      	str	r0, [sp, #8]
 8007ada:	9006      	str	r0, [sp, #24]
 8007adc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007ae0:	4809      	ldr	r0, [pc, #36]	@ (8007b08 <siprintf+0x38>)
 8007ae2:	9107      	str	r1, [sp, #28]
 8007ae4:	9104      	str	r1, [sp, #16]
 8007ae6:	4909      	ldr	r1, [pc, #36]	@ (8007b0c <siprintf+0x3c>)
 8007ae8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007aec:	9105      	str	r1, [sp, #20]
 8007aee:	6800      	ldr	r0, [r0, #0]
 8007af0:	9301      	str	r3, [sp, #4]
 8007af2:	a902      	add	r1, sp, #8
 8007af4:	f000 fa6e 	bl	8007fd4 <_svfiprintf_r>
 8007af8:	9b02      	ldr	r3, [sp, #8]
 8007afa:	2200      	movs	r2, #0
 8007afc:	701a      	strb	r2, [r3, #0]
 8007afe:	b01c      	add	sp, #112	@ 0x70
 8007b00:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b04:	b003      	add	sp, #12
 8007b06:	4770      	bx	lr
 8007b08:	2000001c 	.word	0x2000001c
 8007b0c:	ffff0208 	.word	0xffff0208

08007b10 <__sread>:
 8007b10:	b510      	push	{r4, lr}
 8007b12:	460c      	mov	r4, r1
 8007b14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b18:	f000 f87a 	bl	8007c10 <_read_r>
 8007b1c:	2800      	cmp	r0, #0
 8007b1e:	bfab      	itete	ge
 8007b20:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007b22:	89a3      	ldrhlt	r3, [r4, #12]
 8007b24:	181b      	addge	r3, r3, r0
 8007b26:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007b2a:	bfac      	ite	ge
 8007b2c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007b2e:	81a3      	strhlt	r3, [r4, #12]
 8007b30:	bd10      	pop	{r4, pc}

08007b32 <__swrite>:
 8007b32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b36:	461f      	mov	r7, r3
 8007b38:	898b      	ldrh	r3, [r1, #12]
 8007b3a:	05db      	lsls	r3, r3, #23
 8007b3c:	4605      	mov	r5, r0
 8007b3e:	460c      	mov	r4, r1
 8007b40:	4616      	mov	r6, r2
 8007b42:	d505      	bpl.n	8007b50 <__swrite+0x1e>
 8007b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b48:	2302      	movs	r3, #2
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f000 f84e 	bl	8007bec <_lseek_r>
 8007b50:	89a3      	ldrh	r3, [r4, #12]
 8007b52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b56:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007b5a:	81a3      	strh	r3, [r4, #12]
 8007b5c:	4632      	mov	r2, r6
 8007b5e:	463b      	mov	r3, r7
 8007b60:	4628      	mov	r0, r5
 8007b62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b66:	f000 b865 	b.w	8007c34 <_write_r>

08007b6a <__sseek>:
 8007b6a:	b510      	push	{r4, lr}
 8007b6c:	460c      	mov	r4, r1
 8007b6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b72:	f000 f83b 	bl	8007bec <_lseek_r>
 8007b76:	1c43      	adds	r3, r0, #1
 8007b78:	89a3      	ldrh	r3, [r4, #12]
 8007b7a:	bf15      	itete	ne
 8007b7c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007b7e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007b82:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007b86:	81a3      	strheq	r3, [r4, #12]
 8007b88:	bf18      	it	ne
 8007b8a:	81a3      	strhne	r3, [r4, #12]
 8007b8c:	bd10      	pop	{r4, pc}

08007b8e <__sclose>:
 8007b8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b92:	f000 b81b 	b.w	8007bcc <_close_r>

08007b96 <memset>:
 8007b96:	4402      	add	r2, r0
 8007b98:	4603      	mov	r3, r0
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d100      	bne.n	8007ba0 <memset+0xa>
 8007b9e:	4770      	bx	lr
 8007ba0:	f803 1b01 	strb.w	r1, [r3], #1
 8007ba4:	e7f9      	b.n	8007b9a <memset+0x4>

08007ba6 <strncpy>:
 8007ba6:	b510      	push	{r4, lr}
 8007ba8:	3901      	subs	r1, #1
 8007baa:	4603      	mov	r3, r0
 8007bac:	b132      	cbz	r2, 8007bbc <strncpy+0x16>
 8007bae:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007bb2:	f803 4b01 	strb.w	r4, [r3], #1
 8007bb6:	3a01      	subs	r2, #1
 8007bb8:	2c00      	cmp	r4, #0
 8007bba:	d1f7      	bne.n	8007bac <strncpy+0x6>
 8007bbc:	441a      	add	r2, r3
 8007bbe:	2100      	movs	r1, #0
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d100      	bne.n	8007bc6 <strncpy+0x20>
 8007bc4:	bd10      	pop	{r4, pc}
 8007bc6:	f803 1b01 	strb.w	r1, [r3], #1
 8007bca:	e7f9      	b.n	8007bc0 <strncpy+0x1a>

08007bcc <_close_r>:
 8007bcc:	b538      	push	{r3, r4, r5, lr}
 8007bce:	4d06      	ldr	r5, [pc, #24]	@ (8007be8 <_close_r+0x1c>)
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	4604      	mov	r4, r0
 8007bd4:	4608      	mov	r0, r1
 8007bd6:	602b      	str	r3, [r5, #0]
 8007bd8:	f7f9 fc46 	bl	8001468 <_close>
 8007bdc:	1c43      	adds	r3, r0, #1
 8007bde:	d102      	bne.n	8007be6 <_close_r+0x1a>
 8007be0:	682b      	ldr	r3, [r5, #0]
 8007be2:	b103      	cbz	r3, 8007be6 <_close_r+0x1a>
 8007be4:	6023      	str	r3, [r4, #0]
 8007be6:	bd38      	pop	{r3, r4, r5, pc}
 8007be8:	20004648 	.word	0x20004648

08007bec <_lseek_r>:
 8007bec:	b538      	push	{r3, r4, r5, lr}
 8007bee:	4d07      	ldr	r5, [pc, #28]	@ (8007c0c <_lseek_r+0x20>)
 8007bf0:	4604      	mov	r4, r0
 8007bf2:	4608      	mov	r0, r1
 8007bf4:	4611      	mov	r1, r2
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	602a      	str	r2, [r5, #0]
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	f7f9 fc5b 	bl	80014b6 <_lseek>
 8007c00:	1c43      	adds	r3, r0, #1
 8007c02:	d102      	bne.n	8007c0a <_lseek_r+0x1e>
 8007c04:	682b      	ldr	r3, [r5, #0]
 8007c06:	b103      	cbz	r3, 8007c0a <_lseek_r+0x1e>
 8007c08:	6023      	str	r3, [r4, #0]
 8007c0a:	bd38      	pop	{r3, r4, r5, pc}
 8007c0c:	20004648 	.word	0x20004648

08007c10 <_read_r>:
 8007c10:	b538      	push	{r3, r4, r5, lr}
 8007c12:	4d07      	ldr	r5, [pc, #28]	@ (8007c30 <_read_r+0x20>)
 8007c14:	4604      	mov	r4, r0
 8007c16:	4608      	mov	r0, r1
 8007c18:	4611      	mov	r1, r2
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	602a      	str	r2, [r5, #0]
 8007c1e:	461a      	mov	r2, r3
 8007c20:	f7f9 fbe9 	bl	80013f6 <_read>
 8007c24:	1c43      	adds	r3, r0, #1
 8007c26:	d102      	bne.n	8007c2e <_read_r+0x1e>
 8007c28:	682b      	ldr	r3, [r5, #0]
 8007c2a:	b103      	cbz	r3, 8007c2e <_read_r+0x1e>
 8007c2c:	6023      	str	r3, [r4, #0]
 8007c2e:	bd38      	pop	{r3, r4, r5, pc}
 8007c30:	20004648 	.word	0x20004648

08007c34 <_write_r>:
 8007c34:	b538      	push	{r3, r4, r5, lr}
 8007c36:	4d07      	ldr	r5, [pc, #28]	@ (8007c54 <_write_r+0x20>)
 8007c38:	4604      	mov	r4, r0
 8007c3a:	4608      	mov	r0, r1
 8007c3c:	4611      	mov	r1, r2
 8007c3e:	2200      	movs	r2, #0
 8007c40:	602a      	str	r2, [r5, #0]
 8007c42:	461a      	mov	r2, r3
 8007c44:	f7f9 fbf4 	bl	8001430 <_write>
 8007c48:	1c43      	adds	r3, r0, #1
 8007c4a:	d102      	bne.n	8007c52 <_write_r+0x1e>
 8007c4c:	682b      	ldr	r3, [r5, #0]
 8007c4e:	b103      	cbz	r3, 8007c52 <_write_r+0x1e>
 8007c50:	6023      	str	r3, [r4, #0]
 8007c52:	bd38      	pop	{r3, r4, r5, pc}
 8007c54:	20004648 	.word	0x20004648

08007c58 <__errno>:
 8007c58:	4b01      	ldr	r3, [pc, #4]	@ (8007c60 <__errno+0x8>)
 8007c5a:	6818      	ldr	r0, [r3, #0]
 8007c5c:	4770      	bx	lr
 8007c5e:	bf00      	nop
 8007c60:	2000001c 	.word	0x2000001c

08007c64 <__libc_init_array>:
 8007c64:	b570      	push	{r4, r5, r6, lr}
 8007c66:	4d0d      	ldr	r5, [pc, #52]	@ (8007c9c <__libc_init_array+0x38>)
 8007c68:	4c0d      	ldr	r4, [pc, #52]	@ (8007ca0 <__libc_init_array+0x3c>)
 8007c6a:	1b64      	subs	r4, r4, r5
 8007c6c:	10a4      	asrs	r4, r4, #2
 8007c6e:	2600      	movs	r6, #0
 8007c70:	42a6      	cmp	r6, r4
 8007c72:	d109      	bne.n	8007c88 <__libc_init_array+0x24>
 8007c74:	4d0b      	ldr	r5, [pc, #44]	@ (8007ca4 <__libc_init_array+0x40>)
 8007c76:	4c0c      	ldr	r4, [pc, #48]	@ (8007ca8 <__libc_init_array+0x44>)
 8007c78:	f000 fff8 	bl	8008c6c <_init>
 8007c7c:	1b64      	subs	r4, r4, r5
 8007c7e:	10a4      	asrs	r4, r4, #2
 8007c80:	2600      	movs	r6, #0
 8007c82:	42a6      	cmp	r6, r4
 8007c84:	d105      	bne.n	8007c92 <__libc_init_array+0x2e>
 8007c86:	bd70      	pop	{r4, r5, r6, pc}
 8007c88:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c8c:	4798      	blx	r3
 8007c8e:	3601      	adds	r6, #1
 8007c90:	e7ee      	b.n	8007c70 <__libc_init_array+0xc>
 8007c92:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c96:	4798      	blx	r3
 8007c98:	3601      	adds	r6, #1
 8007c9a:	e7f2      	b.n	8007c82 <__libc_init_array+0x1e>
 8007c9c:	08008fa0 	.word	0x08008fa0
 8007ca0:	08008fa0 	.word	0x08008fa0
 8007ca4:	08008fa0 	.word	0x08008fa0
 8007ca8:	08008fa4 	.word	0x08008fa4

08007cac <__retarget_lock_init_recursive>:
 8007cac:	4770      	bx	lr

08007cae <__retarget_lock_acquire_recursive>:
 8007cae:	4770      	bx	lr

08007cb0 <__retarget_lock_release_recursive>:
 8007cb0:	4770      	bx	lr

08007cb2 <strcpy>:
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007cb8:	f803 2b01 	strb.w	r2, [r3], #1
 8007cbc:	2a00      	cmp	r2, #0
 8007cbe:	d1f9      	bne.n	8007cb4 <strcpy+0x2>
 8007cc0:	4770      	bx	lr

08007cc2 <memcpy>:
 8007cc2:	440a      	add	r2, r1
 8007cc4:	4291      	cmp	r1, r2
 8007cc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8007cca:	d100      	bne.n	8007cce <memcpy+0xc>
 8007ccc:	4770      	bx	lr
 8007cce:	b510      	push	{r4, lr}
 8007cd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cd8:	4291      	cmp	r1, r2
 8007cda:	d1f9      	bne.n	8007cd0 <memcpy+0xe>
 8007cdc:	bd10      	pop	{r4, pc}
	...

08007ce0 <__assert_func>:
 8007ce0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007ce2:	4614      	mov	r4, r2
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	4b09      	ldr	r3, [pc, #36]	@ (8007d0c <__assert_func+0x2c>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4605      	mov	r5, r0
 8007cec:	68d8      	ldr	r0, [r3, #12]
 8007cee:	b954      	cbnz	r4, 8007d06 <__assert_func+0x26>
 8007cf0:	4b07      	ldr	r3, [pc, #28]	@ (8007d10 <__assert_func+0x30>)
 8007cf2:	461c      	mov	r4, r3
 8007cf4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007cf8:	9100      	str	r1, [sp, #0]
 8007cfa:	462b      	mov	r3, r5
 8007cfc:	4905      	ldr	r1, [pc, #20]	@ (8007d14 <__assert_func+0x34>)
 8007cfe:	f000 fc9f 	bl	8008640 <fiprintf>
 8007d02:	f000 fcd9 	bl	80086b8 <abort>
 8007d06:	4b04      	ldr	r3, [pc, #16]	@ (8007d18 <__assert_func+0x38>)
 8007d08:	e7f4      	b.n	8007cf4 <__assert_func+0x14>
 8007d0a:	bf00      	nop
 8007d0c:	2000001c 	.word	0x2000001c
 8007d10:	08008f62 	.word	0x08008f62
 8007d14:	08008f34 	.word	0x08008f34
 8007d18:	08008f27 	.word	0x08008f27

08007d1c <_free_r>:
 8007d1c:	b538      	push	{r3, r4, r5, lr}
 8007d1e:	4605      	mov	r5, r0
 8007d20:	2900      	cmp	r1, #0
 8007d22:	d041      	beq.n	8007da8 <_free_r+0x8c>
 8007d24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d28:	1f0c      	subs	r4, r1, #4
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	bfb8      	it	lt
 8007d2e:	18e4      	addlt	r4, r4, r3
 8007d30:	f000 f8e8 	bl	8007f04 <__malloc_lock>
 8007d34:	4a1d      	ldr	r2, [pc, #116]	@ (8007dac <_free_r+0x90>)
 8007d36:	6813      	ldr	r3, [r2, #0]
 8007d38:	b933      	cbnz	r3, 8007d48 <_free_r+0x2c>
 8007d3a:	6063      	str	r3, [r4, #4]
 8007d3c:	6014      	str	r4, [r2, #0]
 8007d3e:	4628      	mov	r0, r5
 8007d40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d44:	f000 b8e4 	b.w	8007f10 <__malloc_unlock>
 8007d48:	42a3      	cmp	r3, r4
 8007d4a:	d908      	bls.n	8007d5e <_free_r+0x42>
 8007d4c:	6820      	ldr	r0, [r4, #0]
 8007d4e:	1821      	adds	r1, r4, r0
 8007d50:	428b      	cmp	r3, r1
 8007d52:	bf01      	itttt	eq
 8007d54:	6819      	ldreq	r1, [r3, #0]
 8007d56:	685b      	ldreq	r3, [r3, #4]
 8007d58:	1809      	addeq	r1, r1, r0
 8007d5a:	6021      	streq	r1, [r4, #0]
 8007d5c:	e7ed      	b.n	8007d3a <_free_r+0x1e>
 8007d5e:	461a      	mov	r2, r3
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	b10b      	cbz	r3, 8007d68 <_free_r+0x4c>
 8007d64:	42a3      	cmp	r3, r4
 8007d66:	d9fa      	bls.n	8007d5e <_free_r+0x42>
 8007d68:	6811      	ldr	r1, [r2, #0]
 8007d6a:	1850      	adds	r0, r2, r1
 8007d6c:	42a0      	cmp	r0, r4
 8007d6e:	d10b      	bne.n	8007d88 <_free_r+0x6c>
 8007d70:	6820      	ldr	r0, [r4, #0]
 8007d72:	4401      	add	r1, r0
 8007d74:	1850      	adds	r0, r2, r1
 8007d76:	4283      	cmp	r3, r0
 8007d78:	6011      	str	r1, [r2, #0]
 8007d7a:	d1e0      	bne.n	8007d3e <_free_r+0x22>
 8007d7c:	6818      	ldr	r0, [r3, #0]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	6053      	str	r3, [r2, #4]
 8007d82:	4408      	add	r0, r1
 8007d84:	6010      	str	r0, [r2, #0]
 8007d86:	e7da      	b.n	8007d3e <_free_r+0x22>
 8007d88:	d902      	bls.n	8007d90 <_free_r+0x74>
 8007d8a:	230c      	movs	r3, #12
 8007d8c:	602b      	str	r3, [r5, #0]
 8007d8e:	e7d6      	b.n	8007d3e <_free_r+0x22>
 8007d90:	6820      	ldr	r0, [r4, #0]
 8007d92:	1821      	adds	r1, r4, r0
 8007d94:	428b      	cmp	r3, r1
 8007d96:	bf04      	itt	eq
 8007d98:	6819      	ldreq	r1, [r3, #0]
 8007d9a:	685b      	ldreq	r3, [r3, #4]
 8007d9c:	6063      	str	r3, [r4, #4]
 8007d9e:	bf04      	itt	eq
 8007da0:	1809      	addeq	r1, r1, r0
 8007da2:	6021      	streq	r1, [r4, #0]
 8007da4:	6054      	str	r4, [r2, #4]
 8007da6:	e7ca      	b.n	8007d3e <_free_r+0x22>
 8007da8:	bd38      	pop	{r3, r4, r5, pc}
 8007daa:	bf00      	nop
 8007dac:	20004654 	.word	0x20004654

08007db0 <malloc>:
 8007db0:	4b02      	ldr	r3, [pc, #8]	@ (8007dbc <malloc+0xc>)
 8007db2:	4601      	mov	r1, r0
 8007db4:	6818      	ldr	r0, [r3, #0]
 8007db6:	f000 b825 	b.w	8007e04 <_malloc_r>
 8007dba:	bf00      	nop
 8007dbc:	2000001c 	.word	0x2000001c

08007dc0 <sbrk_aligned>:
 8007dc0:	b570      	push	{r4, r5, r6, lr}
 8007dc2:	4e0f      	ldr	r6, [pc, #60]	@ (8007e00 <sbrk_aligned+0x40>)
 8007dc4:	460c      	mov	r4, r1
 8007dc6:	6831      	ldr	r1, [r6, #0]
 8007dc8:	4605      	mov	r5, r0
 8007dca:	b911      	cbnz	r1, 8007dd2 <sbrk_aligned+0x12>
 8007dcc:	f000 fc64 	bl	8008698 <_sbrk_r>
 8007dd0:	6030      	str	r0, [r6, #0]
 8007dd2:	4621      	mov	r1, r4
 8007dd4:	4628      	mov	r0, r5
 8007dd6:	f000 fc5f 	bl	8008698 <_sbrk_r>
 8007dda:	1c43      	adds	r3, r0, #1
 8007ddc:	d103      	bne.n	8007de6 <sbrk_aligned+0x26>
 8007dde:	f04f 34ff 	mov.w	r4, #4294967295
 8007de2:	4620      	mov	r0, r4
 8007de4:	bd70      	pop	{r4, r5, r6, pc}
 8007de6:	1cc4      	adds	r4, r0, #3
 8007de8:	f024 0403 	bic.w	r4, r4, #3
 8007dec:	42a0      	cmp	r0, r4
 8007dee:	d0f8      	beq.n	8007de2 <sbrk_aligned+0x22>
 8007df0:	1a21      	subs	r1, r4, r0
 8007df2:	4628      	mov	r0, r5
 8007df4:	f000 fc50 	bl	8008698 <_sbrk_r>
 8007df8:	3001      	adds	r0, #1
 8007dfa:	d1f2      	bne.n	8007de2 <sbrk_aligned+0x22>
 8007dfc:	e7ef      	b.n	8007dde <sbrk_aligned+0x1e>
 8007dfe:	bf00      	nop
 8007e00:	20004650 	.word	0x20004650

08007e04 <_malloc_r>:
 8007e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e08:	1ccd      	adds	r5, r1, #3
 8007e0a:	f025 0503 	bic.w	r5, r5, #3
 8007e0e:	3508      	adds	r5, #8
 8007e10:	2d0c      	cmp	r5, #12
 8007e12:	bf38      	it	cc
 8007e14:	250c      	movcc	r5, #12
 8007e16:	2d00      	cmp	r5, #0
 8007e18:	4606      	mov	r6, r0
 8007e1a:	db01      	blt.n	8007e20 <_malloc_r+0x1c>
 8007e1c:	42a9      	cmp	r1, r5
 8007e1e:	d904      	bls.n	8007e2a <_malloc_r+0x26>
 8007e20:	230c      	movs	r3, #12
 8007e22:	6033      	str	r3, [r6, #0]
 8007e24:	2000      	movs	r0, #0
 8007e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f00 <_malloc_r+0xfc>
 8007e2e:	f000 f869 	bl	8007f04 <__malloc_lock>
 8007e32:	f8d8 3000 	ldr.w	r3, [r8]
 8007e36:	461c      	mov	r4, r3
 8007e38:	bb44      	cbnz	r4, 8007e8c <_malloc_r+0x88>
 8007e3a:	4629      	mov	r1, r5
 8007e3c:	4630      	mov	r0, r6
 8007e3e:	f7ff ffbf 	bl	8007dc0 <sbrk_aligned>
 8007e42:	1c43      	adds	r3, r0, #1
 8007e44:	4604      	mov	r4, r0
 8007e46:	d158      	bne.n	8007efa <_malloc_r+0xf6>
 8007e48:	f8d8 4000 	ldr.w	r4, [r8]
 8007e4c:	4627      	mov	r7, r4
 8007e4e:	2f00      	cmp	r7, #0
 8007e50:	d143      	bne.n	8007eda <_malloc_r+0xd6>
 8007e52:	2c00      	cmp	r4, #0
 8007e54:	d04b      	beq.n	8007eee <_malloc_r+0xea>
 8007e56:	6823      	ldr	r3, [r4, #0]
 8007e58:	4639      	mov	r1, r7
 8007e5a:	4630      	mov	r0, r6
 8007e5c:	eb04 0903 	add.w	r9, r4, r3
 8007e60:	f000 fc1a 	bl	8008698 <_sbrk_r>
 8007e64:	4581      	cmp	r9, r0
 8007e66:	d142      	bne.n	8007eee <_malloc_r+0xea>
 8007e68:	6821      	ldr	r1, [r4, #0]
 8007e6a:	1a6d      	subs	r5, r5, r1
 8007e6c:	4629      	mov	r1, r5
 8007e6e:	4630      	mov	r0, r6
 8007e70:	f7ff ffa6 	bl	8007dc0 <sbrk_aligned>
 8007e74:	3001      	adds	r0, #1
 8007e76:	d03a      	beq.n	8007eee <_malloc_r+0xea>
 8007e78:	6823      	ldr	r3, [r4, #0]
 8007e7a:	442b      	add	r3, r5
 8007e7c:	6023      	str	r3, [r4, #0]
 8007e7e:	f8d8 3000 	ldr.w	r3, [r8]
 8007e82:	685a      	ldr	r2, [r3, #4]
 8007e84:	bb62      	cbnz	r2, 8007ee0 <_malloc_r+0xdc>
 8007e86:	f8c8 7000 	str.w	r7, [r8]
 8007e8a:	e00f      	b.n	8007eac <_malloc_r+0xa8>
 8007e8c:	6822      	ldr	r2, [r4, #0]
 8007e8e:	1b52      	subs	r2, r2, r5
 8007e90:	d420      	bmi.n	8007ed4 <_malloc_r+0xd0>
 8007e92:	2a0b      	cmp	r2, #11
 8007e94:	d917      	bls.n	8007ec6 <_malloc_r+0xc2>
 8007e96:	1961      	adds	r1, r4, r5
 8007e98:	42a3      	cmp	r3, r4
 8007e9a:	6025      	str	r5, [r4, #0]
 8007e9c:	bf18      	it	ne
 8007e9e:	6059      	strne	r1, [r3, #4]
 8007ea0:	6863      	ldr	r3, [r4, #4]
 8007ea2:	bf08      	it	eq
 8007ea4:	f8c8 1000 	streq.w	r1, [r8]
 8007ea8:	5162      	str	r2, [r4, r5]
 8007eaa:	604b      	str	r3, [r1, #4]
 8007eac:	4630      	mov	r0, r6
 8007eae:	f000 f82f 	bl	8007f10 <__malloc_unlock>
 8007eb2:	f104 000b 	add.w	r0, r4, #11
 8007eb6:	1d23      	adds	r3, r4, #4
 8007eb8:	f020 0007 	bic.w	r0, r0, #7
 8007ebc:	1ac2      	subs	r2, r0, r3
 8007ebe:	bf1c      	itt	ne
 8007ec0:	1a1b      	subne	r3, r3, r0
 8007ec2:	50a3      	strne	r3, [r4, r2]
 8007ec4:	e7af      	b.n	8007e26 <_malloc_r+0x22>
 8007ec6:	6862      	ldr	r2, [r4, #4]
 8007ec8:	42a3      	cmp	r3, r4
 8007eca:	bf0c      	ite	eq
 8007ecc:	f8c8 2000 	streq.w	r2, [r8]
 8007ed0:	605a      	strne	r2, [r3, #4]
 8007ed2:	e7eb      	b.n	8007eac <_malloc_r+0xa8>
 8007ed4:	4623      	mov	r3, r4
 8007ed6:	6864      	ldr	r4, [r4, #4]
 8007ed8:	e7ae      	b.n	8007e38 <_malloc_r+0x34>
 8007eda:	463c      	mov	r4, r7
 8007edc:	687f      	ldr	r7, [r7, #4]
 8007ede:	e7b6      	b.n	8007e4e <_malloc_r+0x4a>
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	42a3      	cmp	r3, r4
 8007ee6:	d1fb      	bne.n	8007ee0 <_malloc_r+0xdc>
 8007ee8:	2300      	movs	r3, #0
 8007eea:	6053      	str	r3, [r2, #4]
 8007eec:	e7de      	b.n	8007eac <_malloc_r+0xa8>
 8007eee:	230c      	movs	r3, #12
 8007ef0:	6033      	str	r3, [r6, #0]
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	f000 f80c 	bl	8007f10 <__malloc_unlock>
 8007ef8:	e794      	b.n	8007e24 <_malloc_r+0x20>
 8007efa:	6005      	str	r5, [r0, #0]
 8007efc:	e7d6      	b.n	8007eac <_malloc_r+0xa8>
 8007efe:	bf00      	nop
 8007f00:	20004654 	.word	0x20004654

08007f04 <__malloc_lock>:
 8007f04:	4801      	ldr	r0, [pc, #4]	@ (8007f0c <__malloc_lock+0x8>)
 8007f06:	f7ff bed2 	b.w	8007cae <__retarget_lock_acquire_recursive>
 8007f0a:	bf00      	nop
 8007f0c:	2000464c 	.word	0x2000464c

08007f10 <__malloc_unlock>:
 8007f10:	4801      	ldr	r0, [pc, #4]	@ (8007f18 <__malloc_unlock+0x8>)
 8007f12:	f7ff becd 	b.w	8007cb0 <__retarget_lock_release_recursive>
 8007f16:	bf00      	nop
 8007f18:	2000464c 	.word	0x2000464c

08007f1c <__ssputs_r>:
 8007f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f20:	688e      	ldr	r6, [r1, #8]
 8007f22:	461f      	mov	r7, r3
 8007f24:	42be      	cmp	r6, r7
 8007f26:	680b      	ldr	r3, [r1, #0]
 8007f28:	4682      	mov	sl, r0
 8007f2a:	460c      	mov	r4, r1
 8007f2c:	4690      	mov	r8, r2
 8007f2e:	d82d      	bhi.n	8007f8c <__ssputs_r+0x70>
 8007f30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007f38:	d026      	beq.n	8007f88 <__ssputs_r+0x6c>
 8007f3a:	6965      	ldr	r5, [r4, #20]
 8007f3c:	6909      	ldr	r1, [r1, #16]
 8007f3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f42:	eba3 0901 	sub.w	r9, r3, r1
 8007f46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f4a:	1c7b      	adds	r3, r7, #1
 8007f4c:	444b      	add	r3, r9
 8007f4e:	106d      	asrs	r5, r5, #1
 8007f50:	429d      	cmp	r5, r3
 8007f52:	bf38      	it	cc
 8007f54:	461d      	movcc	r5, r3
 8007f56:	0553      	lsls	r3, r2, #21
 8007f58:	d527      	bpl.n	8007faa <__ssputs_r+0x8e>
 8007f5a:	4629      	mov	r1, r5
 8007f5c:	f7ff ff52 	bl	8007e04 <_malloc_r>
 8007f60:	4606      	mov	r6, r0
 8007f62:	b360      	cbz	r0, 8007fbe <__ssputs_r+0xa2>
 8007f64:	6921      	ldr	r1, [r4, #16]
 8007f66:	464a      	mov	r2, r9
 8007f68:	f7ff feab 	bl	8007cc2 <memcpy>
 8007f6c:	89a3      	ldrh	r3, [r4, #12]
 8007f6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007f72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f76:	81a3      	strh	r3, [r4, #12]
 8007f78:	6126      	str	r6, [r4, #16]
 8007f7a:	6165      	str	r5, [r4, #20]
 8007f7c:	444e      	add	r6, r9
 8007f7e:	eba5 0509 	sub.w	r5, r5, r9
 8007f82:	6026      	str	r6, [r4, #0]
 8007f84:	60a5      	str	r5, [r4, #8]
 8007f86:	463e      	mov	r6, r7
 8007f88:	42be      	cmp	r6, r7
 8007f8a:	d900      	bls.n	8007f8e <__ssputs_r+0x72>
 8007f8c:	463e      	mov	r6, r7
 8007f8e:	6820      	ldr	r0, [r4, #0]
 8007f90:	4632      	mov	r2, r6
 8007f92:	4641      	mov	r1, r8
 8007f94:	f000 fb66 	bl	8008664 <memmove>
 8007f98:	68a3      	ldr	r3, [r4, #8]
 8007f9a:	1b9b      	subs	r3, r3, r6
 8007f9c:	60a3      	str	r3, [r4, #8]
 8007f9e:	6823      	ldr	r3, [r4, #0]
 8007fa0:	4433      	add	r3, r6
 8007fa2:	6023      	str	r3, [r4, #0]
 8007fa4:	2000      	movs	r0, #0
 8007fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007faa:	462a      	mov	r2, r5
 8007fac:	f000 fb8b 	bl	80086c6 <_realloc_r>
 8007fb0:	4606      	mov	r6, r0
 8007fb2:	2800      	cmp	r0, #0
 8007fb4:	d1e0      	bne.n	8007f78 <__ssputs_r+0x5c>
 8007fb6:	6921      	ldr	r1, [r4, #16]
 8007fb8:	4650      	mov	r0, sl
 8007fba:	f7ff feaf 	bl	8007d1c <_free_r>
 8007fbe:	230c      	movs	r3, #12
 8007fc0:	f8ca 3000 	str.w	r3, [sl]
 8007fc4:	89a3      	ldrh	r3, [r4, #12]
 8007fc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fca:	81a3      	strh	r3, [r4, #12]
 8007fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8007fd0:	e7e9      	b.n	8007fa6 <__ssputs_r+0x8a>
	...

08007fd4 <_svfiprintf_r>:
 8007fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd8:	4698      	mov	r8, r3
 8007fda:	898b      	ldrh	r3, [r1, #12]
 8007fdc:	061b      	lsls	r3, r3, #24
 8007fde:	b09d      	sub	sp, #116	@ 0x74
 8007fe0:	4607      	mov	r7, r0
 8007fe2:	460d      	mov	r5, r1
 8007fe4:	4614      	mov	r4, r2
 8007fe6:	d510      	bpl.n	800800a <_svfiprintf_r+0x36>
 8007fe8:	690b      	ldr	r3, [r1, #16]
 8007fea:	b973      	cbnz	r3, 800800a <_svfiprintf_r+0x36>
 8007fec:	2140      	movs	r1, #64	@ 0x40
 8007fee:	f7ff ff09 	bl	8007e04 <_malloc_r>
 8007ff2:	6028      	str	r0, [r5, #0]
 8007ff4:	6128      	str	r0, [r5, #16]
 8007ff6:	b930      	cbnz	r0, 8008006 <_svfiprintf_r+0x32>
 8007ff8:	230c      	movs	r3, #12
 8007ffa:	603b      	str	r3, [r7, #0]
 8007ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8008000:	b01d      	add	sp, #116	@ 0x74
 8008002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008006:	2340      	movs	r3, #64	@ 0x40
 8008008:	616b      	str	r3, [r5, #20]
 800800a:	2300      	movs	r3, #0
 800800c:	9309      	str	r3, [sp, #36]	@ 0x24
 800800e:	2320      	movs	r3, #32
 8008010:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008014:	f8cd 800c 	str.w	r8, [sp, #12]
 8008018:	2330      	movs	r3, #48	@ 0x30
 800801a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80081b8 <_svfiprintf_r+0x1e4>
 800801e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008022:	f04f 0901 	mov.w	r9, #1
 8008026:	4623      	mov	r3, r4
 8008028:	469a      	mov	sl, r3
 800802a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800802e:	b10a      	cbz	r2, 8008034 <_svfiprintf_r+0x60>
 8008030:	2a25      	cmp	r2, #37	@ 0x25
 8008032:	d1f9      	bne.n	8008028 <_svfiprintf_r+0x54>
 8008034:	ebba 0b04 	subs.w	fp, sl, r4
 8008038:	d00b      	beq.n	8008052 <_svfiprintf_r+0x7e>
 800803a:	465b      	mov	r3, fp
 800803c:	4622      	mov	r2, r4
 800803e:	4629      	mov	r1, r5
 8008040:	4638      	mov	r0, r7
 8008042:	f7ff ff6b 	bl	8007f1c <__ssputs_r>
 8008046:	3001      	adds	r0, #1
 8008048:	f000 80a7 	beq.w	800819a <_svfiprintf_r+0x1c6>
 800804c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800804e:	445a      	add	r2, fp
 8008050:	9209      	str	r2, [sp, #36]	@ 0x24
 8008052:	f89a 3000 	ldrb.w	r3, [sl]
 8008056:	2b00      	cmp	r3, #0
 8008058:	f000 809f 	beq.w	800819a <_svfiprintf_r+0x1c6>
 800805c:	2300      	movs	r3, #0
 800805e:	f04f 32ff 	mov.w	r2, #4294967295
 8008062:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008066:	f10a 0a01 	add.w	sl, sl, #1
 800806a:	9304      	str	r3, [sp, #16]
 800806c:	9307      	str	r3, [sp, #28]
 800806e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008072:	931a      	str	r3, [sp, #104]	@ 0x68
 8008074:	4654      	mov	r4, sl
 8008076:	2205      	movs	r2, #5
 8008078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800807c:	484e      	ldr	r0, [pc, #312]	@ (80081b8 <_svfiprintf_r+0x1e4>)
 800807e:	f7f8 f8b7 	bl	80001f0 <memchr>
 8008082:	9a04      	ldr	r2, [sp, #16]
 8008084:	b9d8      	cbnz	r0, 80080be <_svfiprintf_r+0xea>
 8008086:	06d0      	lsls	r0, r2, #27
 8008088:	bf44      	itt	mi
 800808a:	2320      	movmi	r3, #32
 800808c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008090:	0711      	lsls	r1, r2, #28
 8008092:	bf44      	itt	mi
 8008094:	232b      	movmi	r3, #43	@ 0x2b
 8008096:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800809a:	f89a 3000 	ldrb.w	r3, [sl]
 800809e:	2b2a      	cmp	r3, #42	@ 0x2a
 80080a0:	d015      	beq.n	80080ce <_svfiprintf_r+0xfa>
 80080a2:	9a07      	ldr	r2, [sp, #28]
 80080a4:	4654      	mov	r4, sl
 80080a6:	2000      	movs	r0, #0
 80080a8:	f04f 0c0a 	mov.w	ip, #10
 80080ac:	4621      	mov	r1, r4
 80080ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080b2:	3b30      	subs	r3, #48	@ 0x30
 80080b4:	2b09      	cmp	r3, #9
 80080b6:	d94b      	bls.n	8008150 <_svfiprintf_r+0x17c>
 80080b8:	b1b0      	cbz	r0, 80080e8 <_svfiprintf_r+0x114>
 80080ba:	9207      	str	r2, [sp, #28]
 80080bc:	e014      	b.n	80080e8 <_svfiprintf_r+0x114>
 80080be:	eba0 0308 	sub.w	r3, r0, r8
 80080c2:	fa09 f303 	lsl.w	r3, r9, r3
 80080c6:	4313      	orrs	r3, r2
 80080c8:	9304      	str	r3, [sp, #16]
 80080ca:	46a2      	mov	sl, r4
 80080cc:	e7d2      	b.n	8008074 <_svfiprintf_r+0xa0>
 80080ce:	9b03      	ldr	r3, [sp, #12]
 80080d0:	1d19      	adds	r1, r3, #4
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	9103      	str	r1, [sp, #12]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	bfbb      	ittet	lt
 80080da:	425b      	neglt	r3, r3
 80080dc:	f042 0202 	orrlt.w	r2, r2, #2
 80080e0:	9307      	strge	r3, [sp, #28]
 80080e2:	9307      	strlt	r3, [sp, #28]
 80080e4:	bfb8      	it	lt
 80080e6:	9204      	strlt	r2, [sp, #16]
 80080e8:	7823      	ldrb	r3, [r4, #0]
 80080ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80080ec:	d10a      	bne.n	8008104 <_svfiprintf_r+0x130>
 80080ee:	7863      	ldrb	r3, [r4, #1]
 80080f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80080f2:	d132      	bne.n	800815a <_svfiprintf_r+0x186>
 80080f4:	9b03      	ldr	r3, [sp, #12]
 80080f6:	1d1a      	adds	r2, r3, #4
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	9203      	str	r2, [sp, #12]
 80080fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008100:	3402      	adds	r4, #2
 8008102:	9305      	str	r3, [sp, #20]
 8008104:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80081c8 <_svfiprintf_r+0x1f4>
 8008108:	7821      	ldrb	r1, [r4, #0]
 800810a:	2203      	movs	r2, #3
 800810c:	4650      	mov	r0, sl
 800810e:	f7f8 f86f 	bl	80001f0 <memchr>
 8008112:	b138      	cbz	r0, 8008124 <_svfiprintf_r+0x150>
 8008114:	9b04      	ldr	r3, [sp, #16]
 8008116:	eba0 000a 	sub.w	r0, r0, sl
 800811a:	2240      	movs	r2, #64	@ 0x40
 800811c:	4082      	lsls	r2, r0
 800811e:	4313      	orrs	r3, r2
 8008120:	3401      	adds	r4, #1
 8008122:	9304      	str	r3, [sp, #16]
 8008124:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008128:	4824      	ldr	r0, [pc, #144]	@ (80081bc <_svfiprintf_r+0x1e8>)
 800812a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800812e:	2206      	movs	r2, #6
 8008130:	f7f8 f85e 	bl	80001f0 <memchr>
 8008134:	2800      	cmp	r0, #0
 8008136:	d036      	beq.n	80081a6 <_svfiprintf_r+0x1d2>
 8008138:	4b21      	ldr	r3, [pc, #132]	@ (80081c0 <_svfiprintf_r+0x1ec>)
 800813a:	bb1b      	cbnz	r3, 8008184 <_svfiprintf_r+0x1b0>
 800813c:	9b03      	ldr	r3, [sp, #12]
 800813e:	3307      	adds	r3, #7
 8008140:	f023 0307 	bic.w	r3, r3, #7
 8008144:	3308      	adds	r3, #8
 8008146:	9303      	str	r3, [sp, #12]
 8008148:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800814a:	4433      	add	r3, r6
 800814c:	9309      	str	r3, [sp, #36]	@ 0x24
 800814e:	e76a      	b.n	8008026 <_svfiprintf_r+0x52>
 8008150:	fb0c 3202 	mla	r2, ip, r2, r3
 8008154:	460c      	mov	r4, r1
 8008156:	2001      	movs	r0, #1
 8008158:	e7a8      	b.n	80080ac <_svfiprintf_r+0xd8>
 800815a:	2300      	movs	r3, #0
 800815c:	3401      	adds	r4, #1
 800815e:	9305      	str	r3, [sp, #20]
 8008160:	4619      	mov	r1, r3
 8008162:	f04f 0c0a 	mov.w	ip, #10
 8008166:	4620      	mov	r0, r4
 8008168:	f810 2b01 	ldrb.w	r2, [r0], #1
 800816c:	3a30      	subs	r2, #48	@ 0x30
 800816e:	2a09      	cmp	r2, #9
 8008170:	d903      	bls.n	800817a <_svfiprintf_r+0x1a6>
 8008172:	2b00      	cmp	r3, #0
 8008174:	d0c6      	beq.n	8008104 <_svfiprintf_r+0x130>
 8008176:	9105      	str	r1, [sp, #20]
 8008178:	e7c4      	b.n	8008104 <_svfiprintf_r+0x130>
 800817a:	fb0c 2101 	mla	r1, ip, r1, r2
 800817e:	4604      	mov	r4, r0
 8008180:	2301      	movs	r3, #1
 8008182:	e7f0      	b.n	8008166 <_svfiprintf_r+0x192>
 8008184:	ab03      	add	r3, sp, #12
 8008186:	9300      	str	r3, [sp, #0]
 8008188:	462a      	mov	r2, r5
 800818a:	4b0e      	ldr	r3, [pc, #56]	@ (80081c4 <_svfiprintf_r+0x1f0>)
 800818c:	a904      	add	r1, sp, #16
 800818e:	4638      	mov	r0, r7
 8008190:	f3af 8000 	nop.w
 8008194:	1c42      	adds	r2, r0, #1
 8008196:	4606      	mov	r6, r0
 8008198:	d1d6      	bne.n	8008148 <_svfiprintf_r+0x174>
 800819a:	89ab      	ldrh	r3, [r5, #12]
 800819c:	065b      	lsls	r3, r3, #25
 800819e:	f53f af2d 	bmi.w	8007ffc <_svfiprintf_r+0x28>
 80081a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80081a4:	e72c      	b.n	8008000 <_svfiprintf_r+0x2c>
 80081a6:	ab03      	add	r3, sp, #12
 80081a8:	9300      	str	r3, [sp, #0]
 80081aa:	462a      	mov	r2, r5
 80081ac:	4b05      	ldr	r3, [pc, #20]	@ (80081c4 <_svfiprintf_r+0x1f0>)
 80081ae:	a904      	add	r1, sp, #16
 80081b0:	4638      	mov	r0, r7
 80081b2:	f000 f879 	bl	80082a8 <_printf_i>
 80081b6:	e7ed      	b.n	8008194 <_svfiprintf_r+0x1c0>
 80081b8:	08008f63 	.word	0x08008f63
 80081bc:	08008f6d 	.word	0x08008f6d
 80081c0:	00000000 	.word	0x00000000
 80081c4:	08007f1d 	.word	0x08007f1d
 80081c8:	08008f69 	.word	0x08008f69

080081cc <_printf_common>:
 80081cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081d0:	4616      	mov	r6, r2
 80081d2:	4698      	mov	r8, r3
 80081d4:	688a      	ldr	r2, [r1, #8]
 80081d6:	690b      	ldr	r3, [r1, #16]
 80081d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80081dc:	4293      	cmp	r3, r2
 80081de:	bfb8      	it	lt
 80081e0:	4613      	movlt	r3, r2
 80081e2:	6033      	str	r3, [r6, #0]
 80081e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80081e8:	4607      	mov	r7, r0
 80081ea:	460c      	mov	r4, r1
 80081ec:	b10a      	cbz	r2, 80081f2 <_printf_common+0x26>
 80081ee:	3301      	adds	r3, #1
 80081f0:	6033      	str	r3, [r6, #0]
 80081f2:	6823      	ldr	r3, [r4, #0]
 80081f4:	0699      	lsls	r1, r3, #26
 80081f6:	bf42      	ittt	mi
 80081f8:	6833      	ldrmi	r3, [r6, #0]
 80081fa:	3302      	addmi	r3, #2
 80081fc:	6033      	strmi	r3, [r6, #0]
 80081fe:	6825      	ldr	r5, [r4, #0]
 8008200:	f015 0506 	ands.w	r5, r5, #6
 8008204:	d106      	bne.n	8008214 <_printf_common+0x48>
 8008206:	f104 0a19 	add.w	sl, r4, #25
 800820a:	68e3      	ldr	r3, [r4, #12]
 800820c:	6832      	ldr	r2, [r6, #0]
 800820e:	1a9b      	subs	r3, r3, r2
 8008210:	42ab      	cmp	r3, r5
 8008212:	dc26      	bgt.n	8008262 <_printf_common+0x96>
 8008214:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008218:	6822      	ldr	r2, [r4, #0]
 800821a:	3b00      	subs	r3, #0
 800821c:	bf18      	it	ne
 800821e:	2301      	movne	r3, #1
 8008220:	0692      	lsls	r2, r2, #26
 8008222:	d42b      	bmi.n	800827c <_printf_common+0xb0>
 8008224:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008228:	4641      	mov	r1, r8
 800822a:	4638      	mov	r0, r7
 800822c:	47c8      	blx	r9
 800822e:	3001      	adds	r0, #1
 8008230:	d01e      	beq.n	8008270 <_printf_common+0xa4>
 8008232:	6823      	ldr	r3, [r4, #0]
 8008234:	6922      	ldr	r2, [r4, #16]
 8008236:	f003 0306 	and.w	r3, r3, #6
 800823a:	2b04      	cmp	r3, #4
 800823c:	bf02      	ittt	eq
 800823e:	68e5      	ldreq	r5, [r4, #12]
 8008240:	6833      	ldreq	r3, [r6, #0]
 8008242:	1aed      	subeq	r5, r5, r3
 8008244:	68a3      	ldr	r3, [r4, #8]
 8008246:	bf0c      	ite	eq
 8008248:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800824c:	2500      	movne	r5, #0
 800824e:	4293      	cmp	r3, r2
 8008250:	bfc4      	itt	gt
 8008252:	1a9b      	subgt	r3, r3, r2
 8008254:	18ed      	addgt	r5, r5, r3
 8008256:	2600      	movs	r6, #0
 8008258:	341a      	adds	r4, #26
 800825a:	42b5      	cmp	r5, r6
 800825c:	d11a      	bne.n	8008294 <_printf_common+0xc8>
 800825e:	2000      	movs	r0, #0
 8008260:	e008      	b.n	8008274 <_printf_common+0xa8>
 8008262:	2301      	movs	r3, #1
 8008264:	4652      	mov	r2, sl
 8008266:	4641      	mov	r1, r8
 8008268:	4638      	mov	r0, r7
 800826a:	47c8      	blx	r9
 800826c:	3001      	adds	r0, #1
 800826e:	d103      	bne.n	8008278 <_printf_common+0xac>
 8008270:	f04f 30ff 	mov.w	r0, #4294967295
 8008274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008278:	3501      	adds	r5, #1
 800827a:	e7c6      	b.n	800820a <_printf_common+0x3e>
 800827c:	18e1      	adds	r1, r4, r3
 800827e:	1c5a      	adds	r2, r3, #1
 8008280:	2030      	movs	r0, #48	@ 0x30
 8008282:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008286:	4422      	add	r2, r4
 8008288:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800828c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008290:	3302      	adds	r3, #2
 8008292:	e7c7      	b.n	8008224 <_printf_common+0x58>
 8008294:	2301      	movs	r3, #1
 8008296:	4622      	mov	r2, r4
 8008298:	4641      	mov	r1, r8
 800829a:	4638      	mov	r0, r7
 800829c:	47c8      	blx	r9
 800829e:	3001      	adds	r0, #1
 80082a0:	d0e6      	beq.n	8008270 <_printf_common+0xa4>
 80082a2:	3601      	adds	r6, #1
 80082a4:	e7d9      	b.n	800825a <_printf_common+0x8e>
	...

080082a8 <_printf_i>:
 80082a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082ac:	7e0f      	ldrb	r7, [r1, #24]
 80082ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80082b0:	2f78      	cmp	r7, #120	@ 0x78
 80082b2:	4691      	mov	r9, r2
 80082b4:	4680      	mov	r8, r0
 80082b6:	460c      	mov	r4, r1
 80082b8:	469a      	mov	sl, r3
 80082ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80082be:	d807      	bhi.n	80082d0 <_printf_i+0x28>
 80082c0:	2f62      	cmp	r7, #98	@ 0x62
 80082c2:	d80a      	bhi.n	80082da <_printf_i+0x32>
 80082c4:	2f00      	cmp	r7, #0
 80082c6:	f000 80d2 	beq.w	800846e <_printf_i+0x1c6>
 80082ca:	2f58      	cmp	r7, #88	@ 0x58
 80082cc:	f000 80b9 	beq.w	8008442 <_printf_i+0x19a>
 80082d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80082d8:	e03a      	b.n	8008350 <_printf_i+0xa8>
 80082da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80082de:	2b15      	cmp	r3, #21
 80082e0:	d8f6      	bhi.n	80082d0 <_printf_i+0x28>
 80082e2:	a101      	add	r1, pc, #4	@ (adr r1, 80082e8 <_printf_i+0x40>)
 80082e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082e8:	08008341 	.word	0x08008341
 80082ec:	08008355 	.word	0x08008355
 80082f0:	080082d1 	.word	0x080082d1
 80082f4:	080082d1 	.word	0x080082d1
 80082f8:	080082d1 	.word	0x080082d1
 80082fc:	080082d1 	.word	0x080082d1
 8008300:	08008355 	.word	0x08008355
 8008304:	080082d1 	.word	0x080082d1
 8008308:	080082d1 	.word	0x080082d1
 800830c:	080082d1 	.word	0x080082d1
 8008310:	080082d1 	.word	0x080082d1
 8008314:	08008455 	.word	0x08008455
 8008318:	0800837f 	.word	0x0800837f
 800831c:	0800840f 	.word	0x0800840f
 8008320:	080082d1 	.word	0x080082d1
 8008324:	080082d1 	.word	0x080082d1
 8008328:	08008477 	.word	0x08008477
 800832c:	080082d1 	.word	0x080082d1
 8008330:	0800837f 	.word	0x0800837f
 8008334:	080082d1 	.word	0x080082d1
 8008338:	080082d1 	.word	0x080082d1
 800833c:	08008417 	.word	0x08008417
 8008340:	6833      	ldr	r3, [r6, #0]
 8008342:	1d1a      	adds	r2, r3, #4
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	6032      	str	r2, [r6, #0]
 8008348:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800834c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008350:	2301      	movs	r3, #1
 8008352:	e09d      	b.n	8008490 <_printf_i+0x1e8>
 8008354:	6833      	ldr	r3, [r6, #0]
 8008356:	6820      	ldr	r0, [r4, #0]
 8008358:	1d19      	adds	r1, r3, #4
 800835a:	6031      	str	r1, [r6, #0]
 800835c:	0606      	lsls	r6, r0, #24
 800835e:	d501      	bpl.n	8008364 <_printf_i+0xbc>
 8008360:	681d      	ldr	r5, [r3, #0]
 8008362:	e003      	b.n	800836c <_printf_i+0xc4>
 8008364:	0645      	lsls	r5, r0, #25
 8008366:	d5fb      	bpl.n	8008360 <_printf_i+0xb8>
 8008368:	f9b3 5000 	ldrsh.w	r5, [r3]
 800836c:	2d00      	cmp	r5, #0
 800836e:	da03      	bge.n	8008378 <_printf_i+0xd0>
 8008370:	232d      	movs	r3, #45	@ 0x2d
 8008372:	426d      	negs	r5, r5
 8008374:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008378:	4859      	ldr	r0, [pc, #356]	@ (80084e0 <_printf_i+0x238>)
 800837a:	230a      	movs	r3, #10
 800837c:	e011      	b.n	80083a2 <_printf_i+0xfa>
 800837e:	6821      	ldr	r1, [r4, #0]
 8008380:	6833      	ldr	r3, [r6, #0]
 8008382:	0608      	lsls	r0, r1, #24
 8008384:	f853 5b04 	ldr.w	r5, [r3], #4
 8008388:	d402      	bmi.n	8008390 <_printf_i+0xe8>
 800838a:	0649      	lsls	r1, r1, #25
 800838c:	bf48      	it	mi
 800838e:	b2ad      	uxthmi	r5, r5
 8008390:	2f6f      	cmp	r7, #111	@ 0x6f
 8008392:	4853      	ldr	r0, [pc, #332]	@ (80084e0 <_printf_i+0x238>)
 8008394:	6033      	str	r3, [r6, #0]
 8008396:	bf14      	ite	ne
 8008398:	230a      	movne	r3, #10
 800839a:	2308      	moveq	r3, #8
 800839c:	2100      	movs	r1, #0
 800839e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80083a2:	6866      	ldr	r6, [r4, #4]
 80083a4:	60a6      	str	r6, [r4, #8]
 80083a6:	2e00      	cmp	r6, #0
 80083a8:	bfa2      	ittt	ge
 80083aa:	6821      	ldrge	r1, [r4, #0]
 80083ac:	f021 0104 	bicge.w	r1, r1, #4
 80083b0:	6021      	strge	r1, [r4, #0]
 80083b2:	b90d      	cbnz	r5, 80083b8 <_printf_i+0x110>
 80083b4:	2e00      	cmp	r6, #0
 80083b6:	d04b      	beq.n	8008450 <_printf_i+0x1a8>
 80083b8:	4616      	mov	r6, r2
 80083ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80083be:	fb03 5711 	mls	r7, r3, r1, r5
 80083c2:	5dc7      	ldrb	r7, [r0, r7]
 80083c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80083c8:	462f      	mov	r7, r5
 80083ca:	42bb      	cmp	r3, r7
 80083cc:	460d      	mov	r5, r1
 80083ce:	d9f4      	bls.n	80083ba <_printf_i+0x112>
 80083d0:	2b08      	cmp	r3, #8
 80083d2:	d10b      	bne.n	80083ec <_printf_i+0x144>
 80083d4:	6823      	ldr	r3, [r4, #0]
 80083d6:	07df      	lsls	r7, r3, #31
 80083d8:	d508      	bpl.n	80083ec <_printf_i+0x144>
 80083da:	6923      	ldr	r3, [r4, #16]
 80083dc:	6861      	ldr	r1, [r4, #4]
 80083de:	4299      	cmp	r1, r3
 80083e0:	bfde      	ittt	le
 80083e2:	2330      	movle	r3, #48	@ 0x30
 80083e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80083e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80083ec:	1b92      	subs	r2, r2, r6
 80083ee:	6122      	str	r2, [r4, #16]
 80083f0:	f8cd a000 	str.w	sl, [sp]
 80083f4:	464b      	mov	r3, r9
 80083f6:	aa03      	add	r2, sp, #12
 80083f8:	4621      	mov	r1, r4
 80083fa:	4640      	mov	r0, r8
 80083fc:	f7ff fee6 	bl	80081cc <_printf_common>
 8008400:	3001      	adds	r0, #1
 8008402:	d14a      	bne.n	800849a <_printf_i+0x1f2>
 8008404:	f04f 30ff 	mov.w	r0, #4294967295
 8008408:	b004      	add	sp, #16
 800840a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800840e:	6823      	ldr	r3, [r4, #0]
 8008410:	f043 0320 	orr.w	r3, r3, #32
 8008414:	6023      	str	r3, [r4, #0]
 8008416:	4833      	ldr	r0, [pc, #204]	@ (80084e4 <_printf_i+0x23c>)
 8008418:	2778      	movs	r7, #120	@ 0x78
 800841a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800841e:	6823      	ldr	r3, [r4, #0]
 8008420:	6831      	ldr	r1, [r6, #0]
 8008422:	061f      	lsls	r7, r3, #24
 8008424:	f851 5b04 	ldr.w	r5, [r1], #4
 8008428:	d402      	bmi.n	8008430 <_printf_i+0x188>
 800842a:	065f      	lsls	r7, r3, #25
 800842c:	bf48      	it	mi
 800842e:	b2ad      	uxthmi	r5, r5
 8008430:	6031      	str	r1, [r6, #0]
 8008432:	07d9      	lsls	r1, r3, #31
 8008434:	bf44      	itt	mi
 8008436:	f043 0320 	orrmi.w	r3, r3, #32
 800843a:	6023      	strmi	r3, [r4, #0]
 800843c:	b11d      	cbz	r5, 8008446 <_printf_i+0x19e>
 800843e:	2310      	movs	r3, #16
 8008440:	e7ac      	b.n	800839c <_printf_i+0xf4>
 8008442:	4827      	ldr	r0, [pc, #156]	@ (80084e0 <_printf_i+0x238>)
 8008444:	e7e9      	b.n	800841a <_printf_i+0x172>
 8008446:	6823      	ldr	r3, [r4, #0]
 8008448:	f023 0320 	bic.w	r3, r3, #32
 800844c:	6023      	str	r3, [r4, #0]
 800844e:	e7f6      	b.n	800843e <_printf_i+0x196>
 8008450:	4616      	mov	r6, r2
 8008452:	e7bd      	b.n	80083d0 <_printf_i+0x128>
 8008454:	6833      	ldr	r3, [r6, #0]
 8008456:	6825      	ldr	r5, [r4, #0]
 8008458:	6961      	ldr	r1, [r4, #20]
 800845a:	1d18      	adds	r0, r3, #4
 800845c:	6030      	str	r0, [r6, #0]
 800845e:	062e      	lsls	r6, r5, #24
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	d501      	bpl.n	8008468 <_printf_i+0x1c0>
 8008464:	6019      	str	r1, [r3, #0]
 8008466:	e002      	b.n	800846e <_printf_i+0x1c6>
 8008468:	0668      	lsls	r0, r5, #25
 800846a:	d5fb      	bpl.n	8008464 <_printf_i+0x1bc>
 800846c:	8019      	strh	r1, [r3, #0]
 800846e:	2300      	movs	r3, #0
 8008470:	6123      	str	r3, [r4, #16]
 8008472:	4616      	mov	r6, r2
 8008474:	e7bc      	b.n	80083f0 <_printf_i+0x148>
 8008476:	6833      	ldr	r3, [r6, #0]
 8008478:	1d1a      	adds	r2, r3, #4
 800847a:	6032      	str	r2, [r6, #0]
 800847c:	681e      	ldr	r6, [r3, #0]
 800847e:	6862      	ldr	r2, [r4, #4]
 8008480:	2100      	movs	r1, #0
 8008482:	4630      	mov	r0, r6
 8008484:	f7f7 feb4 	bl	80001f0 <memchr>
 8008488:	b108      	cbz	r0, 800848e <_printf_i+0x1e6>
 800848a:	1b80      	subs	r0, r0, r6
 800848c:	6060      	str	r0, [r4, #4]
 800848e:	6863      	ldr	r3, [r4, #4]
 8008490:	6123      	str	r3, [r4, #16]
 8008492:	2300      	movs	r3, #0
 8008494:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008498:	e7aa      	b.n	80083f0 <_printf_i+0x148>
 800849a:	6923      	ldr	r3, [r4, #16]
 800849c:	4632      	mov	r2, r6
 800849e:	4649      	mov	r1, r9
 80084a0:	4640      	mov	r0, r8
 80084a2:	47d0      	blx	sl
 80084a4:	3001      	adds	r0, #1
 80084a6:	d0ad      	beq.n	8008404 <_printf_i+0x15c>
 80084a8:	6823      	ldr	r3, [r4, #0]
 80084aa:	079b      	lsls	r3, r3, #30
 80084ac:	d413      	bmi.n	80084d6 <_printf_i+0x22e>
 80084ae:	68e0      	ldr	r0, [r4, #12]
 80084b0:	9b03      	ldr	r3, [sp, #12]
 80084b2:	4298      	cmp	r0, r3
 80084b4:	bfb8      	it	lt
 80084b6:	4618      	movlt	r0, r3
 80084b8:	e7a6      	b.n	8008408 <_printf_i+0x160>
 80084ba:	2301      	movs	r3, #1
 80084bc:	4632      	mov	r2, r6
 80084be:	4649      	mov	r1, r9
 80084c0:	4640      	mov	r0, r8
 80084c2:	47d0      	blx	sl
 80084c4:	3001      	adds	r0, #1
 80084c6:	d09d      	beq.n	8008404 <_printf_i+0x15c>
 80084c8:	3501      	adds	r5, #1
 80084ca:	68e3      	ldr	r3, [r4, #12]
 80084cc:	9903      	ldr	r1, [sp, #12]
 80084ce:	1a5b      	subs	r3, r3, r1
 80084d0:	42ab      	cmp	r3, r5
 80084d2:	dcf2      	bgt.n	80084ba <_printf_i+0x212>
 80084d4:	e7eb      	b.n	80084ae <_printf_i+0x206>
 80084d6:	2500      	movs	r5, #0
 80084d8:	f104 0619 	add.w	r6, r4, #25
 80084dc:	e7f5      	b.n	80084ca <_printf_i+0x222>
 80084de:	bf00      	nop
 80084e0:	08008f74 	.word	0x08008f74
 80084e4:	08008f85 	.word	0x08008f85

080084e8 <__sflush_r>:
 80084e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80084ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084f0:	0716      	lsls	r6, r2, #28
 80084f2:	4605      	mov	r5, r0
 80084f4:	460c      	mov	r4, r1
 80084f6:	d454      	bmi.n	80085a2 <__sflush_r+0xba>
 80084f8:	684b      	ldr	r3, [r1, #4]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	dc02      	bgt.n	8008504 <__sflush_r+0x1c>
 80084fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008500:	2b00      	cmp	r3, #0
 8008502:	dd48      	ble.n	8008596 <__sflush_r+0xae>
 8008504:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008506:	2e00      	cmp	r6, #0
 8008508:	d045      	beq.n	8008596 <__sflush_r+0xae>
 800850a:	2300      	movs	r3, #0
 800850c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008510:	682f      	ldr	r7, [r5, #0]
 8008512:	6a21      	ldr	r1, [r4, #32]
 8008514:	602b      	str	r3, [r5, #0]
 8008516:	d030      	beq.n	800857a <__sflush_r+0x92>
 8008518:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800851a:	89a3      	ldrh	r3, [r4, #12]
 800851c:	0759      	lsls	r1, r3, #29
 800851e:	d505      	bpl.n	800852c <__sflush_r+0x44>
 8008520:	6863      	ldr	r3, [r4, #4]
 8008522:	1ad2      	subs	r2, r2, r3
 8008524:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008526:	b10b      	cbz	r3, 800852c <__sflush_r+0x44>
 8008528:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800852a:	1ad2      	subs	r2, r2, r3
 800852c:	2300      	movs	r3, #0
 800852e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008530:	6a21      	ldr	r1, [r4, #32]
 8008532:	4628      	mov	r0, r5
 8008534:	47b0      	blx	r6
 8008536:	1c43      	adds	r3, r0, #1
 8008538:	89a3      	ldrh	r3, [r4, #12]
 800853a:	d106      	bne.n	800854a <__sflush_r+0x62>
 800853c:	6829      	ldr	r1, [r5, #0]
 800853e:	291d      	cmp	r1, #29
 8008540:	d82b      	bhi.n	800859a <__sflush_r+0xb2>
 8008542:	4a2a      	ldr	r2, [pc, #168]	@ (80085ec <__sflush_r+0x104>)
 8008544:	410a      	asrs	r2, r1
 8008546:	07d6      	lsls	r6, r2, #31
 8008548:	d427      	bmi.n	800859a <__sflush_r+0xb2>
 800854a:	2200      	movs	r2, #0
 800854c:	6062      	str	r2, [r4, #4]
 800854e:	04d9      	lsls	r1, r3, #19
 8008550:	6922      	ldr	r2, [r4, #16]
 8008552:	6022      	str	r2, [r4, #0]
 8008554:	d504      	bpl.n	8008560 <__sflush_r+0x78>
 8008556:	1c42      	adds	r2, r0, #1
 8008558:	d101      	bne.n	800855e <__sflush_r+0x76>
 800855a:	682b      	ldr	r3, [r5, #0]
 800855c:	b903      	cbnz	r3, 8008560 <__sflush_r+0x78>
 800855e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008560:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008562:	602f      	str	r7, [r5, #0]
 8008564:	b1b9      	cbz	r1, 8008596 <__sflush_r+0xae>
 8008566:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800856a:	4299      	cmp	r1, r3
 800856c:	d002      	beq.n	8008574 <__sflush_r+0x8c>
 800856e:	4628      	mov	r0, r5
 8008570:	f7ff fbd4 	bl	8007d1c <_free_r>
 8008574:	2300      	movs	r3, #0
 8008576:	6363      	str	r3, [r4, #52]	@ 0x34
 8008578:	e00d      	b.n	8008596 <__sflush_r+0xae>
 800857a:	2301      	movs	r3, #1
 800857c:	4628      	mov	r0, r5
 800857e:	47b0      	blx	r6
 8008580:	4602      	mov	r2, r0
 8008582:	1c50      	adds	r0, r2, #1
 8008584:	d1c9      	bne.n	800851a <__sflush_r+0x32>
 8008586:	682b      	ldr	r3, [r5, #0]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d0c6      	beq.n	800851a <__sflush_r+0x32>
 800858c:	2b1d      	cmp	r3, #29
 800858e:	d001      	beq.n	8008594 <__sflush_r+0xac>
 8008590:	2b16      	cmp	r3, #22
 8008592:	d11e      	bne.n	80085d2 <__sflush_r+0xea>
 8008594:	602f      	str	r7, [r5, #0]
 8008596:	2000      	movs	r0, #0
 8008598:	e022      	b.n	80085e0 <__sflush_r+0xf8>
 800859a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800859e:	b21b      	sxth	r3, r3
 80085a0:	e01b      	b.n	80085da <__sflush_r+0xf2>
 80085a2:	690f      	ldr	r7, [r1, #16]
 80085a4:	2f00      	cmp	r7, #0
 80085a6:	d0f6      	beq.n	8008596 <__sflush_r+0xae>
 80085a8:	0793      	lsls	r3, r2, #30
 80085aa:	680e      	ldr	r6, [r1, #0]
 80085ac:	bf08      	it	eq
 80085ae:	694b      	ldreq	r3, [r1, #20]
 80085b0:	600f      	str	r7, [r1, #0]
 80085b2:	bf18      	it	ne
 80085b4:	2300      	movne	r3, #0
 80085b6:	eba6 0807 	sub.w	r8, r6, r7
 80085ba:	608b      	str	r3, [r1, #8]
 80085bc:	f1b8 0f00 	cmp.w	r8, #0
 80085c0:	dde9      	ble.n	8008596 <__sflush_r+0xae>
 80085c2:	6a21      	ldr	r1, [r4, #32]
 80085c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80085c6:	4643      	mov	r3, r8
 80085c8:	463a      	mov	r2, r7
 80085ca:	4628      	mov	r0, r5
 80085cc:	47b0      	blx	r6
 80085ce:	2800      	cmp	r0, #0
 80085d0:	dc08      	bgt.n	80085e4 <__sflush_r+0xfc>
 80085d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085da:	81a3      	strh	r3, [r4, #12]
 80085dc:	f04f 30ff 	mov.w	r0, #4294967295
 80085e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085e4:	4407      	add	r7, r0
 80085e6:	eba8 0800 	sub.w	r8, r8, r0
 80085ea:	e7e7      	b.n	80085bc <__sflush_r+0xd4>
 80085ec:	dfbffffe 	.word	0xdfbffffe

080085f0 <_fflush_r>:
 80085f0:	b538      	push	{r3, r4, r5, lr}
 80085f2:	690b      	ldr	r3, [r1, #16]
 80085f4:	4605      	mov	r5, r0
 80085f6:	460c      	mov	r4, r1
 80085f8:	b913      	cbnz	r3, 8008600 <_fflush_r+0x10>
 80085fa:	2500      	movs	r5, #0
 80085fc:	4628      	mov	r0, r5
 80085fe:	bd38      	pop	{r3, r4, r5, pc}
 8008600:	b118      	cbz	r0, 800860a <_fflush_r+0x1a>
 8008602:	6a03      	ldr	r3, [r0, #32]
 8008604:	b90b      	cbnz	r3, 800860a <_fflush_r+0x1a>
 8008606:	f7ff f9f9 	bl	80079fc <__sinit>
 800860a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d0f3      	beq.n	80085fa <_fflush_r+0xa>
 8008612:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008614:	07d0      	lsls	r0, r2, #31
 8008616:	d404      	bmi.n	8008622 <_fflush_r+0x32>
 8008618:	0599      	lsls	r1, r3, #22
 800861a:	d402      	bmi.n	8008622 <_fflush_r+0x32>
 800861c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800861e:	f7ff fb46 	bl	8007cae <__retarget_lock_acquire_recursive>
 8008622:	4628      	mov	r0, r5
 8008624:	4621      	mov	r1, r4
 8008626:	f7ff ff5f 	bl	80084e8 <__sflush_r>
 800862a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800862c:	07da      	lsls	r2, r3, #31
 800862e:	4605      	mov	r5, r0
 8008630:	d4e4      	bmi.n	80085fc <_fflush_r+0xc>
 8008632:	89a3      	ldrh	r3, [r4, #12]
 8008634:	059b      	lsls	r3, r3, #22
 8008636:	d4e1      	bmi.n	80085fc <_fflush_r+0xc>
 8008638:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800863a:	f7ff fb39 	bl	8007cb0 <__retarget_lock_release_recursive>
 800863e:	e7dd      	b.n	80085fc <_fflush_r+0xc>

08008640 <fiprintf>:
 8008640:	b40e      	push	{r1, r2, r3}
 8008642:	b503      	push	{r0, r1, lr}
 8008644:	4601      	mov	r1, r0
 8008646:	ab03      	add	r3, sp, #12
 8008648:	4805      	ldr	r0, [pc, #20]	@ (8008660 <fiprintf+0x20>)
 800864a:	f853 2b04 	ldr.w	r2, [r3], #4
 800864e:	6800      	ldr	r0, [r0, #0]
 8008650:	9301      	str	r3, [sp, #4]
 8008652:	f000 f88f 	bl	8008774 <_vfiprintf_r>
 8008656:	b002      	add	sp, #8
 8008658:	f85d eb04 	ldr.w	lr, [sp], #4
 800865c:	b003      	add	sp, #12
 800865e:	4770      	bx	lr
 8008660:	2000001c 	.word	0x2000001c

08008664 <memmove>:
 8008664:	4288      	cmp	r0, r1
 8008666:	b510      	push	{r4, lr}
 8008668:	eb01 0402 	add.w	r4, r1, r2
 800866c:	d902      	bls.n	8008674 <memmove+0x10>
 800866e:	4284      	cmp	r4, r0
 8008670:	4623      	mov	r3, r4
 8008672:	d807      	bhi.n	8008684 <memmove+0x20>
 8008674:	1e43      	subs	r3, r0, #1
 8008676:	42a1      	cmp	r1, r4
 8008678:	d008      	beq.n	800868c <memmove+0x28>
 800867a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800867e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008682:	e7f8      	b.n	8008676 <memmove+0x12>
 8008684:	4402      	add	r2, r0
 8008686:	4601      	mov	r1, r0
 8008688:	428a      	cmp	r2, r1
 800868a:	d100      	bne.n	800868e <memmove+0x2a>
 800868c:	bd10      	pop	{r4, pc}
 800868e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008692:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008696:	e7f7      	b.n	8008688 <memmove+0x24>

08008698 <_sbrk_r>:
 8008698:	b538      	push	{r3, r4, r5, lr}
 800869a:	4d06      	ldr	r5, [pc, #24]	@ (80086b4 <_sbrk_r+0x1c>)
 800869c:	2300      	movs	r3, #0
 800869e:	4604      	mov	r4, r0
 80086a0:	4608      	mov	r0, r1
 80086a2:	602b      	str	r3, [r5, #0]
 80086a4:	f7f8 ff14 	bl	80014d0 <_sbrk>
 80086a8:	1c43      	adds	r3, r0, #1
 80086aa:	d102      	bne.n	80086b2 <_sbrk_r+0x1a>
 80086ac:	682b      	ldr	r3, [r5, #0]
 80086ae:	b103      	cbz	r3, 80086b2 <_sbrk_r+0x1a>
 80086b0:	6023      	str	r3, [r4, #0]
 80086b2:	bd38      	pop	{r3, r4, r5, pc}
 80086b4:	20004648 	.word	0x20004648

080086b8 <abort>:
 80086b8:	b508      	push	{r3, lr}
 80086ba:	2006      	movs	r0, #6
 80086bc:	f000 fa2e 	bl	8008b1c <raise>
 80086c0:	2001      	movs	r0, #1
 80086c2:	f7f8 fe8d 	bl	80013e0 <_exit>

080086c6 <_realloc_r>:
 80086c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086ca:	4680      	mov	r8, r0
 80086cc:	4615      	mov	r5, r2
 80086ce:	460c      	mov	r4, r1
 80086d0:	b921      	cbnz	r1, 80086dc <_realloc_r+0x16>
 80086d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086d6:	4611      	mov	r1, r2
 80086d8:	f7ff bb94 	b.w	8007e04 <_malloc_r>
 80086dc:	b92a      	cbnz	r2, 80086ea <_realloc_r+0x24>
 80086de:	f7ff fb1d 	bl	8007d1c <_free_r>
 80086e2:	2400      	movs	r4, #0
 80086e4:	4620      	mov	r0, r4
 80086e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086ea:	f000 fa33 	bl	8008b54 <_malloc_usable_size_r>
 80086ee:	4285      	cmp	r5, r0
 80086f0:	4606      	mov	r6, r0
 80086f2:	d802      	bhi.n	80086fa <_realloc_r+0x34>
 80086f4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80086f8:	d8f4      	bhi.n	80086e4 <_realloc_r+0x1e>
 80086fa:	4629      	mov	r1, r5
 80086fc:	4640      	mov	r0, r8
 80086fe:	f7ff fb81 	bl	8007e04 <_malloc_r>
 8008702:	4607      	mov	r7, r0
 8008704:	2800      	cmp	r0, #0
 8008706:	d0ec      	beq.n	80086e2 <_realloc_r+0x1c>
 8008708:	42b5      	cmp	r5, r6
 800870a:	462a      	mov	r2, r5
 800870c:	4621      	mov	r1, r4
 800870e:	bf28      	it	cs
 8008710:	4632      	movcs	r2, r6
 8008712:	f7ff fad6 	bl	8007cc2 <memcpy>
 8008716:	4621      	mov	r1, r4
 8008718:	4640      	mov	r0, r8
 800871a:	f7ff faff 	bl	8007d1c <_free_r>
 800871e:	463c      	mov	r4, r7
 8008720:	e7e0      	b.n	80086e4 <_realloc_r+0x1e>

08008722 <__sfputc_r>:
 8008722:	6893      	ldr	r3, [r2, #8]
 8008724:	3b01      	subs	r3, #1
 8008726:	2b00      	cmp	r3, #0
 8008728:	b410      	push	{r4}
 800872a:	6093      	str	r3, [r2, #8]
 800872c:	da08      	bge.n	8008740 <__sfputc_r+0x1e>
 800872e:	6994      	ldr	r4, [r2, #24]
 8008730:	42a3      	cmp	r3, r4
 8008732:	db01      	blt.n	8008738 <__sfputc_r+0x16>
 8008734:	290a      	cmp	r1, #10
 8008736:	d103      	bne.n	8008740 <__sfputc_r+0x1e>
 8008738:	f85d 4b04 	ldr.w	r4, [sp], #4
 800873c:	f000 b932 	b.w	80089a4 <__swbuf_r>
 8008740:	6813      	ldr	r3, [r2, #0]
 8008742:	1c58      	adds	r0, r3, #1
 8008744:	6010      	str	r0, [r2, #0]
 8008746:	7019      	strb	r1, [r3, #0]
 8008748:	4608      	mov	r0, r1
 800874a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800874e:	4770      	bx	lr

08008750 <__sfputs_r>:
 8008750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008752:	4606      	mov	r6, r0
 8008754:	460f      	mov	r7, r1
 8008756:	4614      	mov	r4, r2
 8008758:	18d5      	adds	r5, r2, r3
 800875a:	42ac      	cmp	r4, r5
 800875c:	d101      	bne.n	8008762 <__sfputs_r+0x12>
 800875e:	2000      	movs	r0, #0
 8008760:	e007      	b.n	8008772 <__sfputs_r+0x22>
 8008762:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008766:	463a      	mov	r2, r7
 8008768:	4630      	mov	r0, r6
 800876a:	f7ff ffda 	bl	8008722 <__sfputc_r>
 800876e:	1c43      	adds	r3, r0, #1
 8008770:	d1f3      	bne.n	800875a <__sfputs_r+0xa>
 8008772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008774 <_vfiprintf_r>:
 8008774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008778:	460d      	mov	r5, r1
 800877a:	b09d      	sub	sp, #116	@ 0x74
 800877c:	4614      	mov	r4, r2
 800877e:	4698      	mov	r8, r3
 8008780:	4606      	mov	r6, r0
 8008782:	b118      	cbz	r0, 800878c <_vfiprintf_r+0x18>
 8008784:	6a03      	ldr	r3, [r0, #32]
 8008786:	b90b      	cbnz	r3, 800878c <_vfiprintf_r+0x18>
 8008788:	f7ff f938 	bl	80079fc <__sinit>
 800878c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800878e:	07d9      	lsls	r1, r3, #31
 8008790:	d405      	bmi.n	800879e <_vfiprintf_r+0x2a>
 8008792:	89ab      	ldrh	r3, [r5, #12]
 8008794:	059a      	lsls	r2, r3, #22
 8008796:	d402      	bmi.n	800879e <_vfiprintf_r+0x2a>
 8008798:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800879a:	f7ff fa88 	bl	8007cae <__retarget_lock_acquire_recursive>
 800879e:	89ab      	ldrh	r3, [r5, #12]
 80087a0:	071b      	lsls	r3, r3, #28
 80087a2:	d501      	bpl.n	80087a8 <_vfiprintf_r+0x34>
 80087a4:	692b      	ldr	r3, [r5, #16]
 80087a6:	b99b      	cbnz	r3, 80087d0 <_vfiprintf_r+0x5c>
 80087a8:	4629      	mov	r1, r5
 80087aa:	4630      	mov	r0, r6
 80087ac:	f000 f938 	bl	8008a20 <__swsetup_r>
 80087b0:	b170      	cbz	r0, 80087d0 <_vfiprintf_r+0x5c>
 80087b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80087b4:	07dc      	lsls	r4, r3, #31
 80087b6:	d504      	bpl.n	80087c2 <_vfiprintf_r+0x4e>
 80087b8:	f04f 30ff 	mov.w	r0, #4294967295
 80087bc:	b01d      	add	sp, #116	@ 0x74
 80087be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087c2:	89ab      	ldrh	r3, [r5, #12]
 80087c4:	0598      	lsls	r0, r3, #22
 80087c6:	d4f7      	bmi.n	80087b8 <_vfiprintf_r+0x44>
 80087c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087ca:	f7ff fa71 	bl	8007cb0 <__retarget_lock_release_recursive>
 80087ce:	e7f3      	b.n	80087b8 <_vfiprintf_r+0x44>
 80087d0:	2300      	movs	r3, #0
 80087d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80087d4:	2320      	movs	r3, #32
 80087d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80087da:	f8cd 800c 	str.w	r8, [sp, #12]
 80087de:	2330      	movs	r3, #48	@ 0x30
 80087e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008990 <_vfiprintf_r+0x21c>
 80087e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80087e8:	f04f 0901 	mov.w	r9, #1
 80087ec:	4623      	mov	r3, r4
 80087ee:	469a      	mov	sl, r3
 80087f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087f4:	b10a      	cbz	r2, 80087fa <_vfiprintf_r+0x86>
 80087f6:	2a25      	cmp	r2, #37	@ 0x25
 80087f8:	d1f9      	bne.n	80087ee <_vfiprintf_r+0x7a>
 80087fa:	ebba 0b04 	subs.w	fp, sl, r4
 80087fe:	d00b      	beq.n	8008818 <_vfiprintf_r+0xa4>
 8008800:	465b      	mov	r3, fp
 8008802:	4622      	mov	r2, r4
 8008804:	4629      	mov	r1, r5
 8008806:	4630      	mov	r0, r6
 8008808:	f7ff ffa2 	bl	8008750 <__sfputs_r>
 800880c:	3001      	adds	r0, #1
 800880e:	f000 80a7 	beq.w	8008960 <_vfiprintf_r+0x1ec>
 8008812:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008814:	445a      	add	r2, fp
 8008816:	9209      	str	r2, [sp, #36]	@ 0x24
 8008818:	f89a 3000 	ldrb.w	r3, [sl]
 800881c:	2b00      	cmp	r3, #0
 800881e:	f000 809f 	beq.w	8008960 <_vfiprintf_r+0x1ec>
 8008822:	2300      	movs	r3, #0
 8008824:	f04f 32ff 	mov.w	r2, #4294967295
 8008828:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800882c:	f10a 0a01 	add.w	sl, sl, #1
 8008830:	9304      	str	r3, [sp, #16]
 8008832:	9307      	str	r3, [sp, #28]
 8008834:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008838:	931a      	str	r3, [sp, #104]	@ 0x68
 800883a:	4654      	mov	r4, sl
 800883c:	2205      	movs	r2, #5
 800883e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008842:	4853      	ldr	r0, [pc, #332]	@ (8008990 <_vfiprintf_r+0x21c>)
 8008844:	f7f7 fcd4 	bl	80001f0 <memchr>
 8008848:	9a04      	ldr	r2, [sp, #16]
 800884a:	b9d8      	cbnz	r0, 8008884 <_vfiprintf_r+0x110>
 800884c:	06d1      	lsls	r1, r2, #27
 800884e:	bf44      	itt	mi
 8008850:	2320      	movmi	r3, #32
 8008852:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008856:	0713      	lsls	r3, r2, #28
 8008858:	bf44      	itt	mi
 800885a:	232b      	movmi	r3, #43	@ 0x2b
 800885c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008860:	f89a 3000 	ldrb.w	r3, [sl]
 8008864:	2b2a      	cmp	r3, #42	@ 0x2a
 8008866:	d015      	beq.n	8008894 <_vfiprintf_r+0x120>
 8008868:	9a07      	ldr	r2, [sp, #28]
 800886a:	4654      	mov	r4, sl
 800886c:	2000      	movs	r0, #0
 800886e:	f04f 0c0a 	mov.w	ip, #10
 8008872:	4621      	mov	r1, r4
 8008874:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008878:	3b30      	subs	r3, #48	@ 0x30
 800887a:	2b09      	cmp	r3, #9
 800887c:	d94b      	bls.n	8008916 <_vfiprintf_r+0x1a2>
 800887e:	b1b0      	cbz	r0, 80088ae <_vfiprintf_r+0x13a>
 8008880:	9207      	str	r2, [sp, #28]
 8008882:	e014      	b.n	80088ae <_vfiprintf_r+0x13a>
 8008884:	eba0 0308 	sub.w	r3, r0, r8
 8008888:	fa09 f303 	lsl.w	r3, r9, r3
 800888c:	4313      	orrs	r3, r2
 800888e:	9304      	str	r3, [sp, #16]
 8008890:	46a2      	mov	sl, r4
 8008892:	e7d2      	b.n	800883a <_vfiprintf_r+0xc6>
 8008894:	9b03      	ldr	r3, [sp, #12]
 8008896:	1d19      	adds	r1, r3, #4
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	9103      	str	r1, [sp, #12]
 800889c:	2b00      	cmp	r3, #0
 800889e:	bfbb      	ittet	lt
 80088a0:	425b      	neglt	r3, r3
 80088a2:	f042 0202 	orrlt.w	r2, r2, #2
 80088a6:	9307      	strge	r3, [sp, #28]
 80088a8:	9307      	strlt	r3, [sp, #28]
 80088aa:	bfb8      	it	lt
 80088ac:	9204      	strlt	r2, [sp, #16]
 80088ae:	7823      	ldrb	r3, [r4, #0]
 80088b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80088b2:	d10a      	bne.n	80088ca <_vfiprintf_r+0x156>
 80088b4:	7863      	ldrb	r3, [r4, #1]
 80088b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80088b8:	d132      	bne.n	8008920 <_vfiprintf_r+0x1ac>
 80088ba:	9b03      	ldr	r3, [sp, #12]
 80088bc:	1d1a      	adds	r2, r3, #4
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	9203      	str	r2, [sp, #12]
 80088c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80088c6:	3402      	adds	r4, #2
 80088c8:	9305      	str	r3, [sp, #20]
 80088ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80089a0 <_vfiprintf_r+0x22c>
 80088ce:	7821      	ldrb	r1, [r4, #0]
 80088d0:	2203      	movs	r2, #3
 80088d2:	4650      	mov	r0, sl
 80088d4:	f7f7 fc8c 	bl	80001f0 <memchr>
 80088d8:	b138      	cbz	r0, 80088ea <_vfiprintf_r+0x176>
 80088da:	9b04      	ldr	r3, [sp, #16]
 80088dc:	eba0 000a 	sub.w	r0, r0, sl
 80088e0:	2240      	movs	r2, #64	@ 0x40
 80088e2:	4082      	lsls	r2, r0
 80088e4:	4313      	orrs	r3, r2
 80088e6:	3401      	adds	r4, #1
 80088e8:	9304      	str	r3, [sp, #16]
 80088ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088ee:	4829      	ldr	r0, [pc, #164]	@ (8008994 <_vfiprintf_r+0x220>)
 80088f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80088f4:	2206      	movs	r2, #6
 80088f6:	f7f7 fc7b 	bl	80001f0 <memchr>
 80088fa:	2800      	cmp	r0, #0
 80088fc:	d03f      	beq.n	800897e <_vfiprintf_r+0x20a>
 80088fe:	4b26      	ldr	r3, [pc, #152]	@ (8008998 <_vfiprintf_r+0x224>)
 8008900:	bb1b      	cbnz	r3, 800894a <_vfiprintf_r+0x1d6>
 8008902:	9b03      	ldr	r3, [sp, #12]
 8008904:	3307      	adds	r3, #7
 8008906:	f023 0307 	bic.w	r3, r3, #7
 800890a:	3308      	adds	r3, #8
 800890c:	9303      	str	r3, [sp, #12]
 800890e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008910:	443b      	add	r3, r7
 8008912:	9309      	str	r3, [sp, #36]	@ 0x24
 8008914:	e76a      	b.n	80087ec <_vfiprintf_r+0x78>
 8008916:	fb0c 3202 	mla	r2, ip, r2, r3
 800891a:	460c      	mov	r4, r1
 800891c:	2001      	movs	r0, #1
 800891e:	e7a8      	b.n	8008872 <_vfiprintf_r+0xfe>
 8008920:	2300      	movs	r3, #0
 8008922:	3401      	adds	r4, #1
 8008924:	9305      	str	r3, [sp, #20]
 8008926:	4619      	mov	r1, r3
 8008928:	f04f 0c0a 	mov.w	ip, #10
 800892c:	4620      	mov	r0, r4
 800892e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008932:	3a30      	subs	r2, #48	@ 0x30
 8008934:	2a09      	cmp	r2, #9
 8008936:	d903      	bls.n	8008940 <_vfiprintf_r+0x1cc>
 8008938:	2b00      	cmp	r3, #0
 800893a:	d0c6      	beq.n	80088ca <_vfiprintf_r+0x156>
 800893c:	9105      	str	r1, [sp, #20]
 800893e:	e7c4      	b.n	80088ca <_vfiprintf_r+0x156>
 8008940:	fb0c 2101 	mla	r1, ip, r1, r2
 8008944:	4604      	mov	r4, r0
 8008946:	2301      	movs	r3, #1
 8008948:	e7f0      	b.n	800892c <_vfiprintf_r+0x1b8>
 800894a:	ab03      	add	r3, sp, #12
 800894c:	9300      	str	r3, [sp, #0]
 800894e:	462a      	mov	r2, r5
 8008950:	4b12      	ldr	r3, [pc, #72]	@ (800899c <_vfiprintf_r+0x228>)
 8008952:	a904      	add	r1, sp, #16
 8008954:	4630      	mov	r0, r6
 8008956:	f3af 8000 	nop.w
 800895a:	4607      	mov	r7, r0
 800895c:	1c78      	adds	r0, r7, #1
 800895e:	d1d6      	bne.n	800890e <_vfiprintf_r+0x19a>
 8008960:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008962:	07d9      	lsls	r1, r3, #31
 8008964:	d405      	bmi.n	8008972 <_vfiprintf_r+0x1fe>
 8008966:	89ab      	ldrh	r3, [r5, #12]
 8008968:	059a      	lsls	r2, r3, #22
 800896a:	d402      	bmi.n	8008972 <_vfiprintf_r+0x1fe>
 800896c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800896e:	f7ff f99f 	bl	8007cb0 <__retarget_lock_release_recursive>
 8008972:	89ab      	ldrh	r3, [r5, #12]
 8008974:	065b      	lsls	r3, r3, #25
 8008976:	f53f af1f 	bmi.w	80087b8 <_vfiprintf_r+0x44>
 800897a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800897c:	e71e      	b.n	80087bc <_vfiprintf_r+0x48>
 800897e:	ab03      	add	r3, sp, #12
 8008980:	9300      	str	r3, [sp, #0]
 8008982:	462a      	mov	r2, r5
 8008984:	4b05      	ldr	r3, [pc, #20]	@ (800899c <_vfiprintf_r+0x228>)
 8008986:	a904      	add	r1, sp, #16
 8008988:	4630      	mov	r0, r6
 800898a:	f7ff fc8d 	bl	80082a8 <_printf_i>
 800898e:	e7e4      	b.n	800895a <_vfiprintf_r+0x1e6>
 8008990:	08008f63 	.word	0x08008f63
 8008994:	08008f6d 	.word	0x08008f6d
 8008998:	00000000 	.word	0x00000000
 800899c:	08008751 	.word	0x08008751
 80089a0:	08008f69 	.word	0x08008f69

080089a4 <__swbuf_r>:
 80089a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089a6:	460e      	mov	r6, r1
 80089a8:	4614      	mov	r4, r2
 80089aa:	4605      	mov	r5, r0
 80089ac:	b118      	cbz	r0, 80089b6 <__swbuf_r+0x12>
 80089ae:	6a03      	ldr	r3, [r0, #32]
 80089b0:	b90b      	cbnz	r3, 80089b6 <__swbuf_r+0x12>
 80089b2:	f7ff f823 	bl	80079fc <__sinit>
 80089b6:	69a3      	ldr	r3, [r4, #24]
 80089b8:	60a3      	str	r3, [r4, #8]
 80089ba:	89a3      	ldrh	r3, [r4, #12]
 80089bc:	071a      	lsls	r2, r3, #28
 80089be:	d501      	bpl.n	80089c4 <__swbuf_r+0x20>
 80089c0:	6923      	ldr	r3, [r4, #16]
 80089c2:	b943      	cbnz	r3, 80089d6 <__swbuf_r+0x32>
 80089c4:	4621      	mov	r1, r4
 80089c6:	4628      	mov	r0, r5
 80089c8:	f000 f82a 	bl	8008a20 <__swsetup_r>
 80089cc:	b118      	cbz	r0, 80089d6 <__swbuf_r+0x32>
 80089ce:	f04f 37ff 	mov.w	r7, #4294967295
 80089d2:	4638      	mov	r0, r7
 80089d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089d6:	6823      	ldr	r3, [r4, #0]
 80089d8:	6922      	ldr	r2, [r4, #16]
 80089da:	1a98      	subs	r0, r3, r2
 80089dc:	6963      	ldr	r3, [r4, #20]
 80089de:	b2f6      	uxtb	r6, r6
 80089e0:	4283      	cmp	r3, r0
 80089e2:	4637      	mov	r7, r6
 80089e4:	dc05      	bgt.n	80089f2 <__swbuf_r+0x4e>
 80089e6:	4621      	mov	r1, r4
 80089e8:	4628      	mov	r0, r5
 80089ea:	f7ff fe01 	bl	80085f0 <_fflush_r>
 80089ee:	2800      	cmp	r0, #0
 80089f0:	d1ed      	bne.n	80089ce <__swbuf_r+0x2a>
 80089f2:	68a3      	ldr	r3, [r4, #8]
 80089f4:	3b01      	subs	r3, #1
 80089f6:	60a3      	str	r3, [r4, #8]
 80089f8:	6823      	ldr	r3, [r4, #0]
 80089fa:	1c5a      	adds	r2, r3, #1
 80089fc:	6022      	str	r2, [r4, #0]
 80089fe:	701e      	strb	r6, [r3, #0]
 8008a00:	6962      	ldr	r2, [r4, #20]
 8008a02:	1c43      	adds	r3, r0, #1
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d004      	beq.n	8008a12 <__swbuf_r+0x6e>
 8008a08:	89a3      	ldrh	r3, [r4, #12]
 8008a0a:	07db      	lsls	r3, r3, #31
 8008a0c:	d5e1      	bpl.n	80089d2 <__swbuf_r+0x2e>
 8008a0e:	2e0a      	cmp	r6, #10
 8008a10:	d1df      	bne.n	80089d2 <__swbuf_r+0x2e>
 8008a12:	4621      	mov	r1, r4
 8008a14:	4628      	mov	r0, r5
 8008a16:	f7ff fdeb 	bl	80085f0 <_fflush_r>
 8008a1a:	2800      	cmp	r0, #0
 8008a1c:	d0d9      	beq.n	80089d2 <__swbuf_r+0x2e>
 8008a1e:	e7d6      	b.n	80089ce <__swbuf_r+0x2a>

08008a20 <__swsetup_r>:
 8008a20:	b538      	push	{r3, r4, r5, lr}
 8008a22:	4b29      	ldr	r3, [pc, #164]	@ (8008ac8 <__swsetup_r+0xa8>)
 8008a24:	4605      	mov	r5, r0
 8008a26:	6818      	ldr	r0, [r3, #0]
 8008a28:	460c      	mov	r4, r1
 8008a2a:	b118      	cbz	r0, 8008a34 <__swsetup_r+0x14>
 8008a2c:	6a03      	ldr	r3, [r0, #32]
 8008a2e:	b90b      	cbnz	r3, 8008a34 <__swsetup_r+0x14>
 8008a30:	f7fe ffe4 	bl	80079fc <__sinit>
 8008a34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a38:	0719      	lsls	r1, r3, #28
 8008a3a:	d422      	bmi.n	8008a82 <__swsetup_r+0x62>
 8008a3c:	06da      	lsls	r2, r3, #27
 8008a3e:	d407      	bmi.n	8008a50 <__swsetup_r+0x30>
 8008a40:	2209      	movs	r2, #9
 8008a42:	602a      	str	r2, [r5, #0]
 8008a44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a48:	81a3      	strh	r3, [r4, #12]
 8008a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a4e:	e033      	b.n	8008ab8 <__swsetup_r+0x98>
 8008a50:	0758      	lsls	r0, r3, #29
 8008a52:	d512      	bpl.n	8008a7a <__swsetup_r+0x5a>
 8008a54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a56:	b141      	cbz	r1, 8008a6a <__swsetup_r+0x4a>
 8008a58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a5c:	4299      	cmp	r1, r3
 8008a5e:	d002      	beq.n	8008a66 <__swsetup_r+0x46>
 8008a60:	4628      	mov	r0, r5
 8008a62:	f7ff f95b 	bl	8007d1c <_free_r>
 8008a66:	2300      	movs	r3, #0
 8008a68:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a6a:	89a3      	ldrh	r3, [r4, #12]
 8008a6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008a70:	81a3      	strh	r3, [r4, #12]
 8008a72:	2300      	movs	r3, #0
 8008a74:	6063      	str	r3, [r4, #4]
 8008a76:	6923      	ldr	r3, [r4, #16]
 8008a78:	6023      	str	r3, [r4, #0]
 8008a7a:	89a3      	ldrh	r3, [r4, #12]
 8008a7c:	f043 0308 	orr.w	r3, r3, #8
 8008a80:	81a3      	strh	r3, [r4, #12]
 8008a82:	6923      	ldr	r3, [r4, #16]
 8008a84:	b94b      	cbnz	r3, 8008a9a <__swsetup_r+0x7a>
 8008a86:	89a3      	ldrh	r3, [r4, #12]
 8008a88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008a8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a90:	d003      	beq.n	8008a9a <__swsetup_r+0x7a>
 8008a92:	4621      	mov	r1, r4
 8008a94:	4628      	mov	r0, r5
 8008a96:	f000 f88b 	bl	8008bb0 <__smakebuf_r>
 8008a9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a9e:	f013 0201 	ands.w	r2, r3, #1
 8008aa2:	d00a      	beq.n	8008aba <__swsetup_r+0x9a>
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	60a2      	str	r2, [r4, #8]
 8008aa8:	6962      	ldr	r2, [r4, #20]
 8008aaa:	4252      	negs	r2, r2
 8008aac:	61a2      	str	r2, [r4, #24]
 8008aae:	6922      	ldr	r2, [r4, #16]
 8008ab0:	b942      	cbnz	r2, 8008ac4 <__swsetup_r+0xa4>
 8008ab2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008ab6:	d1c5      	bne.n	8008a44 <__swsetup_r+0x24>
 8008ab8:	bd38      	pop	{r3, r4, r5, pc}
 8008aba:	0799      	lsls	r1, r3, #30
 8008abc:	bf58      	it	pl
 8008abe:	6962      	ldrpl	r2, [r4, #20]
 8008ac0:	60a2      	str	r2, [r4, #8]
 8008ac2:	e7f4      	b.n	8008aae <__swsetup_r+0x8e>
 8008ac4:	2000      	movs	r0, #0
 8008ac6:	e7f7      	b.n	8008ab8 <__swsetup_r+0x98>
 8008ac8:	2000001c 	.word	0x2000001c

08008acc <_raise_r>:
 8008acc:	291f      	cmp	r1, #31
 8008ace:	b538      	push	{r3, r4, r5, lr}
 8008ad0:	4605      	mov	r5, r0
 8008ad2:	460c      	mov	r4, r1
 8008ad4:	d904      	bls.n	8008ae0 <_raise_r+0x14>
 8008ad6:	2316      	movs	r3, #22
 8008ad8:	6003      	str	r3, [r0, #0]
 8008ada:	f04f 30ff 	mov.w	r0, #4294967295
 8008ade:	bd38      	pop	{r3, r4, r5, pc}
 8008ae0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008ae2:	b112      	cbz	r2, 8008aea <_raise_r+0x1e>
 8008ae4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ae8:	b94b      	cbnz	r3, 8008afe <_raise_r+0x32>
 8008aea:	4628      	mov	r0, r5
 8008aec:	f000 f830 	bl	8008b50 <_getpid_r>
 8008af0:	4622      	mov	r2, r4
 8008af2:	4601      	mov	r1, r0
 8008af4:	4628      	mov	r0, r5
 8008af6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008afa:	f000 b817 	b.w	8008b2c <_kill_r>
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d00a      	beq.n	8008b18 <_raise_r+0x4c>
 8008b02:	1c59      	adds	r1, r3, #1
 8008b04:	d103      	bne.n	8008b0e <_raise_r+0x42>
 8008b06:	2316      	movs	r3, #22
 8008b08:	6003      	str	r3, [r0, #0]
 8008b0a:	2001      	movs	r0, #1
 8008b0c:	e7e7      	b.n	8008ade <_raise_r+0x12>
 8008b0e:	2100      	movs	r1, #0
 8008b10:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008b14:	4620      	mov	r0, r4
 8008b16:	4798      	blx	r3
 8008b18:	2000      	movs	r0, #0
 8008b1a:	e7e0      	b.n	8008ade <_raise_r+0x12>

08008b1c <raise>:
 8008b1c:	4b02      	ldr	r3, [pc, #8]	@ (8008b28 <raise+0xc>)
 8008b1e:	4601      	mov	r1, r0
 8008b20:	6818      	ldr	r0, [r3, #0]
 8008b22:	f7ff bfd3 	b.w	8008acc <_raise_r>
 8008b26:	bf00      	nop
 8008b28:	2000001c 	.word	0x2000001c

08008b2c <_kill_r>:
 8008b2c:	b538      	push	{r3, r4, r5, lr}
 8008b2e:	4d07      	ldr	r5, [pc, #28]	@ (8008b4c <_kill_r+0x20>)
 8008b30:	2300      	movs	r3, #0
 8008b32:	4604      	mov	r4, r0
 8008b34:	4608      	mov	r0, r1
 8008b36:	4611      	mov	r1, r2
 8008b38:	602b      	str	r3, [r5, #0]
 8008b3a:	f7f8 fc41 	bl	80013c0 <_kill>
 8008b3e:	1c43      	adds	r3, r0, #1
 8008b40:	d102      	bne.n	8008b48 <_kill_r+0x1c>
 8008b42:	682b      	ldr	r3, [r5, #0]
 8008b44:	b103      	cbz	r3, 8008b48 <_kill_r+0x1c>
 8008b46:	6023      	str	r3, [r4, #0]
 8008b48:	bd38      	pop	{r3, r4, r5, pc}
 8008b4a:	bf00      	nop
 8008b4c:	20004648 	.word	0x20004648

08008b50 <_getpid_r>:
 8008b50:	f7f8 bc2e 	b.w	80013b0 <_getpid>

08008b54 <_malloc_usable_size_r>:
 8008b54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b58:	1f18      	subs	r0, r3, #4
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	bfbc      	itt	lt
 8008b5e:	580b      	ldrlt	r3, [r1, r0]
 8008b60:	18c0      	addlt	r0, r0, r3
 8008b62:	4770      	bx	lr

08008b64 <__swhatbuf_r>:
 8008b64:	b570      	push	{r4, r5, r6, lr}
 8008b66:	460c      	mov	r4, r1
 8008b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b6c:	2900      	cmp	r1, #0
 8008b6e:	b096      	sub	sp, #88	@ 0x58
 8008b70:	4615      	mov	r5, r2
 8008b72:	461e      	mov	r6, r3
 8008b74:	da0d      	bge.n	8008b92 <__swhatbuf_r+0x2e>
 8008b76:	89a3      	ldrh	r3, [r4, #12]
 8008b78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008b7c:	f04f 0100 	mov.w	r1, #0
 8008b80:	bf14      	ite	ne
 8008b82:	2340      	movne	r3, #64	@ 0x40
 8008b84:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008b88:	2000      	movs	r0, #0
 8008b8a:	6031      	str	r1, [r6, #0]
 8008b8c:	602b      	str	r3, [r5, #0]
 8008b8e:	b016      	add	sp, #88	@ 0x58
 8008b90:	bd70      	pop	{r4, r5, r6, pc}
 8008b92:	466a      	mov	r2, sp
 8008b94:	f000 f848 	bl	8008c28 <_fstat_r>
 8008b98:	2800      	cmp	r0, #0
 8008b9a:	dbec      	blt.n	8008b76 <__swhatbuf_r+0x12>
 8008b9c:	9901      	ldr	r1, [sp, #4]
 8008b9e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008ba2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008ba6:	4259      	negs	r1, r3
 8008ba8:	4159      	adcs	r1, r3
 8008baa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008bae:	e7eb      	b.n	8008b88 <__swhatbuf_r+0x24>

08008bb0 <__smakebuf_r>:
 8008bb0:	898b      	ldrh	r3, [r1, #12]
 8008bb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bb4:	079d      	lsls	r5, r3, #30
 8008bb6:	4606      	mov	r6, r0
 8008bb8:	460c      	mov	r4, r1
 8008bba:	d507      	bpl.n	8008bcc <__smakebuf_r+0x1c>
 8008bbc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008bc0:	6023      	str	r3, [r4, #0]
 8008bc2:	6123      	str	r3, [r4, #16]
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	6163      	str	r3, [r4, #20]
 8008bc8:	b003      	add	sp, #12
 8008bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bcc:	ab01      	add	r3, sp, #4
 8008bce:	466a      	mov	r2, sp
 8008bd0:	f7ff ffc8 	bl	8008b64 <__swhatbuf_r>
 8008bd4:	9f00      	ldr	r7, [sp, #0]
 8008bd6:	4605      	mov	r5, r0
 8008bd8:	4639      	mov	r1, r7
 8008bda:	4630      	mov	r0, r6
 8008bdc:	f7ff f912 	bl	8007e04 <_malloc_r>
 8008be0:	b948      	cbnz	r0, 8008bf6 <__smakebuf_r+0x46>
 8008be2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008be6:	059a      	lsls	r2, r3, #22
 8008be8:	d4ee      	bmi.n	8008bc8 <__smakebuf_r+0x18>
 8008bea:	f023 0303 	bic.w	r3, r3, #3
 8008bee:	f043 0302 	orr.w	r3, r3, #2
 8008bf2:	81a3      	strh	r3, [r4, #12]
 8008bf4:	e7e2      	b.n	8008bbc <__smakebuf_r+0xc>
 8008bf6:	89a3      	ldrh	r3, [r4, #12]
 8008bf8:	6020      	str	r0, [r4, #0]
 8008bfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bfe:	81a3      	strh	r3, [r4, #12]
 8008c00:	9b01      	ldr	r3, [sp, #4]
 8008c02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008c06:	b15b      	cbz	r3, 8008c20 <__smakebuf_r+0x70>
 8008c08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c0c:	4630      	mov	r0, r6
 8008c0e:	f000 f81d 	bl	8008c4c <_isatty_r>
 8008c12:	b128      	cbz	r0, 8008c20 <__smakebuf_r+0x70>
 8008c14:	89a3      	ldrh	r3, [r4, #12]
 8008c16:	f023 0303 	bic.w	r3, r3, #3
 8008c1a:	f043 0301 	orr.w	r3, r3, #1
 8008c1e:	81a3      	strh	r3, [r4, #12]
 8008c20:	89a3      	ldrh	r3, [r4, #12]
 8008c22:	431d      	orrs	r5, r3
 8008c24:	81a5      	strh	r5, [r4, #12]
 8008c26:	e7cf      	b.n	8008bc8 <__smakebuf_r+0x18>

08008c28 <_fstat_r>:
 8008c28:	b538      	push	{r3, r4, r5, lr}
 8008c2a:	4d07      	ldr	r5, [pc, #28]	@ (8008c48 <_fstat_r+0x20>)
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	4604      	mov	r4, r0
 8008c30:	4608      	mov	r0, r1
 8008c32:	4611      	mov	r1, r2
 8008c34:	602b      	str	r3, [r5, #0]
 8008c36:	f7f8 fc23 	bl	8001480 <_fstat>
 8008c3a:	1c43      	adds	r3, r0, #1
 8008c3c:	d102      	bne.n	8008c44 <_fstat_r+0x1c>
 8008c3e:	682b      	ldr	r3, [r5, #0]
 8008c40:	b103      	cbz	r3, 8008c44 <_fstat_r+0x1c>
 8008c42:	6023      	str	r3, [r4, #0]
 8008c44:	bd38      	pop	{r3, r4, r5, pc}
 8008c46:	bf00      	nop
 8008c48:	20004648 	.word	0x20004648

08008c4c <_isatty_r>:
 8008c4c:	b538      	push	{r3, r4, r5, lr}
 8008c4e:	4d06      	ldr	r5, [pc, #24]	@ (8008c68 <_isatty_r+0x1c>)
 8008c50:	2300      	movs	r3, #0
 8008c52:	4604      	mov	r4, r0
 8008c54:	4608      	mov	r0, r1
 8008c56:	602b      	str	r3, [r5, #0]
 8008c58:	f7f8 fc22 	bl	80014a0 <_isatty>
 8008c5c:	1c43      	adds	r3, r0, #1
 8008c5e:	d102      	bne.n	8008c66 <_isatty_r+0x1a>
 8008c60:	682b      	ldr	r3, [r5, #0]
 8008c62:	b103      	cbz	r3, 8008c66 <_isatty_r+0x1a>
 8008c64:	6023      	str	r3, [r4, #0]
 8008c66:	bd38      	pop	{r3, r4, r5, pc}
 8008c68:	20004648 	.word	0x20004648

08008c6c <_init>:
 8008c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c6e:	bf00      	nop
 8008c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c72:	bc08      	pop	{r3}
 8008c74:	469e      	mov	lr, r3
 8008c76:	4770      	bx	lr

08008c78 <_fini>:
 8008c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c7a:	bf00      	nop
 8008c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c7e:	bc08      	pop	{r3}
 8008c80:	469e      	mov	lr, r3
 8008c82:	4770      	bx	lr
