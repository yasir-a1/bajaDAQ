
canproj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083a8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  08008548  08008548  00009548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008868  08008868  0000a06c  2**0
                  CONTENTS
  4 .ARM          00000008  08008868  08008868  00009868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008870  08008870  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008870  08008870  00009870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008874  08008874  00009874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08008878  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000045f4  2000006c  080088e4  0000a06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004660  080088e4  0000a660  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001912f  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d37  00000000  00000000  000231cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001750  00000000  00000000  00026f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001211  00000000  00000000  00028658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a850  00000000  00000000  00029869  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a214  00000000  00000000  000440b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a164a  00000000  00000000  0005e2cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ff917  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c8c  00000000  00000000  000ff95c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001065e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008530 	.word	0x08008530

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08008530 	.word	0x08008530

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	4a07      	ldr	r2, [pc, #28]	@ (80005ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000590:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	4a06      	ldr	r2, [pc, #24]	@ (80005b0 <vApplicationGetIdleTaskMemory+0x30>)
 8000596:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2280      	movs	r2, #128	@ 0x80
 800059c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000088 	.word	0x20000088
 80005b0:	200000dc 	.word	0x200000dc

080005b4 <vApplicationGetTimerTaskMemory>:

//No idea what this doe, but needed for xEventGroupSetBitsFromISR
void vApplicationGetTimerTaskMemory(StaticTask_t **ppxTimerTaskTCBBuffer,
                                    StackType_t **ppxTimerTaskStackBuffer,
                                    uint32_t *pulTimerTaskStackSize)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;              // Provide TCB memory
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	4a07      	ldr	r2, [pc, #28]	@ (80005e0 <vApplicationGetTimerTaskMemory+0x2c>)
 80005c4:	601a      	str	r2, [r3, #0]
    *ppxTimerTaskStackBuffer = xTimerStack;               // Provide stack memory
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	4a06      	ldr	r2, [pc, #24]	@ (80005e4 <vApplicationGetTimerTaskMemory+0x30>)
 80005ca:	601a      	str	r2, [r3, #0]
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH; // Provide stack size
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2280      	movs	r2, #128	@ 0x80
 80005d0:	601a      	str	r2, [r3, #0]
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	200003b4 	.word	0x200003b4
 80005e4:	20000408 	.word	0x20000408

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b5b0      	push	{r4, r5, r7, lr}
 80005ea:	b09c      	sub	sp, #112	@ 0x70
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ee:	f000 ffa5 	bl	800153c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f2:	f000 f88f 	bl	8000714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f6:	f000 f97f 	bl	80008f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005fa:	f000 f953 	bl	80008a4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80005fe:	f000 f91b 	bl	8000838 <MX_SPI1_Init>
  MX_RTC_Init();
 8000602:	f000 f8f3 	bl	80007ec <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  print("MCP2515 init Started");
 8000606:	4836      	ldr	r0, [pc, #216]	@ (80006e0 <main+0xf8>)
 8000608:	f000 fa00 	bl	8000a0c <print>

  mcp2515init();
 800060c:	f000 fac2 	bl	8000b94 <mcp2515init>
  print("Program Started");
 8000610:	4834      	ldr	r0, [pc, #208]	@ (80006e4 <main+0xfc>)
 8000612:	f000 f9fb 	bl	8000a0c <print>
  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  messageToRead = xEventGroupCreate();
 8000616:	f003 fe4b 	bl	80042b0 <xEventGroupCreate>
 800061a:	4603      	mov	r3, r0
 800061c:	4a32      	ldr	r2, [pc, #200]	@ (80006e8 <main+0x100>)
 800061e:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  MessageQueueHandle = xQueueCreate(3, sizeof(MessageCAN));
 8000620:	2200      	movs	r2, #0
 8000622:	210c      	movs	r1, #12
 8000624:	2003      	movs	r0, #3
 8000626:	f004 f9be 	bl	80049a6 <xQueueGenericCreate>
 800062a:	4603      	mov	r3, r0
 800062c:	4a2f      	ldr	r2, [pc, #188]	@ (80006ec <main+0x104>)
 800062e:	6013      	str	r3, [r2, #0]

  if (MessageQueueHandle == 0){
 8000630:	4b2e      	ldr	r3, [pc, #184]	@ (80006ec <main+0x104>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d104      	bne.n	8000642 <main+0x5a>
	  print("Error Creating Queue");
 8000638:	482d      	ldr	r0, [pc, #180]	@ (80006f0 <main+0x108>)
 800063a:	f000 f9e7 	bl	8000a0c <print>
	  Error_Handler();
 800063e:	f000 fce7 	bl	8001010 <Error_Handler>
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8000642:	4b2c      	ldr	r3, [pc, #176]	@ (80006f4 <main+0x10c>)
 8000644:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8000648:	461d      	mov	r5, r3
 800064a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800064c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800064e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000652:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000656:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800065a:	2100      	movs	r1, #0
 800065c:	4618      	mov	r0, r3
 800065e:	f003 fdb4 	bl	80041ca <osThreadCreate>
 8000662:	4603      	mov	r3, r0
 8000664:	4a24      	ldr	r2, [pc, #144]	@ (80006f8 <main+0x110>)
 8000666:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityAboveNormal, 0, 256);
 8000668:	4b24      	ldr	r3, [pc, #144]	@ (80006fc <main+0x114>)
 800066a:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 800066e:	461d      	mov	r5, r3
 8000670:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000674:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000678:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 800067c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f003 fda1 	bl	80041ca <osThreadCreate>
 8000688:	4603      	mov	r3, r0
 800068a:	4a1d      	ldr	r2, [pc, #116]	@ (8000700 <main+0x118>)
 800068c:	6013      	str	r3, [r2, #0]

  /* definition and creation of sdCardMsgPost */
  osThreadDef(sdCardMsgPost, StartTask03, osPriorityAboveNormal, 0, 256);
 800068e:	4b1d      	ldr	r3, [pc, #116]	@ (8000704 <main+0x11c>)
 8000690:	f107 041c 	add.w	r4, r7, #28
 8000694:	461d      	mov	r5, r3
 8000696:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000698:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800069a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800069e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sdCardMsgPostHandle = osThreadCreate(osThread(sdCardMsgPost), NULL);
 80006a2:	f107 031c 	add.w	r3, r7, #28
 80006a6:	2100      	movs	r1, #0
 80006a8:	4618      	mov	r0, r3
 80006aa:	f003 fd8e 	bl	80041ca <osThreadCreate>
 80006ae:	4603      	mov	r3, r0
 80006b0:	4a15      	ldr	r2, [pc, #84]	@ (8000708 <main+0x120>)
 80006b2:	6013      	str	r3, [r2, #0]

  /* definition and creation of messageAvailabl */
  osThreadDef(messageAvailabl, StartTask04, osPriorityAboveNormal, 0, 256);
 80006b4:	4b15      	ldr	r3, [pc, #84]	@ (800070c <main+0x124>)
 80006b6:	463c      	mov	r4, r7
 80006b8:	461d      	mov	r5, r3
 80006ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  messageAvailablHandle = osThreadCreate(osThread(messageAvailabl), NULL);
 80006c6:	463b      	mov	r3, r7
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f003 fd7d 	bl	80041ca <osThreadCreate>
 80006d0:	4603      	mov	r3, r0
 80006d2:	4a0f      	ldr	r2, [pc, #60]	@ (8000710 <main+0x128>)
 80006d4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006d6:	f003 fd71 	bl	80041bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006da:	bf00      	nop
 80006dc:	e7fd      	b.n	80006da <main+0xf2>
 80006de:	bf00      	nop
 80006e0:	08008548 	.word	0x08008548
 80006e4:	08008560 	.word	0x08008560
 80006e8:	200003b0 	.word	0x200003b0
 80006ec:	20000608 	.word	0x20000608
 80006f0:	08008570 	.word	0x08008570
 80006f4:	08008594 	.word	0x08008594
 80006f8:	2000039c 	.word	0x2000039c
 80006fc:	080085bc 	.word	0x080085bc
 8000700:	200003a0 	.word	0x200003a0
 8000704:	080085e8 	.word	0x080085e8
 8000708:	200003a4 	.word	0x200003a4
 800070c:	08008614 	.word	0x08008614
 8000710:	200003a8 	.word	0x200003a8

08000714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b094      	sub	sp, #80	@ 0x50
 8000718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	f107 0320 	add.w	r3, r7, #32
 800071e:	2230      	movs	r2, #48	@ 0x30
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f006 feab 	bl	800747e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000738:	2300      	movs	r3, #0
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	4b29      	ldr	r3, [pc, #164]	@ (80007e4 <SystemClock_Config+0xd0>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000740:	4a28      	ldr	r2, [pc, #160]	@ (80007e4 <SystemClock_Config+0xd0>)
 8000742:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000746:	6413      	str	r3, [r2, #64]	@ 0x40
 8000748:	4b26      	ldr	r3, [pc, #152]	@ (80007e4 <SystemClock_Config+0xd0>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800074c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000754:	2300      	movs	r3, #0
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	4b23      	ldr	r3, [pc, #140]	@ (80007e8 <SystemClock_Config+0xd4>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a22      	ldr	r2, [pc, #136]	@ (80007e8 <SystemClock_Config+0xd4>)
 800075e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000762:	6013      	str	r3, [r2, #0]
 8000764:	4b20      	ldr	r3, [pc, #128]	@ (80007e8 <SystemClock_Config+0xd4>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000770:	230a      	movs	r3, #10
 8000772:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000774:	2301      	movs	r3, #1
 8000776:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000778:	2310      	movs	r3, #16
 800077a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800077c:	2301      	movs	r3, #1
 800077e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000780:	2302      	movs	r3, #2
 8000782:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000784:	2300      	movs	r3, #0
 8000786:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000788:	2310      	movs	r3, #16
 800078a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800078c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000790:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000792:	2304      	movs	r3, #4
 8000794:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000796:	2304      	movs	r3, #4
 8000798:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079a:	f107 0320 	add.w	r3, r7, #32
 800079e:	4618      	mov	r0, r3
 80007a0:	f001 f9e2 	bl	8001b68 <HAL_RCC_OscConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007aa:	f000 fc31 	bl	8001010 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ae:	230f      	movs	r3, #15
 80007b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b2:	2302      	movs	r3, #2
 80007b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	2102      	movs	r1, #2
 80007ca:	4618      	mov	r0, r3
 80007cc:	f001 fc44 	bl	8002058 <HAL_RCC_ClockConfig>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007d6:	f000 fc1b 	bl	8001010 <Error_Handler>
  }
}
 80007da:	bf00      	nop
 80007dc:	3750      	adds	r7, #80	@ 0x50
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40007000 	.word	0x40007000

080007ec <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000830 <MX_RTC_Init+0x44>)
 80007f2:	4a10      	ldr	r2, [pc, #64]	@ (8000834 <MX_RTC_Init+0x48>)
 80007f4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000830 <MX_RTC_Init+0x44>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000830 <MX_RTC_Init+0x44>)
 80007fe:	227f      	movs	r2, #127	@ 0x7f
 8000800:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000802:	4b0b      	ldr	r3, [pc, #44]	@ (8000830 <MX_RTC_Init+0x44>)
 8000804:	22ff      	movs	r2, #255	@ 0xff
 8000806:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000808:	4b09      	ldr	r3, [pc, #36]	@ (8000830 <MX_RTC_Init+0x44>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800080e:	4b08      	ldr	r3, [pc, #32]	@ (8000830 <MX_RTC_Init+0x44>)
 8000810:	2200      	movs	r2, #0
 8000812:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000814:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <MX_RTC_Init+0x44>)
 8000816:	2200      	movs	r2, #0
 8000818:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800081a:	4805      	ldr	r0, [pc, #20]	@ (8000830 <MX_RTC_Init+0x44>)
 800081c:	f001 ff5e 	bl	80026dc <HAL_RTC_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000826:	f000 fbf3 	bl	8001010 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	200002dc 	.word	0x200002dc
 8000834:	40002800 	.word	0x40002800

08000838 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800083c:	4b17      	ldr	r3, [pc, #92]	@ (800089c <MX_SPI1_Init+0x64>)
 800083e:	4a18      	ldr	r2, [pc, #96]	@ (80008a0 <MX_SPI1_Init+0x68>)
 8000840:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000842:	4b16      	ldr	r3, [pc, #88]	@ (800089c <MX_SPI1_Init+0x64>)
 8000844:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000848:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800084a:	4b14      	ldr	r3, [pc, #80]	@ (800089c <MX_SPI1_Init+0x64>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000850:	4b12      	ldr	r3, [pc, #72]	@ (800089c <MX_SPI1_Init+0x64>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000856:	4b11      	ldr	r3, [pc, #68]	@ (800089c <MX_SPI1_Init+0x64>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800085c:	4b0f      	ldr	r3, [pc, #60]	@ (800089c <MX_SPI1_Init+0x64>)
 800085e:	2200      	movs	r2, #0
 8000860:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000862:	4b0e      	ldr	r3, [pc, #56]	@ (800089c <MX_SPI1_Init+0x64>)
 8000864:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000868:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800086a:	4b0c      	ldr	r3, [pc, #48]	@ (800089c <MX_SPI1_Init+0x64>)
 800086c:	2220      	movs	r2, #32
 800086e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000870:	4b0a      	ldr	r3, [pc, #40]	@ (800089c <MX_SPI1_Init+0x64>)
 8000872:	2200      	movs	r2, #0
 8000874:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000876:	4b09      	ldr	r3, [pc, #36]	@ (800089c <MX_SPI1_Init+0x64>)
 8000878:	2200      	movs	r2, #0
 800087a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800087c:	4b07      	ldr	r3, [pc, #28]	@ (800089c <MX_SPI1_Init+0x64>)
 800087e:	2200      	movs	r2, #0
 8000880:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000882:	4b06      	ldr	r3, [pc, #24]	@ (800089c <MX_SPI1_Init+0x64>)
 8000884:	220a      	movs	r2, #10
 8000886:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000888:	4804      	ldr	r0, [pc, #16]	@ (800089c <MX_SPI1_Init+0x64>)
 800088a:	f002 f82d 	bl	80028e8 <HAL_SPI_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000894:	f000 fbbc 	bl	8001010 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}
 800089c:	200002fc 	.word	0x200002fc
 80008a0:	40013000 	.word	0x40013000

080008a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008a8:	4b11      	ldr	r3, [pc, #68]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008aa:	4a12      	ldr	r2, [pc, #72]	@ (80008f4 <MX_USART2_UART_Init+0x50>)
 80008ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ae:	4b10      	ldr	r3, [pc, #64]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008c8:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008ca:	220c      	movs	r2, #12
 80008cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ce:	4b08      	ldr	r3, [pc, #32]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d4:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008da:	4805      	ldr	r0, [pc, #20]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008dc:	f003 f84a 	bl	8003974 <HAL_UART_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008e6:	f000 fb93 	bl	8001010 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000354 	.word	0x20000354
 80008f4:	40004400 	.word	0x40004400

080008f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08a      	sub	sp, #40	@ 0x28
 80008fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
 8000908:	609a      	str	r2, [r3, #8]
 800090a:	60da      	str	r2, [r3, #12]
 800090c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
 8000912:	4b3a      	ldr	r3, [pc, #232]	@ (80009fc <MX_GPIO_Init+0x104>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	4a39      	ldr	r2, [pc, #228]	@ (80009fc <MX_GPIO_Init+0x104>)
 8000918:	f043 0304 	orr.w	r3, r3, #4
 800091c:	6313      	str	r3, [r2, #48]	@ 0x30
 800091e:	4b37      	ldr	r3, [pc, #220]	@ (80009fc <MX_GPIO_Init+0x104>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	f003 0304 	and.w	r3, r3, #4
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	4b33      	ldr	r3, [pc, #204]	@ (80009fc <MX_GPIO_Init+0x104>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	4a32      	ldr	r2, [pc, #200]	@ (80009fc <MX_GPIO_Init+0x104>)
 8000934:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000938:	6313      	str	r3, [r2, #48]	@ 0x30
 800093a:	4b30      	ldr	r3, [pc, #192]	@ (80009fc <MX_GPIO_Init+0x104>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	4b2c      	ldr	r3, [pc, #176]	@ (80009fc <MX_GPIO_Init+0x104>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	4a2b      	ldr	r2, [pc, #172]	@ (80009fc <MX_GPIO_Init+0x104>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	6313      	str	r3, [r2, #48]	@ 0x30
 8000956:	4b29      	ldr	r3, [pc, #164]	@ (80009fc <MX_GPIO_Init+0x104>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	4b25      	ldr	r3, [pc, #148]	@ (80009fc <MX_GPIO_Init+0x104>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	4a24      	ldr	r2, [pc, #144]	@ (80009fc <MX_GPIO_Init+0x104>)
 800096c:	f043 0302 	orr.w	r3, r3, #2
 8000970:	6313      	str	r3, [r2, #48]	@ 0x30
 8000972:	4b22      	ldr	r3, [pc, #136]	@ (80009fc <MX_GPIO_Init+0x104>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	2140      	movs	r1, #64	@ 0x40
 8000982:	481f      	ldr	r0, [pc, #124]	@ (8000a00 <MX_GPIO_Init+0x108>)
 8000984:	f001 f8be 	bl	8001b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Btn_Int_Pin */
  GPIO_InitStruct.Pin = Btn_Int_Pin;
 8000988:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800098c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800098e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000992:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000994:	2301      	movs	r3, #1
 8000996:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Btn_Int_GPIO_Port, &GPIO_InitStruct);
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	4619      	mov	r1, r3
 800099e:	4819      	ldr	r0, [pc, #100]	@ (8000a04 <MX_GPIO_Init+0x10c>)
 80009a0:	f000 ff14 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_INT_Pin */
  GPIO_InitStruct.Pin = CAN_INT_Pin;
 80009a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CAN_INT_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	4619      	mov	r1, r3
 80009b8:	4813      	ldr	r0, [pc, #76]	@ (8000a08 <MX_GPIO_Init+0x110>)
 80009ba:	f000 ff07 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80009be:	2340      	movs	r3, #64	@ 0x40
 80009c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c2:	2301      	movs	r3, #1
 80009c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	4619      	mov	r1, r3
 80009d4:	480a      	ldr	r0, [pc, #40]	@ (8000a00 <MX_GPIO_Init+0x108>)
 80009d6:	f000 fef9 	bl	80017cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80009da:	2200      	movs	r2, #0
 80009dc:	2105      	movs	r1, #5
 80009de:	2028      	movs	r0, #40	@ 0x28
 80009e0:	f000 feca 	bl	8001778 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009e4:	2028      	movs	r0, #40	@ 0x28
 80009e6:	f000 fee3 	bl	80017b0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80009ea:	2201      	movs	r2, #1
 80009ec:	2140      	movs	r1, #64	@ 0x40
 80009ee:	4804      	ldr	r0, [pc, #16]	@ (8000a00 <MX_GPIO_Init+0x108>)
 80009f0:	f001 f888 	bl	8001b04 <HAL_GPIO_WritePin>

/* USER CODE END MX_GPIO_Init_2 */
}
 80009f4:	bf00      	nop
 80009f6:	3728      	adds	r7, #40	@ 0x28
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40020400 	.word	0x40020400
 8000a04:	40020800 	.word	0x40020800
 8000a08:	40020000 	.word	0x40020000

08000a0c <print>:

/* USER CODE BEGIN 4 */
void print(const char* buffer) {
 8000a0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000a10:	b087      	sub	sp, #28
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
 8000a16:	466b      	mov	r3, sp
 8000a18:	461e      	mov	r6, r3
    // Calculate the string length
    size_t length = strlen(buffer);
 8000a1a:	6878      	ldr	r0, [r7, #4]
 8000a1c:	f7ff fbe0 	bl	80001e0 <strlen>
 8000a20:	6178      	str	r0, [r7, #20]

    // Add space for the new line and carriage return
    char tempBuffer[length + 3]; // Original string + '\r' + '\n' + null terminator
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	1cd9      	adds	r1, r3, #3
 8000a26:	460b      	mov	r3, r1
 8000a28:	3b01      	subs	r3, #1
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	4688      	mov	r8, r1
 8000a30:	4699      	mov	r9, r3
 8000a32:	f04f 0200 	mov.w	r2, #0
 8000a36:	f04f 0300 	mov.w	r3, #0
 8000a3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000a3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000a42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000a46:	2300      	movs	r3, #0
 8000a48:	460c      	mov	r4, r1
 8000a4a:	461d      	mov	r5, r3
 8000a4c:	f04f 0200 	mov.w	r2, #0
 8000a50:	f04f 0300 	mov.w	r3, #0
 8000a54:	00eb      	lsls	r3, r5, #3
 8000a56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000a5a:	00e2      	lsls	r2, r4, #3
 8000a5c:	1dcb      	adds	r3, r1, #7
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	00db      	lsls	r3, r3, #3
 8000a62:	ebad 0d03 	sub.w	sp, sp, r3
 8000a66:	466b      	mov	r3, sp
 8000a68:	3300      	adds	r3, #0
 8000a6a:	60fb      	str	r3, [r7, #12]

    // Copy the original string into the temporary buffer
    strcpy(tempBuffer, buffer);
 8000a6c:	6879      	ldr	r1, [r7, #4]
 8000a6e:	68f8      	ldr	r0, [r7, #12]
 8000a70:	f006 fd81 	bl	8007576 <strcpy>

    // Append the new line and carriage return
    tempBuffer[length] = '\r';     // Carriage return
 8000a74:	68fa      	ldr	r2, [r7, #12]
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	4413      	add	r3, r2
 8000a7a:	220d      	movs	r2, #13
 8000a7c:	701a      	strb	r2, [r3, #0]
    tempBuffer[length + 1] = '\n'; // New line
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	3301      	adds	r3, #1
 8000a82:	68fa      	ldr	r2, [r7, #12]
 8000a84:	210a      	movs	r1, #10
 8000a86:	54d1      	strb	r1, [r2, r3]
    tempBuffer[length + 2] = '\0'; // Null terminator
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	3302      	adds	r3, #2
 8000a8c:	68fa      	ldr	r2, [r7, #12]
 8000a8e:	2100      	movs	r1, #0
 8000a90:	54d1      	strb	r1, [r2, r3]

    // Transmit the modified string over UART
    HAL_UART_Transmit(&huart2, (uint8_t*)tempBuffer, strlen(tempBuffer), 100);
 8000a92:	68f8      	ldr	r0, [r7, #12]
 8000a94:	f7ff fba4 	bl	80001e0 <strlen>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	2364      	movs	r3, #100	@ 0x64
 8000a9e:	68f9      	ldr	r1, [r7, #12]
 8000aa0:	4804      	ldr	r0, [pc, #16]	@ (8000ab4 <print+0xa8>)
 8000aa2:	f002 ffb7 	bl	8003a14 <HAL_UART_Transmit>
 8000aa6:	46b5      	mov	sp, r6
}
 8000aa8:	bf00      	nop
 8000aaa:	371c      	adds	r7, #28
 8000aac:	46bd      	mov	sp, r7
 8000aae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000354 	.word	0x20000354

08000ab8 <mcp2515writeRegister>:

void mcp2515writeRegister(uint8_t address, uint8_t data){
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	460a      	mov	r2, r1
 8000ac2:	71fb      	strb	r3, [r7, #7]
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	71bb      	strb	r3, [r7, #6]

	uint8_t txBuffer[3] = {0x02, address, data};
 8000ac8:	2302      	movs	r3, #2
 8000aca:	733b      	strb	r3, [r7, #12]
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	737b      	strb	r3, [r7, #13]
 8000ad0:	79bb      	ldrb	r3, [r7, #6]
 8000ad2:	73bb      	strb	r3, [r7, #14]

	SPI1_CS_LOW();
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2140      	movs	r1, #64	@ 0x40
 8000ad8:	4809      	ldr	r0, [pc, #36]	@ (8000b00 <mcp2515writeRegister+0x48>)
 8000ada:	f001 f813 	bl	8001b04 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, txBuffer, sizeof(txBuffer), 100);
 8000ade:	f107 010c 	add.w	r1, r7, #12
 8000ae2:	2364      	movs	r3, #100	@ 0x64
 8000ae4:	2203      	movs	r2, #3
 8000ae6:	4807      	ldr	r0, [pc, #28]	@ (8000b04 <mcp2515writeRegister+0x4c>)
 8000ae8:	f001 ff87 	bl	80029fa <HAL_SPI_Transmit>
	SPI1_CS_HIGH();
 8000aec:	2201      	movs	r2, #1
 8000aee:	2140      	movs	r1, #64	@ 0x40
 8000af0:	4803      	ldr	r0, [pc, #12]	@ (8000b00 <mcp2515writeRegister+0x48>)
 8000af2:	f001 f807 	bl	8001b04 <HAL_GPIO_WritePin>
}
 8000af6:	bf00      	nop
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40020400 	.word	0x40020400
 8000b04:	200002fc 	.word	0x200002fc

08000b08 <mcp2515readRegister>:


uint8_t mcp2515readRegister(uint8_t address){
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af02      	add	r7, sp, #8
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]

	uint8_t txBuffer[3] = {0x03, address, 0xFF};
 8000b12:	2303      	movs	r3, #3
 8000b14:	733b      	strb	r3, [r7, #12]
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	737b      	strb	r3, [r7, #13]
 8000b1a:	23ff      	movs	r3, #255	@ 0xff
 8000b1c:	73bb      	strb	r3, [r7, #14]
	uint8_t rxBuffer[3] = {0};
 8000b1e:	4b12      	ldr	r3, [pc, #72]	@ (8000b68 <mcp2515readRegister+0x60>)
 8000b20:	881b      	ldrh	r3, [r3, #0]
 8000b22:	813b      	strh	r3, [r7, #8]
 8000b24:	2300      	movs	r3, #0
 8000b26:	72bb      	strb	r3, [r7, #10]

	HAL_StatusTypeDef status;

	SPI1_CS_LOW();
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2140      	movs	r1, #64	@ 0x40
 8000b2c:	480f      	ldr	r0, [pc, #60]	@ (8000b6c <mcp2515readRegister+0x64>)
 8000b2e:	f000 ffe9 	bl	8001b04 <HAL_GPIO_WritePin>
    status = HAL_SPI_TransmitReceive(&hspi1, txBuffer, rxBuffer, sizeof(txBuffer), 100);
 8000b32:	f107 0208 	add.w	r2, r7, #8
 8000b36:	f107 010c 	add.w	r1, r7, #12
 8000b3a:	2364      	movs	r3, #100	@ 0x64
 8000b3c:	9300      	str	r3, [sp, #0]
 8000b3e:	2303      	movs	r3, #3
 8000b40:	480b      	ldr	r0, [pc, #44]	@ (8000b70 <mcp2515readRegister+0x68>)
 8000b42:	f002 f9b7 	bl	8002eb4 <HAL_SPI_TransmitReceive>
 8000b46:	4603      	mov	r3, r0
 8000b48:	73fb      	strb	r3, [r7, #15]
	SPI1_CS_HIGH();
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	2140      	movs	r1, #64	@ 0x40
 8000b4e:	4807      	ldr	r0, [pc, #28]	@ (8000b6c <mcp2515readRegister+0x64>)
 8000b50:	f000 ffd8 	bl	8001b04 <HAL_GPIO_WritePin>

	if(status != HAL_OK){
 8000b54:	7bfb      	ldrb	r3, [r7, #15]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <mcp2515readRegister+0x56>

		Error_Handler();
 8000b5a:	f000 fa59 	bl	8001010 <Error_Handler>
	}
	return rxBuffer[2];
 8000b5e:	7abb      	ldrb	r3, [r7, #10]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	08008630 	.word	0x08008630
 8000b6c:	40020400 	.word	0x40020400
 8000b70:	200002fc 	.word	0x200002fc

08000b74 <mcp2515setTiming>:
    return timeValue;
}



void mcp2515setTiming(void){
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
	// Example configuration for 500 kbps with 8 MHz oscillator
	// Calculate CNF1, CNF2, CNF3 using the MCP2515 datasheet
	mcp2515writeRegister(0x2A, 0x00); // CNF1: SJW=1, BRP=0
 8000b78:	2100      	movs	r1, #0
 8000b7a:	202a      	movs	r0, #42	@ 0x2a
 8000b7c:	f7ff ff9c 	bl	8000ab8 <mcp2515writeRegister>
	mcp2515writeRegister(0x29, 0x90); // CNF2: BTLMODE=1, SAM=0, PHSEG1=3, PRSEG=1
 8000b80:	2190      	movs	r1, #144	@ 0x90
 8000b82:	2029      	movs	r0, #41	@ 0x29
 8000b84:	f7ff ff98 	bl	8000ab8 <mcp2515writeRegister>
	mcp2515writeRegister(0x28, 0x02); // CNF3: SOF=0, WAKFIL=0, PHSEG2=3
 8000b88:	2102      	movs	r1, #2
 8000b8a:	2028      	movs	r0, #40	@ 0x28
 8000b8c:	f7ff ff94 	bl	8000ab8 <mcp2515writeRegister>
}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <mcp2515init>:
	mcp2515readRegister(0x0F);


}

void mcp2515init(void){
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0

	uint8_t resetOP[1] = {0xC0};
 8000b9a:	23c0      	movs	r3, #192	@ 0xc0
 8000b9c:	703b      	strb	r3, [r7, #0]
	uint8_t status = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	71fb      	strb	r3, [r7, #7]
	SPI1_CS_HIGH();
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	2140      	movs	r1, #64	@ 0x40
 8000ba6:	4826      	ldr	r0, [pc, #152]	@ (8000c40 <mcp2515init+0xac>)
 8000ba8:	f000 ffac 	bl	8001b04 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000bac:	200a      	movs	r0, #10
 8000bae:	f000 fd07 	bl	80015c0 <HAL_Delay>

	mcp2515setTiming();
 8000bb2:	f7ff ffdf 	bl	8000b74 <mcp2515setTiming>

	//Transmission to reset device
	SPI1_CS_LOW();
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2140      	movs	r1, #64	@ 0x40
 8000bba:	4821      	ldr	r0, [pc, #132]	@ (8000c40 <mcp2515init+0xac>)
 8000bbc:	f000 ffa2 	bl	8001b04 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, resetOP, sizeof(resetOP), 100);
 8000bc0:	4639      	mov	r1, r7
 8000bc2:	2364      	movs	r3, #100	@ 0x64
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	481f      	ldr	r0, [pc, #124]	@ (8000c44 <mcp2515init+0xb0>)
 8000bc8:	f001 ff17 	bl	80029fa <HAL_SPI_Transmit>
	SPI1_CS_HIGH();
 8000bcc:	2201      	movs	r2, #1
 8000bce:	2140      	movs	r1, #64	@ 0x40
 8000bd0:	481b      	ldr	r0, [pc, #108]	@ (8000c40 <mcp2515init+0xac>)
 8000bd2:	f000 ff97 	bl	8001b04 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	f000 fcf2 	bl	80015c0 <HAL_Delay>
	//Set to configuration Mode
	mcp2515writeRegister(0x0F,0x80);
 8000bdc:	2180      	movs	r1, #128	@ 0x80
 8000bde:	200f      	movs	r0, #15
 8000be0:	f7ff ff6a 	bl	8000ab8 <mcp2515writeRegister>

	//Read back to confirm config mode
	uint8_t configResult = mcp2515readRegister(0x0E);
 8000be4:	200e      	movs	r0, #14
 8000be6:	f7ff ff8f 	bl	8000b08 <mcp2515readRegister>
 8000bea:	4603      	mov	r3, r0
 8000bec:	71bb      	strb	r3, [r7, #6]

	if (configResult != 0x80){
 8000bee:	79bb      	ldrb	r3, [r7, #6]
 8000bf0:	2b80      	cmp	r3, #128	@ 0x80
 8000bf2:	d001      	beq.n	8000bf8 <mcp2515init+0x64>
		Error_Handler();
 8000bf4:	f000 fa0c 	bl	8001010 <Error_Handler>

	}
	//Write into the receive 0 buffer to receive any message coming through
	mcp2515writeRegister(0x60, 0x60);
 8000bf8:	2160      	movs	r1, #96	@ 0x60
 8000bfa:	2060      	movs	r0, #96	@ 0x60
 8000bfc:	f7ff ff5c 	bl	8000ab8 <mcp2515writeRegister>

	uint8_t	buffer0ConfigResult = mcp2515readRegister(0x60);
 8000c00:	2060      	movs	r0, #96	@ 0x60
 8000c02:	f7ff ff81 	bl	8000b08 <mcp2515readRegister>
 8000c06:	4603      	mov	r3, r0
 8000c08:	717b      	strb	r3, [r7, #5]
//			Error_Handler();
//		}

	//Set register to accept any message

	HAL_Delay(10);
 8000c0a:	200a      	movs	r0, #10
 8000c0c:	f000 fcd8 	bl	80015c0 <HAL_Delay>
	//Write CAN status register into Normal Operation mode
	mcp2515writeRegister(0x0F,0x00);
 8000c10:	2100      	movs	r1, #0
 8000c12:	200f      	movs	r0, #15
 8000c14:	f7ff ff50 	bl	8000ab8 <mcp2515writeRegister>
	HAL_Delay(10);
 8000c18:	200a      	movs	r0, #10
 8000c1a:	f000 fcd1 	bl	80015c0 <HAL_Delay>

	//Read CAN status register to confirm normal operation mode
	uint8_t resultAfter = mcp2515readRegister(0x0E);
 8000c1e:	200e      	movs	r0, #14
 8000c20:	f7ff ff72 	bl	8000b08 <mcp2515readRegister>
 8000c24:	4603      	mov	r3, r0
 8000c26:	713b      	strb	r3, [r7, #4]

	if (resultAfter != 0x00){
 8000c28:	793b      	ldrb	r3, [r7, #4]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <mcp2515init+0x9e>
		Error_Handler();
 8000c2e:	f000 f9ef 	bl	8001010 <Error_Handler>
	}

	HAL_Delay (10);
 8000c32:	200a      	movs	r0, #10
 8000c34:	f000 fcc4 	bl	80015c0 <HAL_Delay>
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40020400 	.word	0x40020400
 8000c44:	200002fc 	.word	0x200002fc

08000c48 <mcp2515messageAvailable>:

void mcp2515messageAvailable(void){
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0

	GPIO_PinState status;
	GPIO_PinState status1;


	status = HAL_GPIO_ReadPin(CAN_INT_GPIO_Port, CAN_INT_Pin);
 8000c4e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c52:	4811      	ldr	r0, [pc, #68]	@ (8000c98 <mcp2515messageAvailable+0x50>)
 8000c54:	f000 ff3e 	bl	8001ad4 <HAL_GPIO_ReadPin>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	71fb      	strb	r3, [r7, #7]
	//Set the Interrupt flag from the RX0IF
	mcp2515writeRegister(0x2B, 0x01);
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	202b      	movs	r0, #43	@ 0x2b
 8000c60:	f7ff ff2a 	bl	8000ab8 <mcp2515writeRegister>



	//read the result from the Interrupt enable register at RX0IE
	uint8_t result = mcp2515readRegister(0x2B);
 8000c64:	202b      	movs	r0, #43	@ 0x2b
 8000c66:	f7ff ff4f 	bl	8000b08 <mcp2515readRegister>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71bb      	strb	r3, [r7, #6]
	result = mcp2515readRegister(0x0C);
 8000c6e:	200c      	movs	r0, #12
 8000c70:	f7ff ff4a 	bl	8000b08 <mcp2515readRegister>
 8000c74:	4603      	mov	r3, r0
 8000c76:	71bb      	strb	r3, [r7, #6]
	mcp2515writeRegister(0x2C, 0x01);
 8000c78:	2101      	movs	r1, #1
 8000c7a:	202c      	movs	r0, #44	@ 0x2c
 8000c7c:	f7ff ff1c 	bl	8000ab8 <mcp2515writeRegister>

	if (result != 0x01){
		//Error_Handler();
	}

	status1 = HAL_GPIO_ReadPin(CAN_INT_GPIO_Port, CAN_INT_Pin);
 8000c80:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c84:	4804      	ldr	r0, [pc, #16]	@ (8000c98 <mcp2515messageAvailable+0x50>)
 8000c86:	f000 ff25 	bl	8001ad4 <HAL_GPIO_ReadPin>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	717b      	strb	r3, [r7, #5]

}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40020000 	.word	0x40020000

08000c9c <mcp2515readMessage>:


void mcp2515readMessage(bool random, uint8_t fixedData){
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08c      	sub	sp, #48	@ 0x30
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	460a      	mov	r2, r1
 8000ca6:	71fb      	strb	r3, [r7, #7]
 8000ca8:	4613      	mov	r3, r2
 8000caa:	71bb      	strb	r3, [r7, #6]
	//Use this function to take the message and transform it into a readable CAN message packet to be read

	//Use the recevice function and return a random number in place of of it. Clears register as well

	//Sanity check for GPIO pin
	GPIO_PinState status = HAL_GPIO_ReadPin(CAN_INT_GPIO_Port, CAN_INT_Pin);
 8000cac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cb0:	4852      	ldr	r0, [pc, #328]	@ (8000dfc <mcp2515readMessage+0x160>)
 8000cb2:	f000 ff0f 	bl	8001ad4 <HAL_GPIO_ReadPin>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (status == GPIO_PIN_RESET){
 8000cbc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	f040 8091 	bne.w	8000de8 <mcp2515readMessage+0x14c>
		uint8_t readRXB0[1] = {0x90};
 8000cc6:	2390      	movs	r3, #144	@ 0x90
 8000cc8:	f887 3020 	strb.w	r3, [r7, #32]
		uint8_t RXB0Buffer[14] = {0};
 8000ccc:	2300      	movs	r3, #0
 8000cce:	613b      	str	r3, [r7, #16]
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	811a      	strh	r2, [r3, #8]
		uint16_t RXB0Data[1] = {0};
 8000cdc:	2300      	movs	r3, #0
 8000cde:	81bb      	strh	r3, [r7, #12]

		//Clear RXB0
		mcp2515writeRegister(0x2C, 0x00);
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	202c      	movs	r0, #44	@ 0x2c
 8000ce4:	f7ff fee8 	bl	8000ab8 <mcp2515writeRegister>

		SPI1_CS_LOW();
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2140      	movs	r1, #64	@ 0x40
 8000cec:	4844      	ldr	r0, [pc, #272]	@ (8000e00 <mcp2515readMessage+0x164>)
 8000cee:	f000 ff09 	bl	8001b04 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, readRXB0, 1, 100);
 8000cf2:	f107 0120 	add.w	r1, r7, #32
 8000cf6:	2364      	movs	r3, #100	@ 0x64
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	4842      	ldr	r0, [pc, #264]	@ (8000e04 <mcp2515readMessage+0x168>)
 8000cfc:	f001 fe7d 	bl	80029fa <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, RXB0Buffer, 14, 100);
 8000d00:	f107 0110 	add.w	r1, r7, #16
 8000d04:	2364      	movs	r3, #100	@ 0x64
 8000d06:	220e      	movs	r2, #14
 8000d08:	483e      	ldr	r0, [pc, #248]	@ (8000e04 <mcp2515readMessage+0x168>)
 8000d0a:	f001 ffba 	bl	8002c82 <HAL_SPI_Receive>
		SPI1_CS_HIGH();
 8000d0e:	2201      	movs	r2, #1
 8000d10:	2140      	movs	r1, #64	@ 0x40
 8000d12:	483b      	ldr	r0, [pc, #236]	@ (8000e00 <mcp2515readMessage+0x164>)
 8000d14:	f000 fef6 	bl	8001b04 <HAL_GPIO_WritePin>

		//Returns data of the message, can be random or fixed for testing
		if (random == true){
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d010      	beq.n	8000d40 <mcp2515readMessage+0xa4>
			RXB0Data[0] = rand() % (255);
 8000d1e:	f006 fa4b 	bl	80071b8 <rand>
 8000d22:	4602      	mov	r2, r0
 8000d24:	4b38      	ldr	r3, [pc, #224]	@ (8000e08 <mcp2515readMessage+0x16c>)
 8000d26:	fb83 1302 	smull	r1, r3, r3, r2
 8000d2a:	4413      	add	r3, r2
 8000d2c:	11d9      	asrs	r1, r3, #7
 8000d2e:	17d3      	asrs	r3, r2, #31
 8000d30:	1ac9      	subs	r1, r1, r3
 8000d32:	460b      	mov	r3, r1
 8000d34:	021b      	lsls	r3, r3, #8
 8000d36:	1a5b      	subs	r3, r3, r1
 8000d38:	1ad1      	subs	r1, r2, r3
 8000d3a:	b28b      	uxth	r3, r1
 8000d3c:	81bb      	strh	r3, [r7, #12]
 8000d3e:	e002      	b.n	8000d46 <mcp2515readMessage+0xaa>
		}
		else{

			RXB0Data[0] = fixedData;
 8000d40:	79bb      	ldrb	r3, [r7, #6]
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	81bb      	strh	r3, [r7, #12]
		}

		//uint16_t timestamp = Timestamp();
		counter += 1;
 8000d46:	4b31      	ldr	r3, [pc, #196]	@ (8000e0c <mcp2515readMessage+0x170>)
 8000d48:	881b      	ldrh	r3, [r3, #0]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	b29a      	uxth	r2, r3
 8000d4e:	4b2f      	ldr	r3, [pc, #188]	@ (8000e0c <mcp2515readMessage+0x170>)
 8000d50:	801a      	strh	r2, [r3, #0]


		//Create Pointer to the MessageCAN Struct
		MessageCAN *ptrToStruct;

		ptrToStruct = pvPortMalloc(sizeof(MessageCAN)); //Returns Object not address
 8000d52:	200c      	movs	r0, #12
 8000d54:	f006 f842 	bl	8006ddc <pvPortMalloc>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	60bb      	str	r3, [r7, #8]

		ptrToStruct->canID = 0x35;
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	2235      	movs	r2, #53	@ 0x35
 8000d60:	701a      	strb	r2, [r3, #0]
		ptrToStruct->data = RXB0Data[0];  //DOES NOT DECAY TO POINTER because of [0]
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	89ba      	ldrh	r2, [r7, #12]
 8000d66:	805a      	strh	r2, [r3, #2]
		ptrToStruct->timeStamp = counter;
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	4a28      	ldr	r2, [pc, #160]	@ (8000e0c <mcp2515readMessage+0x170>)
 8000d6c:	8812      	ldrh	r2, [r2, #0]
 8000d6e:	809a      	strh	r2, [r3, #4]
		ptrToStruct->sensorName = "Temp Sensor";
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	4a27      	ldr	r2, [pc, #156]	@ (8000e10 <mcp2515readMessage+0x174>)
 8000d74:	609a      	str	r2, [r3, #8]

		//Send to QUeue
		if (xQueueSend(MessageQueueHandle, &ptrToStruct, portMAX_DELAY) == pdPASS)
 8000d76:	4b27      	ldr	r3, [pc, #156]	@ (8000e14 <mcp2515readMessage+0x178>)
 8000d78:	6818      	ldr	r0, [r3, #0]
 8000d7a:	f107 0108 	add.w	r1, r7, #8
 8000d7e:	2300      	movs	r3, #0
 8000d80:	f04f 32ff 	mov.w	r2, #4294967295
 8000d84:	f003 fe6a 	bl	8004a5c <xQueueGenericSend>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d103      	bne.n	8000d96 <mcp2515readMessage+0xfa>
		{
			print("Message in Queue");
 8000d8e:	4822      	ldr	r0, [pc, #136]	@ (8000e18 <mcp2515readMessage+0x17c>)
 8000d90:	f7ff fe3c 	bl	8000a0c <print>
 8000d94:	e004      	b.n	8000da0 <mcp2515readMessage+0x104>
		}
		else{

			vPortFree(&ptrToStruct);
 8000d96:	f107 0308 	add.w	r3, r7, #8
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f006 f8ec 	bl	8006f78 <vPortFree>
		}

		uint32_t MsgInQueue = uxQueueSpacesAvailable(MessageQueueHandle);
 8000da0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e14 <mcp2515readMessage+0x178>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f004 f8db 	bl	8004f60 <uxQueueSpacesAvailable>
 8000daa:	62b8      	str	r0, [r7, #40]	@ 0x28

		char *ptr;
		ptr = pvPortMalloc(100 * sizeof(char));
 8000dac:	2064      	movs	r0, #100	@ 0x64
 8000dae:	f006 f815 	bl	8006ddc <pvPortMalloc>
 8000db2:	6278      	str	r0, [r7, #36]	@ 0x24
		sprintf(ptr, "Number of spaces in Queue: %u", MsgInQueue);
 8000db4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000db6:	4919      	ldr	r1, [pc, #100]	@ (8000e1c <mcp2515readMessage+0x180>)
 8000db8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000dba:	f006 fafd 	bl	80073b8 <siprintf>
		print(ptr);
 8000dbe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000dc0:	f7ff fe24 	bl	8000a0c <print>


		if (MsgInQueue == 0){
 8000dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d10a      	bne.n	8000de0 <mcp2515readMessage+0x144>

			print("Queue is Full");
 8000dca:	4815      	ldr	r0, [pc, #84]	@ (8000e20 <mcp2515readMessage+0x184>)
 8000dcc:	f7ff fe1e 	bl	8000a0c <print>
			xEventGroupSetBits(messageToRead, EVENT_BIT_3);
 8000dd0:	4b14      	ldr	r3, [pc, #80]	@ (8000e24 <mcp2515readMessage+0x188>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2108      	movs	r1, #8
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f003 fb8f 	bl	80044fa <xEventGroupSetBits>
			osThreadYield();
 8000ddc:	f003 fa42 	bl	8004264 <osThreadYield>
//		}
//		//Print confirmation to terminal
//		char buffer[10];
//		sprintf(buffer, "%d", msg->data);

		print("message received, data: 100");
 8000de0:	4811      	ldr	r0, [pc, #68]	@ (8000e28 <mcp2515readMessage+0x18c>)
 8000de2:	f7ff fe13 	bl	8000a0c <print>
	else{
		print("no message in buffer, should not happen error");
		Error_Handler();
	}

}
 8000de6:	e004      	b.n	8000df2 <mcp2515readMessage+0x156>
		print("no message in buffer, should not happen error");
 8000de8:	4810      	ldr	r0, [pc, #64]	@ (8000e2c <mcp2515readMessage+0x190>)
 8000dea:	f7ff fe0f 	bl	8000a0c <print>
		Error_Handler();
 8000dee:	f000 f90f 	bl	8001010 <Error_Handler>
}
 8000df2:	bf00      	nop
 8000df4:	3730      	adds	r7, #48	@ 0x30
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40020000 	.word	0x40020000
 8000e00:	40020400 	.word	0x40020400
 8000e04:	200002fc 	.word	0x200002fc
 8000e08:	80808081 	.word	0x80808081
 8000e0c:	200003ac 	.word	0x200003ac
 8000e10:	08008634 	.word	0x08008634
 8000e14:	20000608 	.word	0x20000608
 8000e18:	08008640 	.word	0x08008640
 8000e1c:	08008654 	.word	0x08008654
 8000e20:	08008674 	.word	0x08008674
 8000e24:	200003b0 	.word	0x200003b0
 8000e28:	08008684 	.word	0x08008684
 8000e2c:	080086a0 	.word	0x080086a0

08000e30 <sdCardMsgPost>:

void sdCardMsgPost(void){
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af02      	add	r7, sp, #8
	 */

	MessageCAN *ptrToRxMsg;
	char *ptr;

	print("In SD Msg post function");
 8000e36:	4818      	ldr	r0, [pc, #96]	@ (8000e98 <sdCardMsgPost+0x68>)
 8000e38:	f7ff fde8 	bl	8000a0c <print>

	while(1){

		if (xQueueReceive(MessageQueueHandle, &ptrToRxMsg, portMAX_DELAY) == pdPASS ){
 8000e3c:	4b17      	ldr	r3, [pc, #92]	@ (8000e9c <sdCardMsgPost+0x6c>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4639      	mov	r1, r7
 8000e42:	f04f 32ff 	mov.w	r2, #4294967295
 8000e46:	4618      	mov	r0, r3
 8000e48:	f003 ffa8 	bl	8004d9c <xQueueReceive>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d11c      	bne.n	8000e8c <sdCardMsgPost+0x5c>

			ptr = pvPortMalloc(100 * sizeof(char));
 8000e52:	2064      	movs	r0, #100	@ 0x64
 8000e54:	f005 ffc2 	bl	8006ddc <pvPortMalloc>
 8000e58:	6078      	str	r0, [r7, #4]
			sprintf (ptr, "Received Data: %u at Time: %u from %s", ptrToRxMsg->data, ptrToRxMsg->timeStamp, ptrToRxMsg->sensorName);
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	885b      	ldrh	r3, [r3, #2]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	889b      	ldrh	r3, [r3, #4]
 8000e64:	4619      	mov	r1, r3
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	9300      	str	r3, [sp, #0]
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	490c      	ldr	r1, [pc, #48]	@ (8000ea0 <sdCardMsgPost+0x70>)
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f006 faa1 	bl	80073b8 <siprintf>
			print(ptr);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff fdc8 	bl	8000a0c <print>
			vPortFree(ptr);
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f006 f87b 	bl	8006f78 <vPortFree>
			vPortFree(ptrToRxMsg);
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f006 f877 	bl	8006f78 <vPortFree>
		if (xQueueReceive(MessageQueueHandle, &ptrToRxMsg, portMAX_DELAY) == pdPASS ){
 8000e8a:	e7d7      	b.n	8000e3c <sdCardMsgPost+0xc>
		}
		else{
			break;
 8000e8c:	bf00      	nop
//			// Exit loop if no more messages are in the queue
//			break;
//		}
//
//	}
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	080086d0 	.word	0x080086d0
 8000e9c:	20000608 	.word	0x20000608
 8000ea0:	080086e8 	.word	0x080086e8

08000ea4 <HAL_GPIO_EXTI_Callback>:
	return;
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	80fb      	strh	r3, [r7, #6]


	UNUSED(GPIO_Pin);
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
	xEventGroupSetBitsFromISR(messageToRead, EVENT_BIT_1, &xHigherPriorityTaskWoken);
 8000eb2:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <HAL_GPIO_EXTI_Callback+0x28>)
 8000eb4:	6819      	ldr	r1, [r3, #0]
 8000eb6:	f107 030c 	add.w	r3, r7, #12
 8000eba:	2202      	movs	r2, #2
 8000ebc:	4804      	ldr	r0, [pc, #16]	@ (8000ed0 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000ebe:	f005 fd1b 	bl	80068f8 <xTimerPendFunctionCallFromISR>
}
 8000ec2:	bf00      	nop
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	200003b0 	.word	0x200003b0
 8000ed0:	08004613 	.word	0x08004613

08000ed4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    print("Idle Task");
 8000edc:	4804      	ldr	r0, [pc, #16]	@ (8000ef0 <StartDefaultTask+0x1c>)
 8000ede:	f7ff fd95 	bl	8000a0c <print>
    osDelay(500);
 8000ee2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ee6:	f003 f9cf 	bl	8004288 <osDelay>
    print("Idle Task");
 8000eea:	bf00      	nop
 8000eec:	e7f6      	b.n	8000edc <StartDefaultTask+0x8>
 8000eee:	bf00      	nop
 8000ef0:	08008710 	.word	0x08008710

08000ef4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af02      	add	r7, sp, #8
 8000efa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  //print("Task 2 Entered");
	  EventBits_t uxBits = xEventGroupWaitBits(messageToRead, EVENT_BIT_2, pdTRUE, pdTRUE, portMAX_DELAY);
 8000efc:	4b0e      	ldr	r3, [pc, #56]	@ (8000f38 <StartTask02+0x44>)
 8000efe:	6818      	ldr	r0, [r3, #0]
 8000f00:	f04f 33ff 	mov.w	r3, #4294967295
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	2301      	movs	r3, #1
 8000f08:	2201      	movs	r2, #1
 8000f0a:	2104      	movs	r1, #4
 8000f0c:	f003 f9ea 	bl	80042e4 <xEventGroupWaitBits>
 8000f10:	60f8      	str	r0, [r7, #12]
	  //if (ux)
	  print("Task Started");
 8000f12:	480a      	ldr	r0, [pc, #40]	@ (8000f3c <StartTask02+0x48>)
 8000f14:	f7ff fd7a 	bl	8000a0c <print>
      mcp2515readMessage(false, 100);
 8000f18:	2164      	movs	r1, #100	@ 0x64
 8000f1a:	2000      	movs	r0, #0
 8000f1c:	f7ff febe 	bl	8000c9c <mcp2515readMessage>
      EventBits_t currentBits = xEventGroupGetBits(messageToRead);  //DEBUG
 8000f20:	4b05      	ldr	r3, [pc, #20]	@ (8000f38 <StartTask02+0x44>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2100      	movs	r1, #0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f003 faae 	bl	8004488 <xEventGroupClearBits>
 8000f2c:	60b8      	str	r0, [r7, #8]
   	  osDelay(50);
 8000f2e:	2032      	movs	r0, #50	@ 0x32
 8000f30:	f003 f9aa 	bl	8004288 <osDelay>
  {
 8000f34:	bf00      	nop
 8000f36:	e7e1      	b.n	8000efc <StartTask02+0x8>
 8000f38:	200003b0 	.word	0x200003b0
 8000f3c:	0800871c 	.word	0x0800871c

08000f40 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af02      	add	r7, sp, #8
 8000f46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	 //print("Task 3 Entered");
	 EventBits_t uxBits = xEventGroupWaitBits(messageToRead, EVENT_BIT_3, pdTRUE, pdTRUE, portMAX_DELAY); //Or change to IF QueueFull == true then ELSE osYield();
 8000f48:	4b0d      	ldr	r3, [pc, #52]	@ (8000f80 <StartTask03+0x40>)
 8000f4a:	6818      	ldr	r0, [r3, #0]
 8000f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	2301      	movs	r3, #1
 8000f54:	2201      	movs	r2, #1
 8000f56:	2108      	movs	r1, #8
 8000f58:	f003 f9c4 	bl	80042e4 <xEventGroupWaitBits>
 8000f5c:	60f8      	str	r0, [r7, #12]
	 print("Task 3 Started");
 8000f5e:	4809      	ldr	r0, [pc, #36]	@ (8000f84 <StartTask03+0x44>)
 8000f60:	f7ff fd54 	bl	8000a0c <print>
	 sdCardMsgPost();
 8000f64:	f7ff ff64 	bl	8000e30 <sdCardMsgPost>
	 EventBits_t currentBits = xEventGroupGetBits(messageToRead);
 8000f68:	4b05      	ldr	r3, [pc, #20]	@ (8000f80 <StartTask03+0x40>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f003 fa8a 	bl	8004488 <xEventGroupClearBits>
 8000f74:	60b8      	str	r0, [r7, #8]
	 osDelay(50);
 8000f76:	2032      	movs	r0, #50	@ 0x32
 8000f78:	f003 f986 	bl	8004288 <osDelay>
  {
 8000f7c:	bf00      	nop
 8000f7e:	e7e3      	b.n	8000f48 <StartTask03+0x8>
 8000f80:	200003b0 	.word	0x200003b0
 8000f84:	0800872c 	.word	0x0800872c

08000f88 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af02      	add	r7, sp, #8
 8000f8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
	  EventBits_t uxBits = xEventGroupWaitBits(messageToRead, EVENT_BIT_1, pdTRUE, pdTRUE, portMAX_DELAY);
 8000f90:	4b14      	ldr	r3, [pc, #80]	@ (8000fe4 <StartTask04+0x5c>)
 8000f92:	6818      	ldr	r0, [r3, #0]
 8000f94:	f04f 33ff 	mov.w	r3, #4294967295
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2102      	movs	r1, #2
 8000fa0:	f003 f9a0 	bl	80042e4 <xEventGroupWaitBits>
 8000fa4:	60f8      	str	r0, [r7, #12]
	  print("Task 4 started");
 8000fa6:	4810      	ldr	r0, [pc, #64]	@ (8000fe8 <StartTask04+0x60>)
 8000fa8:	f7ff fd30 	bl	8000a0c <print>
	  mcp2515messageAvailable();
 8000fac:	f7ff fe4c 	bl	8000c48 <mcp2515messageAvailable>
	  EventBits_t currentBits = xEventGroupGetBits(messageToRead);
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe4 <StartTask04+0x5c>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f003 fa66 	bl	8004488 <xEventGroupClearBits>
 8000fbc:	60b8      	str	r0, [r7, #8]
	  uxBits = xEventGroupSetBits(messageToRead, EVENT_BIT_2);
 8000fbe:	4b09      	ldr	r3, [pc, #36]	@ (8000fe4 <StartTask04+0x5c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2104      	movs	r1, #4
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f003 fa98 	bl	80044fa <xEventGroupSetBits>
 8000fca:	60f8      	str	r0, [r7, #12]
	  currentBits = xEventGroupGetBits(messageToRead);
 8000fcc:	4b05      	ldr	r3, [pc, #20]	@ (8000fe4 <StartTask04+0x5c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f003 fa58 	bl	8004488 <xEventGroupClearBits>
 8000fd8:	60b8      	str	r0, [r7, #8]
	  osDelay(50);
 8000fda:	2032      	movs	r0, #50	@ 0x32
 8000fdc:	f003 f954 	bl	8004288 <osDelay>
  {
 8000fe0:	bf00      	nop
 8000fe2:	e7d5      	b.n	8000f90 <StartTask04+0x8>
 8000fe4:	200003b0 	.word	0x200003b0
 8000fe8:	0800873c 	.word	0x0800873c

08000fec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a04      	ldr	r2, [pc, #16]	@ (800100c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d101      	bne.n	8001002 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ffe:	f000 fabf 	bl	8001580 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40010000 	.word	0x40010000

08001010 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001014:	b672      	cpsid	i
}
 8001016:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001018:	bf00      	nop
 800101a:	e7fd      	b.n	8001018 <Error_Handler+0x8>

0800101c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	4b12      	ldr	r3, [pc, #72]	@ (8001070 <HAL_MspInit+0x54>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800102a:	4a11      	ldr	r2, [pc, #68]	@ (8001070 <HAL_MspInit+0x54>)
 800102c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001030:	6453      	str	r3, [r2, #68]	@ 0x44
 8001032:	4b0f      	ldr	r3, [pc, #60]	@ (8001070 <HAL_MspInit+0x54>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001036:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	603b      	str	r3, [r7, #0]
 8001042:	4b0b      	ldr	r3, [pc, #44]	@ (8001070 <HAL_MspInit+0x54>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001046:	4a0a      	ldr	r2, [pc, #40]	@ (8001070 <HAL_MspInit+0x54>)
 8001048:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800104c:	6413      	str	r3, [r2, #64]	@ 0x40
 800104e:	4b08      	ldr	r3, [pc, #32]	@ (8001070 <HAL_MspInit+0x54>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001052:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001056:	603b      	str	r3, [r7, #0]
 8001058:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800105a:	2200      	movs	r2, #0
 800105c:	210f      	movs	r1, #15
 800105e:	f06f 0001 	mvn.w	r0, #1
 8001062:	f000 fb89 	bl	8001778 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40023800 	.word	0x40023800

08001074 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800107c:	f107 0308 	add.w	r3, r7, #8
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
 800108c:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a0c      	ldr	r2, [pc, #48]	@ (80010c4 <HAL_RTC_MspInit+0x50>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d111      	bne.n	80010bc <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001098:	2302      	movs	r3, #2
 800109a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800109c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010a0:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010a2:	f107 0308 	add.w	r3, r7, #8
 80010a6:	4618      	mov	r0, r3
 80010a8:	f001 fa28 	bl	80024fc <HAL_RCCEx_PeriphCLKConfig>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80010b2:	f7ff ffad 	bl	8001010 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80010b6:	4b04      	ldr	r3, [pc, #16]	@ (80010c8 <HAL_RTC_MspInit+0x54>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80010bc:	bf00      	nop
 80010be:	3720      	adds	r7, #32
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40002800 	.word	0x40002800
 80010c8:	42470e3c 	.word	0x42470e3c

080010cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	@ 0x28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a19      	ldr	r2, [pc, #100]	@ (8001150 <HAL_SPI_MspInit+0x84>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d12b      	bne.n	8001146 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	613b      	str	r3, [r7, #16]
 80010f2:	4b18      	ldr	r3, [pc, #96]	@ (8001154 <HAL_SPI_MspInit+0x88>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010f6:	4a17      	ldr	r2, [pc, #92]	@ (8001154 <HAL_SPI_MspInit+0x88>)
 80010f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80010fe:	4b15      	ldr	r3, [pc, #84]	@ (8001154 <HAL_SPI_MspInit+0x88>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001102:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	4b11      	ldr	r3, [pc, #68]	@ (8001154 <HAL_SPI_MspInit+0x88>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	4a10      	ldr	r2, [pc, #64]	@ (8001154 <HAL_SPI_MspInit+0x88>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	6313      	str	r3, [r2, #48]	@ 0x30
 800111a:	4b0e      	ldr	r3, [pc, #56]	@ (8001154 <HAL_SPI_MspInit+0x88>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001126:	23e0      	movs	r3, #224	@ 0xe0
 8001128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112a:	2302      	movs	r3, #2
 800112c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001132:	2303      	movs	r3, #3
 8001134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001136:	2305      	movs	r3, #5
 8001138:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	4619      	mov	r1, r3
 8001140:	4805      	ldr	r0, [pc, #20]	@ (8001158 <HAL_SPI_MspInit+0x8c>)
 8001142:	f000 fb43 	bl	80017cc <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001146:	bf00      	nop
 8001148:	3728      	adds	r7, #40	@ 0x28
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40013000 	.word	0x40013000
 8001154:	40023800 	.word	0x40023800
 8001158:	40020000 	.word	0x40020000

0800115c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08a      	sub	sp, #40	@ 0x28
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a19      	ldr	r2, [pc, #100]	@ (80011e0 <HAL_UART_MspInit+0x84>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d12b      	bne.n	80011d6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
 8001182:	4b18      	ldr	r3, [pc, #96]	@ (80011e4 <HAL_UART_MspInit+0x88>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001186:	4a17      	ldr	r2, [pc, #92]	@ (80011e4 <HAL_UART_MspInit+0x88>)
 8001188:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800118c:	6413      	str	r3, [r2, #64]	@ 0x40
 800118e:	4b15      	ldr	r3, [pc, #84]	@ (80011e4 <HAL_UART_MspInit+0x88>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	4b11      	ldr	r3, [pc, #68]	@ (80011e4 <HAL_UART_MspInit+0x88>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	4a10      	ldr	r2, [pc, #64]	@ (80011e4 <HAL_UART_MspInit+0x88>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011aa:	4b0e      	ldr	r3, [pc, #56]	@ (80011e4 <HAL_UART_MspInit+0x88>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011b6:	230c      	movs	r3, #12
 80011b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ba:	2302      	movs	r3, #2
 80011bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c2:	2303      	movs	r3, #3
 80011c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011c6:	2307      	movs	r3, #7
 80011c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ca:	f107 0314 	add.w	r3, r7, #20
 80011ce:	4619      	mov	r1, r3
 80011d0:	4805      	ldr	r0, [pc, #20]	@ (80011e8 <HAL_UART_MspInit+0x8c>)
 80011d2:	f000 fafb 	bl	80017cc <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80011d6:	bf00      	nop
 80011d8:	3728      	adds	r7, #40	@ 0x28
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40004400 	.word	0x40004400
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40020000 	.word	0x40020000

080011ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08c      	sub	sp, #48	@ 0x30
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80011f4:	2300      	movs	r3, #0
 80011f6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80011f8:	2300      	movs	r3, #0
 80011fa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80011fc:	2300      	movs	r3, #0
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	4b2e      	ldr	r3, [pc, #184]	@ (80012bc <HAL_InitTick+0xd0>)
 8001202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001204:	4a2d      	ldr	r2, [pc, #180]	@ (80012bc <HAL_InitTick+0xd0>)
 8001206:	f043 0301 	orr.w	r3, r3, #1
 800120a:	6453      	str	r3, [r2, #68]	@ 0x44
 800120c:	4b2b      	ldr	r3, [pc, #172]	@ (80012bc <HAL_InitTick+0xd0>)
 800120e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001218:	f107 020c 	add.w	r2, r7, #12
 800121c:	f107 0310 	add.w	r3, r7, #16
 8001220:	4611      	mov	r1, r2
 8001222:	4618      	mov	r0, r3
 8001224:	f001 f938 	bl	8002498 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001228:	f001 f922 	bl	8002470 <HAL_RCC_GetPCLK2Freq>
 800122c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800122e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001230:	4a23      	ldr	r2, [pc, #140]	@ (80012c0 <HAL_InitTick+0xd4>)
 8001232:	fba2 2303 	umull	r2, r3, r2, r3
 8001236:	0c9b      	lsrs	r3, r3, #18
 8001238:	3b01      	subs	r3, #1
 800123a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800123c:	4b21      	ldr	r3, [pc, #132]	@ (80012c4 <HAL_InitTick+0xd8>)
 800123e:	4a22      	ldr	r2, [pc, #136]	@ (80012c8 <HAL_InitTick+0xdc>)
 8001240:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001242:	4b20      	ldr	r3, [pc, #128]	@ (80012c4 <HAL_InitTick+0xd8>)
 8001244:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001248:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800124a:	4a1e      	ldr	r2, [pc, #120]	@ (80012c4 <HAL_InitTick+0xd8>)
 800124c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800124e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001250:	4b1c      	ldr	r3, [pc, #112]	@ (80012c4 <HAL_InitTick+0xd8>)
 8001252:	2200      	movs	r2, #0
 8001254:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001256:	4b1b      	ldr	r3, [pc, #108]	@ (80012c4 <HAL_InitTick+0xd8>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800125c:	4b19      	ldr	r3, [pc, #100]	@ (80012c4 <HAL_InitTick+0xd8>)
 800125e:	2200      	movs	r2, #0
 8001260:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001262:	4818      	ldr	r0, [pc, #96]	@ (80012c4 <HAL_InitTick+0xd8>)
 8001264:	f002 f912 	bl	800348c <HAL_TIM_Base_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800126e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001272:	2b00      	cmp	r3, #0
 8001274:	d11b      	bne.n	80012ae <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001276:	4813      	ldr	r0, [pc, #76]	@ (80012c4 <HAL_InitTick+0xd8>)
 8001278:	f002 f962 	bl	8003540 <HAL_TIM_Base_Start_IT>
 800127c:	4603      	mov	r3, r0
 800127e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001282:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001286:	2b00      	cmp	r3, #0
 8001288:	d111      	bne.n	80012ae <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800128a:	2019      	movs	r0, #25
 800128c:	f000 fa90 	bl	80017b0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b0f      	cmp	r3, #15
 8001294:	d808      	bhi.n	80012a8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001296:	2200      	movs	r2, #0
 8001298:	6879      	ldr	r1, [r7, #4]
 800129a:	2019      	movs	r0, #25
 800129c:	f000 fa6c 	bl	8001778 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012a0:	4a0a      	ldr	r2, [pc, #40]	@ (80012cc <HAL_InitTick+0xe0>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	e002      	b.n	80012ae <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80012ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3730      	adds	r7, #48	@ 0x30
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800
 80012c0:	431bde83 	.word	0x431bde83
 80012c4:	2000060c 	.word	0x2000060c
 80012c8:	40010000 	.word	0x40010000
 80012cc:	20000004 	.word	0x20000004

080012d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012d4:	bf00      	nop
 80012d6:	e7fd      	b.n	80012d4 <NMI_Handler+0x4>

080012d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	print("Hard Fault");
 80012dc:	4802      	ldr	r0, [pc, #8]	@ (80012e8 <HardFault_Handler+0x10>)
 80012de:	f7ff fb95 	bl	8000a0c <print>

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012e2:	bf00      	nop
 80012e4:	e7fd      	b.n	80012e2 <HardFault_Handler+0xa>
 80012e6:	bf00      	nop
 80012e8:	0800874c 	.word	0x0800874c

080012ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <MemManage_Handler+0x4>

080012f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012f8:	bf00      	nop
 80012fa:	e7fd      	b.n	80012f8 <BusFault_Handler+0x4>

080012fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <UsageFault_Handler+0x4>

08001304 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
	...

08001314 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001318:	4802      	ldr	r0, [pc, #8]	@ (8001324 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800131a:	f002 f973 	bl	8003604 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	2000060c 	.word	0x2000060c

08001328 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Btn_Int_Pin);
 800132c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001330:	f000 fc02 	bl	8001b38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}

08001338 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return 1;
 800133c:	2301      	movs	r3, #1
}
 800133e:	4618      	mov	r0, r3
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <_kill>:

int _kill(int pid, int sig)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001352:	f006 f8e3 	bl	800751c <__errno>
 8001356:	4603      	mov	r3, r0
 8001358:	2216      	movs	r2, #22
 800135a:	601a      	str	r2, [r3, #0]
  return -1;
 800135c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001360:	4618      	mov	r0, r3
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <_exit>:

void _exit (int status)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001370:	f04f 31ff 	mov.w	r1, #4294967295
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff ffe7 	bl	8001348 <_kill>
  while (1) {}    /* Make sure we hang here */
 800137a:	bf00      	nop
 800137c:	e7fd      	b.n	800137a <_exit+0x12>

0800137e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b086      	sub	sp, #24
 8001382:	af00      	add	r7, sp, #0
 8001384:	60f8      	str	r0, [r7, #12]
 8001386:	60b9      	str	r1, [r7, #8]
 8001388:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	e00a      	b.n	80013a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001390:	f3af 8000 	nop.w
 8001394:	4601      	mov	r1, r0
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	1c5a      	adds	r2, r3, #1
 800139a:	60ba      	str	r2, [r7, #8]
 800139c:	b2ca      	uxtb	r2, r1
 800139e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	3301      	adds	r3, #1
 80013a4:	617b      	str	r3, [r7, #20]
 80013a6:	697a      	ldr	r2, [r7, #20]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	dbf0      	blt.n	8001390 <_read+0x12>
  }

  return len;
 80013ae:	687b      	ldr	r3, [r7, #4]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3718      	adds	r7, #24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	e009      	b.n	80013de <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	1c5a      	adds	r2, r3, #1
 80013ce:	60ba      	str	r2, [r7, #8]
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	3301      	adds	r3, #1
 80013dc:	617b      	str	r3, [r7, #20]
 80013de:	697a      	ldr	r2, [r7, #20]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	dbf1      	blt.n	80013ca <_write+0x12>
  }
  return len;
 80013e6:	687b      	ldr	r3, [r7, #4]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <_close>:

int _close(int file)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001418:	605a      	str	r2, [r3, #4]
  return 0;
 800141a:	2300      	movs	r3, #0
}
 800141c:	4618      	mov	r0, r3
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <_isatty>:

int _isatty(int file)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001430:	2301      	movs	r3, #1
}
 8001432:	4618      	mov	r0, r3
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800143e:	b480      	push	{r7}
 8001440:	b085      	sub	sp, #20
 8001442:	af00      	add	r7, sp, #0
 8001444:	60f8      	str	r0, [r7, #12]
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001460:	4a14      	ldr	r2, [pc, #80]	@ (80014b4 <_sbrk+0x5c>)
 8001462:	4b15      	ldr	r3, [pc, #84]	@ (80014b8 <_sbrk+0x60>)
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800146c:	4b13      	ldr	r3, [pc, #76]	@ (80014bc <_sbrk+0x64>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d102      	bne.n	800147a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001474:	4b11      	ldr	r3, [pc, #68]	@ (80014bc <_sbrk+0x64>)
 8001476:	4a12      	ldr	r2, [pc, #72]	@ (80014c0 <_sbrk+0x68>)
 8001478:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800147a:	4b10      	ldr	r3, [pc, #64]	@ (80014bc <_sbrk+0x64>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4413      	add	r3, r2
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	429a      	cmp	r2, r3
 8001486:	d207      	bcs.n	8001498 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001488:	f006 f848 	bl	800751c <__errno>
 800148c:	4603      	mov	r3, r0
 800148e:	220c      	movs	r2, #12
 8001490:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001492:	f04f 33ff 	mov.w	r3, #4294967295
 8001496:	e009      	b.n	80014ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001498:	4b08      	ldr	r3, [pc, #32]	@ (80014bc <_sbrk+0x64>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800149e:	4b07      	ldr	r3, [pc, #28]	@ (80014bc <_sbrk+0x64>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	4a05      	ldr	r2, [pc, #20]	@ (80014bc <_sbrk+0x64>)
 80014a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014aa:	68fb      	ldr	r3, [r7, #12]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3718      	adds	r7, #24
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20020000 	.word	0x20020000
 80014b8:	00000400 	.word	0x00000400
 80014bc:	20000654 	.word	0x20000654
 80014c0:	20004660 	.word	0x20004660

080014c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014c8:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <SystemInit+0x20>)
 80014ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014ce:	4a05      	ldr	r2, [pc, #20]	@ (80014e4 <SystemInit+0x20>)
 80014d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001520 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014ec:	f7ff ffea 	bl	80014c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014f0:	480c      	ldr	r0, [pc, #48]	@ (8001524 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014f2:	490d      	ldr	r1, [pc, #52]	@ (8001528 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014f4:	4a0d      	ldr	r2, [pc, #52]	@ (800152c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f8:	e002      	b.n	8001500 <LoopCopyDataInit>

080014fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014fe:	3304      	adds	r3, #4

08001500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001504:	d3f9      	bcc.n	80014fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001506:	4a0a      	ldr	r2, [pc, #40]	@ (8001530 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001508:	4c0a      	ldr	r4, [pc, #40]	@ (8001534 <LoopFillZerobss+0x22>)
  movs r3, #0
 800150a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800150c:	e001      	b.n	8001512 <LoopFillZerobss>

0800150e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800150e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001510:	3204      	adds	r2, #4

08001512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001514:	d3fb      	bcc.n	800150e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001516:	f006 f807 	bl	8007528 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800151a:	f7ff f865 	bl	80005e8 <main>
  bx  lr    
 800151e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001520:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001528:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800152c:	08008878 	.word	0x08008878
  ldr r2, =_sbss
 8001530:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001534:	20004660 	.word	0x20004660

08001538 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001538:	e7fe      	b.n	8001538 <ADC_IRQHandler>
	...

0800153c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001540:	4b0e      	ldr	r3, [pc, #56]	@ (800157c <HAL_Init+0x40>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a0d      	ldr	r2, [pc, #52]	@ (800157c <HAL_Init+0x40>)
 8001546:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800154a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800154c:	4b0b      	ldr	r3, [pc, #44]	@ (800157c <HAL_Init+0x40>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a0a      	ldr	r2, [pc, #40]	@ (800157c <HAL_Init+0x40>)
 8001552:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001556:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001558:	4b08      	ldr	r3, [pc, #32]	@ (800157c <HAL_Init+0x40>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a07      	ldr	r2, [pc, #28]	@ (800157c <HAL_Init+0x40>)
 800155e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001562:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001564:	2003      	movs	r0, #3
 8001566:	f000 f8fc 	bl	8001762 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800156a:	200f      	movs	r0, #15
 800156c:	f7ff fe3e 	bl	80011ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001570:	f7ff fd54 	bl	800101c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40023c00 	.word	0x40023c00

08001580 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001584:	4b06      	ldr	r3, [pc, #24]	@ (80015a0 <HAL_IncTick+0x20>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	461a      	mov	r2, r3
 800158a:	4b06      	ldr	r3, [pc, #24]	@ (80015a4 <HAL_IncTick+0x24>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4413      	add	r3, r2
 8001590:	4a04      	ldr	r2, [pc, #16]	@ (80015a4 <HAL_IncTick+0x24>)
 8001592:	6013      	str	r3, [r2, #0]
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	20000008 	.word	0x20000008
 80015a4:	20000658 	.word	0x20000658

080015a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  return uwTick;
 80015ac:	4b03      	ldr	r3, [pc, #12]	@ (80015bc <HAL_GetTick+0x14>)
 80015ae:	681b      	ldr	r3, [r3, #0]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	20000658 	.word	0x20000658

080015c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015c8:	f7ff ffee 	bl	80015a8 <HAL_GetTick>
 80015cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d8:	d005      	beq.n	80015e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015da:	4b0a      	ldr	r3, [pc, #40]	@ (8001604 <HAL_Delay+0x44>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	461a      	mov	r2, r3
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4413      	add	r3, r2
 80015e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015e6:	bf00      	nop
 80015e8:	f7ff ffde 	bl	80015a8 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d8f7      	bhi.n	80015e8 <HAL_Delay+0x28>
  {
  }
}
 80015f8:	bf00      	nop
 80015fa:	bf00      	nop
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000008 	.word	0x20000008

08001608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001618:	4b0c      	ldr	r3, [pc, #48]	@ (800164c <__NVIC_SetPriorityGrouping+0x44>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001624:	4013      	ands	r3, r2
 8001626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001630:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001634:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800163a:	4a04      	ldr	r2, [pc, #16]	@ (800164c <__NVIC_SetPriorityGrouping+0x44>)
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	60d3      	str	r3, [r2, #12]
}
 8001640:	bf00      	nop
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001654:	4b04      	ldr	r3, [pc, #16]	@ (8001668 <__NVIC_GetPriorityGrouping+0x18>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	0a1b      	lsrs	r3, r3, #8
 800165a:	f003 0307 	and.w	r3, r3, #7
}
 800165e:	4618      	mov	r0, r3
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167a:	2b00      	cmp	r3, #0
 800167c:	db0b      	blt.n	8001696 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	f003 021f 	and.w	r2, r3, #31
 8001684:	4907      	ldr	r1, [pc, #28]	@ (80016a4 <__NVIC_EnableIRQ+0x38>)
 8001686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168a:	095b      	lsrs	r3, r3, #5
 800168c:	2001      	movs	r0, #1
 800168e:	fa00 f202 	lsl.w	r2, r0, r2
 8001692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e000e100 	.word	0xe000e100

080016a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	6039      	str	r1, [r7, #0]
 80016b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	db0a      	blt.n	80016d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	490c      	ldr	r1, [pc, #48]	@ (80016f4 <__NVIC_SetPriority+0x4c>)
 80016c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c6:	0112      	lsls	r2, r2, #4
 80016c8:	b2d2      	uxtb	r2, r2
 80016ca:	440b      	add	r3, r1
 80016cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016d0:	e00a      	b.n	80016e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	4908      	ldr	r1, [pc, #32]	@ (80016f8 <__NVIC_SetPriority+0x50>)
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	f003 030f 	and.w	r3, r3, #15
 80016de:	3b04      	subs	r3, #4
 80016e0:	0112      	lsls	r2, r2, #4
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	440b      	add	r3, r1
 80016e6:	761a      	strb	r2, [r3, #24]
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	e000e100 	.word	0xe000e100
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b089      	sub	sp, #36	@ 0x24
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f1c3 0307 	rsb	r3, r3, #7
 8001716:	2b04      	cmp	r3, #4
 8001718:	bf28      	it	cs
 800171a:	2304      	movcs	r3, #4
 800171c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	3304      	adds	r3, #4
 8001722:	2b06      	cmp	r3, #6
 8001724:	d902      	bls.n	800172c <NVIC_EncodePriority+0x30>
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	3b03      	subs	r3, #3
 800172a:	e000      	b.n	800172e <NVIC_EncodePriority+0x32>
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001730:	f04f 32ff 	mov.w	r2, #4294967295
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43da      	mvns	r2, r3
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	401a      	ands	r2, r3
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001744:	f04f 31ff 	mov.w	r1, #4294967295
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	fa01 f303 	lsl.w	r3, r1, r3
 800174e:	43d9      	mvns	r1, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001754:	4313      	orrs	r3, r2
         );
}
 8001756:	4618      	mov	r0, r3
 8001758:	3724      	adds	r7, #36	@ 0x24
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff ff4c 	bl	8001608 <__NVIC_SetPriorityGrouping>
}
 8001770:	bf00      	nop
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
 8001784:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800178a:	f7ff ff61 	bl	8001650 <__NVIC_GetPriorityGrouping>
 800178e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	68b9      	ldr	r1, [r7, #8]
 8001794:	6978      	ldr	r0, [r7, #20]
 8001796:	f7ff ffb1 	bl	80016fc <NVIC_EncodePriority>
 800179a:	4602      	mov	r2, r0
 800179c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a0:	4611      	mov	r1, r2
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff ff80 	bl	80016a8 <__NVIC_SetPriority>
}
 80017a8:	bf00      	nop
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff ff54 	bl	800166c <__NVIC_EnableIRQ>
}
 80017c4:	bf00      	nop
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b089      	sub	sp, #36	@ 0x24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017d6:	2300      	movs	r3, #0
 80017d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017da:	2300      	movs	r3, #0
 80017dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017de:	2300      	movs	r3, #0
 80017e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017e2:	2300      	movs	r3, #0
 80017e4:	61fb      	str	r3, [r7, #28]
 80017e6:	e159      	b.n	8001a9c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017e8:	2201      	movs	r2, #1
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	4013      	ands	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	429a      	cmp	r2, r3
 8001802:	f040 8148 	bne.w	8001a96 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f003 0303 	and.w	r3, r3, #3
 800180e:	2b01      	cmp	r3, #1
 8001810:	d005      	beq.n	800181e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800181a:	2b02      	cmp	r3, #2
 800181c:	d130      	bne.n	8001880 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	2203      	movs	r2, #3
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43db      	mvns	r3, r3
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	4013      	ands	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	68da      	ldr	r2, [r3, #12]
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4313      	orrs	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001854:	2201      	movs	r2, #1
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	43db      	mvns	r3, r3
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	091b      	lsrs	r3, r3, #4
 800186a:	f003 0201 	and.w	r2, r3, #1
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4313      	orrs	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 0303 	and.w	r3, r3, #3
 8001888:	2b03      	cmp	r3, #3
 800188a:	d017      	beq.n	80018bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	2203      	movs	r2, #3
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 0303 	and.w	r3, r3, #3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d123      	bne.n	8001910 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	08da      	lsrs	r2, r3, #3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3208      	adds	r2, #8
 80018d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	f003 0307 	and.w	r3, r3, #7
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	220f      	movs	r2, #15
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4013      	ands	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	691a      	ldr	r2, [r3, #16]
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4313      	orrs	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	08da      	lsrs	r2, r3, #3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	3208      	adds	r2, #8
 800190a:	69b9      	ldr	r1, [r7, #24]
 800190c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	2203      	movs	r2, #3
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4013      	ands	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 0203 	and.w	r2, r3, #3
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	4313      	orrs	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800194c:	2b00      	cmp	r3, #0
 800194e:	f000 80a2 	beq.w	8001a96 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	4b57      	ldr	r3, [pc, #348]	@ (8001ab4 <HAL_GPIO_Init+0x2e8>)
 8001958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800195a:	4a56      	ldr	r2, [pc, #344]	@ (8001ab4 <HAL_GPIO_Init+0x2e8>)
 800195c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001960:	6453      	str	r3, [r2, #68]	@ 0x44
 8001962:	4b54      	ldr	r3, [pc, #336]	@ (8001ab4 <HAL_GPIO_Init+0x2e8>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001966:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800196e:	4a52      	ldr	r2, [pc, #328]	@ (8001ab8 <HAL_GPIO_Init+0x2ec>)
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	089b      	lsrs	r3, r3, #2
 8001974:	3302      	adds	r3, #2
 8001976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800197a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f003 0303 	and.w	r3, r3, #3
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	220f      	movs	r2, #15
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	43db      	mvns	r3, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4013      	ands	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a49      	ldr	r2, [pc, #292]	@ (8001abc <HAL_GPIO_Init+0x2f0>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d019      	beq.n	80019ce <HAL_GPIO_Init+0x202>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a48      	ldr	r2, [pc, #288]	@ (8001ac0 <HAL_GPIO_Init+0x2f4>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d013      	beq.n	80019ca <HAL_GPIO_Init+0x1fe>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a47      	ldr	r2, [pc, #284]	@ (8001ac4 <HAL_GPIO_Init+0x2f8>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d00d      	beq.n	80019c6 <HAL_GPIO_Init+0x1fa>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a46      	ldr	r2, [pc, #280]	@ (8001ac8 <HAL_GPIO_Init+0x2fc>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d007      	beq.n	80019c2 <HAL_GPIO_Init+0x1f6>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a45      	ldr	r2, [pc, #276]	@ (8001acc <HAL_GPIO_Init+0x300>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d101      	bne.n	80019be <HAL_GPIO_Init+0x1f2>
 80019ba:	2304      	movs	r3, #4
 80019bc:	e008      	b.n	80019d0 <HAL_GPIO_Init+0x204>
 80019be:	2307      	movs	r3, #7
 80019c0:	e006      	b.n	80019d0 <HAL_GPIO_Init+0x204>
 80019c2:	2303      	movs	r3, #3
 80019c4:	e004      	b.n	80019d0 <HAL_GPIO_Init+0x204>
 80019c6:	2302      	movs	r3, #2
 80019c8:	e002      	b.n	80019d0 <HAL_GPIO_Init+0x204>
 80019ca:	2301      	movs	r3, #1
 80019cc:	e000      	b.n	80019d0 <HAL_GPIO_Init+0x204>
 80019ce:	2300      	movs	r3, #0
 80019d0:	69fa      	ldr	r2, [r7, #28]
 80019d2:	f002 0203 	and.w	r2, r2, #3
 80019d6:	0092      	lsls	r2, r2, #2
 80019d8:	4093      	lsls	r3, r2
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4313      	orrs	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019e0:	4935      	ldr	r1, [pc, #212]	@ (8001ab8 <HAL_GPIO_Init+0x2ec>)
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	089b      	lsrs	r3, r3, #2
 80019e6:	3302      	adds	r3, #2
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019ee:	4b38      	ldr	r3, [pc, #224]	@ (8001ad0 <HAL_GPIO_Init+0x304>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	43db      	mvns	r3, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4013      	ands	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a12:	4a2f      	ldr	r2, [pc, #188]	@ (8001ad0 <HAL_GPIO_Init+0x304>)
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a18:	4b2d      	ldr	r3, [pc, #180]	@ (8001ad0 <HAL_GPIO_Init+0x304>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	43db      	mvns	r3, r3
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4013      	ands	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d003      	beq.n	8001a3c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a3c:	4a24      	ldr	r2, [pc, #144]	@ (8001ad0 <HAL_GPIO_Init+0x304>)
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a42:	4b23      	ldr	r3, [pc, #140]	@ (8001ad0 <HAL_GPIO_Init+0x304>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a66:	4a1a      	ldr	r2, [pc, #104]	@ (8001ad0 <HAL_GPIO_Init+0x304>)
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a6c:	4b18      	ldr	r3, [pc, #96]	@ (8001ad0 <HAL_GPIO_Init+0x304>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	43db      	mvns	r3, r3
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d003      	beq.n	8001a90 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a90:	4a0f      	ldr	r2, [pc, #60]	@ (8001ad0 <HAL_GPIO_Init+0x304>)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	61fb      	str	r3, [r7, #28]
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	2b0f      	cmp	r3, #15
 8001aa0:	f67f aea2 	bls.w	80017e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001aa4:	bf00      	nop
 8001aa6:	bf00      	nop
 8001aa8:	3724      	adds	r7, #36	@ 0x24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	40013800 	.word	0x40013800
 8001abc:	40020000 	.word	0x40020000
 8001ac0:	40020400 	.word	0x40020400
 8001ac4:	40020800 	.word	0x40020800
 8001ac8:	40020c00 	.word	0x40020c00
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40013c00 	.word	0x40013c00

08001ad4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	460b      	mov	r3, r1
 8001ade:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	691a      	ldr	r2, [r3, #16]
 8001ae4:	887b      	ldrh	r3, [r7, #2]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d002      	beq.n	8001af2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001aec:	2301      	movs	r3, #1
 8001aee:	73fb      	strb	r3, [r7, #15]
 8001af0:	e001      	b.n	8001af6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001af2:	2300      	movs	r3, #0
 8001af4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	807b      	strh	r3, [r7, #2]
 8001b10:	4613      	mov	r3, r2
 8001b12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b14:	787b      	ldrb	r3, [r7, #1]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b1a:	887a      	ldrh	r2, [r7, #2]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b20:	e003      	b.n	8001b2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b22:	887b      	ldrh	r3, [r7, #2]
 8001b24:	041a      	lsls	r2, r3, #16
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	619a      	str	r2, [r3, #24]
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
	...

08001b38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001b42:	4b08      	ldr	r3, [pc, #32]	@ (8001b64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b44:	695a      	ldr	r2, [r3, #20]
 8001b46:	88fb      	ldrh	r3, [r7, #6]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d006      	beq.n	8001b5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b4e:	4a05      	ldr	r2, [pc, #20]	@ (8001b64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b50:	88fb      	ldrh	r3, [r7, #6]
 8001b52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b54:	88fb      	ldrh	r3, [r7, #6]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff f9a4 	bl	8000ea4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40013c00 	.word	0x40013c00

08001b68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e267      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d075      	beq.n	8001c72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b86:	4b88      	ldr	r3, [pc, #544]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f003 030c 	and.w	r3, r3, #12
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	d00c      	beq.n	8001bac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b92:	4b85      	ldr	r3, [pc, #532]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b9a:	2b08      	cmp	r3, #8
 8001b9c:	d112      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b9e:	4b82      	ldr	r3, [pc, #520]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ba6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001baa:	d10b      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bac:	4b7e      	ldr	r3, [pc, #504]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d05b      	beq.n	8001c70 <HAL_RCC_OscConfig+0x108>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d157      	bne.n	8001c70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e242      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bcc:	d106      	bne.n	8001bdc <HAL_RCC_OscConfig+0x74>
 8001bce:	4b76      	ldr	r3, [pc, #472]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a75      	ldr	r2, [pc, #468]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001bd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	e01d      	b.n	8001c18 <HAL_RCC_OscConfig+0xb0>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001be4:	d10c      	bne.n	8001c00 <HAL_RCC_OscConfig+0x98>
 8001be6:	4b70      	ldr	r3, [pc, #448]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a6f      	ldr	r2, [pc, #444]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001bec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	4b6d      	ldr	r3, [pc, #436]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a6c      	ldr	r2, [pc, #432]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001bf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bfc:	6013      	str	r3, [r2, #0]
 8001bfe:	e00b      	b.n	8001c18 <HAL_RCC_OscConfig+0xb0>
 8001c00:	4b69      	ldr	r3, [pc, #420]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a68      	ldr	r2, [pc, #416]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001c06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c0a:	6013      	str	r3, [r2, #0]
 8001c0c:	4b66      	ldr	r3, [pc, #408]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a65      	ldr	r2, [pc, #404]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001c12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d013      	beq.n	8001c48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c20:	f7ff fcc2 	bl	80015a8 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c28:	f7ff fcbe 	bl	80015a8 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b64      	cmp	r3, #100	@ 0x64
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e207      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3a:	4b5b      	ldr	r3, [pc, #364]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0f0      	beq.n	8001c28 <HAL_RCC_OscConfig+0xc0>
 8001c46:	e014      	b.n	8001c72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c48:	f7ff fcae 	bl	80015a8 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c50:	f7ff fcaa 	bl	80015a8 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b64      	cmp	r3, #100	@ 0x64
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e1f3      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c62:	4b51      	ldr	r3, [pc, #324]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1f0      	bne.n	8001c50 <HAL_RCC_OscConfig+0xe8>
 8001c6e:	e000      	b.n	8001c72 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d063      	beq.n	8001d46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c7e:	4b4a      	ldr	r3, [pc, #296]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 030c 	and.w	r3, r3, #12
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d00b      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c8a:	4b47      	ldr	r3, [pc, #284]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c92:	2b08      	cmp	r3, #8
 8001c94:	d11c      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c96:	4b44      	ldr	r3, [pc, #272]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d116      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ca2:	4b41      	ldr	r3, [pc, #260]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d005      	beq.n	8001cba <HAL_RCC_OscConfig+0x152>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d001      	beq.n	8001cba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e1c7      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cba:	4b3b      	ldr	r3, [pc, #236]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	4937      	ldr	r1, [pc, #220]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cce:	e03a      	b.n	8001d46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d020      	beq.n	8001d1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cd8:	4b34      	ldr	r3, [pc, #208]	@ (8001dac <HAL_RCC_OscConfig+0x244>)
 8001cda:	2201      	movs	r2, #1
 8001cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cde:	f7ff fc63 	bl	80015a8 <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ce6:	f7ff fc5f 	bl	80015a8 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e1a8      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf8:	4b2b      	ldr	r3, [pc, #172]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0f0      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d04:	4b28      	ldr	r3, [pc, #160]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	4925      	ldr	r1, [pc, #148]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	600b      	str	r3, [r1, #0]
 8001d18:	e015      	b.n	8001d46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d1a:	4b24      	ldr	r3, [pc, #144]	@ (8001dac <HAL_RCC_OscConfig+0x244>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d20:	f7ff fc42 	bl	80015a8 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d28:	f7ff fc3e 	bl	80015a8 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e187      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0308 	and.w	r3, r3, #8
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d036      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d016      	beq.n	8001d88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d5a:	4b15      	ldr	r3, [pc, #84]	@ (8001db0 <HAL_RCC_OscConfig+0x248>)
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d60:	f7ff fc22 	bl	80015a8 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d68:	f7ff fc1e 	bl	80015a8 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e167      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001d7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d0f0      	beq.n	8001d68 <HAL_RCC_OscConfig+0x200>
 8001d86:	e01b      	b.n	8001dc0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d88:	4b09      	ldr	r3, [pc, #36]	@ (8001db0 <HAL_RCC_OscConfig+0x248>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d8e:	f7ff fc0b 	bl	80015a8 <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d94:	e00e      	b.n	8001db4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d96:	f7ff fc07 	bl	80015a8 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d907      	bls.n	8001db4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e150      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
 8001da8:	40023800 	.word	0x40023800
 8001dac:	42470000 	.word	0x42470000
 8001db0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db4:	4b88      	ldr	r3, [pc, #544]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001db6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1ea      	bne.n	8001d96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f000 8097 	beq.w	8001efc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dd2:	4b81      	ldr	r3, [pc, #516]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10f      	bne.n	8001dfe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	4b7d      	ldr	r3, [pc, #500]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de6:	4a7c      	ldr	r2, [pc, #496]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001de8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dee:	4b7a      	ldr	r3, [pc, #488]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfe:	4b77      	ldr	r3, [pc, #476]	@ (8001fdc <HAL_RCC_OscConfig+0x474>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d118      	bne.n	8001e3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e0a:	4b74      	ldr	r3, [pc, #464]	@ (8001fdc <HAL_RCC_OscConfig+0x474>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a73      	ldr	r2, [pc, #460]	@ (8001fdc <HAL_RCC_OscConfig+0x474>)
 8001e10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e16:	f7ff fbc7 	bl	80015a8 <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e1e:	f7ff fbc3 	bl	80015a8 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e10c      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e30:	4b6a      	ldr	r3, [pc, #424]	@ (8001fdc <HAL_RCC_OscConfig+0x474>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0f0      	beq.n	8001e1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d106      	bne.n	8001e52 <HAL_RCC_OscConfig+0x2ea>
 8001e44:	4b64      	ldr	r3, [pc, #400]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e48:	4a63      	ldr	r2, [pc, #396]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e50:	e01c      	b.n	8001e8c <HAL_RCC_OscConfig+0x324>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	2b05      	cmp	r3, #5
 8001e58:	d10c      	bne.n	8001e74 <HAL_RCC_OscConfig+0x30c>
 8001e5a:	4b5f      	ldr	r3, [pc, #380]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e5e:	4a5e      	ldr	r2, [pc, #376]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001e60:	f043 0304 	orr.w	r3, r3, #4
 8001e64:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e66:	4b5c      	ldr	r3, [pc, #368]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e6a:	4a5b      	ldr	r2, [pc, #364]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e72:	e00b      	b.n	8001e8c <HAL_RCC_OscConfig+0x324>
 8001e74:	4b58      	ldr	r3, [pc, #352]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001e76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e78:	4a57      	ldr	r2, [pc, #348]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001e7a:	f023 0301 	bic.w	r3, r3, #1
 8001e7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e80:	4b55      	ldr	r3, [pc, #340]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001e82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e84:	4a54      	ldr	r2, [pc, #336]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001e86:	f023 0304 	bic.w	r3, r3, #4
 8001e8a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d015      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e94:	f7ff fb88 	bl	80015a8 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e9a:	e00a      	b.n	8001eb2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e9c:	f7ff fb84 	bl	80015a8 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e0cb      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb2:	4b49      	ldr	r3, [pc, #292]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001eb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d0ee      	beq.n	8001e9c <HAL_RCC_OscConfig+0x334>
 8001ebe:	e014      	b.n	8001eea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec0:	f7ff fb72 	bl	80015a8 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec6:	e00a      	b.n	8001ede <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ec8:	f7ff fb6e 	bl	80015a8 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e0b5      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ede:	4b3e      	ldr	r3, [pc, #248]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1ee      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001eea:	7dfb      	ldrb	r3, [r7, #23]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d105      	bne.n	8001efc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ef0:	4b39      	ldr	r3, [pc, #228]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef4:	4a38      	ldr	r2, [pc, #224]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001ef6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001efa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f000 80a1 	beq.w	8002048 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f06:	4b34      	ldr	r3, [pc, #208]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 030c 	and.w	r3, r3, #12
 8001f0e:	2b08      	cmp	r3, #8
 8001f10:	d05c      	beq.n	8001fcc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d141      	bne.n	8001f9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f1a:	4b31      	ldr	r3, [pc, #196]	@ (8001fe0 <HAL_RCC_OscConfig+0x478>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f20:	f7ff fb42 	bl	80015a8 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f28:	f7ff fb3e 	bl	80015a8 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e087      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f3a:	4b27      	ldr	r3, [pc, #156]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f0      	bne.n	8001f28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	69da      	ldr	r2, [r3, #28]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f54:	019b      	lsls	r3, r3, #6
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f5c:	085b      	lsrs	r3, r3, #1
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	431a      	orrs	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f68:	061b      	lsls	r3, r3, #24
 8001f6a:	491b      	ldr	r1, [pc, #108]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f70:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe0 <HAL_RCC_OscConfig+0x478>)
 8001f72:	2201      	movs	r2, #1
 8001f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f76:	f7ff fb17 	bl	80015a8 <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f7e:	f7ff fb13 	bl	80015a8 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e05c      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f90:	4b11      	ldr	r3, [pc, #68]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0f0      	beq.n	8001f7e <HAL_RCC_OscConfig+0x416>
 8001f9c:	e054      	b.n	8002048 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f9e:	4b10      	ldr	r3, [pc, #64]	@ (8001fe0 <HAL_RCC_OscConfig+0x478>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa4:	f7ff fb00 	bl	80015a8 <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fac:	f7ff fafc 	bl	80015a8 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e045      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fbe:	4b06      	ldr	r3, [pc, #24]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1f0      	bne.n	8001fac <HAL_RCC_OscConfig+0x444>
 8001fca:	e03d      	b.n	8002048 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d107      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e038      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	40007000 	.word	0x40007000
 8001fe0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fe4:	4b1b      	ldr	r3, [pc, #108]	@ (8002054 <HAL_RCC_OscConfig+0x4ec>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d028      	beq.n	8002044 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d121      	bne.n	8002044 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800200a:	429a      	cmp	r2, r3
 800200c:	d11a      	bne.n	8002044 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002014:	4013      	ands	r3, r2
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800201a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800201c:	4293      	cmp	r3, r2
 800201e:	d111      	bne.n	8002044 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800202a:	085b      	lsrs	r3, r3, #1
 800202c:	3b01      	subs	r3, #1
 800202e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002030:	429a      	cmp	r2, r3
 8002032:	d107      	bne.n	8002044 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800203e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002040:	429a      	cmp	r2, r3
 8002042:	d001      	beq.n	8002048 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e000      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40023800 	.word	0x40023800

08002058 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e0cc      	b.n	8002206 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800206c:	4b68      	ldr	r3, [pc, #416]	@ (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	429a      	cmp	r2, r3
 8002078:	d90c      	bls.n	8002094 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207a:	4b65      	ldr	r3, [pc, #404]	@ (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	b2d2      	uxtb	r2, r2
 8002080:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002082:	4b63      	ldr	r3, [pc, #396]	@ (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	429a      	cmp	r2, r3
 800208e:	d001      	beq.n	8002094 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e0b8      	b.n	8002206 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d020      	beq.n	80020e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d005      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020ac:	4b59      	ldr	r3, [pc, #356]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	4a58      	ldr	r2, [pc, #352]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80020b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80020b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0308 	and.w	r3, r3, #8
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d005      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020c4:	4b53      	ldr	r3, [pc, #332]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	4a52      	ldr	r2, [pc, #328]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80020ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80020ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020d0:	4b50      	ldr	r3, [pc, #320]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	494d      	ldr	r1, [pc, #308]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d044      	beq.n	8002178 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d107      	bne.n	8002106 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f6:	4b47      	ldr	r3, [pc, #284]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d119      	bne.n	8002136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e07f      	b.n	8002206 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b02      	cmp	r3, #2
 800210c:	d003      	beq.n	8002116 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002112:	2b03      	cmp	r3, #3
 8002114:	d107      	bne.n	8002126 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002116:	4b3f      	ldr	r3, [pc, #252]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d109      	bne.n	8002136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e06f      	b.n	8002206 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002126:	4b3b      	ldr	r3, [pc, #236]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e067      	b.n	8002206 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002136:	4b37      	ldr	r3, [pc, #220]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f023 0203 	bic.w	r2, r3, #3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	4934      	ldr	r1, [pc, #208]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 8002144:	4313      	orrs	r3, r2
 8002146:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002148:	f7ff fa2e 	bl	80015a8 <HAL_GetTick>
 800214c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214e:	e00a      	b.n	8002166 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002150:	f7ff fa2a 	bl	80015a8 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800215e:	4293      	cmp	r3, r2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e04f      	b.n	8002206 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002166:	4b2b      	ldr	r3, [pc, #172]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 020c 	and.w	r2, r3, #12
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	429a      	cmp	r2, r3
 8002176:	d1eb      	bne.n	8002150 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002178:	4b25      	ldr	r3, [pc, #148]	@ (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	429a      	cmp	r2, r3
 8002184:	d20c      	bcs.n	80021a0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002186:	4b22      	ldr	r3, [pc, #136]	@ (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800218e:	4b20      	ldr	r3, [pc, #128]	@ (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	429a      	cmp	r2, r3
 800219a:	d001      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e032      	b.n	8002206 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0304 	and.w	r3, r3, #4
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d008      	beq.n	80021be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021ac:	4b19      	ldr	r3, [pc, #100]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	4916      	ldr	r1, [pc, #88]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0308 	and.w	r3, r3, #8
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d009      	beq.n	80021de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021ca:	4b12      	ldr	r3, [pc, #72]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	490e      	ldr	r1, [pc, #56]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021de:	f000 f821 	bl	8002224 <HAL_RCC_GetSysClockFreq>
 80021e2:	4602      	mov	r2, r0
 80021e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	091b      	lsrs	r3, r3, #4
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	490a      	ldr	r1, [pc, #40]	@ (8002218 <HAL_RCC_ClockConfig+0x1c0>)
 80021f0:	5ccb      	ldrb	r3, [r1, r3]
 80021f2:	fa22 f303 	lsr.w	r3, r2, r3
 80021f6:	4a09      	ldr	r2, [pc, #36]	@ (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80021f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80021fa:	4b09      	ldr	r3, [pc, #36]	@ (8002220 <HAL_RCC_ClockConfig+0x1c8>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f7fe fff4 	bl	80011ec <HAL_InitTick>

  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40023c00 	.word	0x40023c00
 8002214:	40023800 	.word	0x40023800
 8002218:	08008770 	.word	0x08008770
 800221c:	20000000 	.word	0x20000000
 8002220:	20000004 	.word	0x20000004

08002224 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002224:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002228:	b094      	sub	sp, #80	@ 0x50
 800222a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800222c:	2300      	movs	r3, #0
 800222e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002234:	2300      	movs	r3, #0
 8002236:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002238:	2300      	movs	r3, #0
 800223a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800223c:	4b79      	ldr	r3, [pc, #484]	@ (8002424 <HAL_RCC_GetSysClockFreq+0x200>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f003 030c 	and.w	r3, r3, #12
 8002244:	2b08      	cmp	r3, #8
 8002246:	d00d      	beq.n	8002264 <HAL_RCC_GetSysClockFreq+0x40>
 8002248:	2b08      	cmp	r3, #8
 800224a:	f200 80e1 	bhi.w	8002410 <HAL_RCC_GetSysClockFreq+0x1ec>
 800224e:	2b00      	cmp	r3, #0
 8002250:	d002      	beq.n	8002258 <HAL_RCC_GetSysClockFreq+0x34>
 8002252:	2b04      	cmp	r3, #4
 8002254:	d003      	beq.n	800225e <HAL_RCC_GetSysClockFreq+0x3a>
 8002256:	e0db      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002258:	4b73      	ldr	r3, [pc, #460]	@ (8002428 <HAL_RCC_GetSysClockFreq+0x204>)
 800225a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800225c:	e0db      	b.n	8002416 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800225e:	4b73      	ldr	r3, [pc, #460]	@ (800242c <HAL_RCC_GetSysClockFreq+0x208>)
 8002260:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002262:	e0d8      	b.n	8002416 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002264:	4b6f      	ldr	r3, [pc, #444]	@ (8002424 <HAL_RCC_GetSysClockFreq+0x200>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800226c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800226e:	4b6d      	ldr	r3, [pc, #436]	@ (8002424 <HAL_RCC_GetSysClockFreq+0x200>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d063      	beq.n	8002342 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800227a:	4b6a      	ldr	r3, [pc, #424]	@ (8002424 <HAL_RCC_GetSysClockFreq+0x200>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	099b      	lsrs	r3, r3, #6
 8002280:	2200      	movs	r2, #0
 8002282:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002284:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800228c:	633b      	str	r3, [r7, #48]	@ 0x30
 800228e:	2300      	movs	r3, #0
 8002290:	637b      	str	r3, [r7, #52]	@ 0x34
 8002292:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002296:	4622      	mov	r2, r4
 8002298:	462b      	mov	r3, r5
 800229a:	f04f 0000 	mov.w	r0, #0
 800229e:	f04f 0100 	mov.w	r1, #0
 80022a2:	0159      	lsls	r1, r3, #5
 80022a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022a8:	0150      	lsls	r0, r2, #5
 80022aa:	4602      	mov	r2, r0
 80022ac:	460b      	mov	r3, r1
 80022ae:	4621      	mov	r1, r4
 80022b0:	1a51      	subs	r1, r2, r1
 80022b2:	6139      	str	r1, [r7, #16]
 80022b4:	4629      	mov	r1, r5
 80022b6:	eb63 0301 	sbc.w	r3, r3, r1
 80022ba:	617b      	str	r3, [r7, #20]
 80022bc:	f04f 0200 	mov.w	r2, #0
 80022c0:	f04f 0300 	mov.w	r3, #0
 80022c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022c8:	4659      	mov	r1, fp
 80022ca:	018b      	lsls	r3, r1, #6
 80022cc:	4651      	mov	r1, sl
 80022ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022d2:	4651      	mov	r1, sl
 80022d4:	018a      	lsls	r2, r1, #6
 80022d6:	4651      	mov	r1, sl
 80022d8:	ebb2 0801 	subs.w	r8, r2, r1
 80022dc:	4659      	mov	r1, fp
 80022de:	eb63 0901 	sbc.w	r9, r3, r1
 80022e2:	f04f 0200 	mov.w	r2, #0
 80022e6:	f04f 0300 	mov.w	r3, #0
 80022ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022f6:	4690      	mov	r8, r2
 80022f8:	4699      	mov	r9, r3
 80022fa:	4623      	mov	r3, r4
 80022fc:	eb18 0303 	adds.w	r3, r8, r3
 8002300:	60bb      	str	r3, [r7, #8]
 8002302:	462b      	mov	r3, r5
 8002304:	eb49 0303 	adc.w	r3, r9, r3
 8002308:	60fb      	str	r3, [r7, #12]
 800230a:	f04f 0200 	mov.w	r2, #0
 800230e:	f04f 0300 	mov.w	r3, #0
 8002312:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002316:	4629      	mov	r1, r5
 8002318:	024b      	lsls	r3, r1, #9
 800231a:	4621      	mov	r1, r4
 800231c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002320:	4621      	mov	r1, r4
 8002322:	024a      	lsls	r2, r1, #9
 8002324:	4610      	mov	r0, r2
 8002326:	4619      	mov	r1, r3
 8002328:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800232a:	2200      	movs	r2, #0
 800232c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800232e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002330:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002334:	f7fd ffac 	bl	8000290 <__aeabi_uldivmod>
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	4613      	mov	r3, r2
 800233e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002340:	e058      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002342:	4b38      	ldr	r3, [pc, #224]	@ (8002424 <HAL_RCC_GetSysClockFreq+0x200>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	099b      	lsrs	r3, r3, #6
 8002348:	2200      	movs	r2, #0
 800234a:	4618      	mov	r0, r3
 800234c:	4611      	mov	r1, r2
 800234e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002352:	623b      	str	r3, [r7, #32]
 8002354:	2300      	movs	r3, #0
 8002356:	627b      	str	r3, [r7, #36]	@ 0x24
 8002358:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800235c:	4642      	mov	r2, r8
 800235e:	464b      	mov	r3, r9
 8002360:	f04f 0000 	mov.w	r0, #0
 8002364:	f04f 0100 	mov.w	r1, #0
 8002368:	0159      	lsls	r1, r3, #5
 800236a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800236e:	0150      	lsls	r0, r2, #5
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	4641      	mov	r1, r8
 8002376:	ebb2 0a01 	subs.w	sl, r2, r1
 800237a:	4649      	mov	r1, r9
 800237c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002380:	f04f 0200 	mov.w	r2, #0
 8002384:	f04f 0300 	mov.w	r3, #0
 8002388:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800238c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002390:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002394:	ebb2 040a 	subs.w	r4, r2, sl
 8002398:	eb63 050b 	sbc.w	r5, r3, fp
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	f04f 0300 	mov.w	r3, #0
 80023a4:	00eb      	lsls	r3, r5, #3
 80023a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023aa:	00e2      	lsls	r2, r4, #3
 80023ac:	4614      	mov	r4, r2
 80023ae:	461d      	mov	r5, r3
 80023b0:	4643      	mov	r3, r8
 80023b2:	18e3      	adds	r3, r4, r3
 80023b4:	603b      	str	r3, [r7, #0]
 80023b6:	464b      	mov	r3, r9
 80023b8:	eb45 0303 	adc.w	r3, r5, r3
 80023bc:	607b      	str	r3, [r7, #4]
 80023be:	f04f 0200 	mov.w	r2, #0
 80023c2:	f04f 0300 	mov.w	r3, #0
 80023c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023ca:	4629      	mov	r1, r5
 80023cc:	028b      	lsls	r3, r1, #10
 80023ce:	4621      	mov	r1, r4
 80023d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023d4:	4621      	mov	r1, r4
 80023d6:	028a      	lsls	r2, r1, #10
 80023d8:	4610      	mov	r0, r2
 80023da:	4619      	mov	r1, r3
 80023dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023de:	2200      	movs	r2, #0
 80023e0:	61bb      	str	r3, [r7, #24]
 80023e2:	61fa      	str	r2, [r7, #28]
 80023e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023e8:	f7fd ff52 	bl	8000290 <__aeabi_uldivmod>
 80023ec:	4602      	mov	r2, r0
 80023ee:	460b      	mov	r3, r1
 80023f0:	4613      	mov	r3, r2
 80023f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80023f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002424 <HAL_RCC_GetSysClockFreq+0x200>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	0c1b      	lsrs	r3, r3, #16
 80023fa:	f003 0303 	and.w	r3, r3, #3
 80023fe:	3301      	adds	r3, #1
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002404:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002406:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002408:	fbb2 f3f3 	udiv	r3, r2, r3
 800240c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800240e:	e002      	b.n	8002416 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002410:	4b05      	ldr	r3, [pc, #20]	@ (8002428 <HAL_RCC_GetSysClockFreq+0x204>)
 8002412:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002414:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002416:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002418:	4618      	mov	r0, r3
 800241a:	3750      	adds	r7, #80	@ 0x50
 800241c:	46bd      	mov	sp, r7
 800241e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002422:	bf00      	nop
 8002424:	40023800 	.word	0x40023800
 8002428:	00f42400 	.word	0x00f42400
 800242c:	007a1200 	.word	0x007a1200

08002430 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002434:	4b03      	ldr	r3, [pc, #12]	@ (8002444 <HAL_RCC_GetHCLKFreq+0x14>)
 8002436:	681b      	ldr	r3, [r3, #0]
}
 8002438:	4618      	mov	r0, r3
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	20000000 	.word	0x20000000

08002448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800244c:	f7ff fff0 	bl	8002430 <HAL_RCC_GetHCLKFreq>
 8002450:	4602      	mov	r2, r0
 8002452:	4b05      	ldr	r3, [pc, #20]	@ (8002468 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	0a9b      	lsrs	r3, r3, #10
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	4903      	ldr	r1, [pc, #12]	@ (800246c <HAL_RCC_GetPCLK1Freq+0x24>)
 800245e:	5ccb      	ldrb	r3, [r1, r3]
 8002460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002464:	4618      	mov	r0, r3
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40023800 	.word	0x40023800
 800246c:	08008780 	.word	0x08008780

08002470 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002474:	f7ff ffdc 	bl	8002430 <HAL_RCC_GetHCLKFreq>
 8002478:	4602      	mov	r2, r0
 800247a:	4b05      	ldr	r3, [pc, #20]	@ (8002490 <HAL_RCC_GetPCLK2Freq+0x20>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	0b5b      	lsrs	r3, r3, #13
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	4903      	ldr	r1, [pc, #12]	@ (8002494 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002486:	5ccb      	ldrb	r3, [r1, r3]
 8002488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800248c:	4618      	mov	r0, r3
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40023800 	.word	0x40023800
 8002494:	08008780 	.word	0x08008780

08002498 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	220f      	movs	r2, #15
 80024a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80024a8:	4b12      	ldr	r3, [pc, #72]	@ (80024f4 <HAL_RCC_GetClockConfig+0x5c>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f003 0203 	and.w	r2, r3, #3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80024b4:	4b0f      	ldr	r3, [pc, #60]	@ (80024f4 <HAL_RCC_GetClockConfig+0x5c>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80024c0:	4b0c      	ldr	r3, [pc, #48]	@ (80024f4 <HAL_RCC_GetClockConfig+0x5c>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80024cc:	4b09      	ldr	r3, [pc, #36]	@ (80024f4 <HAL_RCC_GetClockConfig+0x5c>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	08db      	lsrs	r3, r3, #3
 80024d2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80024da:	4b07      	ldr	r3, [pc, #28]	@ (80024f8 <HAL_RCC_GetClockConfig+0x60>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0207 	and.w	r2, r3, #7
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	601a      	str	r2, [r3, #0]
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	40023800 	.word	0x40023800
 80024f8:	40023c00 	.word	0x40023c00

080024fc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002504:	2300      	movs	r3, #0
 8002506:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002508:	2300      	movs	r3, #0
 800250a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b00      	cmp	r3, #0
 8002516:	d105      	bne.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002520:	2b00      	cmp	r3, #0
 8002522:	d038      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002524:	4b68      	ldr	r3, [pc, #416]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800252a:	f7ff f83d 	bl	80015a8 <HAL_GetTick>
 800252e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002530:	e008      	b.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002532:	f7ff f839 	bl	80015a8 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d901      	bls.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e0bd      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002544:	4b61      	ldr	r3, [pc, #388]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1f0      	bne.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	019b      	lsls	r3, r3, #6
 800255a:	431a      	orrs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	071b      	lsls	r3, r3, #28
 8002562:	495a      	ldr	r1, [pc, #360]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002564:	4313      	orrs	r3, r2
 8002566:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800256a:	4b57      	ldr	r3, [pc, #348]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800256c:	2201      	movs	r2, #1
 800256e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002570:	f7ff f81a 	bl	80015a8 <HAL_GetTick>
 8002574:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002576:	e008      	b.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002578:	f7ff f816 	bl	80015a8 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e09a      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800258a:	4b50      	ldr	r3, [pc, #320]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d0f0      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 8083 	beq.w	80026aa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80025a4:	2300      	movs	r3, #0
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	4b48      	ldr	r3, [pc, #288]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ac:	4a47      	ldr	r2, [pc, #284]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80025b4:	4b45      	ldr	r3, [pc, #276]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80025c0:	4b43      	ldr	r3, [pc, #268]	@ (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a42      	ldr	r2, [pc, #264]	@ (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025ca:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80025cc:	f7fe ffec 	bl	80015a8 <HAL_GetTick>
 80025d0:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80025d2:	e008      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025d4:	f7fe ffe8 	bl	80015a8 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e06c      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80025e6:	4b3a      	ldr	r3, [pc, #232]	@ (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d0f0      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025f2:	4b36      	ldr	r3, [pc, #216]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025fa:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d02f      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	429a      	cmp	r2, r3
 800260e:	d028      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002610:	4b2e      	ldr	r3, [pc, #184]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002612:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002614:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002618:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800261a:	4b2e      	ldr	r3, [pc, #184]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800261c:	2201      	movs	r2, #1
 800261e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002620:	4b2c      	ldr	r3, [pc, #176]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002626:	4a29      	ldr	r2, [pc, #164]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800262c:	4b27      	ldr	r3, [pc, #156]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800262e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b01      	cmp	r3, #1
 8002636:	d114      	bne.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002638:	f7fe ffb6 	bl	80015a8 <HAL_GetTick>
 800263c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800263e:	e00a      	b.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002640:	f7fe ffb2 	bl	80015a8 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800264e:	4293      	cmp	r3, r2
 8002650:	d901      	bls.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e034      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002656:	4b1d      	ldr	r3, [pc, #116]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0ee      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800266a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800266e:	d10d      	bne.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002670:	4b16      	ldr	r3, [pc, #88]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002680:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002684:	4911      	ldr	r1, [pc, #68]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002686:	4313      	orrs	r3, r2
 8002688:	608b      	str	r3, [r1, #8]
 800268a:	e005      	b.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800268c:	4b0f      	ldr	r3, [pc, #60]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	4a0e      	ldr	r2, [pc, #56]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002692:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002696:	6093      	str	r3, [r2, #8]
 8002698:	4b0c      	ldr	r3, [pc, #48]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800269a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026a4:	4909      	ldr	r1, [pc, #36]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0308 	and.w	r3, r3, #8
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d003      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	7d1a      	ldrb	r2, [r3, #20]
 80026ba:	4b07      	ldr	r3, [pc, #28]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80026bc:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	42470068 	.word	0x42470068
 80026cc:	40023800 	.word	0x40023800
 80026d0:	40007000 	.word	0x40007000
 80026d4:	42470e40 	.word	0x42470e40
 80026d8:	424711e0 	.word	0x424711e0

080026dc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e073      	b.n	80027da <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	7f5b      	ldrb	r3, [r3, #29]
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d105      	bne.n	8002708 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7fe fcb6 	bl	8001074 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2202      	movs	r2, #2
 800270c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	f003 0310 	and.w	r3, r3, #16
 8002718:	2b10      	cmp	r3, #16
 800271a:	d055      	beq.n	80027c8 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	22ca      	movs	r2, #202	@ 0xca
 8002722:	625a      	str	r2, [r3, #36]	@ 0x24
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2253      	movs	r2, #83	@ 0x53
 800272a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f87f 	bl	8002830 <RTC_EnterInitMode>
 8002732:	4603      	mov	r3, r0
 8002734:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002736:	7bfb      	ldrb	r3, [r7, #15]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d12c      	bne.n	8002796 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	6812      	ldr	r2, [r2, #0]
 8002746:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800274a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800274e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6899      	ldr	r1, [r3, #8]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	431a      	orrs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	431a      	orrs	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	68d2      	ldr	r2, [r2, #12]
 8002776:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6919      	ldr	r1, [r3, #16]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	041a      	lsls	r2, r3, #16
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	430a      	orrs	r2, r1
 800278a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 f886 	bl	800289e <RTC_ExitInitMode>
 8002792:	4603      	mov	r3, r0
 8002794:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002796:	7bfb      	ldrb	r3, [r7, #15]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d110      	bne.n	80027be <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80027aa:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	699a      	ldr	r2, [r3, #24]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	430a      	orrs	r2, r1
 80027bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	22ff      	movs	r2, #255	@ 0xff
 80027c4:	625a      	str	r2, [r3, #36]	@ 0x24
 80027c6:	e001      	b.n	80027cc <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80027c8:	2300      	movs	r3, #0
 80027ca:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d102      	bne.n	80027d8 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2201      	movs	r2, #1
 80027d6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80027d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
	...

080027e4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027ec:	2300      	movs	r3, #0
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a0d      	ldr	r2, [pc, #52]	@ (800282c <HAL_RTC_WaitForSynchro+0x48>)
 80027f6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027f8:	f7fe fed6 	bl	80015a8 <HAL_GetTick>
 80027fc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80027fe:	e009      	b.n	8002814 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002800:	f7fe fed2 	bl	80015a8 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800280e:	d901      	bls.n	8002814 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e007      	b.n	8002824 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	f003 0320 	and.w	r3, r3, #32
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0ee      	beq.n	8002800 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	00013f5f 	.word	0x00013f5f

08002830 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002838:	2300      	movs	r3, #0
 800283a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800283c:	2300      	movs	r3, #0
 800283e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800284a:	2b00      	cmp	r3, #0
 800284c:	d122      	bne.n	8002894 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68da      	ldr	r2, [r3, #12]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800285c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800285e:	f7fe fea3 	bl	80015a8 <HAL_GetTick>
 8002862:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002864:	e00c      	b.n	8002880 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002866:	f7fe fe9f 	bl	80015a8 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002874:	d904      	bls.n	8002880 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2204      	movs	r2, #4
 800287a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800288a:	2b00      	cmp	r3, #0
 800288c:	d102      	bne.n	8002894 <RTC_EnterInitMode+0x64>
 800288e:	7bfb      	ldrb	r3, [r7, #15]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d1e8      	bne.n	8002866 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002894:	7bfb      	ldrb	r3, [r7, #15]
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b084      	sub	sp, #16
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028a6:	2300      	movs	r3, #0
 80028a8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68da      	ldr	r2, [r3, #12]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028b8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f003 0320 	and.w	r3, r3, #32
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10a      	bne.n	80028de <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f7ff ff8b 	bl	80027e4 <HAL_RTC_WaitForSynchro>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d004      	beq.n	80028de <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2204      	movs	r2, #4
 80028d8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80028de:	7bfb      	ldrb	r3, [r7, #15]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e07b      	b.n	80029f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d108      	bne.n	8002914 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800290a:	d009      	beq.n	8002920 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	61da      	str	r2, [r3, #28]
 8002912:	e005      	b.n	8002920 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d106      	bne.n	8002940 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7fe fbc6 	bl	80010cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2202      	movs	r2, #2
 8002944:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002956:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002968:	431a      	orrs	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002972:	431a      	orrs	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	431a      	orrs	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002990:	431a      	orrs	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800299a:	431a      	orrs	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029a4:	ea42 0103 	orr.w	r1, r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ac:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	0c1b      	lsrs	r3, r3, #16
 80029be:	f003 0104 	and.w	r1, r3, #4
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c6:	f003 0210 	and.w	r2, r3, #16
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	69da      	ldr	r2, [r3, #28]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b088      	sub	sp, #32
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	60f8      	str	r0, [r7, #12]
 8002a02:	60b9      	str	r1, [r7, #8]
 8002a04:	603b      	str	r3, [r7, #0]
 8002a06:	4613      	mov	r3, r2
 8002a08:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a0a:	f7fe fdcd 	bl	80015a8 <HAL_GetTick>
 8002a0e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002a10:	88fb      	ldrh	r3, [r7, #6]
 8002a12:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d001      	beq.n	8002a24 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002a20:	2302      	movs	r3, #2
 8002a22:	e12a      	b.n	8002c7a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d002      	beq.n	8002a30 <HAL_SPI_Transmit+0x36>
 8002a2a:	88fb      	ldrh	r3, [r7, #6]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e122      	b.n	8002c7a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d101      	bne.n	8002a42 <HAL_SPI_Transmit+0x48>
 8002a3e:	2302      	movs	r3, #2
 8002a40:	e11b      	b.n	8002c7a <HAL_SPI_Transmit+0x280>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2203      	movs	r2, #3
 8002a4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	68ba      	ldr	r2, [r7, #8]
 8002a5c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	88fa      	ldrh	r2, [r7, #6]
 8002a62:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	88fa      	ldrh	r2, [r7, #6]
 8002a68:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a90:	d10f      	bne.n	8002ab2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002aa0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ab0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002abc:	2b40      	cmp	r3, #64	@ 0x40
 8002abe:	d007      	beq.n	8002ad0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ace:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ad8:	d152      	bne.n	8002b80 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d002      	beq.n	8002ae8 <HAL_SPI_Transmit+0xee>
 8002ae2:	8b7b      	ldrh	r3, [r7, #26]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d145      	bne.n	8002b74 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aec:	881a      	ldrh	r2, [r3, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af8:	1c9a      	adds	r2, r3, #2
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	3b01      	subs	r3, #1
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b0c:	e032      	b.n	8002b74 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d112      	bne.n	8002b42 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b20:	881a      	ldrh	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2c:	1c9a      	adds	r2, r3, #2
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002b40:	e018      	b.n	8002b74 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b42:	f7fe fd31 	bl	80015a8 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d803      	bhi.n	8002b5a <HAL_SPI_Transmit+0x160>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b58:	d102      	bne.n	8002b60 <HAL_SPI_Transmit+0x166>
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d109      	bne.n	8002b74 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e082      	b.n	8002c7a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1c7      	bne.n	8002b0e <HAL_SPI_Transmit+0x114>
 8002b7e:	e053      	b.n	8002c28 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d002      	beq.n	8002b8e <HAL_SPI_Transmit+0x194>
 8002b88:	8b7b      	ldrh	r3, [r7, #26]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d147      	bne.n	8002c1e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	330c      	adds	r3, #12
 8002b98:	7812      	ldrb	r2, [r2, #0]
 8002b9a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba0:	1c5a      	adds	r2, r3, #1
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	3b01      	subs	r3, #1
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002bb4:	e033      	b.n	8002c1e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d113      	bne.n	8002bec <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	330c      	adds	r3, #12
 8002bce:	7812      	ldrb	r2, [r2, #0]
 8002bd0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd6:	1c5a      	adds	r2, r3, #1
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	3b01      	subs	r3, #1
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002bea:	e018      	b.n	8002c1e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bec:	f7fe fcdc 	bl	80015a8 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d803      	bhi.n	8002c04 <HAL_SPI_Transmit+0x20a>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c02:	d102      	bne.n	8002c0a <HAL_SPI_Transmit+0x210>
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d109      	bne.n	8002c1e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e02d      	b.n	8002c7a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1c6      	bne.n	8002bb6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c28:	69fa      	ldr	r2, [r7, #28]
 8002c2a:	6839      	ldr	r1, [r7, #0]
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f000 fbd9 	bl	80033e4 <SPI_EndRxTxTransaction>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d002      	beq.n	8002c3e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10a      	bne.n	8002c5c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c46:	2300      	movs	r3, #0
 8002c48:	617b      	str	r3, [r7, #20]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	617b      	str	r3, [r7, #20]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	617b      	str	r3, [r7, #20]
 8002c5a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e000      	b.n	8002c7a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002c78:	2300      	movs	r3, #0
  }
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3720      	adds	r7, #32
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b088      	sub	sp, #32
 8002c86:	af02      	add	r7, sp, #8
 8002c88:	60f8      	str	r0, [r7, #12]
 8002c8a:	60b9      	str	r1, [r7, #8]
 8002c8c:	603b      	str	r3, [r7, #0]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d001      	beq.n	8002ca2 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	e104      	b.n	8002eac <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002caa:	d112      	bne.n	8002cd2 <HAL_SPI_Receive+0x50>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10e      	bne.n	8002cd2 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2204      	movs	r2, #4
 8002cb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002cbc:	88fa      	ldrh	r2, [r7, #6]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	68ba      	ldr	r2, [r7, #8]
 8002cc6:	68b9      	ldr	r1, [r7, #8]
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 f8f3 	bl	8002eb4 <HAL_SPI_TransmitReceive>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	e0ec      	b.n	8002eac <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cd2:	f7fe fc69 	bl	80015a8 <HAL_GetTick>
 8002cd6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d002      	beq.n	8002ce4 <HAL_SPI_Receive+0x62>
 8002cde:	88fb      	ldrh	r3, [r7, #6]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e0e1      	b.n	8002eac <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d101      	bne.n	8002cf6 <HAL_SPI_Receive+0x74>
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	e0da      	b.n	8002eac <HAL_SPI_Receive+0x22a>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2204      	movs	r2, #4
 8002d02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	88fa      	ldrh	r2, [r7, #6]
 8002d16:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	88fa      	ldrh	r2, [r7, #6]
 8002d1c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d44:	d10f      	bne.n	8002d66 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002d64:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d70:	2b40      	cmp	r3, #64	@ 0x40
 8002d72:	d007      	beq.n	8002d84 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d82:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d170      	bne.n	8002e6e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002d8c:	e035      	b.n	8002dfa <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d115      	bne.n	8002dc8 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f103 020c 	add.w	r2, r3, #12
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002da8:	7812      	ldrb	r2, [r2, #0]
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002db2:	1c5a      	adds	r2, r3, #1
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002dc6:	e018      	b.n	8002dfa <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dc8:	f7fe fbee 	bl	80015a8 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d803      	bhi.n	8002de0 <HAL_SPI_Receive+0x15e>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dde:	d102      	bne.n	8002de6 <HAL_SPI_Receive+0x164>
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d109      	bne.n	8002dfa <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e058      	b.n	8002eac <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1c4      	bne.n	8002d8e <HAL_SPI_Receive+0x10c>
 8002e04:	e038      	b.n	8002e78 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d113      	bne.n	8002e3c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68da      	ldr	r2, [r3, #12]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e1e:	b292      	uxth	r2, r2
 8002e20:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e26:	1c9a      	adds	r2, r3, #2
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	3b01      	subs	r3, #1
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e3a:	e018      	b.n	8002e6e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e3c:	f7fe fbb4 	bl	80015a8 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d803      	bhi.n	8002e54 <HAL_SPI_Receive+0x1d2>
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e52:	d102      	bne.n	8002e5a <HAL_SPI_Receive+0x1d8>
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d109      	bne.n	8002e6e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e01e      	b.n	8002eac <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1c6      	bne.n	8002e06 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	6839      	ldr	r1, [r7, #0]
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f000 fa4b 	bl	8003318 <SPI_EndRxTransaction>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d002      	beq.n	8002e8e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e000      	b.n	8002eac <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
  }
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3718      	adds	r7, #24
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b08a      	sub	sp, #40	@ 0x28
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
 8002ec0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ec6:	f7fe fb6f 	bl	80015a8 <HAL_GetTick>
 8002eca:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002ed2:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002eda:	887b      	ldrh	r3, [r7, #2]
 8002edc:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002ede:	7ffb      	ldrb	r3, [r7, #31]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d00c      	beq.n	8002efe <HAL_SPI_TransmitReceive+0x4a>
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002eea:	d106      	bne.n	8002efa <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d102      	bne.n	8002efa <HAL_SPI_TransmitReceive+0x46>
 8002ef4:	7ffb      	ldrb	r3, [r7, #31]
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	d001      	beq.n	8002efe <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8002efa:	2302      	movs	r3, #2
 8002efc:	e17f      	b.n	80031fe <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d005      	beq.n	8002f10 <HAL_SPI_TransmitReceive+0x5c>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d002      	beq.n	8002f10 <HAL_SPI_TransmitReceive+0x5c>
 8002f0a:	887b      	ldrh	r3, [r7, #2]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e174      	b.n	80031fe <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d101      	bne.n	8002f22 <HAL_SPI_TransmitReceive+0x6e>
 8002f1e:	2302      	movs	r3, #2
 8002f20:	e16d      	b.n	80031fe <HAL_SPI_TransmitReceive+0x34a>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b04      	cmp	r3, #4
 8002f34:	d003      	beq.n	8002f3e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2205      	movs	r2, #5
 8002f3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	887a      	ldrh	r2, [r7, #2]
 8002f4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	887a      	ldrh	r2, [r7, #2]
 8002f54:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	68ba      	ldr	r2, [r7, #8]
 8002f5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	887a      	ldrh	r2, [r7, #2]
 8002f60:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	887a      	ldrh	r2, [r7, #2]
 8002f66:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f7e:	2b40      	cmp	r3, #64	@ 0x40
 8002f80:	d007      	beq.n	8002f92 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f9a:	d17e      	bne.n	800309a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d002      	beq.n	8002faa <HAL_SPI_TransmitReceive+0xf6>
 8002fa4:	8afb      	ldrh	r3, [r7, #22]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d16c      	bne.n	8003084 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fae:	881a      	ldrh	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fba:	1c9a      	adds	r2, r3, #2
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fce:	e059      	b.n	8003084 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d11b      	bne.n	8003016 <HAL_SPI_TransmitReceive+0x162>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d016      	beq.n	8003016 <HAL_SPI_TransmitReceive+0x162>
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d113      	bne.n	8003016 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff2:	881a      	ldrh	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ffe:	1c9a      	adds	r2, r3, #2
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003008:	b29b      	uxth	r3, r3
 800300a:	3b01      	subs	r3, #1
 800300c:	b29a      	uxth	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003012:	2300      	movs	r3, #0
 8003014:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	2b01      	cmp	r3, #1
 8003022:	d119      	bne.n	8003058 <HAL_SPI_TransmitReceive+0x1a4>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003028:	b29b      	uxth	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d014      	beq.n	8003058 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68da      	ldr	r2, [r3, #12]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003038:	b292      	uxth	r2, r2
 800303a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003040:	1c9a      	adds	r2, r3, #2
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800304a:	b29b      	uxth	r3, r3
 800304c:	3b01      	subs	r3, #1
 800304e:	b29a      	uxth	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003054:	2301      	movs	r3, #1
 8003056:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003058:	f7fe faa6 	bl	80015a8 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003064:	429a      	cmp	r2, r3
 8003066:	d80d      	bhi.n	8003084 <HAL_SPI_TransmitReceive+0x1d0>
 8003068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800306a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306e:	d009      	beq.n	8003084 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e0bc      	b.n	80031fe <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003088:	b29b      	uxth	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1a0      	bne.n	8002fd0 <HAL_SPI_TransmitReceive+0x11c>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003092:	b29b      	uxth	r3, r3
 8003094:	2b00      	cmp	r3, #0
 8003096:	d19b      	bne.n	8002fd0 <HAL_SPI_TransmitReceive+0x11c>
 8003098:	e082      	b.n	80031a0 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d002      	beq.n	80030a8 <HAL_SPI_TransmitReceive+0x1f4>
 80030a2:	8afb      	ldrh	r3, [r7, #22]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d171      	bne.n	800318c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	330c      	adds	r3, #12
 80030b2:	7812      	ldrb	r2, [r2, #0]
 80030b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ba:	1c5a      	adds	r2, r3, #1
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	3b01      	subs	r3, #1
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030ce:	e05d      	b.n	800318c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d11c      	bne.n	8003118 <HAL_SPI_TransmitReceive+0x264>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d017      	beq.n	8003118 <HAL_SPI_TransmitReceive+0x264>
 80030e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d114      	bne.n	8003118 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	330c      	adds	r3, #12
 80030f8:	7812      	ldrb	r2, [r2, #0]
 80030fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003100:	1c5a      	adds	r2, r3, #1
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800310a:	b29b      	uxth	r3, r3
 800310c:	3b01      	subs	r3, #1
 800310e:	b29a      	uxth	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003114:	2300      	movs	r3, #0
 8003116:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b01      	cmp	r3, #1
 8003124:	d119      	bne.n	800315a <HAL_SPI_TransmitReceive+0x2a6>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800312a:	b29b      	uxth	r3, r3
 800312c:	2b00      	cmp	r3, #0
 800312e:	d014      	beq.n	800315a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68da      	ldr	r2, [r3, #12]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800313a:	b2d2      	uxtb	r2, r2
 800313c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003142:	1c5a      	adds	r2, r3, #1
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800314c:	b29b      	uxth	r3, r3
 800314e:	3b01      	subs	r3, #1
 8003150:	b29a      	uxth	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003156:	2301      	movs	r3, #1
 8003158:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800315a:	f7fe fa25 	bl	80015a8 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	6a3b      	ldr	r3, [r7, #32]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003166:	429a      	cmp	r2, r3
 8003168:	d803      	bhi.n	8003172 <HAL_SPI_TransmitReceive+0x2be>
 800316a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800316c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003170:	d102      	bne.n	8003178 <HAL_SPI_TransmitReceive+0x2c4>
 8003172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003174:	2b00      	cmp	r3, #0
 8003176:	d109      	bne.n	800318c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e038      	b.n	80031fe <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003190:	b29b      	uxth	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d19c      	bne.n	80030d0 <HAL_SPI_TransmitReceive+0x21c>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800319a:	b29b      	uxth	r3, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	d197      	bne.n	80030d0 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031a0:	6a3a      	ldr	r2, [r7, #32]
 80031a2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f000 f91d 	bl	80033e4 <SPI_EndRxTxTransaction>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d008      	beq.n	80031c2 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2220      	movs	r2, #32
 80031b4:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e01d      	b.n	80031fe <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10a      	bne.n	80031e0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031ca:	2300      	movs	r3, #0
 80031cc:	613b      	str	r3, [r7, #16]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	613b      	str	r3, [r7, #16]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	613b      	str	r3, [r7, #16]
 80031de:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e000      	b.n	80031fe <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80031fc:	2300      	movs	r3, #0
  }
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3728      	adds	r7, #40	@ 0x28
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
	...

08003208 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b088      	sub	sp, #32
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	603b      	str	r3, [r7, #0]
 8003214:	4613      	mov	r3, r2
 8003216:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003218:	f7fe f9c6 	bl	80015a8 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003220:	1a9b      	subs	r3, r3, r2
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	4413      	add	r3, r2
 8003226:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003228:	f7fe f9be 	bl	80015a8 <HAL_GetTick>
 800322c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800322e:	4b39      	ldr	r3, [pc, #228]	@ (8003314 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	015b      	lsls	r3, r3, #5
 8003234:	0d1b      	lsrs	r3, r3, #20
 8003236:	69fa      	ldr	r2, [r7, #28]
 8003238:	fb02 f303 	mul.w	r3, r2, r3
 800323c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800323e:	e054      	b.n	80032ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003246:	d050      	beq.n	80032ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003248:	f7fe f9ae 	bl	80015a8 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	69fa      	ldr	r2, [r7, #28]
 8003254:	429a      	cmp	r2, r3
 8003256:	d902      	bls.n	800325e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d13d      	bne.n	80032da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800326c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003276:	d111      	bne.n	800329c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003280:	d004      	beq.n	800328c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800328a:	d107      	bne.n	800329c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800329a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032a4:	d10f      	bne.n	80032c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80032c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e017      	b.n	800330a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80032e0:	2300      	movs	r3, #0
 80032e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	4013      	ands	r3, r2
 80032f4:	68ba      	ldr	r2, [r7, #8]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	bf0c      	ite	eq
 80032fa:	2301      	moveq	r3, #1
 80032fc:	2300      	movne	r3, #0
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	461a      	mov	r2, r3
 8003302:	79fb      	ldrb	r3, [r7, #7]
 8003304:	429a      	cmp	r2, r3
 8003306:	d19b      	bne.n	8003240 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3720      	adds	r7, #32
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	20000000 	.word	0x20000000

08003318 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af02      	add	r7, sp, #8
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800332c:	d111      	bne.n	8003352 <SPI_EndRxTransaction+0x3a>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003336:	d004      	beq.n	8003342 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003340:	d107      	bne.n	8003352 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003350:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800335a:	d12a      	bne.n	80033b2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003364:	d012      	beq.n	800338c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	2200      	movs	r2, #0
 800336e:	2180      	movs	r1, #128	@ 0x80
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f7ff ff49 	bl	8003208 <SPI_WaitFlagStateUntilTimeout>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d02d      	beq.n	80033d8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003380:	f043 0220 	orr.w	r2, r3, #32
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e026      	b.n	80033da <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	9300      	str	r3, [sp, #0]
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	2200      	movs	r2, #0
 8003394:	2101      	movs	r1, #1
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f7ff ff36 	bl	8003208 <SPI_WaitFlagStateUntilTimeout>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d01a      	beq.n	80033d8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033a6:	f043 0220 	orr.w	r2, r3, #32
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e013      	b.n	80033da <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	9300      	str	r3, [sp, #0]
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	2200      	movs	r2, #0
 80033ba:	2101      	movs	r1, #1
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f7ff ff23 	bl	8003208 <SPI_WaitFlagStateUntilTimeout>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d007      	beq.n	80033d8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033cc:	f043 0220 	orr.w	r2, r3, #32
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e000      	b.n	80033da <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
	...

080033e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b088      	sub	sp, #32
 80033e8:	af02      	add	r7, sp, #8
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	9300      	str	r3, [sp, #0]
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	2201      	movs	r2, #1
 80033f8:	2102      	movs	r1, #2
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f7ff ff04 	bl	8003208 <SPI_WaitFlagStateUntilTimeout>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d007      	beq.n	8003416 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800340a:	f043 0220 	orr.w	r2, r3, #32
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e032      	b.n	800347c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003416:	4b1b      	ldr	r3, [pc, #108]	@ (8003484 <SPI_EndRxTxTransaction+0xa0>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a1b      	ldr	r2, [pc, #108]	@ (8003488 <SPI_EndRxTxTransaction+0xa4>)
 800341c:	fba2 2303 	umull	r2, r3, r2, r3
 8003420:	0d5b      	lsrs	r3, r3, #21
 8003422:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003426:	fb02 f303 	mul.w	r3, r2, r3
 800342a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003434:	d112      	bne.n	800345c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	2200      	movs	r2, #0
 800343e:	2180      	movs	r1, #128	@ 0x80
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f7ff fee1 	bl	8003208 <SPI_WaitFlagStateUntilTimeout>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d016      	beq.n	800347a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003450:	f043 0220 	orr.w	r2, r3, #32
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e00f      	b.n	800347c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00a      	beq.n	8003478 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	3b01      	subs	r3, #1
 8003466:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003472:	2b80      	cmp	r3, #128	@ 0x80
 8003474:	d0f2      	beq.n	800345c <SPI_EndRxTxTransaction+0x78>
 8003476:	e000      	b.n	800347a <SPI_EndRxTxTransaction+0x96>
        break;
 8003478:	bf00      	nop
  }

  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3718      	adds	r7, #24
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	20000000 	.word	0x20000000
 8003488:	165e9f81 	.word	0x165e9f81

0800348c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e041      	b.n	8003522 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d106      	bne.n	80034b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f839 	bl	800352a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3304      	adds	r3, #4
 80034c8:	4619      	mov	r1, r3
 80034ca:	4610      	mov	r0, r2
 80034cc:	f000 f9b2 	bl	8003834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800352a:	b480      	push	{r7}
 800352c:	b083      	sub	sp, #12
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003532:	bf00      	nop
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
	...

08003540 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b01      	cmp	r3, #1
 8003552:	d001      	beq.n	8003558 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e044      	b.n	80035e2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2202      	movs	r2, #2
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0201 	orr.w	r2, r2, #1
 800356e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a1e      	ldr	r2, [pc, #120]	@ (80035f0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d018      	beq.n	80035ac <HAL_TIM_Base_Start_IT+0x6c>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003582:	d013      	beq.n	80035ac <HAL_TIM_Base_Start_IT+0x6c>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a1a      	ldr	r2, [pc, #104]	@ (80035f4 <HAL_TIM_Base_Start_IT+0xb4>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d00e      	beq.n	80035ac <HAL_TIM_Base_Start_IT+0x6c>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a19      	ldr	r2, [pc, #100]	@ (80035f8 <HAL_TIM_Base_Start_IT+0xb8>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d009      	beq.n	80035ac <HAL_TIM_Base_Start_IT+0x6c>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a17      	ldr	r2, [pc, #92]	@ (80035fc <HAL_TIM_Base_Start_IT+0xbc>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d004      	beq.n	80035ac <HAL_TIM_Base_Start_IT+0x6c>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a16      	ldr	r2, [pc, #88]	@ (8003600 <HAL_TIM_Base_Start_IT+0xc0>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d111      	bne.n	80035d0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 0307 	and.w	r3, r3, #7
 80035b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2b06      	cmp	r3, #6
 80035bc:	d010      	beq.n	80035e0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f042 0201 	orr.w	r2, r2, #1
 80035cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ce:	e007      	b.n	80035e0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0201 	orr.w	r2, r2, #1
 80035de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	40010000 	.word	0x40010000
 80035f4:	40000400 	.word	0x40000400
 80035f8:	40000800 	.word	0x40000800
 80035fc:	40000c00 	.word	0x40000c00
 8003600:	40014000 	.word	0x40014000

08003604 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d020      	beq.n	8003668 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d01b      	beq.n	8003668 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f06f 0202 	mvn.w	r2, #2
 8003638:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2201      	movs	r2, #1
 800363e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f8d2 	bl	80037f8 <HAL_TIM_IC_CaptureCallback>
 8003654:	e005      	b.n	8003662 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f8c4 	bl	80037e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 f8d5 	bl	800380c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	f003 0304 	and.w	r3, r3, #4
 800366e:	2b00      	cmp	r3, #0
 8003670:	d020      	beq.n	80036b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	2b00      	cmp	r3, #0
 800367a:	d01b      	beq.n	80036b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f06f 0204 	mvn.w	r2, #4
 8003684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2202      	movs	r2, #2
 800368a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f8ac 	bl	80037f8 <HAL_TIM_IC_CaptureCallback>
 80036a0:	e005      	b.n	80036ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f89e 	bl	80037e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 f8af 	bl	800380c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	f003 0308 	and.w	r3, r3, #8
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d020      	beq.n	8003700 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f003 0308 	and.w	r3, r3, #8
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d01b      	beq.n	8003700 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f06f 0208 	mvn.w	r2, #8
 80036d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2204      	movs	r2, #4
 80036d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	f003 0303 	and.w	r3, r3, #3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d003      	beq.n	80036ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f886 	bl	80037f8 <HAL_TIM_IC_CaptureCallback>
 80036ec:	e005      	b.n	80036fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f878 	bl	80037e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 f889 	bl	800380c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f003 0310 	and.w	r3, r3, #16
 8003706:	2b00      	cmp	r3, #0
 8003708:	d020      	beq.n	800374c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f003 0310 	and.w	r3, r3, #16
 8003710:	2b00      	cmp	r3, #0
 8003712:	d01b      	beq.n	800374c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f06f 0210 	mvn.w	r2, #16
 800371c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2208      	movs	r2, #8
 8003722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800372e:	2b00      	cmp	r3, #0
 8003730:	d003      	beq.n	800373a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f860 	bl	80037f8 <HAL_TIM_IC_CaptureCallback>
 8003738:	e005      	b.n	8003746 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f852 	bl	80037e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f863 	bl	800380c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00c      	beq.n	8003770 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b00      	cmp	r3, #0
 800375e:	d007      	beq.n	8003770 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f06f 0201 	mvn.w	r2, #1
 8003768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7fd fc3e 	bl	8000fec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00c      	beq.n	8003794 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003780:	2b00      	cmp	r3, #0
 8003782:	d007      	beq.n	8003794 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800378c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f8e6 	bl	8003960 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00c      	beq.n	80037b8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d007      	beq.n	80037b8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80037b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f834 	bl	8003820 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	f003 0320 	and.w	r3, r3, #32
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00c      	beq.n	80037dc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f003 0320 	and.w	r3, r3, #32
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d007      	beq.n	80037dc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f06f 0220 	mvn.w	r2, #32
 80037d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f8b8 	bl	800394c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037dc:	bf00      	nop
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a3a      	ldr	r2, [pc, #232]	@ (8003930 <TIM_Base_SetConfig+0xfc>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d00f      	beq.n	800386c <TIM_Base_SetConfig+0x38>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003852:	d00b      	beq.n	800386c <TIM_Base_SetConfig+0x38>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a37      	ldr	r2, [pc, #220]	@ (8003934 <TIM_Base_SetConfig+0x100>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d007      	beq.n	800386c <TIM_Base_SetConfig+0x38>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a36      	ldr	r2, [pc, #216]	@ (8003938 <TIM_Base_SetConfig+0x104>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d003      	beq.n	800386c <TIM_Base_SetConfig+0x38>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a35      	ldr	r2, [pc, #212]	@ (800393c <TIM_Base_SetConfig+0x108>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d108      	bne.n	800387e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003872:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	4313      	orrs	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a2b      	ldr	r2, [pc, #172]	@ (8003930 <TIM_Base_SetConfig+0xfc>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d01b      	beq.n	80038be <TIM_Base_SetConfig+0x8a>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800388c:	d017      	beq.n	80038be <TIM_Base_SetConfig+0x8a>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a28      	ldr	r2, [pc, #160]	@ (8003934 <TIM_Base_SetConfig+0x100>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d013      	beq.n	80038be <TIM_Base_SetConfig+0x8a>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a27      	ldr	r2, [pc, #156]	@ (8003938 <TIM_Base_SetConfig+0x104>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d00f      	beq.n	80038be <TIM_Base_SetConfig+0x8a>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a26      	ldr	r2, [pc, #152]	@ (800393c <TIM_Base_SetConfig+0x108>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d00b      	beq.n	80038be <TIM_Base_SetConfig+0x8a>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a25      	ldr	r2, [pc, #148]	@ (8003940 <TIM_Base_SetConfig+0x10c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d007      	beq.n	80038be <TIM_Base_SetConfig+0x8a>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a24      	ldr	r2, [pc, #144]	@ (8003944 <TIM_Base_SetConfig+0x110>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d003      	beq.n	80038be <TIM_Base_SetConfig+0x8a>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a23      	ldr	r2, [pc, #140]	@ (8003948 <TIM_Base_SetConfig+0x114>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d108      	bne.n	80038d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	4313      	orrs	r3, r2
 80038dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a0e      	ldr	r2, [pc, #56]	@ (8003930 <TIM_Base_SetConfig+0xfc>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d103      	bne.n	8003904 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	691a      	ldr	r2, [r3, #16]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b01      	cmp	r3, #1
 8003914:	d105      	bne.n	8003922 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	f023 0201 	bic.w	r2, r3, #1
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	611a      	str	r2, [r3, #16]
  }
}
 8003922:	bf00      	nop
 8003924:	3714      	adds	r7, #20
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	40010000 	.word	0x40010000
 8003934:	40000400 	.word	0x40000400
 8003938:	40000800 	.word	0x40000800
 800393c:	40000c00 	.word	0x40000c00
 8003940:	40014000 	.word	0x40014000
 8003944:	40014400 	.word	0x40014400
 8003948:	40014800 	.word	0x40014800

0800394c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e042      	b.n	8003a0c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d106      	bne.n	80039a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7fd fbde 	bl	800115c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2224      	movs	r2, #36	@ 0x24
 80039a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 f973 	bl	8003ca4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	691a      	ldr	r2, [r3, #16]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	695a      	ldr	r2, [r3, #20]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68da      	ldr	r2, [r3, #12]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2220      	movs	r2, #32
 80039f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2220      	movs	r2, #32
 8003a00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3708      	adds	r7, #8
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b08a      	sub	sp, #40	@ 0x28
 8003a18:	af02      	add	r7, sp, #8
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	603b      	str	r3, [r7, #0]
 8003a20:	4613      	mov	r3, r2
 8003a22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a24:	2300      	movs	r3, #0
 8003a26:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b20      	cmp	r3, #32
 8003a32:	d175      	bne.n	8003b20 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d002      	beq.n	8003a40 <HAL_UART_Transmit+0x2c>
 8003a3a:	88fb      	ldrh	r3, [r7, #6]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d101      	bne.n	8003a44 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e06e      	b.n	8003b22 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2221      	movs	r2, #33	@ 0x21
 8003a4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a52:	f7fd fda9 	bl	80015a8 <HAL_GetTick>
 8003a56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	88fa      	ldrh	r2, [r7, #6]
 8003a5c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	88fa      	ldrh	r2, [r7, #6]
 8003a62:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a6c:	d108      	bne.n	8003a80 <HAL_UART_Transmit+0x6c>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d104      	bne.n	8003a80 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a76:	2300      	movs	r3, #0
 8003a78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	61bb      	str	r3, [r7, #24]
 8003a7e:	e003      	b.n	8003a88 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a84:	2300      	movs	r3, #0
 8003a86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a88:	e02e      	b.n	8003ae8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2200      	movs	r2, #0
 8003a92:	2180      	movs	r1, #128	@ 0x80
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f000 f848 	bl	8003b2a <UART_WaitOnFlagUntilTimeout>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d005      	beq.n	8003aac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e03a      	b.n	8003b22 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10b      	bne.n	8003aca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	881b      	ldrh	r3, [r3, #0]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ac0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	3302      	adds	r3, #2
 8003ac6:	61bb      	str	r3, [r7, #24]
 8003ac8:	e007      	b.n	8003ada <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	781a      	ldrb	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1cb      	bne.n	8003a8a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2200      	movs	r2, #0
 8003afa:	2140      	movs	r1, #64	@ 0x40
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f000 f814 	bl	8003b2a <UART_WaitOnFlagUntilTimeout>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d005      	beq.n	8003b14 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e006      	b.n	8003b22 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2220      	movs	r2, #32
 8003b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	e000      	b.n	8003b22 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003b20:	2302      	movs	r3, #2
  }
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3720      	adds	r7, #32
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b086      	sub	sp, #24
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	60f8      	str	r0, [r7, #12]
 8003b32:	60b9      	str	r1, [r7, #8]
 8003b34:	603b      	str	r3, [r7, #0]
 8003b36:	4613      	mov	r3, r2
 8003b38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b3a:	e03b      	b.n	8003bb4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b3c:	6a3b      	ldr	r3, [r7, #32]
 8003b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b42:	d037      	beq.n	8003bb4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b44:	f7fd fd30 	bl	80015a8 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	6a3a      	ldr	r2, [r7, #32]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d302      	bcc.n	8003b5a <UART_WaitOnFlagUntilTimeout+0x30>
 8003b54:	6a3b      	ldr	r3, [r7, #32]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e03a      	b.n	8003bd4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d023      	beq.n	8003bb4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2b80      	cmp	r3, #128	@ 0x80
 8003b70:	d020      	beq.n	8003bb4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	2b40      	cmp	r3, #64	@ 0x40
 8003b76:	d01d      	beq.n	8003bb4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b08      	cmp	r3, #8
 8003b84:	d116      	bne.n	8003bb4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003b86:	2300      	movs	r3, #0
 8003b88:	617b      	str	r3, [r7, #20]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	617b      	str	r3, [r7, #20]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	617b      	str	r3, [r7, #20]
 8003b9a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 f81d 	bl	8003bdc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2208      	movs	r2, #8
 8003ba6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e00f      	b.n	8003bd4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	bf0c      	ite	eq
 8003bc4:	2301      	moveq	r3, #1
 8003bc6:	2300      	movne	r3, #0
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	461a      	mov	r2, r3
 8003bcc:	79fb      	ldrb	r3, [r7, #7]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d0b4      	beq.n	8003b3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3718      	adds	r7, #24
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b095      	sub	sp, #84	@ 0x54
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	330c      	adds	r3, #12
 8003bea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bee:	e853 3f00 	ldrex	r3, [r3]
 8003bf2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bf6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	330c      	adds	r3, #12
 8003c02:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c04:	643a      	str	r2, [r7, #64]	@ 0x40
 8003c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c08:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c0a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c0c:	e841 2300 	strex	r3, r2, [r1]
 8003c10:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1e5      	bne.n	8003be4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	3314      	adds	r3, #20
 8003c1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c20:	6a3b      	ldr	r3, [r7, #32]
 8003c22:	e853 3f00 	ldrex	r3, [r3]
 8003c26:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	f023 0301 	bic.w	r3, r3, #1
 8003c2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	3314      	adds	r3, #20
 8003c36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c38:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c40:	e841 2300 	strex	r3, r2, [r1]
 8003c44:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1e5      	bne.n	8003c18 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d119      	bne.n	8003c88 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	330c      	adds	r3, #12
 8003c5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	e853 3f00 	ldrex	r3, [r3]
 8003c62:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	f023 0310 	bic.w	r3, r3, #16
 8003c6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	330c      	adds	r3, #12
 8003c72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c74:	61ba      	str	r2, [r7, #24]
 8003c76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c78:	6979      	ldr	r1, [r7, #20]
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	e841 2300 	strex	r3, r2, [r1]
 8003c80:	613b      	str	r3, [r7, #16]
   return(result);
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1e5      	bne.n	8003c54 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003c96:	bf00      	nop
 8003c98:	3754      	adds	r7, #84	@ 0x54
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
	...

08003ca4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ca4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ca8:	b0c0      	sub	sp, #256	@ 0x100
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc0:	68d9      	ldr	r1, [r3, #12]
 8003cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	ea40 0301 	orr.w	r3, r0, r1
 8003ccc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd2:	689a      	ldr	r2, [r3, #8]
 8003cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003cfc:	f021 010c 	bic.w	r1, r1, #12
 8003d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003d0a:	430b      	orrs	r3, r1
 8003d0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d1e:	6999      	ldr	r1, [r3, #24]
 8003d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	ea40 0301 	orr.w	r3, r0, r1
 8003d2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	4b8f      	ldr	r3, [pc, #572]	@ (8003f70 <UART_SetConfig+0x2cc>)
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d005      	beq.n	8003d44 <UART_SetConfig+0xa0>
 8003d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	4b8d      	ldr	r3, [pc, #564]	@ (8003f74 <UART_SetConfig+0x2d0>)
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d104      	bne.n	8003d4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d44:	f7fe fb94 	bl	8002470 <HAL_RCC_GetPCLK2Freq>
 8003d48:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003d4c:	e003      	b.n	8003d56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d4e:	f7fe fb7b 	bl	8002448 <HAL_RCC_GetPCLK1Freq>
 8003d52:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d5a:	69db      	ldr	r3, [r3, #28]
 8003d5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d60:	f040 810c 	bne.w	8003f7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003d6e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003d72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003d76:	4622      	mov	r2, r4
 8003d78:	462b      	mov	r3, r5
 8003d7a:	1891      	adds	r1, r2, r2
 8003d7c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003d7e:	415b      	adcs	r3, r3
 8003d80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003d86:	4621      	mov	r1, r4
 8003d88:	eb12 0801 	adds.w	r8, r2, r1
 8003d8c:	4629      	mov	r1, r5
 8003d8e:	eb43 0901 	adc.w	r9, r3, r1
 8003d92:	f04f 0200 	mov.w	r2, #0
 8003d96:	f04f 0300 	mov.w	r3, #0
 8003d9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003da2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003da6:	4690      	mov	r8, r2
 8003da8:	4699      	mov	r9, r3
 8003daa:	4623      	mov	r3, r4
 8003dac:	eb18 0303 	adds.w	r3, r8, r3
 8003db0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003db4:	462b      	mov	r3, r5
 8003db6:	eb49 0303 	adc.w	r3, r9, r3
 8003dba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003dca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003dce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	18db      	adds	r3, r3, r3
 8003dd6:	653b      	str	r3, [r7, #80]	@ 0x50
 8003dd8:	4613      	mov	r3, r2
 8003dda:	eb42 0303 	adc.w	r3, r2, r3
 8003dde:	657b      	str	r3, [r7, #84]	@ 0x54
 8003de0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003de4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003de8:	f7fc fa52 	bl	8000290 <__aeabi_uldivmod>
 8003dec:	4602      	mov	r2, r0
 8003dee:	460b      	mov	r3, r1
 8003df0:	4b61      	ldr	r3, [pc, #388]	@ (8003f78 <UART_SetConfig+0x2d4>)
 8003df2:	fba3 2302 	umull	r2, r3, r3, r2
 8003df6:	095b      	lsrs	r3, r3, #5
 8003df8:	011c      	lsls	r4, r3, #4
 8003dfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e04:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003e08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003e0c:	4642      	mov	r2, r8
 8003e0e:	464b      	mov	r3, r9
 8003e10:	1891      	adds	r1, r2, r2
 8003e12:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003e14:	415b      	adcs	r3, r3
 8003e16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003e1c:	4641      	mov	r1, r8
 8003e1e:	eb12 0a01 	adds.w	sl, r2, r1
 8003e22:	4649      	mov	r1, r9
 8003e24:	eb43 0b01 	adc.w	fp, r3, r1
 8003e28:	f04f 0200 	mov.w	r2, #0
 8003e2c:	f04f 0300 	mov.w	r3, #0
 8003e30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e3c:	4692      	mov	sl, r2
 8003e3e:	469b      	mov	fp, r3
 8003e40:	4643      	mov	r3, r8
 8003e42:	eb1a 0303 	adds.w	r3, sl, r3
 8003e46:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e4a:	464b      	mov	r3, r9
 8003e4c:	eb4b 0303 	adc.w	r3, fp, r3
 8003e50:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e60:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003e64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e68:	460b      	mov	r3, r1
 8003e6a:	18db      	adds	r3, r3, r3
 8003e6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e6e:	4613      	mov	r3, r2
 8003e70:	eb42 0303 	adc.w	r3, r2, r3
 8003e74:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003e7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003e7e:	f7fc fa07 	bl	8000290 <__aeabi_uldivmod>
 8003e82:	4602      	mov	r2, r0
 8003e84:	460b      	mov	r3, r1
 8003e86:	4611      	mov	r1, r2
 8003e88:	4b3b      	ldr	r3, [pc, #236]	@ (8003f78 <UART_SetConfig+0x2d4>)
 8003e8a:	fba3 2301 	umull	r2, r3, r3, r1
 8003e8e:	095b      	lsrs	r3, r3, #5
 8003e90:	2264      	movs	r2, #100	@ 0x64
 8003e92:	fb02 f303 	mul.w	r3, r2, r3
 8003e96:	1acb      	subs	r3, r1, r3
 8003e98:	00db      	lsls	r3, r3, #3
 8003e9a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003e9e:	4b36      	ldr	r3, [pc, #216]	@ (8003f78 <UART_SetConfig+0x2d4>)
 8003ea0:	fba3 2302 	umull	r2, r3, r3, r2
 8003ea4:	095b      	lsrs	r3, r3, #5
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003eac:	441c      	add	r4, r3
 8003eae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003eb8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003ebc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003ec0:	4642      	mov	r2, r8
 8003ec2:	464b      	mov	r3, r9
 8003ec4:	1891      	adds	r1, r2, r2
 8003ec6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003ec8:	415b      	adcs	r3, r3
 8003eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ecc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003ed0:	4641      	mov	r1, r8
 8003ed2:	1851      	adds	r1, r2, r1
 8003ed4:	6339      	str	r1, [r7, #48]	@ 0x30
 8003ed6:	4649      	mov	r1, r9
 8003ed8:	414b      	adcs	r3, r1
 8003eda:	637b      	str	r3, [r7, #52]	@ 0x34
 8003edc:	f04f 0200 	mov.w	r2, #0
 8003ee0:	f04f 0300 	mov.w	r3, #0
 8003ee4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003ee8:	4659      	mov	r1, fp
 8003eea:	00cb      	lsls	r3, r1, #3
 8003eec:	4651      	mov	r1, sl
 8003eee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ef2:	4651      	mov	r1, sl
 8003ef4:	00ca      	lsls	r2, r1, #3
 8003ef6:	4610      	mov	r0, r2
 8003ef8:	4619      	mov	r1, r3
 8003efa:	4603      	mov	r3, r0
 8003efc:	4642      	mov	r2, r8
 8003efe:	189b      	adds	r3, r3, r2
 8003f00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f04:	464b      	mov	r3, r9
 8003f06:	460a      	mov	r2, r1
 8003f08:	eb42 0303 	adc.w	r3, r2, r3
 8003f0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f1c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003f20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f24:	460b      	mov	r3, r1
 8003f26:	18db      	adds	r3, r3, r3
 8003f28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	eb42 0303 	adc.w	r3, r2, r3
 8003f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003f3a:	f7fc f9a9 	bl	8000290 <__aeabi_uldivmod>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	460b      	mov	r3, r1
 8003f42:	4b0d      	ldr	r3, [pc, #52]	@ (8003f78 <UART_SetConfig+0x2d4>)
 8003f44:	fba3 1302 	umull	r1, r3, r3, r2
 8003f48:	095b      	lsrs	r3, r3, #5
 8003f4a:	2164      	movs	r1, #100	@ 0x64
 8003f4c:	fb01 f303 	mul.w	r3, r1, r3
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	3332      	adds	r3, #50	@ 0x32
 8003f56:	4a08      	ldr	r2, [pc, #32]	@ (8003f78 <UART_SetConfig+0x2d4>)
 8003f58:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5c:	095b      	lsrs	r3, r3, #5
 8003f5e:	f003 0207 	and.w	r2, r3, #7
 8003f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4422      	add	r2, r4
 8003f6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f6c:	e106      	b.n	800417c <UART_SetConfig+0x4d8>
 8003f6e:	bf00      	nop
 8003f70:	40011000 	.word	0x40011000
 8003f74:	40011400 	.word	0x40011400
 8003f78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f80:	2200      	movs	r2, #0
 8003f82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f86:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003f8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003f8e:	4642      	mov	r2, r8
 8003f90:	464b      	mov	r3, r9
 8003f92:	1891      	adds	r1, r2, r2
 8003f94:	6239      	str	r1, [r7, #32]
 8003f96:	415b      	adcs	r3, r3
 8003f98:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f9e:	4641      	mov	r1, r8
 8003fa0:	1854      	adds	r4, r2, r1
 8003fa2:	4649      	mov	r1, r9
 8003fa4:	eb43 0501 	adc.w	r5, r3, r1
 8003fa8:	f04f 0200 	mov.w	r2, #0
 8003fac:	f04f 0300 	mov.w	r3, #0
 8003fb0:	00eb      	lsls	r3, r5, #3
 8003fb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fb6:	00e2      	lsls	r2, r4, #3
 8003fb8:	4614      	mov	r4, r2
 8003fba:	461d      	mov	r5, r3
 8003fbc:	4643      	mov	r3, r8
 8003fbe:	18e3      	adds	r3, r4, r3
 8003fc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003fc4:	464b      	mov	r3, r9
 8003fc6:	eb45 0303 	adc.w	r3, r5, r3
 8003fca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003fda:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003fde:	f04f 0200 	mov.w	r2, #0
 8003fe2:	f04f 0300 	mov.w	r3, #0
 8003fe6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003fea:	4629      	mov	r1, r5
 8003fec:	008b      	lsls	r3, r1, #2
 8003fee:	4621      	mov	r1, r4
 8003ff0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ff4:	4621      	mov	r1, r4
 8003ff6:	008a      	lsls	r2, r1, #2
 8003ff8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003ffc:	f7fc f948 	bl	8000290 <__aeabi_uldivmod>
 8004000:	4602      	mov	r2, r0
 8004002:	460b      	mov	r3, r1
 8004004:	4b60      	ldr	r3, [pc, #384]	@ (8004188 <UART_SetConfig+0x4e4>)
 8004006:	fba3 2302 	umull	r2, r3, r3, r2
 800400a:	095b      	lsrs	r3, r3, #5
 800400c:	011c      	lsls	r4, r3, #4
 800400e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004012:	2200      	movs	r2, #0
 8004014:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004018:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800401c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004020:	4642      	mov	r2, r8
 8004022:	464b      	mov	r3, r9
 8004024:	1891      	adds	r1, r2, r2
 8004026:	61b9      	str	r1, [r7, #24]
 8004028:	415b      	adcs	r3, r3
 800402a:	61fb      	str	r3, [r7, #28]
 800402c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004030:	4641      	mov	r1, r8
 8004032:	1851      	adds	r1, r2, r1
 8004034:	6139      	str	r1, [r7, #16]
 8004036:	4649      	mov	r1, r9
 8004038:	414b      	adcs	r3, r1
 800403a:	617b      	str	r3, [r7, #20]
 800403c:	f04f 0200 	mov.w	r2, #0
 8004040:	f04f 0300 	mov.w	r3, #0
 8004044:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004048:	4659      	mov	r1, fp
 800404a:	00cb      	lsls	r3, r1, #3
 800404c:	4651      	mov	r1, sl
 800404e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004052:	4651      	mov	r1, sl
 8004054:	00ca      	lsls	r2, r1, #3
 8004056:	4610      	mov	r0, r2
 8004058:	4619      	mov	r1, r3
 800405a:	4603      	mov	r3, r0
 800405c:	4642      	mov	r2, r8
 800405e:	189b      	adds	r3, r3, r2
 8004060:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004064:	464b      	mov	r3, r9
 8004066:	460a      	mov	r2, r1
 8004068:	eb42 0303 	adc.w	r3, r2, r3
 800406c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	67bb      	str	r3, [r7, #120]	@ 0x78
 800407a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800407c:	f04f 0200 	mov.w	r2, #0
 8004080:	f04f 0300 	mov.w	r3, #0
 8004084:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004088:	4649      	mov	r1, r9
 800408a:	008b      	lsls	r3, r1, #2
 800408c:	4641      	mov	r1, r8
 800408e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004092:	4641      	mov	r1, r8
 8004094:	008a      	lsls	r2, r1, #2
 8004096:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800409a:	f7fc f8f9 	bl	8000290 <__aeabi_uldivmod>
 800409e:	4602      	mov	r2, r0
 80040a0:	460b      	mov	r3, r1
 80040a2:	4611      	mov	r1, r2
 80040a4:	4b38      	ldr	r3, [pc, #224]	@ (8004188 <UART_SetConfig+0x4e4>)
 80040a6:	fba3 2301 	umull	r2, r3, r3, r1
 80040aa:	095b      	lsrs	r3, r3, #5
 80040ac:	2264      	movs	r2, #100	@ 0x64
 80040ae:	fb02 f303 	mul.w	r3, r2, r3
 80040b2:	1acb      	subs	r3, r1, r3
 80040b4:	011b      	lsls	r3, r3, #4
 80040b6:	3332      	adds	r3, #50	@ 0x32
 80040b8:	4a33      	ldr	r2, [pc, #204]	@ (8004188 <UART_SetConfig+0x4e4>)
 80040ba:	fba2 2303 	umull	r2, r3, r2, r3
 80040be:	095b      	lsrs	r3, r3, #5
 80040c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040c4:	441c      	add	r4, r3
 80040c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040ca:	2200      	movs	r2, #0
 80040cc:	673b      	str	r3, [r7, #112]	@ 0x70
 80040ce:	677a      	str	r2, [r7, #116]	@ 0x74
 80040d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80040d4:	4642      	mov	r2, r8
 80040d6:	464b      	mov	r3, r9
 80040d8:	1891      	adds	r1, r2, r2
 80040da:	60b9      	str	r1, [r7, #8]
 80040dc:	415b      	adcs	r3, r3
 80040de:	60fb      	str	r3, [r7, #12]
 80040e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040e4:	4641      	mov	r1, r8
 80040e6:	1851      	adds	r1, r2, r1
 80040e8:	6039      	str	r1, [r7, #0]
 80040ea:	4649      	mov	r1, r9
 80040ec:	414b      	adcs	r3, r1
 80040ee:	607b      	str	r3, [r7, #4]
 80040f0:	f04f 0200 	mov.w	r2, #0
 80040f4:	f04f 0300 	mov.w	r3, #0
 80040f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80040fc:	4659      	mov	r1, fp
 80040fe:	00cb      	lsls	r3, r1, #3
 8004100:	4651      	mov	r1, sl
 8004102:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004106:	4651      	mov	r1, sl
 8004108:	00ca      	lsls	r2, r1, #3
 800410a:	4610      	mov	r0, r2
 800410c:	4619      	mov	r1, r3
 800410e:	4603      	mov	r3, r0
 8004110:	4642      	mov	r2, r8
 8004112:	189b      	adds	r3, r3, r2
 8004114:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004116:	464b      	mov	r3, r9
 8004118:	460a      	mov	r2, r1
 800411a:	eb42 0303 	adc.w	r3, r2, r3
 800411e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	663b      	str	r3, [r7, #96]	@ 0x60
 800412a:	667a      	str	r2, [r7, #100]	@ 0x64
 800412c:	f04f 0200 	mov.w	r2, #0
 8004130:	f04f 0300 	mov.w	r3, #0
 8004134:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004138:	4649      	mov	r1, r9
 800413a:	008b      	lsls	r3, r1, #2
 800413c:	4641      	mov	r1, r8
 800413e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004142:	4641      	mov	r1, r8
 8004144:	008a      	lsls	r2, r1, #2
 8004146:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800414a:	f7fc f8a1 	bl	8000290 <__aeabi_uldivmod>
 800414e:	4602      	mov	r2, r0
 8004150:	460b      	mov	r3, r1
 8004152:	4b0d      	ldr	r3, [pc, #52]	@ (8004188 <UART_SetConfig+0x4e4>)
 8004154:	fba3 1302 	umull	r1, r3, r3, r2
 8004158:	095b      	lsrs	r3, r3, #5
 800415a:	2164      	movs	r1, #100	@ 0x64
 800415c:	fb01 f303 	mul.w	r3, r1, r3
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	011b      	lsls	r3, r3, #4
 8004164:	3332      	adds	r3, #50	@ 0x32
 8004166:	4a08      	ldr	r2, [pc, #32]	@ (8004188 <UART_SetConfig+0x4e4>)
 8004168:	fba2 2303 	umull	r2, r3, r2, r3
 800416c:	095b      	lsrs	r3, r3, #5
 800416e:	f003 020f 	and.w	r2, r3, #15
 8004172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4422      	add	r2, r4
 800417a:	609a      	str	r2, [r3, #8]
}
 800417c:	bf00      	nop
 800417e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004182:	46bd      	mov	sp, r7
 8004184:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004188:	51eb851f 	.word	0x51eb851f

0800418c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	4603      	mov	r3, r0
 8004194:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004196:	2300      	movs	r3, #0
 8004198:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800419a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800419e:	2b84      	cmp	r3, #132	@ 0x84
 80041a0:	d005      	beq.n	80041ae <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80041a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	4413      	add	r3, r2
 80041aa:	3303      	adds	r3, #3
 80041ac:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80041ae:	68fb      	ldr	r3, [r7, #12]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3714      	adds	r7, #20
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80041c0:	f001 fa2e 	bl	8005620 <vTaskStartScheduler>
  
  return osOK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	bd80      	pop	{r7, pc}

080041ca <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80041ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041cc:	b089      	sub	sp, #36	@ 0x24
 80041ce:	af04      	add	r7, sp, #16
 80041d0:	6078      	str	r0, [r7, #4]
 80041d2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	695b      	ldr	r3, [r3, #20]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d020      	beq.n	800421e <osThreadCreate+0x54>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d01c      	beq.n	800421e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685c      	ldr	r4, [r3, #4]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	691e      	ldr	r6, [r3, #16]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7ff ffc8 	bl	800418c <makeFreeRtosPriority>
 80041fc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004206:	9202      	str	r2, [sp, #8]
 8004208:	9301      	str	r3, [sp, #4]
 800420a:	9100      	str	r1, [sp, #0]
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	4632      	mov	r2, r6
 8004210:	4629      	mov	r1, r5
 8004212:	4620      	mov	r0, r4
 8004214:	f001 f836 	bl	8005284 <xTaskCreateStatic>
 8004218:	4603      	mov	r3, r0
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	e01c      	b.n	8004258 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685c      	ldr	r4, [r3, #4]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800422a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004232:	4618      	mov	r0, r3
 8004234:	f7ff ffaa 	bl	800418c <makeFreeRtosPriority>
 8004238:	4602      	mov	r2, r0
 800423a:	f107 030c 	add.w	r3, r7, #12
 800423e:	9301      	str	r3, [sp, #4]
 8004240:	9200      	str	r2, [sp, #0]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	4632      	mov	r2, r6
 8004246:	4629      	mov	r1, r5
 8004248:	4620      	mov	r0, r4
 800424a:	f001 f87b 	bl	8005344 <xTaskCreate>
 800424e:	4603      	mov	r3, r0
 8004250:	2b01      	cmp	r3, #1
 8004252:	d001      	beq.n	8004258 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004254:	2300      	movs	r3, #0
 8004256:	e000      	b.n	800425a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004258:	68fb      	ldr	r3, [r7, #12]
}
 800425a:	4618      	mov	r0, r3
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004264 <osThreadYield>:
* @brief  Pass control to next thread that is in state \b READY.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadYield shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadYield (void)
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0
  taskYIELD();
 8004268:	4b06      	ldr	r3, [pc, #24]	@ (8004284 <osThreadYield+0x20>)
 800426a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800426e:	601a      	str	r2, [r3, #0]
 8004270:	f3bf 8f4f 	dsb	sy
 8004274:	f3bf 8f6f 	isb	sy
  
  return osOK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	e000ed04 	.word	0xe000ed04

08004288 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <osDelay+0x16>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	e000      	b.n	80042a0 <osDelay+0x18>
 800429e:	2301      	movs	r3, #1
 80042a0:	4618      	mov	r0, r3
 80042a2:	f001 f987 	bl	80055b4 <vTaskDelay>
  
  return osOK;
 80042a6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80042b6:	201c      	movs	r0, #28
 80042b8:	f002 fd90 	bl	8006ddc <pvPortMalloc>
 80042bc:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00a      	beq.n	80042da <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	3304      	adds	r3, #4
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 f9ce 	bl	8004670 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80042da:	687b      	ldr	r3, [r7, #4]
	}
 80042dc:	4618      	mov	r0, r3
 80042de:	3708      	adds	r7, #8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b090      	sub	sp, #64	@ 0x40
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
 80042f0:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80042f6:	2300      	movs	r3, #0
 80042f8:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80042fa:	2300      	movs	r3, #0
 80042fc:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10b      	bne.n	800431c <xEventGroupWaitBits+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004308:	f383 8811 	msr	BASEPRI, r3
 800430c:	f3bf 8f6f 	isb	sy
 8004310:	f3bf 8f4f 	dsb	sy
 8004314:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004316:	bf00      	nop
 8004318:	bf00      	nop
 800431a:	e7fd      	b.n	8004318 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004322:	d30b      	bcc.n	800433c <xEventGroupWaitBits+0x58>
	__asm volatile
 8004324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004328:	f383 8811 	msr	BASEPRI, r3
 800432c:	f3bf 8f6f 	isb	sy
 8004330:	f3bf 8f4f 	dsb	sy
 8004334:	61fb      	str	r3, [r7, #28]
}
 8004336:	bf00      	nop
 8004338:	bf00      	nop
 800433a:	e7fd      	b.n	8004338 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d10b      	bne.n	800435a <xEventGroupWaitBits+0x76>
	__asm volatile
 8004342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004346:	f383 8811 	msr	BASEPRI, r3
 800434a:	f3bf 8f6f 	isb	sy
 800434e:	f3bf 8f4f 	dsb	sy
 8004352:	61bb      	str	r3, [r7, #24]
}
 8004354:	bf00      	nop
 8004356:	bf00      	nop
 8004358:	e7fd      	b.n	8004356 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800435a:	f001 fe4f 	bl	8005ffc <xTaskGetSchedulerState>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d102      	bne.n	800436a <xEventGroupWaitBits+0x86>
 8004364:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <xEventGroupWaitBits+0x8a>
 800436a:	2301      	movs	r3, #1
 800436c:	e000      	b.n	8004370 <xEventGroupWaitBits+0x8c>
 800436e:	2300      	movs	r3, #0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10b      	bne.n	800438c <xEventGroupWaitBits+0xa8>
	__asm volatile
 8004374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004378:	f383 8811 	msr	BASEPRI, r3
 800437c:	f3bf 8f6f 	isb	sy
 8004380:	f3bf 8f4f 	dsb	sy
 8004384:	617b      	str	r3, [r7, #20]
}
 8004386:	bf00      	nop
 8004388:	bf00      	nop
 800438a:	e7fd      	b.n	8004388 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 800438c:	f001 f9b0 	bl	80056f0 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8004390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8004396:	683a      	ldr	r2, [r7, #0]
 8004398:	68b9      	ldr	r1, [r7, #8]
 800439a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800439c:	f000 f946 	bl	800462c <prvTestWaitCondition>
 80043a0:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 80043a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00e      	beq.n	80043c6 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80043a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80043ac:	2300      	movs	r3, #0
 80043ae:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d028      	beq.n	8004408 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80043b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	43db      	mvns	r3, r3
 80043be:	401a      	ands	r2, r3
 80043c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	e020      	b.n	8004408 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80043c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d104      	bne.n	80043d6 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80043cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 80043d0:	2301      	movs	r3, #1
 80043d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80043d4:	e018      	b.n	8004408 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d003      	beq.n	80043e4 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80043dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043e2:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d003      	beq.n	80043f2 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80043ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80043f0:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80043f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043f4:	1d18      	adds	r0, r3, #4
 80043f6:	68ba      	ldr	r2, [r7, #8]
 80043f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043fa:	4313      	orrs	r3, r2
 80043fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043fe:	4619      	mov	r1, r3
 8004400:	f001 fb6e 	bl	8005ae0 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8004404:	2300      	movs	r3, #0
 8004406:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8004408:	f001 f980 	bl	800570c <xTaskResumeAll>
 800440c:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800440e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004410:	2b00      	cmp	r3, #0
 8004412:	d031      	beq.n	8004478 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 8004414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004416:	2b00      	cmp	r3, #0
 8004418:	d107      	bne.n	800442a <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 800441a:	4b1a      	ldr	r3, [pc, #104]	@ (8004484 <xEventGroupWaitBits+0x1a0>)
 800441c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004420:	601a      	str	r2, [r3, #0]
 8004422:	f3bf 8f4f 	dsb	sy
 8004426:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800442a:	f001 fe8d 	bl	8006148 <uxTaskResetEventItemValue>
 800442e:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8004430:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d11a      	bne.n	8004470 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 800443a:	f002 fbad 	bl	8006b98 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800443e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	68b9      	ldr	r1, [r7, #8]
 8004448:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800444a:	f000 f8ef 	bl	800462c <prvTestWaitCondition>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d009      	beq.n	8004468 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d006      	beq.n	8004468 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800445a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	43db      	mvns	r3, r3
 8004462:	401a      	ands	r2, r3
 8004464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004466:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8004468:	2301      	movs	r3, #1
 800446a:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800446c:	f002 fbc6 	bl	8006bfc <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004470:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004472:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004476:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8004478:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800447a:	4618      	mov	r0, r3
 800447c:	3740      	adds	r7, #64	@ 0x40
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	e000ed04 	.word	0xe000ed04

08004488 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d10b      	bne.n	80044b4 <xEventGroupClearBits+0x2c>
	__asm volatile
 800449c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044a0:	f383 8811 	msr	BASEPRI, r3
 80044a4:	f3bf 8f6f 	isb	sy
 80044a8:	f3bf 8f4f 	dsb	sy
 80044ac:	60fb      	str	r3, [r7, #12]
}
 80044ae:	bf00      	nop
 80044b0:	bf00      	nop
 80044b2:	e7fd      	b.n	80044b0 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044ba:	d30b      	bcc.n	80044d4 <xEventGroupClearBits+0x4c>
	__asm volatile
 80044bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c0:	f383 8811 	msr	BASEPRI, r3
 80044c4:	f3bf 8f6f 	isb	sy
 80044c8:	f3bf 8f4f 	dsb	sy
 80044cc:	60bb      	str	r3, [r7, #8]
}
 80044ce:	bf00      	nop
 80044d0:	bf00      	nop
 80044d2:	e7fd      	b.n	80044d0 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 80044d4:	f002 fb60 	bl	8006b98 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	43db      	mvns	r3, r3
 80044e6:	401a      	ands	r2, r3
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 80044ec:	f002 fb86 	bl	8006bfc <vPortExitCritical>

	return uxReturn;
 80044f0:	693b      	ldr	r3, [r7, #16]
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3718      	adds	r7, #24
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b08e      	sub	sp, #56	@ 0x38
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
 8004502:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8004504:	2300      	movs	r3, #0
 8004506:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800450c:	2300      	movs	r3, #0
 800450e:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10b      	bne.n	800452e <xEventGroupSetBits+0x34>
	__asm volatile
 8004516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800451a:	f383 8811 	msr	BASEPRI, r3
 800451e:	f3bf 8f6f 	isb	sy
 8004522:	f3bf 8f4f 	dsb	sy
 8004526:	613b      	str	r3, [r7, #16]
}
 8004528:	bf00      	nop
 800452a:	bf00      	nop
 800452c:	e7fd      	b.n	800452a <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004534:	d30b      	bcc.n	800454e <xEventGroupSetBits+0x54>
	__asm volatile
 8004536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800453a:	f383 8811 	msr	BASEPRI, r3
 800453e:	f3bf 8f6f 	isb	sy
 8004542:	f3bf 8f4f 	dsb	sy
 8004546:	60fb      	str	r3, [r7, #12]
}
 8004548:	bf00      	nop
 800454a:	bf00      	nop
 800454c:	e7fd      	b.n	800454a <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800454e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004550:	3304      	adds	r3, #4
 8004552:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004556:	3308      	adds	r3, #8
 8004558:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800455a:	f001 f8c9 	bl	80056f0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800455e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8004564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	431a      	orrs	r2, r3
 800456c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800456e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8004570:	e03c      	b.n	80045ec <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8004572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8004578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800457e:	2300      	movs	r3, #0
 8004580:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8004588:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004590:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d108      	bne.n	80045ae <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800459c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	4013      	ands	r3, r2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00b      	beq.n	80045c0 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 80045a8:	2301      	movs	r3, #1
 80045aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045ac:	e008      	b.n	80045c0 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80045ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	4013      	ands	r3, r2
 80045b6:	69ba      	ldr	r2, [r7, #24]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d101      	bne.n	80045c0 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80045bc:	2301      	movs	r3, #1
 80045be:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80045c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d010      	beq.n	80045e8 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d003      	beq.n	80045d8 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80045d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80045d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80045e0:	4619      	mov	r1, r3
 80045e2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80045e4:	f001 fb4a 	bl	8005c7c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 80045ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d1be      	bne.n	8004572 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80045f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045fa:	43db      	mvns	r3, r3
 80045fc:	401a      	ands	r2, r3
 80045fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004600:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8004602:	f001 f883 	bl	800570c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8004606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004608:	681b      	ldr	r3, [r3, #0]
}
 800460a:	4618      	mov	r0, r3
 800460c:	3738      	adds	r7, #56	@ 0x38
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b082      	sub	sp, #8
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
 800461a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800461c:	6839      	ldr	r1, [r7, #0]
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7ff ff6b 	bl	80044fa <xEventGroupSetBits>
}
 8004624:	bf00      	nop
 8004626:	3708      	adds	r7, #8
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800462c:	b480      	push	{r7}
 800462e:	b087      	sub	sp, #28
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8004638:	2300      	movs	r3, #0
 800463a:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d107      	bne.n	8004652 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	4013      	ands	r3, r2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00a      	beq.n	8004662 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800464c:	2301      	movs	r3, #1
 800464e:	617b      	str	r3, [r7, #20]
 8004650:	e007      	b.n	8004662 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	4013      	ands	r3, r2
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	429a      	cmp	r2, r3
 800465c:	d101      	bne.n	8004662 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800465e:	2301      	movs	r3, #1
 8004660:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8004662:	697b      	ldr	r3, [r7, #20]
}
 8004664:	4618      	mov	r0, r3
 8004666:	371c      	adds	r7, #28
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f103 0208 	add.w	r2, r3, #8
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f04f 32ff 	mov.w	r2, #4294967295
 8004688:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f103 0208 	add.w	r2, r3, #8
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f103 0208 	add.w	r2, r3, #8
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80046a4:	bf00      	nop
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80046be:	bf00      	nop
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr

080046ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046ca:	b480      	push	{r7}
 80046cc:	b085      	sub	sp, #20
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
 80046d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	689a      	ldr	r2, [r3, #8]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	683a      	ldr	r2, [r7, #0]
 80046f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	1c5a      	adds	r2, r3, #1
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	601a      	str	r2, [r3, #0]
}
 8004706:	bf00      	nop
 8004708:	3714      	adds	r7, #20
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004712:	b480      	push	{r7}
 8004714:	b085      	sub	sp, #20
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
 800471a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004728:	d103      	bne.n	8004732 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	60fb      	str	r3, [r7, #12]
 8004730:	e00c      	b.n	800474c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	3308      	adds	r3, #8
 8004736:	60fb      	str	r3, [r7, #12]
 8004738:	e002      	b.n	8004740 <vListInsert+0x2e>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	60fb      	str	r3, [r7, #12]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	429a      	cmp	r2, r3
 800474a:	d2f6      	bcs.n	800473a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	683a      	ldr	r2, [r7, #0]
 800475a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	1c5a      	adds	r2, r3, #1
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	601a      	str	r2, [r3, #0]
}
 8004778:	bf00      	nop
 800477a:	3714      	adds	r7, #20
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004784:	b480      	push	{r7}
 8004786:	b085      	sub	sp, #20
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	6892      	ldr	r2, [r2, #8]
 800479a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	6852      	ldr	r2, [r2, #4]
 80047a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d103      	bne.n	80047b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	1e5a      	subs	r2, r3, #1
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3714      	adds	r7, #20
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10b      	bne.n	8004804 <xQueueGenericReset+0x2c>
	__asm volatile
 80047ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f0:	f383 8811 	msr	BASEPRI, r3
 80047f4:	f3bf 8f6f 	isb	sy
 80047f8:	f3bf 8f4f 	dsb	sy
 80047fc:	60bb      	str	r3, [r7, #8]
}
 80047fe:	bf00      	nop
 8004800:	bf00      	nop
 8004802:	e7fd      	b.n	8004800 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004804:	f002 f9c8 	bl	8006b98 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004810:	68f9      	ldr	r1, [r7, #12]
 8004812:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004814:	fb01 f303 	mul.w	r3, r1, r3
 8004818:	441a      	add	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004834:	3b01      	subs	r3, #1
 8004836:	68f9      	ldr	r1, [r7, #12]
 8004838:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800483a:	fb01 f303 	mul.w	r3, r1, r3
 800483e:	441a      	add	r2, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	22ff      	movs	r2, #255	@ 0xff
 8004848:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	22ff      	movs	r2, #255	@ 0xff
 8004850:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d114      	bne.n	8004884 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d01a      	beq.n	8004898 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	3310      	adds	r3, #16
 8004866:	4618      	mov	r0, r3
 8004868:	f001 f9a4 	bl	8005bb4 <xTaskRemoveFromEventList>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d012      	beq.n	8004898 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004872:	4b0d      	ldr	r3, [pc, #52]	@ (80048a8 <xQueueGenericReset+0xd0>)
 8004874:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004878:	601a      	str	r2, [r3, #0]
 800487a:	f3bf 8f4f 	dsb	sy
 800487e:	f3bf 8f6f 	isb	sy
 8004882:	e009      	b.n	8004898 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	3310      	adds	r3, #16
 8004888:	4618      	mov	r0, r3
 800488a:	f7ff fef1 	bl	8004670 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	3324      	adds	r3, #36	@ 0x24
 8004892:	4618      	mov	r0, r3
 8004894:	f7ff feec 	bl	8004670 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004898:	f002 f9b0 	bl	8006bfc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800489c:	2301      	movs	r3, #1
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	e000ed04 	.word	0xe000ed04

080048ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b08e      	sub	sp, #56	@ 0x38
 80048b0:	af02      	add	r7, sp, #8
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
 80048b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10b      	bne.n	80048d8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80048c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048c4:	f383 8811 	msr	BASEPRI, r3
 80048c8:	f3bf 8f6f 	isb	sy
 80048cc:	f3bf 8f4f 	dsb	sy
 80048d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80048d2:	bf00      	nop
 80048d4:	bf00      	nop
 80048d6:	e7fd      	b.n	80048d4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d10b      	bne.n	80048f6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80048de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048e2:	f383 8811 	msr	BASEPRI, r3
 80048e6:	f3bf 8f6f 	isb	sy
 80048ea:	f3bf 8f4f 	dsb	sy
 80048ee:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80048f0:	bf00      	nop
 80048f2:	bf00      	nop
 80048f4:	e7fd      	b.n	80048f2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d002      	beq.n	8004902 <xQueueGenericCreateStatic+0x56>
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <xQueueGenericCreateStatic+0x5a>
 8004902:	2301      	movs	r3, #1
 8004904:	e000      	b.n	8004908 <xQueueGenericCreateStatic+0x5c>
 8004906:	2300      	movs	r3, #0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d10b      	bne.n	8004924 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800490c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004910:	f383 8811 	msr	BASEPRI, r3
 8004914:	f3bf 8f6f 	isb	sy
 8004918:	f3bf 8f4f 	dsb	sy
 800491c:	623b      	str	r3, [r7, #32]
}
 800491e:	bf00      	nop
 8004920:	bf00      	nop
 8004922:	e7fd      	b.n	8004920 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d102      	bne.n	8004930 <xQueueGenericCreateStatic+0x84>
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d101      	bne.n	8004934 <xQueueGenericCreateStatic+0x88>
 8004930:	2301      	movs	r3, #1
 8004932:	e000      	b.n	8004936 <xQueueGenericCreateStatic+0x8a>
 8004934:	2300      	movs	r3, #0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10b      	bne.n	8004952 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800493a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800493e:	f383 8811 	msr	BASEPRI, r3
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	61fb      	str	r3, [r7, #28]
}
 800494c:	bf00      	nop
 800494e:	bf00      	nop
 8004950:	e7fd      	b.n	800494e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004952:	2348      	movs	r3, #72	@ 0x48
 8004954:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	2b48      	cmp	r3, #72	@ 0x48
 800495a:	d00b      	beq.n	8004974 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800495c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004960:	f383 8811 	msr	BASEPRI, r3
 8004964:	f3bf 8f6f 	isb	sy
 8004968:	f3bf 8f4f 	dsb	sy
 800496c:	61bb      	str	r3, [r7, #24]
}
 800496e:	bf00      	nop
 8004970:	bf00      	nop
 8004972:	e7fd      	b.n	8004970 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004974:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800497a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00d      	beq.n	800499c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004988:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800498c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	4613      	mov	r3, r2
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	68b9      	ldr	r1, [r7, #8]
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f000 f840 	bl	8004a1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800499c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800499e:	4618      	mov	r0, r3
 80049a0:	3730      	adds	r7, #48	@ 0x30
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b08a      	sub	sp, #40	@ 0x28
 80049aa:	af02      	add	r7, sp, #8
 80049ac:	60f8      	str	r0, [r7, #12]
 80049ae:	60b9      	str	r1, [r7, #8]
 80049b0:	4613      	mov	r3, r2
 80049b2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10b      	bne.n	80049d2 <xQueueGenericCreate+0x2c>
	__asm volatile
 80049ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049be:	f383 8811 	msr	BASEPRI, r3
 80049c2:	f3bf 8f6f 	isb	sy
 80049c6:	f3bf 8f4f 	dsb	sy
 80049ca:	613b      	str	r3, [r7, #16]
}
 80049cc:	bf00      	nop
 80049ce:	bf00      	nop
 80049d0:	e7fd      	b.n	80049ce <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	68ba      	ldr	r2, [r7, #8]
 80049d6:	fb02 f303 	mul.w	r3, r2, r3
 80049da:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	3348      	adds	r3, #72	@ 0x48
 80049e0:	4618      	mov	r0, r3
 80049e2:	f002 f9fb 	bl	8006ddc <pvPortMalloc>
 80049e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d011      	beq.n	8004a12 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	3348      	adds	r3, #72	@ 0x48
 80049f6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a00:	79fa      	ldrb	r2, [r7, #7]
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	9300      	str	r3, [sp, #0]
 8004a06:	4613      	mov	r3, r2
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	68b9      	ldr	r1, [r7, #8]
 8004a0c:	68f8      	ldr	r0, [r7, #12]
 8004a0e:	f000 f805 	bl	8004a1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004a12:	69bb      	ldr	r3, [r7, #24]
	}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3720      	adds	r7, #32
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
 8004a28:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d103      	bne.n	8004a38 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	69ba      	ldr	r2, [r7, #24]
 8004a34:	601a      	str	r2, [r3, #0]
 8004a36:	e002      	b.n	8004a3e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a4a:	2101      	movs	r1, #1
 8004a4c:	69b8      	ldr	r0, [r7, #24]
 8004a4e:	f7ff fec3 	bl	80047d8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004a52:	bf00      	nop
 8004a54:	3710      	adds	r7, #16
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
	...

08004a5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b08e      	sub	sp, #56	@ 0x38
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
 8004a68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d10b      	bne.n	8004a90 <xQueueGenericSend+0x34>
	__asm volatile
 8004a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a7c:	f383 8811 	msr	BASEPRI, r3
 8004a80:	f3bf 8f6f 	isb	sy
 8004a84:	f3bf 8f4f 	dsb	sy
 8004a88:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004a8a:	bf00      	nop
 8004a8c:	bf00      	nop
 8004a8e:	e7fd      	b.n	8004a8c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d103      	bne.n	8004a9e <xQueueGenericSend+0x42>
 8004a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <xQueueGenericSend+0x46>
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e000      	b.n	8004aa4 <xQueueGenericSend+0x48>
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10b      	bne.n	8004ac0 <xQueueGenericSend+0x64>
	__asm volatile
 8004aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aac:	f383 8811 	msr	BASEPRI, r3
 8004ab0:	f3bf 8f6f 	isb	sy
 8004ab4:	f3bf 8f4f 	dsb	sy
 8004ab8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004aba:	bf00      	nop
 8004abc:	bf00      	nop
 8004abe:	e7fd      	b.n	8004abc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d103      	bne.n	8004ace <xQueueGenericSend+0x72>
 8004ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d101      	bne.n	8004ad2 <xQueueGenericSend+0x76>
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e000      	b.n	8004ad4 <xQueueGenericSend+0x78>
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d10b      	bne.n	8004af0 <xQueueGenericSend+0x94>
	__asm volatile
 8004ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004adc:	f383 8811 	msr	BASEPRI, r3
 8004ae0:	f3bf 8f6f 	isb	sy
 8004ae4:	f3bf 8f4f 	dsb	sy
 8004ae8:	623b      	str	r3, [r7, #32]
}
 8004aea:	bf00      	nop
 8004aec:	bf00      	nop
 8004aee:	e7fd      	b.n	8004aec <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004af0:	f001 fa84 	bl	8005ffc <xTaskGetSchedulerState>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d102      	bne.n	8004b00 <xQueueGenericSend+0xa4>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d101      	bne.n	8004b04 <xQueueGenericSend+0xa8>
 8004b00:	2301      	movs	r3, #1
 8004b02:	e000      	b.n	8004b06 <xQueueGenericSend+0xaa>
 8004b04:	2300      	movs	r3, #0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10b      	bne.n	8004b22 <xQueueGenericSend+0xc6>
	__asm volatile
 8004b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b0e:	f383 8811 	msr	BASEPRI, r3
 8004b12:	f3bf 8f6f 	isb	sy
 8004b16:	f3bf 8f4f 	dsb	sy
 8004b1a:	61fb      	str	r3, [r7, #28]
}
 8004b1c:	bf00      	nop
 8004b1e:	bf00      	nop
 8004b20:	e7fd      	b.n	8004b1e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b22:	f002 f839 	bl	8006b98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d302      	bcc.n	8004b38 <xQueueGenericSend+0xdc>
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d129      	bne.n	8004b8c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b38:	683a      	ldr	r2, [r7, #0]
 8004b3a:	68b9      	ldr	r1, [r7, #8]
 8004b3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b3e:	f000 fa33 	bl	8004fa8 <prvCopyDataToQueue>
 8004b42:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d010      	beq.n	8004b6e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b4e:	3324      	adds	r3, #36	@ 0x24
 8004b50:	4618      	mov	r0, r3
 8004b52:	f001 f82f 	bl	8005bb4 <xTaskRemoveFromEventList>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d013      	beq.n	8004b84 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004b5c:	4b3f      	ldr	r3, [pc, #252]	@ (8004c5c <xQueueGenericSend+0x200>)
 8004b5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b62:	601a      	str	r2, [r3, #0]
 8004b64:	f3bf 8f4f 	dsb	sy
 8004b68:	f3bf 8f6f 	isb	sy
 8004b6c:	e00a      	b.n	8004b84 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d007      	beq.n	8004b84 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004b74:	4b39      	ldr	r3, [pc, #228]	@ (8004c5c <xQueueGenericSend+0x200>)
 8004b76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b7a:	601a      	str	r2, [r3, #0]
 8004b7c:	f3bf 8f4f 	dsb	sy
 8004b80:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004b84:	f002 f83a 	bl	8006bfc <vPortExitCritical>
				return pdPASS;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e063      	b.n	8004c54 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d103      	bne.n	8004b9a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b92:	f002 f833 	bl	8006bfc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004b96:	2300      	movs	r3, #0
 8004b98:	e05c      	b.n	8004c54 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d106      	bne.n	8004bae <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ba0:	f107 0314 	add.w	r3, r7, #20
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f001 f8cd 	bl	8005d44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004baa:	2301      	movs	r3, #1
 8004bac:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004bae:	f002 f825 	bl	8006bfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004bb2:	f000 fd9d 	bl	80056f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004bb6:	f001 ffef 	bl	8006b98 <vPortEnterCritical>
 8004bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bbc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004bc0:	b25b      	sxtb	r3, r3
 8004bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc6:	d103      	bne.n	8004bd0 <xQueueGenericSend+0x174>
 8004bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004bd6:	b25b      	sxtb	r3, r3
 8004bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bdc:	d103      	bne.n	8004be6 <xQueueGenericSend+0x18a>
 8004bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004be6:	f002 f809 	bl	8006bfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004bea:	1d3a      	adds	r2, r7, #4
 8004bec:	f107 0314 	add.w	r3, r7, #20
 8004bf0:	4611      	mov	r1, r2
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f001 f8bc 	bl	8005d70 <xTaskCheckForTimeOut>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d124      	bne.n	8004c48 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004bfe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c00:	f000 faca 	bl	8005198 <prvIsQueueFull>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d018      	beq.n	8004c3c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c0c:	3310      	adds	r3, #16
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	4611      	mov	r1, r2
 8004c12:	4618      	mov	r0, r3
 8004c14:	f000 ff3e 	bl	8005a94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004c18:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c1a:	f000 fa55 	bl	80050c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004c1e:	f000 fd75 	bl	800570c <xTaskResumeAll>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f47f af7c 	bne.w	8004b22 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8004c5c <xQueueGenericSend+0x200>)
 8004c2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c30:	601a      	str	r2, [r3, #0]
 8004c32:	f3bf 8f4f 	dsb	sy
 8004c36:	f3bf 8f6f 	isb	sy
 8004c3a:	e772      	b.n	8004b22 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004c3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c3e:	f000 fa43 	bl	80050c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c42:	f000 fd63 	bl	800570c <xTaskResumeAll>
 8004c46:	e76c      	b.n	8004b22 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004c48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c4a:	f000 fa3d 	bl	80050c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c4e:	f000 fd5d 	bl	800570c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004c52:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3738      	adds	r7, #56	@ 0x38
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	e000ed04 	.word	0xe000ed04

08004c60 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b090      	sub	sp, #64	@ 0x40
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
 8004c6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10b      	bne.n	8004c90 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004c78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c7c:	f383 8811 	msr	BASEPRI, r3
 8004c80:	f3bf 8f6f 	isb	sy
 8004c84:	f3bf 8f4f 	dsb	sy
 8004c88:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004c8a:	bf00      	nop
 8004c8c:	bf00      	nop
 8004c8e:	e7fd      	b.n	8004c8c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d103      	bne.n	8004c9e <xQueueGenericSendFromISR+0x3e>
 8004c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <xQueueGenericSendFromISR+0x42>
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e000      	b.n	8004ca4 <xQueueGenericSendFromISR+0x44>
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10b      	bne.n	8004cc0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cac:	f383 8811 	msr	BASEPRI, r3
 8004cb0:	f3bf 8f6f 	isb	sy
 8004cb4:	f3bf 8f4f 	dsb	sy
 8004cb8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004cba:	bf00      	nop
 8004cbc:	bf00      	nop
 8004cbe:	e7fd      	b.n	8004cbc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d103      	bne.n	8004cce <xQueueGenericSendFromISR+0x6e>
 8004cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d101      	bne.n	8004cd2 <xQueueGenericSendFromISR+0x72>
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e000      	b.n	8004cd4 <xQueueGenericSendFromISR+0x74>
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d10b      	bne.n	8004cf0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cdc:	f383 8811 	msr	BASEPRI, r3
 8004ce0:	f3bf 8f6f 	isb	sy
 8004ce4:	f3bf 8f4f 	dsb	sy
 8004ce8:	623b      	str	r3, [r7, #32]
}
 8004cea:	bf00      	nop
 8004cec:	bf00      	nop
 8004cee:	e7fd      	b.n	8004cec <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004cf0:	f002 f832 	bl	8006d58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004cf4:	f3ef 8211 	mrs	r2, BASEPRI
 8004cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cfc:	f383 8811 	msr	BASEPRI, r3
 8004d00:	f3bf 8f6f 	isb	sy
 8004d04:	f3bf 8f4f 	dsb	sy
 8004d08:	61fa      	str	r2, [r7, #28]
 8004d0a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004d0c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d0e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d302      	bcc.n	8004d22 <xQueueGenericSendFromISR+0xc2>
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d12f      	bne.n	8004d82 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d28:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d32:	683a      	ldr	r2, [r7, #0]
 8004d34:	68b9      	ldr	r1, [r7, #8]
 8004d36:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004d38:	f000 f936 	bl	8004fa8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004d3c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d44:	d112      	bne.n	8004d6c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d016      	beq.n	8004d7c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d50:	3324      	adds	r3, #36	@ 0x24
 8004d52:	4618      	mov	r0, r3
 8004d54:	f000 ff2e 	bl	8005bb4 <xTaskRemoveFromEventList>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00e      	beq.n	8004d7c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00b      	beq.n	8004d7c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	601a      	str	r2, [r3, #0]
 8004d6a:	e007      	b.n	8004d7c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004d6c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004d70:	3301      	adds	r3, #1
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	b25a      	sxtb	r2, r3
 8004d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004d80:	e001      	b.n	8004d86 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004d82:	2300      	movs	r3, #0
 8004d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d88:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004d90:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004d92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3740      	adds	r7, #64	@ 0x40
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b08c      	sub	sp, #48	@ 0x30
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004da8:	2300      	movs	r3, #0
 8004daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10b      	bne.n	8004dce <xQueueReceive+0x32>
	__asm volatile
 8004db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dba:	f383 8811 	msr	BASEPRI, r3
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	f3bf 8f4f 	dsb	sy
 8004dc6:	623b      	str	r3, [r7, #32]
}
 8004dc8:	bf00      	nop
 8004dca:	bf00      	nop
 8004dcc:	e7fd      	b.n	8004dca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d103      	bne.n	8004ddc <xQueueReceive+0x40>
 8004dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d101      	bne.n	8004de0 <xQueueReceive+0x44>
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e000      	b.n	8004de2 <xQueueReceive+0x46>
 8004de0:	2300      	movs	r3, #0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d10b      	bne.n	8004dfe <xQueueReceive+0x62>
	__asm volatile
 8004de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dea:	f383 8811 	msr	BASEPRI, r3
 8004dee:	f3bf 8f6f 	isb	sy
 8004df2:	f3bf 8f4f 	dsb	sy
 8004df6:	61fb      	str	r3, [r7, #28]
}
 8004df8:	bf00      	nop
 8004dfa:	bf00      	nop
 8004dfc:	e7fd      	b.n	8004dfa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004dfe:	f001 f8fd 	bl	8005ffc <xTaskGetSchedulerState>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d102      	bne.n	8004e0e <xQueueReceive+0x72>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <xQueueReceive+0x76>
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e000      	b.n	8004e14 <xQueueReceive+0x78>
 8004e12:	2300      	movs	r3, #0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10b      	bne.n	8004e30 <xQueueReceive+0x94>
	__asm volatile
 8004e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e1c:	f383 8811 	msr	BASEPRI, r3
 8004e20:	f3bf 8f6f 	isb	sy
 8004e24:	f3bf 8f4f 	dsb	sy
 8004e28:	61bb      	str	r3, [r7, #24]
}
 8004e2a:	bf00      	nop
 8004e2c:	bf00      	nop
 8004e2e:	e7fd      	b.n	8004e2c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e30:	f001 feb2 	bl	8006b98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e38:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d01f      	beq.n	8004e80 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e40:	68b9      	ldr	r1, [r7, #8]
 8004e42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e44:	f000 f91a 	bl	800507c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e4a:	1e5a      	subs	r2, r3, #1
 8004e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e4e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00f      	beq.n	8004e78 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e5a:	3310      	adds	r3, #16
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f000 fea9 	bl	8005bb4 <xTaskRemoveFromEventList>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d007      	beq.n	8004e78 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004e68:	4b3c      	ldr	r3, [pc, #240]	@ (8004f5c <xQueueReceive+0x1c0>)
 8004e6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e6e:	601a      	str	r2, [r3, #0]
 8004e70:	f3bf 8f4f 	dsb	sy
 8004e74:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004e78:	f001 fec0 	bl	8006bfc <vPortExitCritical>
				return pdPASS;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e069      	b.n	8004f54 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d103      	bne.n	8004e8e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e86:	f001 feb9 	bl	8006bfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	e062      	b.n	8004f54 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d106      	bne.n	8004ea2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e94:	f107 0310 	add.w	r3, r7, #16
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f000 ff53 	bl	8005d44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ea2:	f001 feab 	bl	8006bfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ea6:	f000 fc23 	bl	80056f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004eaa:	f001 fe75 	bl	8006b98 <vPortEnterCritical>
 8004eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004eb4:	b25b      	sxtb	r3, r3
 8004eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eba:	d103      	bne.n	8004ec4 <xQueueReceive+0x128>
 8004ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ec6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004eca:	b25b      	sxtb	r3, r3
 8004ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed0:	d103      	bne.n	8004eda <xQueueReceive+0x13e>
 8004ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004eda:	f001 fe8f 	bl	8006bfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ede:	1d3a      	adds	r2, r7, #4
 8004ee0:	f107 0310 	add.w	r3, r7, #16
 8004ee4:	4611      	mov	r1, r2
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f000 ff42 	bl	8005d70 <xTaskCheckForTimeOut>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d123      	bne.n	8004f3a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ef2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ef4:	f000 f93a 	bl	800516c <prvIsQueueEmpty>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d017      	beq.n	8004f2e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f00:	3324      	adds	r3, #36	@ 0x24
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	4611      	mov	r1, r2
 8004f06:	4618      	mov	r0, r3
 8004f08:	f000 fdc4 	bl	8005a94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f0e:	f000 f8db 	bl	80050c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f12:	f000 fbfb 	bl	800570c <xTaskResumeAll>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d189      	bne.n	8004e30 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8004f5c <xQueueReceive+0x1c0>)
 8004f1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f22:	601a      	str	r2, [r3, #0]
 8004f24:	f3bf 8f4f 	dsb	sy
 8004f28:	f3bf 8f6f 	isb	sy
 8004f2c:	e780      	b.n	8004e30 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004f2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f30:	f000 f8ca 	bl	80050c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f34:	f000 fbea 	bl	800570c <xTaskResumeAll>
 8004f38:	e77a      	b.n	8004e30 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004f3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f3c:	f000 f8c4 	bl	80050c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f40:	f000 fbe4 	bl	800570c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f46:	f000 f911 	bl	800516c <prvIsQueueEmpty>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f43f af6f 	beq.w	8004e30 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f52:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3730      	adds	r7, #48	@ 0x30
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	e000ed04 	.word	0xe000ed04

08004f60 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10b      	bne.n	8004f8a <uxQueueSpacesAvailable+0x2a>
	__asm volatile
 8004f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f76:	f383 8811 	msr	BASEPRI, r3
 8004f7a:	f3bf 8f6f 	isb	sy
 8004f7e:	f3bf 8f4f 	dsb	sy
 8004f82:	60fb      	str	r3, [r7, #12]
}
 8004f84:	bf00      	nop
 8004f86:	bf00      	nop
 8004f88:	e7fd      	b.n	8004f86 <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 8004f8a:	f001 fe05 	bl	8006b98 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8004f9a:	f001 fe2f 	bl	8006bfc <vPortExitCritical>

	return uxReturn;
 8004f9e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3718      	adds	r7, #24
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b086      	sub	sp, #24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fbc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10d      	bne.n	8004fe2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d14d      	bne.n	800506a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f001 f830 	bl	8006038 <xTaskPriorityDisinherit>
 8004fd8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	609a      	str	r2, [r3, #8]
 8004fe0:	e043      	b.n	800506a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d119      	bne.n	800501c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6858      	ldr	r0, [r3, #4]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	68b9      	ldr	r1, [r7, #8]
 8004ff4:	f002 fac7 	bl	8007586 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005000:	441a      	add	r2, r3
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	429a      	cmp	r2, r3
 8005010:	d32b      	bcc.n	800506a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	605a      	str	r2, [r3, #4]
 800501a:	e026      	b.n	800506a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	68d8      	ldr	r0, [r3, #12]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005024:	461a      	mov	r2, r3
 8005026:	68b9      	ldr	r1, [r7, #8]
 8005028:	f002 faad 	bl	8007586 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	68da      	ldr	r2, [r3, #12]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005034:	425b      	negs	r3, r3
 8005036:	441a      	add	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	68da      	ldr	r2, [r3, #12]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	429a      	cmp	r2, r3
 8005046:	d207      	bcs.n	8005058 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	689a      	ldr	r2, [r3, #8]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005050:	425b      	negs	r3, r3
 8005052:	441a      	add	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2b02      	cmp	r3, #2
 800505c:	d105      	bne.n	800506a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d002      	beq.n	800506a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	3b01      	subs	r3, #1
 8005068:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	1c5a      	adds	r2, r3, #1
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005072:	697b      	ldr	r3, [r7, #20]
}
 8005074:	4618      	mov	r0, r3
 8005076:	3718      	adds	r7, #24
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800508a:	2b00      	cmp	r3, #0
 800508c:	d018      	beq.n	80050c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	68da      	ldr	r2, [r3, #12]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005096:	441a      	add	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	68da      	ldr	r2, [r3, #12]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d303      	bcc.n	80050b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	68d9      	ldr	r1, [r3, #12]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b8:	461a      	mov	r2, r3
 80050ba:	6838      	ldr	r0, [r7, #0]
 80050bc:	f002 fa63 	bl	8007586 <memcpy>
	}
}
 80050c0:	bf00      	nop
 80050c2:	3708      	adds	r7, #8
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80050d0:	f001 fd62 	bl	8006b98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80050da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050dc:	e011      	b.n	8005102 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d012      	beq.n	800510c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	3324      	adds	r3, #36	@ 0x24
 80050ea:	4618      	mov	r0, r3
 80050ec:	f000 fd62 	bl	8005bb4 <xTaskRemoveFromEventList>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80050f6:	f000 fe9f 	bl	8005e38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80050fa:	7bfb      	ldrb	r3, [r7, #15]
 80050fc:	3b01      	subs	r3, #1
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005106:	2b00      	cmp	r3, #0
 8005108:	dce9      	bgt.n	80050de <prvUnlockQueue+0x16>
 800510a:	e000      	b.n	800510e <prvUnlockQueue+0x46>
					break;
 800510c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	22ff      	movs	r2, #255	@ 0xff
 8005112:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005116:	f001 fd71 	bl	8006bfc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800511a:	f001 fd3d 	bl	8006b98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005124:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005126:	e011      	b.n	800514c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d012      	beq.n	8005156 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	3310      	adds	r3, #16
 8005134:	4618      	mov	r0, r3
 8005136:	f000 fd3d 	bl	8005bb4 <xTaskRemoveFromEventList>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d001      	beq.n	8005144 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005140:	f000 fe7a 	bl	8005e38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005144:	7bbb      	ldrb	r3, [r7, #14]
 8005146:	3b01      	subs	r3, #1
 8005148:	b2db      	uxtb	r3, r3
 800514a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800514c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005150:	2b00      	cmp	r3, #0
 8005152:	dce9      	bgt.n	8005128 <prvUnlockQueue+0x60>
 8005154:	e000      	b.n	8005158 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005156:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	22ff      	movs	r2, #255	@ 0xff
 800515c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005160:	f001 fd4c 	bl	8006bfc <vPortExitCritical>
}
 8005164:	bf00      	nop
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005174:	f001 fd10 	bl	8006b98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800517c:	2b00      	cmp	r3, #0
 800517e:	d102      	bne.n	8005186 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005180:	2301      	movs	r3, #1
 8005182:	60fb      	str	r3, [r7, #12]
 8005184:	e001      	b.n	800518a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005186:	2300      	movs	r3, #0
 8005188:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800518a:	f001 fd37 	bl	8006bfc <vPortExitCritical>

	return xReturn;
 800518e:	68fb      	ldr	r3, [r7, #12]
}
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80051a0:	f001 fcfa 	bl	8006b98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d102      	bne.n	80051b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80051b0:	2301      	movs	r3, #1
 80051b2:	60fb      	str	r3, [r7, #12]
 80051b4:	e001      	b.n	80051ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80051b6:	2300      	movs	r3, #0
 80051b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80051ba:	f001 fd1f 	bl	8006bfc <vPortExitCritical>

	return xReturn;
 80051be:	68fb      	ldr	r3, [r7, #12]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80051d2:	2300      	movs	r3, #0
 80051d4:	60fb      	str	r3, [r7, #12]
 80051d6:	e014      	b.n	8005202 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80051d8:	4a0f      	ldr	r2, [pc, #60]	@ (8005218 <vQueueAddToRegistry+0x50>)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d10b      	bne.n	80051fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80051e4:	490c      	ldr	r1, [pc, #48]	@ (8005218 <vQueueAddToRegistry+0x50>)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	683a      	ldr	r2, [r7, #0]
 80051ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80051ee:	4a0a      	ldr	r2, [pc, #40]	@ (8005218 <vQueueAddToRegistry+0x50>)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	00db      	lsls	r3, r3, #3
 80051f4:	4413      	add	r3, r2
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80051fa:	e006      	b.n	800520a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	3301      	adds	r3, #1
 8005200:	60fb      	str	r3, [r7, #12]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2b07      	cmp	r3, #7
 8005206:	d9e7      	bls.n	80051d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005208:	bf00      	nop
 800520a:	bf00      	nop
 800520c:	3714      	adds	r7, #20
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	2000065c 	.word	0x2000065c

0800521c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800521c:	b580      	push	{r7, lr}
 800521e:	b086      	sub	sp, #24
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800522c:	f001 fcb4 	bl	8006b98 <vPortEnterCritical>
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005236:	b25b      	sxtb	r3, r3
 8005238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800523c:	d103      	bne.n	8005246 <vQueueWaitForMessageRestricted+0x2a>
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800524c:	b25b      	sxtb	r3, r3
 800524e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005252:	d103      	bne.n	800525c <vQueueWaitForMessageRestricted+0x40>
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800525c:	f001 fcce 	bl	8006bfc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005264:	2b00      	cmp	r3, #0
 8005266:	d106      	bne.n	8005276 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	3324      	adds	r3, #36	@ 0x24
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	68b9      	ldr	r1, [r7, #8]
 8005270:	4618      	mov	r0, r3
 8005272:	f000 fc73 	bl	8005b5c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005276:	6978      	ldr	r0, [r7, #20]
 8005278:	f7ff ff26 	bl	80050c8 <prvUnlockQueue>
	}
 800527c:	bf00      	nop
 800527e:	3718      	adds	r7, #24
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005284:	b580      	push	{r7, lr}
 8005286:	b08e      	sub	sp, #56	@ 0x38
 8005288:	af04      	add	r7, sp, #16
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
 8005290:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10b      	bne.n	80052b0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800529c:	f383 8811 	msr	BASEPRI, r3
 80052a0:	f3bf 8f6f 	isb	sy
 80052a4:	f3bf 8f4f 	dsb	sy
 80052a8:	623b      	str	r3, [r7, #32]
}
 80052aa:	bf00      	nop
 80052ac:	bf00      	nop
 80052ae:	e7fd      	b.n	80052ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80052b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10b      	bne.n	80052ce <xTaskCreateStatic+0x4a>
	__asm volatile
 80052b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ba:	f383 8811 	msr	BASEPRI, r3
 80052be:	f3bf 8f6f 	isb	sy
 80052c2:	f3bf 8f4f 	dsb	sy
 80052c6:	61fb      	str	r3, [r7, #28]
}
 80052c8:	bf00      	nop
 80052ca:	bf00      	nop
 80052cc:	e7fd      	b.n	80052ca <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80052ce:	2354      	movs	r3, #84	@ 0x54
 80052d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	2b54      	cmp	r3, #84	@ 0x54
 80052d6:	d00b      	beq.n	80052f0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80052d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052dc:	f383 8811 	msr	BASEPRI, r3
 80052e0:	f3bf 8f6f 	isb	sy
 80052e4:	f3bf 8f4f 	dsb	sy
 80052e8:	61bb      	str	r3, [r7, #24]
}
 80052ea:	bf00      	nop
 80052ec:	bf00      	nop
 80052ee:	e7fd      	b.n	80052ec <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80052f0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80052f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d01e      	beq.n	8005336 <xTaskCreateStatic+0xb2>
 80052f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d01b      	beq.n	8005336 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80052fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005300:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005304:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005306:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530a:	2202      	movs	r2, #2
 800530c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005310:	2300      	movs	r3, #0
 8005312:	9303      	str	r3, [sp, #12]
 8005314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005316:	9302      	str	r3, [sp, #8]
 8005318:	f107 0314 	add.w	r3, r7, #20
 800531c:	9301      	str	r3, [sp, #4]
 800531e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005320:	9300      	str	r3, [sp, #0]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	68b9      	ldr	r1, [r7, #8]
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f000 f850 	bl	80053ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800532e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005330:	f000 f8d6 	bl	80054e0 <prvAddNewTaskToReadyList>
 8005334:	e001      	b.n	800533a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005336:	2300      	movs	r3, #0
 8005338:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800533a:	697b      	ldr	r3, [r7, #20]
	}
 800533c:	4618      	mov	r0, r3
 800533e:	3728      	adds	r7, #40	@ 0x28
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005344:	b580      	push	{r7, lr}
 8005346:	b08c      	sub	sp, #48	@ 0x30
 8005348:	af04      	add	r7, sp, #16
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	603b      	str	r3, [r7, #0]
 8005350:	4613      	mov	r3, r2
 8005352:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005354:	88fb      	ldrh	r3, [r7, #6]
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	4618      	mov	r0, r3
 800535a:	f001 fd3f 	bl	8006ddc <pvPortMalloc>
 800535e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00e      	beq.n	8005384 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005366:	2054      	movs	r0, #84	@ 0x54
 8005368:	f001 fd38 	bl	8006ddc <pvPortMalloc>
 800536c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d003      	beq.n	800537c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	631a      	str	r2, [r3, #48]	@ 0x30
 800537a:	e005      	b.n	8005388 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800537c:	6978      	ldr	r0, [r7, #20]
 800537e:	f001 fdfb 	bl	8006f78 <vPortFree>
 8005382:	e001      	b.n	8005388 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005384:	2300      	movs	r3, #0
 8005386:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d017      	beq.n	80053be <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005396:	88fa      	ldrh	r2, [r7, #6]
 8005398:	2300      	movs	r3, #0
 800539a:	9303      	str	r3, [sp, #12]
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	9302      	str	r3, [sp, #8]
 80053a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053a2:	9301      	str	r3, [sp, #4]
 80053a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a6:	9300      	str	r3, [sp, #0]
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	68b9      	ldr	r1, [r7, #8]
 80053ac:	68f8      	ldr	r0, [r7, #12]
 80053ae:	f000 f80e 	bl	80053ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053b2:	69f8      	ldr	r0, [r7, #28]
 80053b4:	f000 f894 	bl	80054e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80053b8:	2301      	movs	r3, #1
 80053ba:	61bb      	str	r3, [r7, #24]
 80053bc:	e002      	b.n	80053c4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80053be:	f04f 33ff 	mov.w	r3, #4294967295
 80053c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80053c4:	69bb      	ldr	r3, [r7, #24]
	}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3720      	adds	r7, #32
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b088      	sub	sp, #32
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	60f8      	str	r0, [r7, #12]
 80053d6:	60b9      	str	r1, [r7, #8]
 80053d8:	607a      	str	r2, [r7, #4]
 80053da:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80053dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80053e6:	3b01      	subs	r3, #1
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	4413      	add	r3, r2
 80053ec:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	f023 0307 	bic.w	r3, r3, #7
 80053f4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	f003 0307 	and.w	r3, r3, #7
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00b      	beq.n	8005418 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005404:	f383 8811 	msr	BASEPRI, r3
 8005408:	f3bf 8f6f 	isb	sy
 800540c:	f3bf 8f4f 	dsb	sy
 8005410:	617b      	str	r3, [r7, #20]
}
 8005412:	bf00      	nop
 8005414:	bf00      	nop
 8005416:	e7fd      	b.n	8005414 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d01f      	beq.n	800545e <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800541e:	2300      	movs	r3, #0
 8005420:	61fb      	str	r3, [r7, #28]
 8005422:	e012      	b.n	800544a <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005424:	68ba      	ldr	r2, [r7, #8]
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	4413      	add	r3, r2
 800542a:	7819      	ldrb	r1, [r3, #0]
 800542c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	4413      	add	r3, r2
 8005432:	3334      	adds	r3, #52	@ 0x34
 8005434:	460a      	mov	r2, r1
 8005436:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	4413      	add	r3, r2
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d006      	beq.n	8005452 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	3301      	adds	r3, #1
 8005448:	61fb      	str	r3, [r7, #28]
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	2b0f      	cmp	r3, #15
 800544e:	d9e9      	bls.n	8005424 <prvInitialiseNewTask+0x56>
 8005450:	e000      	b.n	8005454 <prvInitialiseNewTask+0x86>
			{
				break;
 8005452:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005456:	2200      	movs	r2, #0
 8005458:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800545c:	e003      	b.n	8005466 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800545e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005460:	2200      	movs	r2, #0
 8005462:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005468:	2b06      	cmp	r3, #6
 800546a:	d901      	bls.n	8005470 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800546c:	2306      	movs	r3, #6
 800546e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005472:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005474:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005478:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800547a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800547c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800547e:	2200      	movs	r2, #0
 8005480:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005484:	3304      	adds	r3, #4
 8005486:	4618      	mov	r0, r3
 8005488:	f7ff f912 	bl	80046b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800548c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800548e:	3318      	adds	r3, #24
 8005490:	4618      	mov	r0, r3
 8005492:	f7ff f90d 	bl	80046b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005498:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800549a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800549c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800549e:	f1c3 0207 	rsb	r2, r3, #7
 80054a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80054a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054aa:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80054ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ae:	2200      	movs	r2, #0
 80054b0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80054b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80054ba:	683a      	ldr	r2, [r7, #0]
 80054bc:	68f9      	ldr	r1, [r7, #12]
 80054be:	69b8      	ldr	r0, [r7, #24]
 80054c0:	f001 fa3a 	bl	8006938 <pxPortInitialiseStack>
 80054c4:	4602      	mov	r2, r0
 80054c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80054ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d002      	beq.n	80054d6 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80054d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054d6:	bf00      	nop
 80054d8:	3720      	adds	r7, #32
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
	...

080054e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80054e8:	f001 fb56 	bl	8006b98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80054ec:	4b2a      	ldr	r3, [pc, #168]	@ (8005598 <prvAddNewTaskToReadyList+0xb8>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	3301      	adds	r3, #1
 80054f2:	4a29      	ldr	r2, [pc, #164]	@ (8005598 <prvAddNewTaskToReadyList+0xb8>)
 80054f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80054f6:	4b29      	ldr	r3, [pc, #164]	@ (800559c <prvAddNewTaskToReadyList+0xbc>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d109      	bne.n	8005512 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80054fe:	4a27      	ldr	r2, [pc, #156]	@ (800559c <prvAddNewTaskToReadyList+0xbc>)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005504:	4b24      	ldr	r3, [pc, #144]	@ (8005598 <prvAddNewTaskToReadyList+0xb8>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d110      	bne.n	800552e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800550c:	f000 fcb8 	bl	8005e80 <prvInitialiseTaskLists>
 8005510:	e00d      	b.n	800552e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005512:	4b23      	ldr	r3, [pc, #140]	@ (80055a0 <prvAddNewTaskToReadyList+0xc0>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d109      	bne.n	800552e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800551a:	4b20      	ldr	r3, [pc, #128]	@ (800559c <prvAddNewTaskToReadyList+0xbc>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005524:	429a      	cmp	r2, r3
 8005526:	d802      	bhi.n	800552e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005528:	4a1c      	ldr	r2, [pc, #112]	@ (800559c <prvAddNewTaskToReadyList+0xbc>)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800552e:	4b1d      	ldr	r3, [pc, #116]	@ (80055a4 <prvAddNewTaskToReadyList+0xc4>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	3301      	adds	r3, #1
 8005534:	4a1b      	ldr	r2, [pc, #108]	@ (80055a4 <prvAddNewTaskToReadyList+0xc4>)
 8005536:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800553c:	2201      	movs	r2, #1
 800553e:	409a      	lsls	r2, r3
 8005540:	4b19      	ldr	r3, [pc, #100]	@ (80055a8 <prvAddNewTaskToReadyList+0xc8>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4313      	orrs	r3, r2
 8005546:	4a18      	ldr	r2, [pc, #96]	@ (80055a8 <prvAddNewTaskToReadyList+0xc8>)
 8005548:	6013      	str	r3, [r2, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800554e:	4613      	mov	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4413      	add	r3, r2
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	4a15      	ldr	r2, [pc, #84]	@ (80055ac <prvAddNewTaskToReadyList+0xcc>)
 8005558:	441a      	add	r2, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	3304      	adds	r3, #4
 800555e:	4619      	mov	r1, r3
 8005560:	4610      	mov	r0, r2
 8005562:	f7ff f8b2 	bl	80046ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005566:	f001 fb49 	bl	8006bfc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800556a:	4b0d      	ldr	r3, [pc, #52]	@ (80055a0 <prvAddNewTaskToReadyList+0xc0>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00e      	beq.n	8005590 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005572:	4b0a      	ldr	r3, [pc, #40]	@ (800559c <prvAddNewTaskToReadyList+0xbc>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800557c:	429a      	cmp	r2, r3
 800557e:	d207      	bcs.n	8005590 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005580:	4b0b      	ldr	r3, [pc, #44]	@ (80055b0 <prvAddNewTaskToReadyList+0xd0>)
 8005582:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005586:	601a      	str	r2, [r3, #0]
 8005588:	f3bf 8f4f 	dsb	sy
 800558c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005590:	bf00      	nop
 8005592:	3708      	adds	r7, #8
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	2000079c 	.word	0x2000079c
 800559c:	2000069c 	.word	0x2000069c
 80055a0:	200007a8 	.word	0x200007a8
 80055a4:	200007b8 	.word	0x200007b8
 80055a8:	200007a4 	.word	0x200007a4
 80055ac:	200006a0 	.word	0x200006a0
 80055b0:	e000ed04 	.word	0xe000ed04

080055b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80055bc:	2300      	movs	r3, #0
 80055be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d018      	beq.n	80055f8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80055c6:	4b14      	ldr	r3, [pc, #80]	@ (8005618 <vTaskDelay+0x64>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00b      	beq.n	80055e6 <vTaskDelay+0x32>
	__asm volatile
 80055ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d2:	f383 8811 	msr	BASEPRI, r3
 80055d6:	f3bf 8f6f 	isb	sy
 80055da:	f3bf 8f4f 	dsb	sy
 80055de:	60bb      	str	r3, [r7, #8]
}
 80055e0:	bf00      	nop
 80055e2:	bf00      	nop
 80055e4:	e7fd      	b.n	80055e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80055e6:	f000 f883 	bl	80056f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80055ea:	2100      	movs	r1, #0
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 fdc3 	bl	8006178 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80055f2:	f000 f88b 	bl	800570c <xTaskResumeAll>
 80055f6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d107      	bne.n	800560e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80055fe:	4b07      	ldr	r3, [pc, #28]	@ (800561c <vTaskDelay+0x68>)
 8005600:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005604:	601a      	str	r2, [r3, #0]
 8005606:	f3bf 8f4f 	dsb	sy
 800560a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800560e:	bf00      	nop
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	200007c4 	.word	0x200007c4
 800561c:	e000ed04 	.word	0xe000ed04

08005620 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b08a      	sub	sp, #40	@ 0x28
 8005624:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005626:	2300      	movs	r3, #0
 8005628:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800562a:	2300      	movs	r3, #0
 800562c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800562e:	463a      	mov	r2, r7
 8005630:	1d39      	adds	r1, r7, #4
 8005632:	f107 0308 	add.w	r3, r7, #8
 8005636:	4618      	mov	r0, r3
 8005638:	f7fa ffa2 	bl	8000580 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800563c:	6839      	ldr	r1, [r7, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	68ba      	ldr	r2, [r7, #8]
 8005642:	9202      	str	r2, [sp, #8]
 8005644:	9301      	str	r3, [sp, #4]
 8005646:	2300      	movs	r3, #0
 8005648:	9300      	str	r3, [sp, #0]
 800564a:	2300      	movs	r3, #0
 800564c:	460a      	mov	r2, r1
 800564e:	4922      	ldr	r1, [pc, #136]	@ (80056d8 <vTaskStartScheduler+0xb8>)
 8005650:	4822      	ldr	r0, [pc, #136]	@ (80056dc <vTaskStartScheduler+0xbc>)
 8005652:	f7ff fe17 	bl	8005284 <xTaskCreateStatic>
 8005656:	4603      	mov	r3, r0
 8005658:	4a21      	ldr	r2, [pc, #132]	@ (80056e0 <vTaskStartScheduler+0xc0>)
 800565a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800565c:	4b20      	ldr	r3, [pc, #128]	@ (80056e0 <vTaskStartScheduler+0xc0>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d002      	beq.n	800566a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005664:	2301      	movs	r3, #1
 8005666:	617b      	str	r3, [r7, #20]
 8005668:	e001      	b.n	800566e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800566a:	2300      	movs	r3, #0
 800566c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d102      	bne.n	800567a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005674:	f000 fde6 	bl	8006244 <xTimerCreateTimerTask>
 8005678:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d116      	bne.n	80056ae <vTaskStartScheduler+0x8e>
	__asm volatile
 8005680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005684:	f383 8811 	msr	BASEPRI, r3
 8005688:	f3bf 8f6f 	isb	sy
 800568c:	f3bf 8f4f 	dsb	sy
 8005690:	613b      	str	r3, [r7, #16]
}
 8005692:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005694:	4b13      	ldr	r3, [pc, #76]	@ (80056e4 <vTaskStartScheduler+0xc4>)
 8005696:	f04f 32ff 	mov.w	r2, #4294967295
 800569a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800569c:	4b12      	ldr	r3, [pc, #72]	@ (80056e8 <vTaskStartScheduler+0xc8>)
 800569e:	2201      	movs	r2, #1
 80056a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80056a2:	4b12      	ldr	r3, [pc, #72]	@ (80056ec <vTaskStartScheduler+0xcc>)
 80056a4:	2200      	movs	r2, #0
 80056a6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80056a8:	f001 f9d2 	bl	8006a50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80056ac:	e00f      	b.n	80056ce <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b4:	d10b      	bne.n	80056ce <vTaskStartScheduler+0xae>
	__asm volatile
 80056b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ba:	f383 8811 	msr	BASEPRI, r3
 80056be:	f3bf 8f6f 	isb	sy
 80056c2:	f3bf 8f4f 	dsb	sy
 80056c6:	60fb      	str	r3, [r7, #12]
}
 80056c8:	bf00      	nop
 80056ca:	bf00      	nop
 80056cc:	e7fd      	b.n	80056ca <vTaskStartScheduler+0xaa>
}
 80056ce:	bf00      	nop
 80056d0:	3718      	adds	r7, #24
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	08008758 	.word	0x08008758
 80056dc:	08005e51 	.word	0x08005e51
 80056e0:	200007c0 	.word	0x200007c0
 80056e4:	200007bc 	.word	0x200007bc
 80056e8:	200007a8 	.word	0x200007a8
 80056ec:	200007a0 	.word	0x200007a0

080056f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80056f0:	b480      	push	{r7}
 80056f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80056f4:	4b04      	ldr	r3, [pc, #16]	@ (8005708 <vTaskSuspendAll+0x18>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	3301      	adds	r3, #1
 80056fa:	4a03      	ldr	r2, [pc, #12]	@ (8005708 <vTaskSuspendAll+0x18>)
 80056fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80056fe:	bf00      	nop
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr
 8005708:	200007c4 	.word	0x200007c4

0800570c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005712:	2300      	movs	r3, #0
 8005714:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005716:	2300      	movs	r3, #0
 8005718:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800571a:	4b42      	ldr	r3, [pc, #264]	@ (8005824 <xTaskResumeAll+0x118>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10b      	bne.n	800573a <xTaskResumeAll+0x2e>
	__asm volatile
 8005722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005726:	f383 8811 	msr	BASEPRI, r3
 800572a:	f3bf 8f6f 	isb	sy
 800572e:	f3bf 8f4f 	dsb	sy
 8005732:	603b      	str	r3, [r7, #0]
}
 8005734:	bf00      	nop
 8005736:	bf00      	nop
 8005738:	e7fd      	b.n	8005736 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800573a:	f001 fa2d 	bl	8006b98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800573e:	4b39      	ldr	r3, [pc, #228]	@ (8005824 <xTaskResumeAll+0x118>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	3b01      	subs	r3, #1
 8005744:	4a37      	ldr	r2, [pc, #220]	@ (8005824 <xTaskResumeAll+0x118>)
 8005746:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005748:	4b36      	ldr	r3, [pc, #216]	@ (8005824 <xTaskResumeAll+0x118>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d161      	bne.n	8005814 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005750:	4b35      	ldr	r3, [pc, #212]	@ (8005828 <xTaskResumeAll+0x11c>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d05d      	beq.n	8005814 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005758:	e02e      	b.n	80057b8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800575a:	4b34      	ldr	r3, [pc, #208]	@ (800582c <xTaskResumeAll+0x120>)
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	3318      	adds	r3, #24
 8005766:	4618      	mov	r0, r3
 8005768:	f7ff f80c 	bl	8004784 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	3304      	adds	r3, #4
 8005770:	4618      	mov	r0, r3
 8005772:	f7ff f807 	bl	8004784 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800577a:	2201      	movs	r2, #1
 800577c:	409a      	lsls	r2, r3
 800577e:	4b2c      	ldr	r3, [pc, #176]	@ (8005830 <xTaskResumeAll+0x124>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4313      	orrs	r3, r2
 8005784:	4a2a      	ldr	r2, [pc, #168]	@ (8005830 <xTaskResumeAll+0x124>)
 8005786:	6013      	str	r3, [r2, #0]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800578c:	4613      	mov	r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4413      	add	r3, r2
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	4a27      	ldr	r2, [pc, #156]	@ (8005834 <xTaskResumeAll+0x128>)
 8005796:	441a      	add	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	3304      	adds	r3, #4
 800579c:	4619      	mov	r1, r3
 800579e:	4610      	mov	r0, r2
 80057a0:	f7fe ff93 	bl	80046ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057a8:	4b23      	ldr	r3, [pc, #140]	@ (8005838 <xTaskResumeAll+0x12c>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d302      	bcc.n	80057b8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80057b2:	4b22      	ldr	r3, [pc, #136]	@ (800583c <xTaskResumeAll+0x130>)
 80057b4:	2201      	movs	r2, #1
 80057b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057b8:	4b1c      	ldr	r3, [pc, #112]	@ (800582c <xTaskResumeAll+0x120>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1cc      	bne.n	800575a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d001      	beq.n	80057ca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80057c6:	f000 fbf9 	bl	8005fbc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80057ca:	4b1d      	ldr	r3, [pc, #116]	@ (8005840 <xTaskResumeAll+0x134>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d010      	beq.n	80057f8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80057d6:	f000 f847 	bl	8005868 <xTaskIncrementTick>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d002      	beq.n	80057e6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80057e0:	4b16      	ldr	r3, [pc, #88]	@ (800583c <xTaskResumeAll+0x130>)
 80057e2:	2201      	movs	r2, #1
 80057e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	3b01      	subs	r3, #1
 80057ea:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1f1      	bne.n	80057d6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80057f2:	4b13      	ldr	r3, [pc, #76]	@ (8005840 <xTaskResumeAll+0x134>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80057f8:	4b10      	ldr	r3, [pc, #64]	@ (800583c <xTaskResumeAll+0x130>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d009      	beq.n	8005814 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005800:	2301      	movs	r3, #1
 8005802:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005804:	4b0f      	ldr	r3, [pc, #60]	@ (8005844 <xTaskResumeAll+0x138>)
 8005806:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800580a:	601a      	str	r2, [r3, #0]
 800580c:	f3bf 8f4f 	dsb	sy
 8005810:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005814:	f001 f9f2 	bl	8006bfc <vPortExitCritical>

	return xAlreadyYielded;
 8005818:	68bb      	ldr	r3, [r7, #8]
}
 800581a:	4618      	mov	r0, r3
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	200007c4 	.word	0x200007c4
 8005828:	2000079c 	.word	0x2000079c
 800582c:	2000075c 	.word	0x2000075c
 8005830:	200007a4 	.word	0x200007a4
 8005834:	200006a0 	.word	0x200006a0
 8005838:	2000069c 	.word	0x2000069c
 800583c:	200007b0 	.word	0x200007b0
 8005840:	200007ac 	.word	0x200007ac
 8005844:	e000ed04 	.word	0xe000ed04

08005848 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800584e:	4b05      	ldr	r3, [pc, #20]	@ (8005864 <xTaskGetTickCount+0x1c>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005854:	687b      	ldr	r3, [r7, #4]
}
 8005856:	4618      	mov	r0, r3
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	200007a0 	.word	0x200007a0

08005868 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b086      	sub	sp, #24
 800586c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800586e:	2300      	movs	r3, #0
 8005870:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005872:	4b4f      	ldr	r3, [pc, #316]	@ (80059b0 <xTaskIncrementTick+0x148>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	f040 808f 	bne.w	800599a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800587c:	4b4d      	ldr	r3, [pc, #308]	@ (80059b4 <xTaskIncrementTick+0x14c>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	3301      	adds	r3, #1
 8005882:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005884:	4a4b      	ldr	r2, [pc, #300]	@ (80059b4 <xTaskIncrementTick+0x14c>)
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d121      	bne.n	80058d4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005890:	4b49      	ldr	r3, [pc, #292]	@ (80059b8 <xTaskIncrementTick+0x150>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00b      	beq.n	80058b2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800589a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800589e:	f383 8811 	msr	BASEPRI, r3
 80058a2:	f3bf 8f6f 	isb	sy
 80058a6:	f3bf 8f4f 	dsb	sy
 80058aa:	603b      	str	r3, [r7, #0]
}
 80058ac:	bf00      	nop
 80058ae:	bf00      	nop
 80058b0:	e7fd      	b.n	80058ae <xTaskIncrementTick+0x46>
 80058b2:	4b41      	ldr	r3, [pc, #260]	@ (80059b8 <xTaskIncrementTick+0x150>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	60fb      	str	r3, [r7, #12]
 80058b8:	4b40      	ldr	r3, [pc, #256]	@ (80059bc <xTaskIncrementTick+0x154>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a3e      	ldr	r2, [pc, #248]	@ (80059b8 <xTaskIncrementTick+0x150>)
 80058be:	6013      	str	r3, [r2, #0]
 80058c0:	4a3e      	ldr	r2, [pc, #248]	@ (80059bc <xTaskIncrementTick+0x154>)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6013      	str	r3, [r2, #0]
 80058c6:	4b3e      	ldr	r3, [pc, #248]	@ (80059c0 <xTaskIncrementTick+0x158>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	3301      	adds	r3, #1
 80058cc:	4a3c      	ldr	r2, [pc, #240]	@ (80059c0 <xTaskIncrementTick+0x158>)
 80058ce:	6013      	str	r3, [r2, #0]
 80058d0:	f000 fb74 	bl	8005fbc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80058d4:	4b3b      	ldr	r3, [pc, #236]	@ (80059c4 <xTaskIncrementTick+0x15c>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d348      	bcc.n	8005970 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058de:	4b36      	ldr	r3, [pc, #216]	@ (80059b8 <xTaskIncrementTick+0x150>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d104      	bne.n	80058f2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058e8:	4b36      	ldr	r3, [pc, #216]	@ (80059c4 <xTaskIncrementTick+0x15c>)
 80058ea:	f04f 32ff 	mov.w	r2, #4294967295
 80058ee:	601a      	str	r2, [r3, #0]
					break;
 80058f0:	e03e      	b.n	8005970 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058f2:	4b31      	ldr	r3, [pc, #196]	@ (80059b8 <xTaskIncrementTick+0x150>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	429a      	cmp	r2, r3
 8005908:	d203      	bcs.n	8005912 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800590a:	4a2e      	ldr	r2, [pc, #184]	@ (80059c4 <xTaskIncrementTick+0x15c>)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005910:	e02e      	b.n	8005970 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	3304      	adds	r3, #4
 8005916:	4618      	mov	r0, r3
 8005918:	f7fe ff34 	bl	8004784 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005920:	2b00      	cmp	r3, #0
 8005922:	d004      	beq.n	800592e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	3318      	adds	r3, #24
 8005928:	4618      	mov	r0, r3
 800592a:	f7fe ff2b 	bl	8004784 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005932:	2201      	movs	r2, #1
 8005934:	409a      	lsls	r2, r3
 8005936:	4b24      	ldr	r3, [pc, #144]	@ (80059c8 <xTaskIncrementTick+0x160>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4313      	orrs	r3, r2
 800593c:	4a22      	ldr	r2, [pc, #136]	@ (80059c8 <xTaskIncrementTick+0x160>)
 800593e:	6013      	str	r3, [r2, #0]
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005944:	4613      	mov	r3, r2
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	4413      	add	r3, r2
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	4a1f      	ldr	r2, [pc, #124]	@ (80059cc <xTaskIncrementTick+0x164>)
 800594e:	441a      	add	r2, r3
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	3304      	adds	r3, #4
 8005954:	4619      	mov	r1, r3
 8005956:	4610      	mov	r0, r2
 8005958:	f7fe feb7 	bl	80046ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005960:	4b1b      	ldr	r3, [pc, #108]	@ (80059d0 <xTaskIncrementTick+0x168>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005966:	429a      	cmp	r2, r3
 8005968:	d3b9      	bcc.n	80058de <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800596a:	2301      	movs	r3, #1
 800596c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800596e:	e7b6      	b.n	80058de <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005970:	4b17      	ldr	r3, [pc, #92]	@ (80059d0 <xTaskIncrementTick+0x168>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005976:	4915      	ldr	r1, [pc, #84]	@ (80059cc <xTaskIncrementTick+0x164>)
 8005978:	4613      	mov	r3, r2
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	4413      	add	r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	440b      	add	r3, r1
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2b01      	cmp	r3, #1
 8005986:	d901      	bls.n	800598c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005988:	2301      	movs	r3, #1
 800598a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800598c:	4b11      	ldr	r3, [pc, #68]	@ (80059d4 <xTaskIncrementTick+0x16c>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d007      	beq.n	80059a4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005994:	2301      	movs	r3, #1
 8005996:	617b      	str	r3, [r7, #20]
 8005998:	e004      	b.n	80059a4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800599a:	4b0f      	ldr	r3, [pc, #60]	@ (80059d8 <xTaskIncrementTick+0x170>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	3301      	adds	r3, #1
 80059a0:	4a0d      	ldr	r2, [pc, #52]	@ (80059d8 <xTaskIncrementTick+0x170>)
 80059a2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80059a4:	697b      	ldr	r3, [r7, #20]
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3718      	adds	r7, #24
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	200007c4 	.word	0x200007c4
 80059b4:	200007a0 	.word	0x200007a0
 80059b8:	20000754 	.word	0x20000754
 80059bc:	20000758 	.word	0x20000758
 80059c0:	200007b4 	.word	0x200007b4
 80059c4:	200007bc 	.word	0x200007bc
 80059c8:	200007a4 	.word	0x200007a4
 80059cc:	200006a0 	.word	0x200006a0
 80059d0:	2000069c 	.word	0x2000069c
 80059d4:	200007b0 	.word	0x200007b0
 80059d8:	200007ac 	.word	0x200007ac

080059dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80059dc:	b480      	push	{r7}
 80059de:	b087      	sub	sp, #28
 80059e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80059e2:	4b27      	ldr	r3, [pc, #156]	@ (8005a80 <vTaskSwitchContext+0xa4>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d003      	beq.n	80059f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80059ea:	4b26      	ldr	r3, [pc, #152]	@ (8005a84 <vTaskSwitchContext+0xa8>)
 80059ec:	2201      	movs	r2, #1
 80059ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80059f0:	e040      	b.n	8005a74 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80059f2:	4b24      	ldr	r3, [pc, #144]	@ (8005a84 <vTaskSwitchContext+0xa8>)
 80059f4:	2200      	movs	r2, #0
 80059f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059f8:	4b23      	ldr	r3, [pc, #140]	@ (8005a88 <vTaskSwitchContext+0xac>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	fab3 f383 	clz	r3, r3
 8005a04:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005a06:	7afb      	ldrb	r3, [r7, #11]
 8005a08:	f1c3 031f 	rsb	r3, r3, #31
 8005a0c:	617b      	str	r3, [r7, #20]
 8005a0e:	491f      	ldr	r1, [pc, #124]	@ (8005a8c <vTaskSwitchContext+0xb0>)
 8005a10:	697a      	ldr	r2, [r7, #20]
 8005a12:	4613      	mov	r3, r2
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	4413      	add	r3, r2
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	440b      	add	r3, r1
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d10b      	bne.n	8005a3a <vTaskSwitchContext+0x5e>
	__asm volatile
 8005a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a26:	f383 8811 	msr	BASEPRI, r3
 8005a2a:	f3bf 8f6f 	isb	sy
 8005a2e:	f3bf 8f4f 	dsb	sy
 8005a32:	607b      	str	r3, [r7, #4]
}
 8005a34:	bf00      	nop
 8005a36:	bf00      	nop
 8005a38:	e7fd      	b.n	8005a36 <vTaskSwitchContext+0x5a>
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	4413      	add	r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	4a11      	ldr	r2, [pc, #68]	@ (8005a8c <vTaskSwitchContext+0xb0>)
 8005a46:	4413      	add	r3, r2
 8005a48:	613b      	str	r3, [r7, #16]
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	685a      	ldr	r2, [r3, #4]
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	605a      	str	r2, [r3, #4]
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	685a      	ldr	r2, [r3, #4]
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	3308      	adds	r3, #8
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d104      	bne.n	8005a6a <vTaskSwitchContext+0x8e>
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	685a      	ldr	r2, [r3, #4]
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	605a      	str	r2, [r3, #4]
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	4a07      	ldr	r2, [pc, #28]	@ (8005a90 <vTaskSwitchContext+0xb4>)
 8005a72:	6013      	str	r3, [r2, #0]
}
 8005a74:	bf00      	nop
 8005a76:	371c      	adds	r7, #28
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr
 8005a80:	200007c4 	.word	0x200007c4
 8005a84:	200007b0 	.word	0x200007b0
 8005a88:	200007a4 	.word	0x200007a4
 8005a8c:	200006a0 	.word	0x200006a0
 8005a90:	2000069c 	.word	0x2000069c

08005a94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d10b      	bne.n	8005abc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aa8:	f383 8811 	msr	BASEPRI, r3
 8005aac:	f3bf 8f6f 	isb	sy
 8005ab0:	f3bf 8f4f 	dsb	sy
 8005ab4:	60fb      	str	r3, [r7, #12]
}
 8005ab6:	bf00      	nop
 8005ab8:	bf00      	nop
 8005aba:	e7fd      	b.n	8005ab8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005abc:	4b07      	ldr	r3, [pc, #28]	@ (8005adc <vTaskPlaceOnEventList+0x48>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	3318      	adds	r3, #24
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f7fe fe24 	bl	8004712 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005aca:	2101      	movs	r1, #1
 8005acc:	6838      	ldr	r0, [r7, #0]
 8005ace:	f000 fb53 	bl	8006178 <prvAddCurrentTaskToDelayedList>
}
 8005ad2:	bf00      	nop
 8005ad4:	3710      	adds	r7, #16
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	2000069c 	.word	0x2000069c

08005ae0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10b      	bne.n	8005b0a <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 8005af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005af6:	f383 8811 	msr	BASEPRI, r3
 8005afa:	f3bf 8f6f 	isb	sy
 8005afe:	f3bf 8f4f 	dsb	sy
 8005b02:	617b      	str	r3, [r7, #20]
}
 8005b04:	bf00      	nop
 8005b06:	bf00      	nop
 8005b08:	e7fd      	b.n	8005b06 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8005b0a:	4b12      	ldr	r3, [pc, #72]	@ (8005b54 <vTaskPlaceOnUnorderedEventList+0x74>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d10b      	bne.n	8005b2a <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 8005b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b16:	f383 8811 	msr	BASEPRI, r3
 8005b1a:	f3bf 8f6f 	isb	sy
 8005b1e:	f3bf 8f4f 	dsb	sy
 8005b22:	613b      	str	r3, [r7, #16]
}
 8005b24:	bf00      	nop
 8005b26:	bf00      	nop
 8005b28:	e7fd      	b.n	8005b26 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8005b58 <vTaskPlaceOnUnorderedEventList+0x78>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005b34:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b36:	4b08      	ldr	r3, [pc, #32]	@ (8005b58 <vTaskPlaceOnUnorderedEventList+0x78>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	3318      	adds	r3, #24
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f7fe fdc3 	bl	80046ca <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005b44:	2101      	movs	r1, #1
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 fb16 	bl	8006178 <prvAddCurrentTaskToDelayedList>
}
 8005b4c:	bf00      	nop
 8005b4e:	3718      	adds	r7, #24
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	200007c4 	.word	0x200007c4
 8005b58:	2000069c 	.word	0x2000069c

08005b5c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b086      	sub	sp, #24
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d10b      	bne.n	8005b86 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b72:	f383 8811 	msr	BASEPRI, r3
 8005b76:	f3bf 8f6f 	isb	sy
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	617b      	str	r3, [r7, #20]
}
 8005b80:	bf00      	nop
 8005b82:	bf00      	nop
 8005b84:	e7fd      	b.n	8005b82 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b86:	4b0a      	ldr	r3, [pc, #40]	@ (8005bb0 <vTaskPlaceOnEventListRestricted+0x54>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	3318      	adds	r3, #24
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f7fe fd9b 	bl	80046ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d002      	beq.n	8005ba0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b9e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005ba0:	6879      	ldr	r1, [r7, #4]
 8005ba2:	68b8      	ldr	r0, [r7, #8]
 8005ba4:	f000 fae8 	bl	8006178 <prvAddCurrentTaskToDelayedList>
	}
 8005ba8:	bf00      	nop
 8005baa:	3718      	adds	r7, #24
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	2000069c 	.word	0x2000069c

08005bb4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b086      	sub	sp, #24
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10b      	bne.n	8005be2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bce:	f383 8811 	msr	BASEPRI, r3
 8005bd2:	f3bf 8f6f 	isb	sy
 8005bd6:	f3bf 8f4f 	dsb	sy
 8005bda:	60fb      	str	r3, [r7, #12]
}
 8005bdc:	bf00      	nop
 8005bde:	bf00      	nop
 8005be0:	e7fd      	b.n	8005bde <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	3318      	adds	r3, #24
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7fe fdcc 	bl	8004784 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bec:	4b1d      	ldr	r3, [pc, #116]	@ (8005c64 <xTaskRemoveFromEventList+0xb0>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d11c      	bne.n	8005c2e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	3304      	adds	r3, #4
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f7fe fdc3 	bl	8004784 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c02:	2201      	movs	r2, #1
 8005c04:	409a      	lsls	r2, r3
 8005c06:	4b18      	ldr	r3, [pc, #96]	@ (8005c68 <xTaskRemoveFromEventList+0xb4>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	4a16      	ldr	r2, [pc, #88]	@ (8005c68 <xTaskRemoveFromEventList+0xb4>)
 8005c0e:	6013      	str	r3, [r2, #0]
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c14:	4613      	mov	r3, r2
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4413      	add	r3, r2
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	4a13      	ldr	r2, [pc, #76]	@ (8005c6c <xTaskRemoveFromEventList+0xb8>)
 8005c1e:	441a      	add	r2, r3
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	3304      	adds	r3, #4
 8005c24:	4619      	mov	r1, r3
 8005c26:	4610      	mov	r0, r2
 8005c28:	f7fe fd4f 	bl	80046ca <vListInsertEnd>
 8005c2c:	e005      	b.n	8005c3a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	3318      	adds	r3, #24
 8005c32:	4619      	mov	r1, r3
 8005c34:	480e      	ldr	r0, [pc, #56]	@ (8005c70 <xTaskRemoveFromEventList+0xbc>)
 8005c36:	f7fe fd48 	bl	80046ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8005c74 <xTaskRemoveFromEventList+0xc0>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d905      	bls.n	8005c54 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8005c78 <xTaskRemoveFromEventList+0xc4>)
 8005c4e:	2201      	movs	r2, #1
 8005c50:	601a      	str	r2, [r3, #0]
 8005c52:	e001      	b.n	8005c58 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005c54:	2300      	movs	r3, #0
 8005c56:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005c58:	697b      	ldr	r3, [r7, #20]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3718      	adds	r7, #24
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	200007c4 	.word	0x200007c4
 8005c68:	200007a4 	.word	0x200007a4
 8005c6c:	200006a0 	.word	0x200006a0
 8005c70:	2000075c 	.word	0x2000075c
 8005c74:	2000069c 	.word	0x2000069c
 8005c78:	200007b0 	.word	0x200007b0

08005c7c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8005c86:	4b2a      	ldr	r3, [pc, #168]	@ (8005d30 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10b      	bne.n	8005ca6 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 8005c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c92:	f383 8811 	msr	BASEPRI, r3
 8005c96:	f3bf 8f6f 	isb	sy
 8005c9a:	f3bf 8f4f 	dsb	sy
 8005c9e:	613b      	str	r3, [r7, #16]
}
 8005ca0:	bf00      	nop
 8005ca2:	bf00      	nop
 8005ca4:	e7fd      	b.n	8005ca2 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10b      	bne.n	8005cd4 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 8005cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc0:	f383 8811 	msr	BASEPRI, r3
 8005cc4:	f3bf 8f6f 	isb	sy
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	60fb      	str	r3, [r7, #12]
}
 8005cce:	bf00      	nop
 8005cd0:	bf00      	nop
 8005cd2:	e7fd      	b.n	8005cd0 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f7fe fd55 	bl	8004784 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	3304      	adds	r3, #4
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7fe fd50 	bl	8004784 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce8:	2201      	movs	r2, #1
 8005cea:	409a      	lsls	r2, r3
 8005cec:	4b11      	ldr	r3, [pc, #68]	@ (8005d34 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	4a10      	ldr	r2, [pc, #64]	@ (8005d34 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8005cf4:	6013      	str	r3, [r2, #0]
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	4413      	add	r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	4a0d      	ldr	r2, [pc, #52]	@ (8005d38 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8005d04:	441a      	add	r2, r3
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	3304      	adds	r3, #4
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	4610      	mov	r0, r2
 8005d0e:	f7fe fcdc 	bl	80046ca <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d16:	4b09      	ldr	r3, [pc, #36]	@ (8005d3c <vTaskRemoveFromUnorderedEventList+0xc0>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d902      	bls.n	8005d26 <vTaskRemoveFromUnorderedEventList+0xaa>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8005d20:	4b07      	ldr	r3, [pc, #28]	@ (8005d40 <vTaskRemoveFromUnorderedEventList+0xc4>)
 8005d22:	2201      	movs	r2, #1
 8005d24:	601a      	str	r2, [r3, #0]
	}
}
 8005d26:	bf00      	nop
 8005d28:	3718      	adds	r7, #24
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	200007c4 	.word	0x200007c4
 8005d34:	200007a4 	.word	0x200007a4
 8005d38:	200006a0 	.word	0x200006a0
 8005d3c:	2000069c 	.word	0x2000069c
 8005d40:	200007b0 	.word	0x200007b0

08005d44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d4c:	4b06      	ldr	r3, [pc, #24]	@ (8005d68 <vTaskInternalSetTimeOutState+0x24>)
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d54:	4b05      	ldr	r3, [pc, #20]	@ (8005d6c <vTaskInternalSetTimeOutState+0x28>)
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	605a      	str	r2, [r3, #4]
}
 8005d5c:	bf00      	nop
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr
 8005d68:	200007b4 	.word	0x200007b4
 8005d6c:	200007a0 	.word	0x200007a0

08005d70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b088      	sub	sp, #32
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d10b      	bne.n	8005d98 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d84:	f383 8811 	msr	BASEPRI, r3
 8005d88:	f3bf 8f6f 	isb	sy
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	613b      	str	r3, [r7, #16]
}
 8005d92:	bf00      	nop
 8005d94:	bf00      	nop
 8005d96:	e7fd      	b.n	8005d94 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10b      	bne.n	8005db6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005da2:	f383 8811 	msr	BASEPRI, r3
 8005da6:	f3bf 8f6f 	isb	sy
 8005daa:	f3bf 8f4f 	dsb	sy
 8005dae:	60fb      	str	r3, [r7, #12]
}
 8005db0:	bf00      	nop
 8005db2:	bf00      	nop
 8005db4:	e7fd      	b.n	8005db2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005db6:	f000 feef 	bl	8006b98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005dba:	4b1d      	ldr	r3, [pc, #116]	@ (8005e30 <xTaskCheckForTimeOut+0xc0>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	69ba      	ldr	r2, [r7, #24]
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd2:	d102      	bne.n	8005dda <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	61fb      	str	r3, [r7, #28]
 8005dd8:	e023      	b.n	8005e22 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	4b15      	ldr	r3, [pc, #84]	@ (8005e34 <xTaskCheckForTimeOut+0xc4>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d007      	beq.n	8005df6 <xTaskCheckForTimeOut+0x86>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	69ba      	ldr	r2, [r7, #24]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d302      	bcc.n	8005df6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005df0:	2301      	movs	r3, #1
 8005df2:	61fb      	str	r3, [r7, #28]
 8005df4:	e015      	b.n	8005e22 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d20b      	bcs.n	8005e18 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	1ad2      	subs	r2, r2, r3
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f7ff ff99 	bl	8005d44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005e12:	2300      	movs	r3, #0
 8005e14:	61fb      	str	r3, [r7, #28]
 8005e16:	e004      	b.n	8005e22 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005e22:	f000 feeb 	bl	8006bfc <vPortExitCritical>

	return xReturn;
 8005e26:	69fb      	ldr	r3, [r7, #28]
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3720      	adds	r7, #32
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	200007a0 	.word	0x200007a0
 8005e34:	200007b4 	.word	0x200007b4

08005e38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005e38:	b480      	push	{r7}
 8005e3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005e3c:	4b03      	ldr	r3, [pc, #12]	@ (8005e4c <vTaskMissedYield+0x14>)
 8005e3e:	2201      	movs	r2, #1
 8005e40:	601a      	str	r2, [r3, #0]
}
 8005e42:	bf00      	nop
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr
 8005e4c:	200007b0 	.word	0x200007b0

08005e50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e58:	f000 f852 	bl	8005f00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e5c:	4b06      	ldr	r3, [pc, #24]	@ (8005e78 <prvIdleTask+0x28>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d9f9      	bls.n	8005e58 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005e64:	4b05      	ldr	r3, [pc, #20]	@ (8005e7c <prvIdleTask+0x2c>)
 8005e66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e6a:	601a      	str	r2, [r3, #0]
 8005e6c:	f3bf 8f4f 	dsb	sy
 8005e70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005e74:	e7f0      	b.n	8005e58 <prvIdleTask+0x8>
 8005e76:	bf00      	nop
 8005e78:	200006a0 	.word	0x200006a0
 8005e7c:	e000ed04 	.word	0xe000ed04

08005e80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e86:	2300      	movs	r3, #0
 8005e88:	607b      	str	r3, [r7, #4]
 8005e8a:	e00c      	b.n	8005ea6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	4613      	mov	r3, r2
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	4413      	add	r3, r2
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	4a12      	ldr	r2, [pc, #72]	@ (8005ee0 <prvInitialiseTaskLists+0x60>)
 8005e98:	4413      	add	r3, r2
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7fe fbe8 	bl	8004670 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	607b      	str	r3, [r7, #4]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2b06      	cmp	r3, #6
 8005eaa:	d9ef      	bls.n	8005e8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005eac:	480d      	ldr	r0, [pc, #52]	@ (8005ee4 <prvInitialiseTaskLists+0x64>)
 8005eae:	f7fe fbdf 	bl	8004670 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005eb2:	480d      	ldr	r0, [pc, #52]	@ (8005ee8 <prvInitialiseTaskLists+0x68>)
 8005eb4:	f7fe fbdc 	bl	8004670 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005eb8:	480c      	ldr	r0, [pc, #48]	@ (8005eec <prvInitialiseTaskLists+0x6c>)
 8005eba:	f7fe fbd9 	bl	8004670 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005ebe:	480c      	ldr	r0, [pc, #48]	@ (8005ef0 <prvInitialiseTaskLists+0x70>)
 8005ec0:	f7fe fbd6 	bl	8004670 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ec4:	480b      	ldr	r0, [pc, #44]	@ (8005ef4 <prvInitialiseTaskLists+0x74>)
 8005ec6:	f7fe fbd3 	bl	8004670 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005eca:	4b0b      	ldr	r3, [pc, #44]	@ (8005ef8 <prvInitialiseTaskLists+0x78>)
 8005ecc:	4a05      	ldr	r2, [pc, #20]	@ (8005ee4 <prvInitialiseTaskLists+0x64>)
 8005ece:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8005efc <prvInitialiseTaskLists+0x7c>)
 8005ed2:	4a05      	ldr	r2, [pc, #20]	@ (8005ee8 <prvInitialiseTaskLists+0x68>)
 8005ed4:	601a      	str	r2, [r3, #0]
}
 8005ed6:	bf00      	nop
 8005ed8:	3708      	adds	r7, #8
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	200006a0 	.word	0x200006a0
 8005ee4:	2000072c 	.word	0x2000072c
 8005ee8:	20000740 	.word	0x20000740
 8005eec:	2000075c 	.word	0x2000075c
 8005ef0:	20000770 	.word	0x20000770
 8005ef4:	20000788 	.word	0x20000788
 8005ef8:	20000754 	.word	0x20000754
 8005efc:	20000758 	.word	0x20000758

08005f00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f06:	e019      	b.n	8005f3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005f08:	f000 fe46 	bl	8006b98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f0c:	4b10      	ldr	r3, [pc, #64]	@ (8005f50 <prvCheckTasksWaitingTermination+0x50>)
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	3304      	adds	r3, #4
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7fe fc33 	bl	8004784 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8005f54 <prvCheckTasksWaitingTermination+0x54>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	3b01      	subs	r3, #1
 8005f24:	4a0b      	ldr	r2, [pc, #44]	@ (8005f54 <prvCheckTasksWaitingTermination+0x54>)
 8005f26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005f28:	4b0b      	ldr	r3, [pc, #44]	@ (8005f58 <prvCheckTasksWaitingTermination+0x58>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8005f58 <prvCheckTasksWaitingTermination+0x58>)
 8005f30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005f32:	f000 fe63 	bl	8006bfc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f810 	bl	8005f5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f3c:	4b06      	ldr	r3, [pc, #24]	@ (8005f58 <prvCheckTasksWaitingTermination+0x58>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d1e1      	bne.n	8005f08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005f44:	bf00      	nop
 8005f46:	bf00      	nop
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	20000770 	.word	0x20000770
 8005f54:	2000079c 	.word	0x2000079c
 8005f58:	20000784 	.word	0x20000784

08005f5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d108      	bne.n	8005f80 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f72:	4618      	mov	r0, r3
 8005f74:	f001 f800 	bl	8006f78 <vPortFree>
				vPortFree( pxTCB );
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 fffd 	bl	8006f78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f7e:	e019      	b.n	8005fb4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d103      	bne.n	8005f92 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 fff4 	bl	8006f78 <vPortFree>
	}
 8005f90:	e010      	b.n	8005fb4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	d00b      	beq.n	8005fb4 <prvDeleteTCB+0x58>
	__asm volatile
 8005f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fa0:	f383 8811 	msr	BASEPRI, r3
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	f3bf 8f4f 	dsb	sy
 8005fac:	60fb      	str	r3, [r7, #12]
}
 8005fae:	bf00      	nop
 8005fb0:	bf00      	nop
 8005fb2:	e7fd      	b.n	8005fb0 <prvDeleteTCB+0x54>
	}
 8005fb4:	bf00      	nop
 8005fb6:	3710      	adds	r7, #16
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8005ff4 <prvResetNextTaskUnblockTime+0x38>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d104      	bne.n	8005fd6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8005ff8 <prvResetNextTaskUnblockTime+0x3c>)
 8005fce:	f04f 32ff 	mov.w	r2, #4294967295
 8005fd2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005fd4:	e008      	b.n	8005fe8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fd6:	4b07      	ldr	r3, [pc, #28]	@ (8005ff4 <prvResetNextTaskUnblockTime+0x38>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	4a04      	ldr	r2, [pc, #16]	@ (8005ff8 <prvResetNextTaskUnblockTime+0x3c>)
 8005fe6:	6013      	str	r3, [r2, #0]
}
 8005fe8:	bf00      	nop
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr
 8005ff4:	20000754 	.word	0x20000754
 8005ff8:	200007bc 	.word	0x200007bc

08005ffc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006002:	4b0b      	ldr	r3, [pc, #44]	@ (8006030 <xTaskGetSchedulerState+0x34>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d102      	bne.n	8006010 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800600a:	2301      	movs	r3, #1
 800600c:	607b      	str	r3, [r7, #4]
 800600e:	e008      	b.n	8006022 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006010:	4b08      	ldr	r3, [pc, #32]	@ (8006034 <xTaskGetSchedulerState+0x38>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d102      	bne.n	800601e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006018:	2302      	movs	r3, #2
 800601a:	607b      	str	r3, [r7, #4]
 800601c:	e001      	b.n	8006022 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800601e:	2300      	movs	r3, #0
 8006020:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006022:	687b      	ldr	r3, [r7, #4]
	}
 8006024:	4618      	mov	r0, r3
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr
 8006030:	200007a8 	.word	0x200007a8
 8006034:	200007c4 	.word	0x200007c4

08006038 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006038:	b580      	push	{r7, lr}
 800603a:	b086      	sub	sp, #24
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006044:	2300      	movs	r3, #0
 8006046:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d070      	beq.n	8006130 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800604e:	4b3b      	ldr	r3, [pc, #236]	@ (800613c <xTaskPriorityDisinherit+0x104>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	693a      	ldr	r2, [r7, #16]
 8006054:	429a      	cmp	r2, r3
 8006056:	d00b      	beq.n	8006070 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800605c:	f383 8811 	msr	BASEPRI, r3
 8006060:	f3bf 8f6f 	isb	sy
 8006064:	f3bf 8f4f 	dsb	sy
 8006068:	60fb      	str	r3, [r7, #12]
}
 800606a:	bf00      	nop
 800606c:	bf00      	nop
 800606e:	e7fd      	b.n	800606c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006074:	2b00      	cmp	r3, #0
 8006076:	d10b      	bne.n	8006090 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800607c:	f383 8811 	msr	BASEPRI, r3
 8006080:	f3bf 8f6f 	isb	sy
 8006084:	f3bf 8f4f 	dsb	sy
 8006088:	60bb      	str	r3, [r7, #8]
}
 800608a:	bf00      	nop
 800608c:	bf00      	nop
 800608e:	e7fd      	b.n	800608c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006094:	1e5a      	subs	r2, r3, #1
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d044      	beq.n	8006130 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d140      	bne.n	8006130 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	3304      	adds	r3, #4
 80060b2:	4618      	mov	r0, r3
 80060b4:	f7fe fb66 	bl	8004784 <uxListRemove>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d115      	bne.n	80060ea <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060c2:	491f      	ldr	r1, [pc, #124]	@ (8006140 <xTaskPriorityDisinherit+0x108>)
 80060c4:	4613      	mov	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4413      	add	r3, r2
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	440b      	add	r3, r1
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d10a      	bne.n	80060ea <xTaskPriorityDisinherit+0xb2>
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d8:	2201      	movs	r2, #1
 80060da:	fa02 f303 	lsl.w	r3, r2, r3
 80060de:	43da      	mvns	r2, r3
 80060e0:	4b18      	ldr	r3, [pc, #96]	@ (8006144 <xTaskPriorityDisinherit+0x10c>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4013      	ands	r3, r2
 80060e6:	4a17      	ldr	r2, [pc, #92]	@ (8006144 <xTaskPriorityDisinherit+0x10c>)
 80060e8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060f6:	f1c3 0207 	rsb	r2, r3, #7
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006102:	2201      	movs	r2, #1
 8006104:	409a      	lsls	r2, r3
 8006106:	4b0f      	ldr	r3, [pc, #60]	@ (8006144 <xTaskPriorityDisinherit+0x10c>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4313      	orrs	r3, r2
 800610c:	4a0d      	ldr	r2, [pc, #52]	@ (8006144 <xTaskPriorityDisinherit+0x10c>)
 800610e:	6013      	str	r3, [r2, #0]
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006114:	4613      	mov	r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	4413      	add	r3, r2
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	4a08      	ldr	r2, [pc, #32]	@ (8006140 <xTaskPriorityDisinherit+0x108>)
 800611e:	441a      	add	r2, r3
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	3304      	adds	r3, #4
 8006124:	4619      	mov	r1, r3
 8006126:	4610      	mov	r0, r2
 8006128:	f7fe facf 	bl	80046ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800612c:	2301      	movs	r3, #1
 800612e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006130:	697b      	ldr	r3, [r7, #20]
	}
 8006132:	4618      	mov	r0, r3
 8006134:	3718      	adds	r7, #24
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	2000069c 	.word	0x2000069c
 8006140:	200006a0 	.word	0x200006a0
 8006144:	200007a4 	.word	0x200007a4

08006148 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800614e:	4b09      	ldr	r3, [pc, #36]	@ (8006174 <uxTaskResetEventItemValue+0x2c>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006156:	4b07      	ldr	r3, [pc, #28]	@ (8006174 <uxTaskResetEventItemValue+0x2c>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800615c:	4b05      	ldr	r3, [pc, #20]	@ (8006174 <uxTaskResetEventItemValue+0x2c>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f1c2 0207 	rsb	r2, r2, #7
 8006164:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8006166:	687b      	ldr	r3, [r7, #4]
}
 8006168:	4618      	mov	r0, r3
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr
 8006174:	2000069c 	.word	0x2000069c

08006178 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006182:	4b29      	ldr	r3, [pc, #164]	@ (8006228 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006188:	4b28      	ldr	r3, [pc, #160]	@ (800622c <prvAddCurrentTaskToDelayedList+0xb4>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	3304      	adds	r3, #4
 800618e:	4618      	mov	r0, r3
 8006190:	f7fe faf8 	bl	8004784 <uxListRemove>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d10b      	bne.n	80061b2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800619a:	4b24      	ldr	r3, [pc, #144]	@ (800622c <prvAddCurrentTaskToDelayedList+0xb4>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061a0:	2201      	movs	r2, #1
 80061a2:	fa02 f303 	lsl.w	r3, r2, r3
 80061a6:	43da      	mvns	r2, r3
 80061a8:	4b21      	ldr	r3, [pc, #132]	@ (8006230 <prvAddCurrentTaskToDelayedList+0xb8>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4013      	ands	r3, r2
 80061ae:	4a20      	ldr	r2, [pc, #128]	@ (8006230 <prvAddCurrentTaskToDelayedList+0xb8>)
 80061b0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b8:	d10a      	bne.n	80061d0 <prvAddCurrentTaskToDelayedList+0x58>
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d007      	beq.n	80061d0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061c0:	4b1a      	ldr	r3, [pc, #104]	@ (800622c <prvAddCurrentTaskToDelayedList+0xb4>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	3304      	adds	r3, #4
 80061c6:	4619      	mov	r1, r3
 80061c8:	481a      	ldr	r0, [pc, #104]	@ (8006234 <prvAddCurrentTaskToDelayedList+0xbc>)
 80061ca:	f7fe fa7e 	bl	80046ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80061ce:	e026      	b.n	800621e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4413      	add	r3, r2
 80061d6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80061d8:	4b14      	ldr	r3, [pc, #80]	@ (800622c <prvAddCurrentTaskToDelayedList+0xb4>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68ba      	ldr	r2, [r7, #8]
 80061de:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80061e0:	68ba      	ldr	r2, [r7, #8]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d209      	bcs.n	80061fc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061e8:	4b13      	ldr	r3, [pc, #76]	@ (8006238 <prvAddCurrentTaskToDelayedList+0xc0>)
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	4b0f      	ldr	r3, [pc, #60]	@ (800622c <prvAddCurrentTaskToDelayedList+0xb4>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	3304      	adds	r3, #4
 80061f2:	4619      	mov	r1, r3
 80061f4:	4610      	mov	r0, r2
 80061f6:	f7fe fa8c 	bl	8004712 <vListInsert>
}
 80061fa:	e010      	b.n	800621e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061fc:	4b0f      	ldr	r3, [pc, #60]	@ (800623c <prvAddCurrentTaskToDelayedList+0xc4>)
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	4b0a      	ldr	r3, [pc, #40]	@ (800622c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	3304      	adds	r3, #4
 8006206:	4619      	mov	r1, r3
 8006208:	4610      	mov	r0, r2
 800620a:	f7fe fa82 	bl	8004712 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800620e:	4b0c      	ldr	r3, [pc, #48]	@ (8006240 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68ba      	ldr	r2, [r7, #8]
 8006214:	429a      	cmp	r2, r3
 8006216:	d202      	bcs.n	800621e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006218:	4a09      	ldr	r2, [pc, #36]	@ (8006240 <prvAddCurrentTaskToDelayedList+0xc8>)
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	6013      	str	r3, [r2, #0]
}
 800621e:	bf00      	nop
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	200007a0 	.word	0x200007a0
 800622c:	2000069c 	.word	0x2000069c
 8006230:	200007a4 	.word	0x200007a4
 8006234:	20000788 	.word	0x20000788
 8006238:	20000758 	.word	0x20000758
 800623c:	20000754 	.word	0x20000754
 8006240:	200007bc 	.word	0x200007bc

08006244 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b08a      	sub	sp, #40	@ 0x28
 8006248:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800624a:	2300      	movs	r3, #0
 800624c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800624e:	f000 fb13 	bl	8006878 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006252:	4b1d      	ldr	r3, [pc, #116]	@ (80062c8 <xTimerCreateTimerTask+0x84>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d021      	beq.n	800629e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800625a:	2300      	movs	r3, #0
 800625c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800625e:	2300      	movs	r3, #0
 8006260:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006262:	1d3a      	adds	r2, r7, #4
 8006264:	f107 0108 	add.w	r1, r7, #8
 8006268:	f107 030c 	add.w	r3, r7, #12
 800626c:	4618      	mov	r0, r3
 800626e:	f7fa f9a1 	bl	80005b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006272:	6879      	ldr	r1, [r7, #4]
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	9202      	str	r2, [sp, #8]
 800627a:	9301      	str	r3, [sp, #4]
 800627c:	2306      	movs	r3, #6
 800627e:	9300      	str	r3, [sp, #0]
 8006280:	2300      	movs	r3, #0
 8006282:	460a      	mov	r2, r1
 8006284:	4911      	ldr	r1, [pc, #68]	@ (80062cc <xTimerCreateTimerTask+0x88>)
 8006286:	4812      	ldr	r0, [pc, #72]	@ (80062d0 <xTimerCreateTimerTask+0x8c>)
 8006288:	f7fe fffc 	bl	8005284 <xTaskCreateStatic>
 800628c:	4603      	mov	r3, r0
 800628e:	4a11      	ldr	r2, [pc, #68]	@ (80062d4 <xTimerCreateTimerTask+0x90>)
 8006290:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006292:	4b10      	ldr	r3, [pc, #64]	@ (80062d4 <xTimerCreateTimerTask+0x90>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d001      	beq.n	800629e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800629a:	2301      	movs	r3, #1
 800629c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d10b      	bne.n	80062bc <xTimerCreateTimerTask+0x78>
	__asm volatile
 80062a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062a8:	f383 8811 	msr	BASEPRI, r3
 80062ac:	f3bf 8f6f 	isb	sy
 80062b0:	f3bf 8f4f 	dsb	sy
 80062b4:	613b      	str	r3, [r7, #16]
}
 80062b6:	bf00      	nop
 80062b8:	bf00      	nop
 80062ba:	e7fd      	b.n	80062b8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80062bc:	697b      	ldr	r3, [r7, #20]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3718      	adds	r7, #24
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	200007f8 	.word	0x200007f8
 80062cc:	08008760 	.word	0x08008760
 80062d0:	08006411 	.word	0x08006411
 80062d4:	200007fc 	.word	0x200007fc

080062d8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b08a      	sub	sp, #40	@ 0x28
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	607a      	str	r2, [r7, #4]
 80062e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80062e6:	2300      	movs	r3, #0
 80062e8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d10b      	bne.n	8006308 <xTimerGenericCommand+0x30>
	__asm volatile
 80062f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062f4:	f383 8811 	msr	BASEPRI, r3
 80062f8:	f3bf 8f6f 	isb	sy
 80062fc:	f3bf 8f4f 	dsb	sy
 8006300:	623b      	str	r3, [r7, #32]
}
 8006302:	bf00      	nop
 8006304:	bf00      	nop
 8006306:	e7fd      	b.n	8006304 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006308:	4b19      	ldr	r3, [pc, #100]	@ (8006370 <xTimerGenericCommand+0x98>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d02a      	beq.n	8006366 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	2b05      	cmp	r3, #5
 8006320:	dc18      	bgt.n	8006354 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006322:	f7ff fe6b 	bl	8005ffc <xTaskGetSchedulerState>
 8006326:	4603      	mov	r3, r0
 8006328:	2b02      	cmp	r3, #2
 800632a:	d109      	bne.n	8006340 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800632c:	4b10      	ldr	r3, [pc, #64]	@ (8006370 <xTimerGenericCommand+0x98>)
 800632e:	6818      	ldr	r0, [r3, #0]
 8006330:	f107 0110 	add.w	r1, r7, #16
 8006334:	2300      	movs	r3, #0
 8006336:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006338:	f7fe fb90 	bl	8004a5c <xQueueGenericSend>
 800633c:	6278      	str	r0, [r7, #36]	@ 0x24
 800633e:	e012      	b.n	8006366 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006340:	4b0b      	ldr	r3, [pc, #44]	@ (8006370 <xTimerGenericCommand+0x98>)
 8006342:	6818      	ldr	r0, [r3, #0]
 8006344:	f107 0110 	add.w	r1, r7, #16
 8006348:	2300      	movs	r3, #0
 800634a:	2200      	movs	r2, #0
 800634c:	f7fe fb86 	bl	8004a5c <xQueueGenericSend>
 8006350:	6278      	str	r0, [r7, #36]	@ 0x24
 8006352:	e008      	b.n	8006366 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006354:	4b06      	ldr	r3, [pc, #24]	@ (8006370 <xTimerGenericCommand+0x98>)
 8006356:	6818      	ldr	r0, [r3, #0]
 8006358:	f107 0110 	add.w	r1, r7, #16
 800635c:	2300      	movs	r3, #0
 800635e:	683a      	ldr	r2, [r7, #0]
 8006360:	f7fe fc7e 	bl	8004c60 <xQueueGenericSendFromISR>
 8006364:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006368:	4618      	mov	r0, r3
 800636a:	3728      	adds	r7, #40	@ 0x28
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}
 8006370:	200007f8 	.word	0x200007f8

08006374 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b088      	sub	sp, #32
 8006378:	af02      	add	r7, sp, #8
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800637e:	4b23      	ldr	r3, [pc, #140]	@ (800640c <prvProcessExpiredTimer+0x98>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	3304      	adds	r3, #4
 800638c:	4618      	mov	r0, r3
 800638e:	f7fe f9f9 	bl	8004784 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006398:	f003 0304 	and.w	r3, r3, #4
 800639c:	2b00      	cmp	r3, #0
 800639e:	d023      	beq.n	80063e8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	699a      	ldr	r2, [r3, #24]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	18d1      	adds	r1, r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	683a      	ldr	r2, [r7, #0]
 80063ac:	6978      	ldr	r0, [r7, #20]
 80063ae:	f000 f8d5 	bl	800655c <prvInsertTimerInActiveList>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d020      	beq.n	80063fa <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80063b8:	2300      	movs	r3, #0
 80063ba:	9300      	str	r3, [sp, #0]
 80063bc:	2300      	movs	r3, #0
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	2100      	movs	r1, #0
 80063c2:	6978      	ldr	r0, [r7, #20]
 80063c4:	f7ff ff88 	bl	80062d8 <xTimerGenericCommand>
 80063c8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d114      	bne.n	80063fa <prvProcessExpiredTimer+0x86>
	__asm volatile
 80063d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d4:	f383 8811 	msr	BASEPRI, r3
 80063d8:	f3bf 8f6f 	isb	sy
 80063dc:	f3bf 8f4f 	dsb	sy
 80063e0:	60fb      	str	r3, [r7, #12]
}
 80063e2:	bf00      	nop
 80063e4:	bf00      	nop
 80063e6:	e7fd      	b.n	80063e4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80063ee:	f023 0301 	bic.w	r3, r3, #1
 80063f2:	b2da      	uxtb	r2, r3
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	6978      	ldr	r0, [r7, #20]
 8006400:	4798      	blx	r3
}
 8006402:	bf00      	nop
 8006404:	3718      	adds	r7, #24
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	200007f0 	.word	0x200007f0

08006410 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006418:	f107 0308 	add.w	r3, r7, #8
 800641c:	4618      	mov	r0, r3
 800641e:	f000 f859 	bl	80064d4 <prvGetNextExpireTime>
 8006422:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	4619      	mov	r1, r3
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f000 f805 	bl	8006438 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800642e:	f000 f8d7 	bl	80065e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006432:	bf00      	nop
 8006434:	e7f0      	b.n	8006418 <prvTimerTask+0x8>
	...

08006438 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006442:	f7ff f955 	bl	80056f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006446:	f107 0308 	add.w	r3, r7, #8
 800644a:	4618      	mov	r0, r3
 800644c:	f000 f866 	bl	800651c <prvSampleTimeNow>
 8006450:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d130      	bne.n	80064ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d10a      	bne.n	8006474 <prvProcessTimerOrBlockTask+0x3c>
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	429a      	cmp	r2, r3
 8006464:	d806      	bhi.n	8006474 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006466:	f7ff f951 	bl	800570c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800646a:	68f9      	ldr	r1, [r7, #12]
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f7ff ff81 	bl	8006374 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006472:	e024      	b.n	80064be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d008      	beq.n	800648c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800647a:	4b13      	ldr	r3, [pc, #76]	@ (80064c8 <prvProcessTimerOrBlockTask+0x90>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d101      	bne.n	8006488 <prvProcessTimerOrBlockTask+0x50>
 8006484:	2301      	movs	r3, #1
 8006486:	e000      	b.n	800648a <prvProcessTimerOrBlockTask+0x52>
 8006488:	2300      	movs	r3, #0
 800648a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800648c:	4b0f      	ldr	r3, [pc, #60]	@ (80064cc <prvProcessTimerOrBlockTask+0x94>)
 800648e:	6818      	ldr	r0, [r3, #0]
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	683a      	ldr	r2, [r7, #0]
 8006498:	4619      	mov	r1, r3
 800649a:	f7fe febf 	bl	800521c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800649e:	f7ff f935 	bl	800570c <xTaskResumeAll>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d10a      	bne.n	80064be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80064a8:	4b09      	ldr	r3, [pc, #36]	@ (80064d0 <prvProcessTimerOrBlockTask+0x98>)
 80064aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064ae:	601a      	str	r2, [r3, #0]
 80064b0:	f3bf 8f4f 	dsb	sy
 80064b4:	f3bf 8f6f 	isb	sy
}
 80064b8:	e001      	b.n	80064be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80064ba:	f7ff f927 	bl	800570c <xTaskResumeAll>
}
 80064be:	bf00      	nop
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	200007f4 	.word	0x200007f4
 80064cc:	200007f8 	.word	0x200007f8
 80064d0:	e000ed04 	.word	0xe000ed04

080064d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80064dc:	4b0e      	ldr	r3, [pc, #56]	@ (8006518 <prvGetNextExpireTime+0x44>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d101      	bne.n	80064ea <prvGetNextExpireTime+0x16>
 80064e6:	2201      	movs	r2, #1
 80064e8:	e000      	b.n	80064ec <prvGetNextExpireTime+0x18>
 80064ea:	2200      	movs	r2, #0
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d105      	bne.n	8006504 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80064f8:	4b07      	ldr	r3, [pc, #28]	@ (8006518 <prvGetNextExpireTime+0x44>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	60fb      	str	r3, [r7, #12]
 8006502:	e001      	b.n	8006508 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006504:	2300      	movs	r3, #0
 8006506:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006508:	68fb      	ldr	r3, [r7, #12]
}
 800650a:	4618      	mov	r0, r3
 800650c:	3714      	adds	r7, #20
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	200007f0 	.word	0x200007f0

0800651c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006524:	f7ff f990 	bl	8005848 <xTaskGetTickCount>
 8006528:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800652a:	4b0b      	ldr	r3, [pc, #44]	@ (8006558 <prvSampleTimeNow+0x3c>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	429a      	cmp	r2, r3
 8006532:	d205      	bcs.n	8006540 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006534:	f000 f93a 	bl	80067ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	e002      	b.n	8006546 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006546:	4a04      	ldr	r2, [pc, #16]	@ (8006558 <prvSampleTimeNow+0x3c>)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800654c:	68fb      	ldr	r3, [r7, #12]
}
 800654e:	4618      	mov	r0, r3
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	20000800 	.word	0x20000800

0800655c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b086      	sub	sp, #24
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
 8006568:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800656a:	2300      	movs	r3, #0
 800656c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	429a      	cmp	r2, r3
 8006580:	d812      	bhi.n	80065a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	1ad2      	subs	r2, r2, r3
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	699b      	ldr	r3, [r3, #24]
 800658c:	429a      	cmp	r2, r3
 800658e:	d302      	bcc.n	8006596 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006590:	2301      	movs	r3, #1
 8006592:	617b      	str	r3, [r7, #20]
 8006594:	e01b      	b.n	80065ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006596:	4b10      	ldr	r3, [pc, #64]	@ (80065d8 <prvInsertTimerInActiveList+0x7c>)
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	3304      	adds	r3, #4
 800659e:	4619      	mov	r1, r3
 80065a0:	4610      	mov	r0, r2
 80065a2:	f7fe f8b6 	bl	8004712 <vListInsert>
 80065a6:	e012      	b.n	80065ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d206      	bcs.n	80065be <prvInsertTimerInActiveList+0x62>
 80065b0:	68ba      	ldr	r2, [r7, #8]
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d302      	bcc.n	80065be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80065b8:	2301      	movs	r3, #1
 80065ba:	617b      	str	r3, [r7, #20]
 80065bc:	e007      	b.n	80065ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80065be:	4b07      	ldr	r3, [pc, #28]	@ (80065dc <prvInsertTimerInActiveList+0x80>)
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	3304      	adds	r3, #4
 80065c6:	4619      	mov	r1, r3
 80065c8:	4610      	mov	r0, r2
 80065ca:	f7fe f8a2 	bl	8004712 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80065ce:	697b      	ldr	r3, [r7, #20]
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3718      	adds	r7, #24
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	200007f4 	.word	0x200007f4
 80065dc:	200007f0 	.word	0x200007f0

080065e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b08e      	sub	sp, #56	@ 0x38
 80065e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80065e6:	e0ce      	b.n	8006786 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	da19      	bge.n	8006622 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80065ee:	1d3b      	adds	r3, r7, #4
 80065f0:	3304      	adds	r3, #4
 80065f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80065f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d10b      	bne.n	8006612 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80065fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065fe:	f383 8811 	msr	BASEPRI, r3
 8006602:	f3bf 8f6f 	isb	sy
 8006606:	f3bf 8f4f 	dsb	sy
 800660a:	61fb      	str	r3, [r7, #28]
}
 800660c:	bf00      	nop
 800660e:	bf00      	nop
 8006610:	e7fd      	b.n	800660e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006618:	6850      	ldr	r0, [r2, #4]
 800661a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800661c:	6892      	ldr	r2, [r2, #8]
 800661e:	4611      	mov	r1, r2
 8006620:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2b00      	cmp	r3, #0
 8006626:	f2c0 80ae 	blt.w	8006786 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800662e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d004      	beq.n	8006640 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006638:	3304      	adds	r3, #4
 800663a:	4618      	mov	r0, r3
 800663c:	f7fe f8a2 	bl	8004784 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006640:	463b      	mov	r3, r7
 8006642:	4618      	mov	r0, r3
 8006644:	f7ff ff6a 	bl	800651c <prvSampleTimeNow>
 8006648:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2b09      	cmp	r3, #9
 800664e:	f200 8097 	bhi.w	8006780 <prvProcessReceivedCommands+0x1a0>
 8006652:	a201      	add	r2, pc, #4	@ (adr r2, 8006658 <prvProcessReceivedCommands+0x78>)
 8006654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006658:	08006681 	.word	0x08006681
 800665c:	08006681 	.word	0x08006681
 8006660:	08006681 	.word	0x08006681
 8006664:	080066f7 	.word	0x080066f7
 8006668:	0800670b 	.word	0x0800670b
 800666c:	08006757 	.word	0x08006757
 8006670:	08006681 	.word	0x08006681
 8006674:	08006681 	.word	0x08006681
 8006678:	080066f7 	.word	0x080066f7
 800667c:	0800670b 	.word	0x0800670b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006682:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006686:	f043 0301 	orr.w	r3, r3, #1
 800668a:	b2da      	uxtb	r2, r3
 800668c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800668e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006692:	68ba      	ldr	r2, [r7, #8]
 8006694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006696:	699b      	ldr	r3, [r3, #24]
 8006698:	18d1      	adds	r1, r2, r3
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800669e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066a0:	f7ff ff5c 	bl	800655c <prvInsertTimerInActiveList>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d06c      	beq.n	8006784 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ac:	6a1b      	ldr	r3, [r3, #32]
 80066ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066b0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80066b8:	f003 0304 	and.w	r3, r3, #4
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d061      	beq.n	8006784 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80066c0:	68ba      	ldr	r2, [r7, #8]
 80066c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	441a      	add	r2, r3
 80066c8:	2300      	movs	r3, #0
 80066ca:	9300      	str	r3, [sp, #0]
 80066cc:	2300      	movs	r3, #0
 80066ce:	2100      	movs	r1, #0
 80066d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066d2:	f7ff fe01 	bl	80062d8 <xTimerGenericCommand>
 80066d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80066d8:	6a3b      	ldr	r3, [r7, #32]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d152      	bne.n	8006784 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80066de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e2:	f383 8811 	msr	BASEPRI, r3
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	61bb      	str	r3, [r7, #24]
}
 80066f0:	bf00      	nop
 80066f2:	bf00      	nop
 80066f4:	e7fd      	b.n	80066f2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80066f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80066fc:	f023 0301 	bic.w	r3, r3, #1
 8006700:	b2da      	uxtb	r2, r3
 8006702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006704:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8006708:	e03d      	b.n	8006786 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800670a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800670c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006710:	f043 0301 	orr.w	r3, r3, #1
 8006714:	b2da      	uxtb	r2, r3
 8006716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006718:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800671c:	68ba      	ldr	r2, [r7, #8]
 800671e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006720:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d10b      	bne.n	8006742 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800672a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800672e:	f383 8811 	msr	BASEPRI, r3
 8006732:	f3bf 8f6f 	isb	sy
 8006736:	f3bf 8f4f 	dsb	sy
 800673a:	617b      	str	r3, [r7, #20]
}
 800673c:	bf00      	nop
 800673e:	bf00      	nop
 8006740:	e7fd      	b.n	800673e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006744:	699a      	ldr	r2, [r3, #24]
 8006746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006748:	18d1      	adds	r1, r2, r3
 800674a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800674e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006750:	f7ff ff04 	bl	800655c <prvInsertTimerInActiveList>
					break;
 8006754:	e017      	b.n	8006786 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006758:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800675c:	f003 0302 	and.w	r3, r3, #2
 8006760:	2b00      	cmp	r3, #0
 8006762:	d103      	bne.n	800676c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006764:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006766:	f000 fc07 	bl	8006f78 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800676a:	e00c      	b.n	8006786 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800676c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800676e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006772:	f023 0301 	bic.w	r3, r3, #1
 8006776:	b2da      	uxtb	r2, r3
 8006778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800677a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 800677e:	e002      	b.n	8006786 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006780:	bf00      	nop
 8006782:	e000      	b.n	8006786 <prvProcessReceivedCommands+0x1a6>
					break;
 8006784:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006786:	4b08      	ldr	r3, [pc, #32]	@ (80067a8 <prvProcessReceivedCommands+0x1c8>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	1d39      	adds	r1, r7, #4
 800678c:	2200      	movs	r2, #0
 800678e:	4618      	mov	r0, r3
 8006790:	f7fe fb04 	bl	8004d9c <xQueueReceive>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	f47f af26 	bne.w	80065e8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800679c:	bf00      	nop
 800679e:	bf00      	nop
 80067a0:	3730      	adds	r7, #48	@ 0x30
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	200007f8 	.word	0x200007f8

080067ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b088      	sub	sp, #32
 80067b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80067b2:	e049      	b.n	8006848 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067b4:	4b2e      	ldr	r3, [pc, #184]	@ (8006870 <prvSwitchTimerLists+0xc4>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067be:	4b2c      	ldr	r3, [pc, #176]	@ (8006870 <prvSwitchTimerLists+0xc4>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	3304      	adds	r3, #4
 80067cc:	4618      	mov	r0, r3
 80067ce:	f7fd ffd9 	bl	8004784 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6a1b      	ldr	r3, [r3, #32]
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80067e0:	f003 0304 	and.w	r3, r3, #4
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d02f      	beq.n	8006848 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	699b      	ldr	r3, [r3, #24]
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	4413      	add	r3, r2
 80067f0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80067f2:	68ba      	ldr	r2, [r7, #8]
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d90e      	bls.n	8006818 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	68ba      	ldr	r2, [r7, #8]
 80067fe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006806:	4b1a      	ldr	r3, [pc, #104]	@ (8006870 <prvSwitchTimerLists+0xc4>)
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	3304      	adds	r3, #4
 800680e:	4619      	mov	r1, r3
 8006810:	4610      	mov	r0, r2
 8006812:	f7fd ff7e 	bl	8004712 <vListInsert>
 8006816:	e017      	b.n	8006848 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006818:	2300      	movs	r3, #0
 800681a:	9300      	str	r3, [sp, #0]
 800681c:	2300      	movs	r3, #0
 800681e:	693a      	ldr	r2, [r7, #16]
 8006820:	2100      	movs	r1, #0
 8006822:	68f8      	ldr	r0, [r7, #12]
 8006824:	f7ff fd58 	bl	80062d8 <xTimerGenericCommand>
 8006828:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d10b      	bne.n	8006848 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006834:	f383 8811 	msr	BASEPRI, r3
 8006838:	f3bf 8f6f 	isb	sy
 800683c:	f3bf 8f4f 	dsb	sy
 8006840:	603b      	str	r3, [r7, #0]
}
 8006842:	bf00      	nop
 8006844:	bf00      	nop
 8006846:	e7fd      	b.n	8006844 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006848:	4b09      	ldr	r3, [pc, #36]	@ (8006870 <prvSwitchTimerLists+0xc4>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d1b0      	bne.n	80067b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006852:	4b07      	ldr	r3, [pc, #28]	@ (8006870 <prvSwitchTimerLists+0xc4>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006858:	4b06      	ldr	r3, [pc, #24]	@ (8006874 <prvSwitchTimerLists+0xc8>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a04      	ldr	r2, [pc, #16]	@ (8006870 <prvSwitchTimerLists+0xc4>)
 800685e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006860:	4a04      	ldr	r2, [pc, #16]	@ (8006874 <prvSwitchTimerLists+0xc8>)
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	6013      	str	r3, [r2, #0]
}
 8006866:	bf00      	nop
 8006868:	3718      	adds	r7, #24
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	200007f0 	.word	0x200007f0
 8006874:	200007f4 	.word	0x200007f4

08006878 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800687e:	f000 f98b 	bl	8006b98 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006882:	4b15      	ldr	r3, [pc, #84]	@ (80068d8 <prvCheckForValidListAndQueue+0x60>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d120      	bne.n	80068cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800688a:	4814      	ldr	r0, [pc, #80]	@ (80068dc <prvCheckForValidListAndQueue+0x64>)
 800688c:	f7fd fef0 	bl	8004670 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006890:	4813      	ldr	r0, [pc, #76]	@ (80068e0 <prvCheckForValidListAndQueue+0x68>)
 8006892:	f7fd feed 	bl	8004670 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006896:	4b13      	ldr	r3, [pc, #76]	@ (80068e4 <prvCheckForValidListAndQueue+0x6c>)
 8006898:	4a10      	ldr	r2, [pc, #64]	@ (80068dc <prvCheckForValidListAndQueue+0x64>)
 800689a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800689c:	4b12      	ldr	r3, [pc, #72]	@ (80068e8 <prvCheckForValidListAndQueue+0x70>)
 800689e:	4a10      	ldr	r2, [pc, #64]	@ (80068e0 <prvCheckForValidListAndQueue+0x68>)
 80068a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80068a2:	2300      	movs	r3, #0
 80068a4:	9300      	str	r3, [sp, #0]
 80068a6:	4b11      	ldr	r3, [pc, #68]	@ (80068ec <prvCheckForValidListAndQueue+0x74>)
 80068a8:	4a11      	ldr	r2, [pc, #68]	@ (80068f0 <prvCheckForValidListAndQueue+0x78>)
 80068aa:	2110      	movs	r1, #16
 80068ac:	200a      	movs	r0, #10
 80068ae:	f7fd fffd 	bl	80048ac <xQueueGenericCreateStatic>
 80068b2:	4603      	mov	r3, r0
 80068b4:	4a08      	ldr	r2, [pc, #32]	@ (80068d8 <prvCheckForValidListAndQueue+0x60>)
 80068b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80068b8:	4b07      	ldr	r3, [pc, #28]	@ (80068d8 <prvCheckForValidListAndQueue+0x60>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d005      	beq.n	80068cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80068c0:	4b05      	ldr	r3, [pc, #20]	@ (80068d8 <prvCheckForValidListAndQueue+0x60>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	490b      	ldr	r1, [pc, #44]	@ (80068f4 <prvCheckForValidListAndQueue+0x7c>)
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7fe fc7e 	bl	80051c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80068cc:	f000 f996 	bl	8006bfc <vPortExitCritical>
}
 80068d0:	bf00      	nop
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	200007f8 	.word	0x200007f8
 80068dc:	200007c8 	.word	0x200007c8
 80068e0:	200007dc 	.word	0x200007dc
 80068e4:	200007f0 	.word	0x200007f0
 80068e8:	200007f4 	.word	0x200007f4
 80068ec:	200008a4 	.word	0x200008a4
 80068f0:	20000804 	.word	0x20000804
 80068f4:	08008768 	.word	0x08008768

080068f8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b08a      	sub	sp, #40	@ 0x28
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
 8006904:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8006906:	f06f 0301 	mvn.w	r3, #1
 800690a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006918:	4b06      	ldr	r3, [pc, #24]	@ (8006934 <xTimerPendFunctionCallFromISR+0x3c>)
 800691a:	6818      	ldr	r0, [r3, #0]
 800691c:	f107 0114 	add.w	r1, r7, #20
 8006920:	2300      	movs	r3, #0
 8006922:	683a      	ldr	r2, [r7, #0]
 8006924:	f7fe f99c 	bl	8004c60 <xQueueGenericSendFromISR>
 8006928:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800692a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800692c:	4618      	mov	r0, r3
 800692e:	3728      	adds	r7, #40	@ 0x28
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}
 8006934:	200007f8 	.word	0x200007f8

08006938 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	3b04      	subs	r3, #4
 8006948:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006950:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	3b04      	subs	r3, #4
 8006956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	f023 0201 	bic.w	r2, r3, #1
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	3b04      	subs	r3, #4
 8006966:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006968:	4a0c      	ldr	r2, [pc, #48]	@ (800699c <pxPortInitialiseStack+0x64>)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	3b14      	subs	r3, #20
 8006972:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	3b04      	subs	r3, #4
 800697e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f06f 0202 	mvn.w	r2, #2
 8006986:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	3b20      	subs	r3, #32
 800698c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800698e:	68fb      	ldr	r3, [r7, #12]
}
 8006990:	4618      	mov	r0, r3
 8006992:	3714      	adds	r7, #20
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr
 800699c:	080069a1 	.word	0x080069a1

080069a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80069a0:	b480      	push	{r7}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80069a6:	2300      	movs	r3, #0
 80069a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80069aa:	4b13      	ldr	r3, [pc, #76]	@ (80069f8 <prvTaskExitError+0x58>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b2:	d00b      	beq.n	80069cc <prvTaskExitError+0x2c>
	__asm volatile
 80069b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b8:	f383 8811 	msr	BASEPRI, r3
 80069bc:	f3bf 8f6f 	isb	sy
 80069c0:	f3bf 8f4f 	dsb	sy
 80069c4:	60fb      	str	r3, [r7, #12]
}
 80069c6:	bf00      	nop
 80069c8:	bf00      	nop
 80069ca:	e7fd      	b.n	80069c8 <prvTaskExitError+0x28>
	__asm volatile
 80069cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d0:	f383 8811 	msr	BASEPRI, r3
 80069d4:	f3bf 8f6f 	isb	sy
 80069d8:	f3bf 8f4f 	dsb	sy
 80069dc:	60bb      	str	r3, [r7, #8]
}
 80069de:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80069e0:	bf00      	nop
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d0fc      	beq.n	80069e2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80069e8:	bf00      	nop
 80069ea:	bf00      	nop
 80069ec:	3714      	adds	r7, #20
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop
 80069f8:	2000000c 	.word	0x2000000c
 80069fc:	00000000 	.word	0x00000000

08006a00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006a00:	4b07      	ldr	r3, [pc, #28]	@ (8006a20 <pxCurrentTCBConst2>)
 8006a02:	6819      	ldr	r1, [r3, #0]
 8006a04:	6808      	ldr	r0, [r1, #0]
 8006a06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a0a:	f380 8809 	msr	PSP, r0
 8006a0e:	f3bf 8f6f 	isb	sy
 8006a12:	f04f 0000 	mov.w	r0, #0
 8006a16:	f380 8811 	msr	BASEPRI, r0
 8006a1a:	4770      	bx	lr
 8006a1c:	f3af 8000 	nop.w

08006a20 <pxCurrentTCBConst2>:
 8006a20:	2000069c 	.word	0x2000069c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006a24:	bf00      	nop
 8006a26:	bf00      	nop

08006a28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006a28:	4808      	ldr	r0, [pc, #32]	@ (8006a4c <prvPortStartFirstTask+0x24>)
 8006a2a:	6800      	ldr	r0, [r0, #0]
 8006a2c:	6800      	ldr	r0, [r0, #0]
 8006a2e:	f380 8808 	msr	MSP, r0
 8006a32:	f04f 0000 	mov.w	r0, #0
 8006a36:	f380 8814 	msr	CONTROL, r0
 8006a3a:	b662      	cpsie	i
 8006a3c:	b661      	cpsie	f
 8006a3e:	f3bf 8f4f 	dsb	sy
 8006a42:	f3bf 8f6f 	isb	sy
 8006a46:	df00      	svc	0
 8006a48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006a4a:	bf00      	nop
 8006a4c:	e000ed08 	.word	0xe000ed08

08006a50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b086      	sub	sp, #24
 8006a54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006a56:	4b47      	ldr	r3, [pc, #284]	@ (8006b74 <xPortStartScheduler+0x124>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a47      	ldr	r2, [pc, #284]	@ (8006b78 <xPortStartScheduler+0x128>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d10b      	bne.n	8006a78 <xPortStartScheduler+0x28>
	__asm volatile
 8006a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a64:	f383 8811 	msr	BASEPRI, r3
 8006a68:	f3bf 8f6f 	isb	sy
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	613b      	str	r3, [r7, #16]
}
 8006a72:	bf00      	nop
 8006a74:	bf00      	nop
 8006a76:	e7fd      	b.n	8006a74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006a78:	4b3e      	ldr	r3, [pc, #248]	@ (8006b74 <xPortStartScheduler+0x124>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a3f      	ldr	r2, [pc, #252]	@ (8006b7c <xPortStartScheduler+0x12c>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d10b      	bne.n	8006a9a <xPortStartScheduler+0x4a>
	__asm volatile
 8006a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a86:	f383 8811 	msr	BASEPRI, r3
 8006a8a:	f3bf 8f6f 	isb	sy
 8006a8e:	f3bf 8f4f 	dsb	sy
 8006a92:	60fb      	str	r3, [r7, #12]
}
 8006a94:	bf00      	nop
 8006a96:	bf00      	nop
 8006a98:	e7fd      	b.n	8006a96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006a9a:	4b39      	ldr	r3, [pc, #228]	@ (8006b80 <xPortStartScheduler+0x130>)
 8006a9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	22ff      	movs	r2, #255	@ 0xff
 8006aaa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006ab4:	78fb      	ldrb	r3, [r7, #3]
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006abc:	b2da      	uxtb	r2, r3
 8006abe:	4b31      	ldr	r3, [pc, #196]	@ (8006b84 <xPortStartScheduler+0x134>)
 8006ac0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006ac2:	4b31      	ldr	r3, [pc, #196]	@ (8006b88 <xPortStartScheduler+0x138>)
 8006ac4:	2207      	movs	r2, #7
 8006ac6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ac8:	e009      	b.n	8006ade <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006aca:	4b2f      	ldr	r3, [pc, #188]	@ (8006b88 <xPortStartScheduler+0x138>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	4a2d      	ldr	r2, [pc, #180]	@ (8006b88 <xPortStartScheduler+0x138>)
 8006ad2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006ad4:	78fb      	ldrb	r3, [r7, #3]
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	005b      	lsls	r3, r3, #1
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ade:	78fb      	ldrb	r3, [r7, #3]
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ae6:	2b80      	cmp	r3, #128	@ 0x80
 8006ae8:	d0ef      	beq.n	8006aca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006aea:	4b27      	ldr	r3, [pc, #156]	@ (8006b88 <xPortStartScheduler+0x138>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f1c3 0307 	rsb	r3, r3, #7
 8006af2:	2b04      	cmp	r3, #4
 8006af4:	d00b      	beq.n	8006b0e <xPortStartScheduler+0xbe>
	__asm volatile
 8006af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006afa:	f383 8811 	msr	BASEPRI, r3
 8006afe:	f3bf 8f6f 	isb	sy
 8006b02:	f3bf 8f4f 	dsb	sy
 8006b06:	60bb      	str	r3, [r7, #8]
}
 8006b08:	bf00      	nop
 8006b0a:	bf00      	nop
 8006b0c:	e7fd      	b.n	8006b0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006b0e:	4b1e      	ldr	r3, [pc, #120]	@ (8006b88 <xPortStartScheduler+0x138>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	021b      	lsls	r3, r3, #8
 8006b14:	4a1c      	ldr	r2, [pc, #112]	@ (8006b88 <xPortStartScheduler+0x138>)
 8006b16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006b18:	4b1b      	ldr	r3, [pc, #108]	@ (8006b88 <xPortStartScheduler+0x138>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006b20:	4a19      	ldr	r2, [pc, #100]	@ (8006b88 <xPortStartScheduler+0x138>)
 8006b22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	b2da      	uxtb	r2, r3
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006b2c:	4b17      	ldr	r3, [pc, #92]	@ (8006b8c <xPortStartScheduler+0x13c>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a16      	ldr	r2, [pc, #88]	@ (8006b8c <xPortStartScheduler+0x13c>)
 8006b32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006b36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006b38:	4b14      	ldr	r3, [pc, #80]	@ (8006b8c <xPortStartScheduler+0x13c>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a13      	ldr	r2, [pc, #76]	@ (8006b8c <xPortStartScheduler+0x13c>)
 8006b3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006b42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006b44:	f000 f8da 	bl	8006cfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006b48:	4b11      	ldr	r3, [pc, #68]	@ (8006b90 <xPortStartScheduler+0x140>)
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006b4e:	f000 f8f9 	bl	8006d44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006b52:	4b10      	ldr	r3, [pc, #64]	@ (8006b94 <xPortStartScheduler+0x144>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a0f      	ldr	r2, [pc, #60]	@ (8006b94 <xPortStartScheduler+0x144>)
 8006b58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006b5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006b5e:	f7ff ff63 	bl	8006a28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006b62:	f7fe ff3b 	bl	80059dc <vTaskSwitchContext>
	prvTaskExitError();
 8006b66:	f7ff ff1b 	bl	80069a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006b6a:	2300      	movs	r3, #0
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3718      	adds	r7, #24
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	e000ed00 	.word	0xe000ed00
 8006b78:	410fc271 	.word	0x410fc271
 8006b7c:	410fc270 	.word	0x410fc270
 8006b80:	e000e400 	.word	0xe000e400
 8006b84:	200008ec 	.word	0x200008ec
 8006b88:	200008f0 	.word	0x200008f0
 8006b8c:	e000ed20 	.word	0xe000ed20
 8006b90:	2000000c 	.word	0x2000000c
 8006b94:	e000ef34 	.word	0xe000ef34

08006b98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	607b      	str	r3, [r7, #4]
}
 8006bb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006bb2:	4b10      	ldr	r3, [pc, #64]	@ (8006bf4 <vPortEnterCritical+0x5c>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	4a0e      	ldr	r2, [pc, #56]	@ (8006bf4 <vPortEnterCritical+0x5c>)
 8006bba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8006bf4 <vPortEnterCritical+0x5c>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d110      	bne.n	8006be6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8006bf8 <vPortEnterCritical+0x60>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00b      	beq.n	8006be6 <vPortEnterCritical+0x4e>
	__asm volatile
 8006bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd2:	f383 8811 	msr	BASEPRI, r3
 8006bd6:	f3bf 8f6f 	isb	sy
 8006bda:	f3bf 8f4f 	dsb	sy
 8006bde:	603b      	str	r3, [r7, #0]
}
 8006be0:	bf00      	nop
 8006be2:	bf00      	nop
 8006be4:	e7fd      	b.n	8006be2 <vPortEnterCritical+0x4a>
	}
}
 8006be6:	bf00      	nop
 8006be8:	370c      	adds	r7, #12
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	2000000c 	.word	0x2000000c
 8006bf8:	e000ed04 	.word	0xe000ed04

08006bfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006c02:	4b12      	ldr	r3, [pc, #72]	@ (8006c4c <vPortExitCritical+0x50>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d10b      	bne.n	8006c22 <vPortExitCritical+0x26>
	__asm volatile
 8006c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c0e:	f383 8811 	msr	BASEPRI, r3
 8006c12:	f3bf 8f6f 	isb	sy
 8006c16:	f3bf 8f4f 	dsb	sy
 8006c1a:	607b      	str	r3, [r7, #4]
}
 8006c1c:	bf00      	nop
 8006c1e:	bf00      	nop
 8006c20:	e7fd      	b.n	8006c1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006c22:	4b0a      	ldr	r3, [pc, #40]	@ (8006c4c <vPortExitCritical+0x50>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	3b01      	subs	r3, #1
 8006c28:	4a08      	ldr	r2, [pc, #32]	@ (8006c4c <vPortExitCritical+0x50>)
 8006c2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006c2c:	4b07      	ldr	r3, [pc, #28]	@ (8006c4c <vPortExitCritical+0x50>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d105      	bne.n	8006c40 <vPortExitCritical+0x44>
 8006c34:	2300      	movs	r3, #0
 8006c36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	f383 8811 	msr	BASEPRI, r3
}
 8006c3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr
 8006c4c:	2000000c 	.word	0x2000000c

08006c50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006c50:	f3ef 8009 	mrs	r0, PSP
 8006c54:	f3bf 8f6f 	isb	sy
 8006c58:	4b15      	ldr	r3, [pc, #84]	@ (8006cb0 <pxCurrentTCBConst>)
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	f01e 0f10 	tst.w	lr, #16
 8006c60:	bf08      	it	eq
 8006c62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006c66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c6a:	6010      	str	r0, [r2, #0]
 8006c6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006c70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006c74:	f380 8811 	msr	BASEPRI, r0
 8006c78:	f3bf 8f4f 	dsb	sy
 8006c7c:	f3bf 8f6f 	isb	sy
 8006c80:	f7fe feac 	bl	80059dc <vTaskSwitchContext>
 8006c84:	f04f 0000 	mov.w	r0, #0
 8006c88:	f380 8811 	msr	BASEPRI, r0
 8006c8c:	bc09      	pop	{r0, r3}
 8006c8e:	6819      	ldr	r1, [r3, #0]
 8006c90:	6808      	ldr	r0, [r1, #0]
 8006c92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c96:	f01e 0f10 	tst.w	lr, #16
 8006c9a:	bf08      	it	eq
 8006c9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ca0:	f380 8809 	msr	PSP, r0
 8006ca4:	f3bf 8f6f 	isb	sy
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	f3af 8000 	nop.w

08006cb0 <pxCurrentTCBConst>:
 8006cb0:	2000069c 	.word	0x2000069c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006cb4:	bf00      	nop
 8006cb6:	bf00      	nop

08006cb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
	__asm volatile
 8006cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc2:	f383 8811 	msr	BASEPRI, r3
 8006cc6:	f3bf 8f6f 	isb	sy
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	607b      	str	r3, [r7, #4]
}
 8006cd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006cd2:	f7fe fdc9 	bl	8005868 <xTaskIncrementTick>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d003      	beq.n	8006ce4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006cdc:	4b06      	ldr	r3, [pc, #24]	@ (8006cf8 <SysTick_Handler+0x40>)
 8006cde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ce2:	601a      	str	r2, [r3, #0]
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	f383 8811 	msr	BASEPRI, r3
}
 8006cee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006cf0:	bf00      	nop
 8006cf2:	3708      	adds	r7, #8
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	e000ed04 	.word	0xe000ed04

08006cfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006d00:	4b0b      	ldr	r3, [pc, #44]	@ (8006d30 <vPortSetupTimerInterrupt+0x34>)
 8006d02:	2200      	movs	r2, #0
 8006d04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006d06:	4b0b      	ldr	r3, [pc, #44]	@ (8006d34 <vPortSetupTimerInterrupt+0x38>)
 8006d08:	2200      	movs	r2, #0
 8006d0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8006d38 <vPortSetupTimerInterrupt+0x3c>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a0a      	ldr	r2, [pc, #40]	@ (8006d3c <vPortSetupTimerInterrupt+0x40>)
 8006d12:	fba2 2303 	umull	r2, r3, r2, r3
 8006d16:	099b      	lsrs	r3, r3, #6
 8006d18:	4a09      	ldr	r2, [pc, #36]	@ (8006d40 <vPortSetupTimerInterrupt+0x44>)
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006d1e:	4b04      	ldr	r3, [pc, #16]	@ (8006d30 <vPortSetupTimerInterrupt+0x34>)
 8006d20:	2207      	movs	r2, #7
 8006d22:	601a      	str	r2, [r3, #0]
}
 8006d24:	bf00      	nop
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	e000e010 	.word	0xe000e010
 8006d34:	e000e018 	.word	0xe000e018
 8006d38:	20000000 	.word	0x20000000
 8006d3c:	10624dd3 	.word	0x10624dd3
 8006d40:	e000e014 	.word	0xe000e014

08006d44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006d44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006d54 <vPortEnableVFP+0x10>
 8006d48:	6801      	ldr	r1, [r0, #0]
 8006d4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006d4e:	6001      	str	r1, [r0, #0]
 8006d50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006d52:	bf00      	nop
 8006d54:	e000ed88 	.word	0xe000ed88

08006d58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006d5e:	f3ef 8305 	mrs	r3, IPSR
 8006d62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2b0f      	cmp	r3, #15
 8006d68:	d915      	bls.n	8006d96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006d6a:	4a18      	ldr	r2, [pc, #96]	@ (8006dcc <vPortValidateInterruptPriority+0x74>)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	4413      	add	r3, r2
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006d74:	4b16      	ldr	r3, [pc, #88]	@ (8006dd0 <vPortValidateInterruptPriority+0x78>)
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	7afa      	ldrb	r2, [r7, #11]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d20b      	bcs.n	8006d96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d82:	f383 8811 	msr	BASEPRI, r3
 8006d86:	f3bf 8f6f 	isb	sy
 8006d8a:	f3bf 8f4f 	dsb	sy
 8006d8e:	607b      	str	r3, [r7, #4]
}
 8006d90:	bf00      	nop
 8006d92:	bf00      	nop
 8006d94:	e7fd      	b.n	8006d92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006d96:	4b0f      	ldr	r3, [pc, #60]	@ (8006dd4 <vPortValidateInterruptPriority+0x7c>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8006dd8 <vPortValidateInterruptPriority+0x80>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d90b      	bls.n	8006dbe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006daa:	f383 8811 	msr	BASEPRI, r3
 8006dae:	f3bf 8f6f 	isb	sy
 8006db2:	f3bf 8f4f 	dsb	sy
 8006db6:	603b      	str	r3, [r7, #0]
}
 8006db8:	bf00      	nop
 8006dba:	bf00      	nop
 8006dbc:	e7fd      	b.n	8006dba <vPortValidateInterruptPriority+0x62>
	}
 8006dbe:	bf00      	nop
 8006dc0:	3714      	adds	r7, #20
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	e000e3f0 	.word	0xe000e3f0
 8006dd0:	200008ec 	.word	0x200008ec
 8006dd4:	e000ed0c 	.word	0xe000ed0c
 8006dd8:	200008f0 	.word	0x200008f0

08006ddc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b08a      	sub	sp, #40	@ 0x28
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006de4:	2300      	movs	r3, #0
 8006de6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006de8:	f7fe fc82 	bl	80056f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006dec:	4b5c      	ldr	r3, [pc, #368]	@ (8006f60 <pvPortMalloc+0x184>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d101      	bne.n	8006df8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006df4:	f000 f924 	bl	8007040 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006df8:	4b5a      	ldr	r3, [pc, #360]	@ (8006f64 <pvPortMalloc+0x188>)
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4013      	ands	r3, r2
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f040 8095 	bne.w	8006f30 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d01e      	beq.n	8006e4a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006e0c:	2208      	movs	r2, #8
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	4413      	add	r3, r2
 8006e12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f003 0307 	and.w	r3, r3, #7
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d015      	beq.n	8006e4a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f023 0307 	bic.w	r3, r3, #7
 8006e24:	3308      	adds	r3, #8
 8006e26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f003 0307 	and.w	r3, r3, #7
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00b      	beq.n	8006e4a <pvPortMalloc+0x6e>
	__asm volatile
 8006e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e36:	f383 8811 	msr	BASEPRI, r3
 8006e3a:	f3bf 8f6f 	isb	sy
 8006e3e:	f3bf 8f4f 	dsb	sy
 8006e42:	617b      	str	r3, [r7, #20]
}
 8006e44:	bf00      	nop
 8006e46:	bf00      	nop
 8006e48:	e7fd      	b.n	8006e46 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d06f      	beq.n	8006f30 <pvPortMalloc+0x154>
 8006e50:	4b45      	ldr	r3, [pc, #276]	@ (8006f68 <pvPortMalloc+0x18c>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d86a      	bhi.n	8006f30 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006e5a:	4b44      	ldr	r3, [pc, #272]	@ (8006f6c <pvPortMalloc+0x190>)
 8006e5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006e5e:	4b43      	ldr	r3, [pc, #268]	@ (8006f6c <pvPortMalloc+0x190>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e64:	e004      	b.n	8006e70 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d903      	bls.n	8006e82 <pvPortMalloc+0xa6>
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d1f1      	bne.n	8006e66 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006e82:	4b37      	ldr	r3, [pc, #220]	@ (8006f60 <pvPortMalloc+0x184>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d051      	beq.n	8006f30 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006e8c:	6a3b      	ldr	r3, [r7, #32]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2208      	movs	r2, #8
 8006e92:	4413      	add	r3, r2
 8006e94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	6a3b      	ldr	r3, [r7, #32]
 8006e9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea0:	685a      	ldr	r2, [r3, #4]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	1ad2      	subs	r2, r2, r3
 8006ea6:	2308      	movs	r3, #8
 8006ea8:	005b      	lsls	r3, r3, #1
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d920      	bls.n	8006ef0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006eae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	f003 0307 	and.w	r3, r3, #7
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00b      	beq.n	8006ed8 <pvPortMalloc+0xfc>
	__asm volatile
 8006ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec4:	f383 8811 	msr	BASEPRI, r3
 8006ec8:	f3bf 8f6f 	isb	sy
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	613b      	str	r3, [r7, #16]
}
 8006ed2:	bf00      	nop
 8006ed4:	bf00      	nop
 8006ed6:	e7fd      	b.n	8006ed4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eda:	685a      	ldr	r2, [r3, #4]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	1ad2      	subs	r2, r2, r3
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006eea:	69b8      	ldr	r0, [r7, #24]
 8006eec:	f000 f90a 	bl	8007104 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8006f68 <pvPortMalloc+0x18c>)
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	1ad3      	subs	r3, r2, r3
 8006efa:	4a1b      	ldr	r2, [pc, #108]	@ (8006f68 <pvPortMalloc+0x18c>)
 8006efc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006efe:	4b1a      	ldr	r3, [pc, #104]	@ (8006f68 <pvPortMalloc+0x18c>)
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	4b1b      	ldr	r3, [pc, #108]	@ (8006f70 <pvPortMalloc+0x194>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d203      	bcs.n	8006f12 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006f0a:	4b17      	ldr	r3, [pc, #92]	@ (8006f68 <pvPortMalloc+0x18c>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a18      	ldr	r2, [pc, #96]	@ (8006f70 <pvPortMalloc+0x194>)
 8006f10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f14:	685a      	ldr	r2, [r3, #4]
 8006f16:	4b13      	ldr	r3, [pc, #76]	@ (8006f64 <pvPortMalloc+0x188>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	431a      	orrs	r2, r3
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f22:	2200      	movs	r2, #0
 8006f24:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006f26:	4b13      	ldr	r3, [pc, #76]	@ (8006f74 <pvPortMalloc+0x198>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	4a11      	ldr	r2, [pc, #68]	@ (8006f74 <pvPortMalloc+0x198>)
 8006f2e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006f30:	f7fe fbec 	bl	800570c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	f003 0307 	and.w	r3, r3, #7
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00b      	beq.n	8006f56 <pvPortMalloc+0x17a>
	__asm volatile
 8006f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f42:	f383 8811 	msr	BASEPRI, r3
 8006f46:	f3bf 8f6f 	isb	sy
 8006f4a:	f3bf 8f4f 	dsb	sy
 8006f4e:	60fb      	str	r3, [r7, #12]
}
 8006f50:	bf00      	nop
 8006f52:	bf00      	nop
 8006f54:	e7fd      	b.n	8006f52 <pvPortMalloc+0x176>
	return pvReturn;
 8006f56:	69fb      	ldr	r3, [r7, #28]
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3728      	adds	r7, #40	@ 0x28
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	200044fc 	.word	0x200044fc
 8006f64:	20004510 	.word	0x20004510
 8006f68:	20004500 	.word	0x20004500
 8006f6c:	200044f4 	.word	0x200044f4
 8006f70:	20004504 	.word	0x20004504
 8006f74:	20004508 	.word	0x20004508

08006f78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b086      	sub	sp, #24
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d04f      	beq.n	800702a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006f8a:	2308      	movs	r3, #8
 8006f8c:	425b      	negs	r3, r3
 8006f8e:	697a      	ldr	r2, [r7, #20]
 8006f90:	4413      	add	r3, r2
 8006f92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	685a      	ldr	r2, [r3, #4]
 8006f9c:	4b25      	ldr	r3, [pc, #148]	@ (8007034 <vPortFree+0xbc>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d10b      	bne.n	8006fbe <vPortFree+0x46>
	__asm volatile
 8006fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006faa:	f383 8811 	msr	BASEPRI, r3
 8006fae:	f3bf 8f6f 	isb	sy
 8006fb2:	f3bf 8f4f 	dsb	sy
 8006fb6:	60fb      	str	r3, [r7, #12]
}
 8006fb8:	bf00      	nop
 8006fba:	bf00      	nop
 8006fbc:	e7fd      	b.n	8006fba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00b      	beq.n	8006fde <vPortFree+0x66>
	__asm volatile
 8006fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fca:	f383 8811 	msr	BASEPRI, r3
 8006fce:	f3bf 8f6f 	isb	sy
 8006fd2:	f3bf 8f4f 	dsb	sy
 8006fd6:	60bb      	str	r3, [r7, #8]
}
 8006fd8:	bf00      	nop
 8006fda:	bf00      	nop
 8006fdc:	e7fd      	b.n	8006fda <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	685a      	ldr	r2, [r3, #4]
 8006fe2:	4b14      	ldr	r3, [pc, #80]	@ (8007034 <vPortFree+0xbc>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4013      	ands	r3, r2
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d01e      	beq.n	800702a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d11a      	bne.n	800702a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	685a      	ldr	r2, [r3, #4]
 8006ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8007034 <vPortFree+0xbc>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	43db      	mvns	r3, r3
 8006ffe:	401a      	ands	r2, r3
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007004:	f7fe fb74 	bl	80056f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	685a      	ldr	r2, [r3, #4]
 800700c:	4b0a      	ldr	r3, [pc, #40]	@ (8007038 <vPortFree+0xc0>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4413      	add	r3, r2
 8007012:	4a09      	ldr	r2, [pc, #36]	@ (8007038 <vPortFree+0xc0>)
 8007014:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007016:	6938      	ldr	r0, [r7, #16]
 8007018:	f000 f874 	bl	8007104 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800701c:	4b07      	ldr	r3, [pc, #28]	@ (800703c <vPortFree+0xc4>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	3301      	adds	r3, #1
 8007022:	4a06      	ldr	r2, [pc, #24]	@ (800703c <vPortFree+0xc4>)
 8007024:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007026:	f7fe fb71 	bl	800570c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800702a:	bf00      	nop
 800702c:	3718      	adds	r7, #24
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	20004510 	.word	0x20004510
 8007038:	20004500 	.word	0x20004500
 800703c:	2000450c 	.word	0x2000450c

08007040 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007040:	b480      	push	{r7}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007046:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800704a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800704c:	4b27      	ldr	r3, [pc, #156]	@ (80070ec <prvHeapInit+0xac>)
 800704e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f003 0307 	and.w	r3, r3, #7
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00c      	beq.n	8007074 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	3307      	adds	r3, #7
 800705e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f023 0307 	bic.w	r3, r3, #7
 8007066:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007068:	68ba      	ldr	r2, [r7, #8]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	4a1f      	ldr	r2, [pc, #124]	@ (80070ec <prvHeapInit+0xac>)
 8007070:	4413      	add	r3, r2
 8007072:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007078:	4a1d      	ldr	r2, [pc, #116]	@ (80070f0 <prvHeapInit+0xb0>)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800707e:	4b1c      	ldr	r3, [pc, #112]	@ (80070f0 <prvHeapInit+0xb0>)
 8007080:	2200      	movs	r2, #0
 8007082:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	68ba      	ldr	r2, [r7, #8]
 8007088:	4413      	add	r3, r2
 800708a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800708c:	2208      	movs	r2, #8
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	1a9b      	subs	r3, r3, r2
 8007092:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f023 0307 	bic.w	r3, r3, #7
 800709a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	4a15      	ldr	r2, [pc, #84]	@ (80070f4 <prvHeapInit+0xb4>)
 80070a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80070a2:	4b14      	ldr	r3, [pc, #80]	@ (80070f4 <prvHeapInit+0xb4>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2200      	movs	r2, #0
 80070a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80070aa:	4b12      	ldr	r3, [pc, #72]	@ (80070f4 <prvHeapInit+0xb4>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2200      	movs	r2, #0
 80070b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	1ad2      	subs	r2, r2, r3
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80070c0:	4b0c      	ldr	r3, [pc, #48]	@ (80070f4 <prvHeapInit+0xb4>)
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	4a0a      	ldr	r2, [pc, #40]	@ (80070f8 <prvHeapInit+0xb8>)
 80070ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	4a09      	ldr	r2, [pc, #36]	@ (80070fc <prvHeapInit+0xbc>)
 80070d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80070d8:	4b09      	ldr	r3, [pc, #36]	@ (8007100 <prvHeapInit+0xc0>)
 80070da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80070de:	601a      	str	r2, [r3, #0]
}
 80070e0:	bf00      	nop
 80070e2:	3714      	adds	r7, #20
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr
 80070ec:	200008f4 	.word	0x200008f4
 80070f0:	200044f4 	.word	0x200044f4
 80070f4:	200044fc 	.word	0x200044fc
 80070f8:	20004504 	.word	0x20004504
 80070fc:	20004500 	.word	0x20004500
 8007100:	20004510 	.word	0x20004510

08007104 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007104:	b480      	push	{r7}
 8007106:	b085      	sub	sp, #20
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800710c:	4b28      	ldr	r3, [pc, #160]	@ (80071b0 <prvInsertBlockIntoFreeList+0xac>)
 800710e:	60fb      	str	r3, [r7, #12]
 8007110:	e002      	b.n	8007118 <prvInsertBlockIntoFreeList+0x14>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	60fb      	str	r3, [r7, #12]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	429a      	cmp	r2, r3
 8007120:	d8f7      	bhi.n	8007112 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	68ba      	ldr	r2, [r7, #8]
 800712c:	4413      	add	r3, r2
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	429a      	cmp	r2, r3
 8007132:	d108      	bne.n	8007146 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	685a      	ldr	r2, [r3, #4]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	441a      	add	r2, r3
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	68ba      	ldr	r2, [r7, #8]
 8007150:	441a      	add	r2, r3
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	429a      	cmp	r2, r3
 8007158:	d118      	bne.n	800718c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	4b15      	ldr	r3, [pc, #84]	@ (80071b4 <prvInsertBlockIntoFreeList+0xb0>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	429a      	cmp	r2, r3
 8007164:	d00d      	beq.n	8007182 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685a      	ldr	r2, [r3, #4]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	441a      	add	r2, r3
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	601a      	str	r2, [r3, #0]
 8007180:	e008      	b.n	8007194 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007182:	4b0c      	ldr	r3, [pc, #48]	@ (80071b4 <prvInsertBlockIntoFreeList+0xb0>)
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	601a      	str	r2, [r3, #0]
 800718a:	e003      	b.n	8007194 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	429a      	cmp	r2, r3
 800719a:	d002      	beq.n	80071a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071a2:	bf00      	nop
 80071a4:	3714      	adds	r7, #20
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	200044f4 	.word	0x200044f4
 80071b4:	200044fc 	.word	0x200044fc

080071b8 <rand>:
 80071b8:	4b16      	ldr	r3, [pc, #88]	@ (8007214 <rand+0x5c>)
 80071ba:	b510      	push	{r4, lr}
 80071bc:	681c      	ldr	r4, [r3, #0]
 80071be:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80071c0:	b9b3      	cbnz	r3, 80071f0 <rand+0x38>
 80071c2:	2018      	movs	r0, #24
 80071c4:	f000 fa56 	bl	8007674 <malloc>
 80071c8:	4602      	mov	r2, r0
 80071ca:	6320      	str	r0, [r4, #48]	@ 0x30
 80071cc:	b920      	cbnz	r0, 80071d8 <rand+0x20>
 80071ce:	4b12      	ldr	r3, [pc, #72]	@ (8007218 <rand+0x60>)
 80071d0:	4812      	ldr	r0, [pc, #72]	@ (800721c <rand+0x64>)
 80071d2:	2152      	movs	r1, #82	@ 0x52
 80071d4:	f000 f9e6 	bl	80075a4 <__assert_func>
 80071d8:	4911      	ldr	r1, [pc, #68]	@ (8007220 <rand+0x68>)
 80071da:	4b12      	ldr	r3, [pc, #72]	@ (8007224 <rand+0x6c>)
 80071dc:	e9c0 1300 	strd	r1, r3, [r0]
 80071e0:	4b11      	ldr	r3, [pc, #68]	@ (8007228 <rand+0x70>)
 80071e2:	6083      	str	r3, [r0, #8]
 80071e4:	230b      	movs	r3, #11
 80071e6:	8183      	strh	r3, [r0, #12]
 80071e8:	2100      	movs	r1, #0
 80071ea:	2001      	movs	r0, #1
 80071ec:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80071f0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80071f2:	480e      	ldr	r0, [pc, #56]	@ (800722c <rand+0x74>)
 80071f4:	690b      	ldr	r3, [r1, #16]
 80071f6:	694c      	ldr	r4, [r1, #20]
 80071f8:	4a0d      	ldr	r2, [pc, #52]	@ (8007230 <rand+0x78>)
 80071fa:	4358      	muls	r0, r3
 80071fc:	fb02 0004 	mla	r0, r2, r4, r0
 8007200:	fba3 3202 	umull	r3, r2, r3, r2
 8007204:	3301      	adds	r3, #1
 8007206:	eb40 0002 	adc.w	r0, r0, r2
 800720a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800720e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8007212:	bd10      	pop	{r4, pc}
 8007214:	2000001c 	.word	0x2000001c
 8007218:	08008788 	.word	0x08008788
 800721c:	0800879f 	.word	0x0800879f
 8007220:	abcd330e 	.word	0xabcd330e
 8007224:	e66d1234 	.word	0xe66d1234
 8007228:	0005deec 	.word	0x0005deec
 800722c:	5851f42d 	.word	0x5851f42d
 8007230:	4c957f2d 	.word	0x4c957f2d

08007234 <std>:
 8007234:	2300      	movs	r3, #0
 8007236:	b510      	push	{r4, lr}
 8007238:	4604      	mov	r4, r0
 800723a:	e9c0 3300 	strd	r3, r3, [r0]
 800723e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007242:	6083      	str	r3, [r0, #8]
 8007244:	8181      	strh	r1, [r0, #12]
 8007246:	6643      	str	r3, [r0, #100]	@ 0x64
 8007248:	81c2      	strh	r2, [r0, #14]
 800724a:	6183      	str	r3, [r0, #24]
 800724c:	4619      	mov	r1, r3
 800724e:	2208      	movs	r2, #8
 8007250:	305c      	adds	r0, #92	@ 0x5c
 8007252:	f000 f914 	bl	800747e <memset>
 8007256:	4b0d      	ldr	r3, [pc, #52]	@ (800728c <std+0x58>)
 8007258:	6263      	str	r3, [r4, #36]	@ 0x24
 800725a:	4b0d      	ldr	r3, [pc, #52]	@ (8007290 <std+0x5c>)
 800725c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800725e:	4b0d      	ldr	r3, [pc, #52]	@ (8007294 <std+0x60>)
 8007260:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007262:	4b0d      	ldr	r3, [pc, #52]	@ (8007298 <std+0x64>)
 8007264:	6323      	str	r3, [r4, #48]	@ 0x30
 8007266:	4b0d      	ldr	r3, [pc, #52]	@ (800729c <std+0x68>)
 8007268:	6224      	str	r4, [r4, #32]
 800726a:	429c      	cmp	r4, r3
 800726c:	d006      	beq.n	800727c <std+0x48>
 800726e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007272:	4294      	cmp	r4, r2
 8007274:	d002      	beq.n	800727c <std+0x48>
 8007276:	33d0      	adds	r3, #208	@ 0xd0
 8007278:	429c      	cmp	r4, r3
 800727a:	d105      	bne.n	8007288 <std+0x54>
 800727c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007284:	f000 b974 	b.w	8007570 <__retarget_lock_init_recursive>
 8007288:	bd10      	pop	{r4, pc}
 800728a:	bf00      	nop
 800728c:	080073f9 	.word	0x080073f9
 8007290:	0800741b 	.word	0x0800741b
 8007294:	08007453 	.word	0x08007453
 8007298:	08007477 	.word	0x08007477
 800729c:	20004514 	.word	0x20004514

080072a0 <stdio_exit_handler>:
 80072a0:	4a02      	ldr	r2, [pc, #8]	@ (80072ac <stdio_exit_handler+0xc>)
 80072a2:	4903      	ldr	r1, [pc, #12]	@ (80072b0 <stdio_exit_handler+0x10>)
 80072a4:	4803      	ldr	r0, [pc, #12]	@ (80072b4 <stdio_exit_handler+0x14>)
 80072a6:	f000 b869 	b.w	800737c <_fwalk_sglue>
 80072aa:	bf00      	nop
 80072ac:	20000010 	.word	0x20000010
 80072b0:	08007eb5 	.word	0x08007eb5
 80072b4:	20000020 	.word	0x20000020

080072b8 <cleanup_stdio>:
 80072b8:	6841      	ldr	r1, [r0, #4]
 80072ba:	4b0c      	ldr	r3, [pc, #48]	@ (80072ec <cleanup_stdio+0x34>)
 80072bc:	4299      	cmp	r1, r3
 80072be:	b510      	push	{r4, lr}
 80072c0:	4604      	mov	r4, r0
 80072c2:	d001      	beq.n	80072c8 <cleanup_stdio+0x10>
 80072c4:	f000 fdf6 	bl	8007eb4 <_fflush_r>
 80072c8:	68a1      	ldr	r1, [r4, #8]
 80072ca:	4b09      	ldr	r3, [pc, #36]	@ (80072f0 <cleanup_stdio+0x38>)
 80072cc:	4299      	cmp	r1, r3
 80072ce:	d002      	beq.n	80072d6 <cleanup_stdio+0x1e>
 80072d0:	4620      	mov	r0, r4
 80072d2:	f000 fdef 	bl	8007eb4 <_fflush_r>
 80072d6:	68e1      	ldr	r1, [r4, #12]
 80072d8:	4b06      	ldr	r3, [pc, #24]	@ (80072f4 <cleanup_stdio+0x3c>)
 80072da:	4299      	cmp	r1, r3
 80072dc:	d004      	beq.n	80072e8 <cleanup_stdio+0x30>
 80072de:	4620      	mov	r0, r4
 80072e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072e4:	f000 bde6 	b.w	8007eb4 <_fflush_r>
 80072e8:	bd10      	pop	{r4, pc}
 80072ea:	bf00      	nop
 80072ec:	20004514 	.word	0x20004514
 80072f0:	2000457c 	.word	0x2000457c
 80072f4:	200045e4 	.word	0x200045e4

080072f8 <global_stdio_init.part.0>:
 80072f8:	b510      	push	{r4, lr}
 80072fa:	4b0b      	ldr	r3, [pc, #44]	@ (8007328 <global_stdio_init.part.0+0x30>)
 80072fc:	4c0b      	ldr	r4, [pc, #44]	@ (800732c <global_stdio_init.part.0+0x34>)
 80072fe:	4a0c      	ldr	r2, [pc, #48]	@ (8007330 <global_stdio_init.part.0+0x38>)
 8007300:	601a      	str	r2, [r3, #0]
 8007302:	4620      	mov	r0, r4
 8007304:	2200      	movs	r2, #0
 8007306:	2104      	movs	r1, #4
 8007308:	f7ff ff94 	bl	8007234 <std>
 800730c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007310:	2201      	movs	r2, #1
 8007312:	2109      	movs	r1, #9
 8007314:	f7ff ff8e 	bl	8007234 <std>
 8007318:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800731c:	2202      	movs	r2, #2
 800731e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007322:	2112      	movs	r1, #18
 8007324:	f7ff bf86 	b.w	8007234 <std>
 8007328:	2000464c 	.word	0x2000464c
 800732c:	20004514 	.word	0x20004514
 8007330:	080072a1 	.word	0x080072a1

08007334 <__sfp_lock_acquire>:
 8007334:	4801      	ldr	r0, [pc, #4]	@ (800733c <__sfp_lock_acquire+0x8>)
 8007336:	f000 b91c 	b.w	8007572 <__retarget_lock_acquire_recursive>
 800733a:	bf00      	nop
 800733c:	20004655 	.word	0x20004655

08007340 <__sfp_lock_release>:
 8007340:	4801      	ldr	r0, [pc, #4]	@ (8007348 <__sfp_lock_release+0x8>)
 8007342:	f000 b917 	b.w	8007574 <__retarget_lock_release_recursive>
 8007346:	bf00      	nop
 8007348:	20004655 	.word	0x20004655

0800734c <__sinit>:
 800734c:	b510      	push	{r4, lr}
 800734e:	4604      	mov	r4, r0
 8007350:	f7ff fff0 	bl	8007334 <__sfp_lock_acquire>
 8007354:	6a23      	ldr	r3, [r4, #32]
 8007356:	b11b      	cbz	r3, 8007360 <__sinit+0x14>
 8007358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800735c:	f7ff bff0 	b.w	8007340 <__sfp_lock_release>
 8007360:	4b04      	ldr	r3, [pc, #16]	@ (8007374 <__sinit+0x28>)
 8007362:	6223      	str	r3, [r4, #32]
 8007364:	4b04      	ldr	r3, [pc, #16]	@ (8007378 <__sinit+0x2c>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d1f5      	bne.n	8007358 <__sinit+0xc>
 800736c:	f7ff ffc4 	bl	80072f8 <global_stdio_init.part.0>
 8007370:	e7f2      	b.n	8007358 <__sinit+0xc>
 8007372:	bf00      	nop
 8007374:	080072b9 	.word	0x080072b9
 8007378:	2000464c 	.word	0x2000464c

0800737c <_fwalk_sglue>:
 800737c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007380:	4607      	mov	r7, r0
 8007382:	4688      	mov	r8, r1
 8007384:	4614      	mov	r4, r2
 8007386:	2600      	movs	r6, #0
 8007388:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800738c:	f1b9 0901 	subs.w	r9, r9, #1
 8007390:	d505      	bpl.n	800739e <_fwalk_sglue+0x22>
 8007392:	6824      	ldr	r4, [r4, #0]
 8007394:	2c00      	cmp	r4, #0
 8007396:	d1f7      	bne.n	8007388 <_fwalk_sglue+0xc>
 8007398:	4630      	mov	r0, r6
 800739a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800739e:	89ab      	ldrh	r3, [r5, #12]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d907      	bls.n	80073b4 <_fwalk_sglue+0x38>
 80073a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073a8:	3301      	adds	r3, #1
 80073aa:	d003      	beq.n	80073b4 <_fwalk_sglue+0x38>
 80073ac:	4629      	mov	r1, r5
 80073ae:	4638      	mov	r0, r7
 80073b0:	47c0      	blx	r8
 80073b2:	4306      	orrs	r6, r0
 80073b4:	3568      	adds	r5, #104	@ 0x68
 80073b6:	e7e9      	b.n	800738c <_fwalk_sglue+0x10>

080073b8 <siprintf>:
 80073b8:	b40e      	push	{r1, r2, r3}
 80073ba:	b500      	push	{lr}
 80073bc:	b09c      	sub	sp, #112	@ 0x70
 80073be:	ab1d      	add	r3, sp, #116	@ 0x74
 80073c0:	9002      	str	r0, [sp, #8]
 80073c2:	9006      	str	r0, [sp, #24]
 80073c4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80073c8:	4809      	ldr	r0, [pc, #36]	@ (80073f0 <siprintf+0x38>)
 80073ca:	9107      	str	r1, [sp, #28]
 80073cc:	9104      	str	r1, [sp, #16]
 80073ce:	4909      	ldr	r1, [pc, #36]	@ (80073f4 <siprintf+0x3c>)
 80073d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80073d4:	9105      	str	r1, [sp, #20]
 80073d6:	6800      	ldr	r0, [r0, #0]
 80073d8:	9301      	str	r3, [sp, #4]
 80073da:	a902      	add	r1, sp, #8
 80073dc:	f000 fa5c 	bl	8007898 <_svfiprintf_r>
 80073e0:	9b02      	ldr	r3, [sp, #8]
 80073e2:	2200      	movs	r2, #0
 80073e4:	701a      	strb	r2, [r3, #0]
 80073e6:	b01c      	add	sp, #112	@ 0x70
 80073e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80073ec:	b003      	add	sp, #12
 80073ee:	4770      	bx	lr
 80073f0:	2000001c 	.word	0x2000001c
 80073f4:	ffff0208 	.word	0xffff0208

080073f8 <__sread>:
 80073f8:	b510      	push	{r4, lr}
 80073fa:	460c      	mov	r4, r1
 80073fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007400:	f000 f868 	bl	80074d4 <_read_r>
 8007404:	2800      	cmp	r0, #0
 8007406:	bfab      	itete	ge
 8007408:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800740a:	89a3      	ldrhlt	r3, [r4, #12]
 800740c:	181b      	addge	r3, r3, r0
 800740e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007412:	bfac      	ite	ge
 8007414:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007416:	81a3      	strhlt	r3, [r4, #12]
 8007418:	bd10      	pop	{r4, pc}

0800741a <__swrite>:
 800741a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800741e:	461f      	mov	r7, r3
 8007420:	898b      	ldrh	r3, [r1, #12]
 8007422:	05db      	lsls	r3, r3, #23
 8007424:	4605      	mov	r5, r0
 8007426:	460c      	mov	r4, r1
 8007428:	4616      	mov	r6, r2
 800742a:	d505      	bpl.n	8007438 <__swrite+0x1e>
 800742c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007430:	2302      	movs	r3, #2
 8007432:	2200      	movs	r2, #0
 8007434:	f000 f83c 	bl	80074b0 <_lseek_r>
 8007438:	89a3      	ldrh	r3, [r4, #12]
 800743a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800743e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007442:	81a3      	strh	r3, [r4, #12]
 8007444:	4632      	mov	r2, r6
 8007446:	463b      	mov	r3, r7
 8007448:	4628      	mov	r0, r5
 800744a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800744e:	f000 b853 	b.w	80074f8 <_write_r>

08007452 <__sseek>:
 8007452:	b510      	push	{r4, lr}
 8007454:	460c      	mov	r4, r1
 8007456:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800745a:	f000 f829 	bl	80074b0 <_lseek_r>
 800745e:	1c43      	adds	r3, r0, #1
 8007460:	89a3      	ldrh	r3, [r4, #12]
 8007462:	bf15      	itete	ne
 8007464:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007466:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800746a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800746e:	81a3      	strheq	r3, [r4, #12]
 8007470:	bf18      	it	ne
 8007472:	81a3      	strhne	r3, [r4, #12]
 8007474:	bd10      	pop	{r4, pc}

08007476 <__sclose>:
 8007476:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800747a:	f000 b809 	b.w	8007490 <_close_r>

0800747e <memset>:
 800747e:	4402      	add	r2, r0
 8007480:	4603      	mov	r3, r0
 8007482:	4293      	cmp	r3, r2
 8007484:	d100      	bne.n	8007488 <memset+0xa>
 8007486:	4770      	bx	lr
 8007488:	f803 1b01 	strb.w	r1, [r3], #1
 800748c:	e7f9      	b.n	8007482 <memset+0x4>
	...

08007490 <_close_r>:
 8007490:	b538      	push	{r3, r4, r5, lr}
 8007492:	4d06      	ldr	r5, [pc, #24]	@ (80074ac <_close_r+0x1c>)
 8007494:	2300      	movs	r3, #0
 8007496:	4604      	mov	r4, r0
 8007498:	4608      	mov	r0, r1
 800749a:	602b      	str	r3, [r5, #0]
 800749c:	f7f9 ffa8 	bl	80013f0 <_close>
 80074a0:	1c43      	adds	r3, r0, #1
 80074a2:	d102      	bne.n	80074aa <_close_r+0x1a>
 80074a4:	682b      	ldr	r3, [r5, #0]
 80074a6:	b103      	cbz	r3, 80074aa <_close_r+0x1a>
 80074a8:	6023      	str	r3, [r4, #0]
 80074aa:	bd38      	pop	{r3, r4, r5, pc}
 80074ac:	20004650 	.word	0x20004650

080074b0 <_lseek_r>:
 80074b0:	b538      	push	{r3, r4, r5, lr}
 80074b2:	4d07      	ldr	r5, [pc, #28]	@ (80074d0 <_lseek_r+0x20>)
 80074b4:	4604      	mov	r4, r0
 80074b6:	4608      	mov	r0, r1
 80074b8:	4611      	mov	r1, r2
 80074ba:	2200      	movs	r2, #0
 80074bc:	602a      	str	r2, [r5, #0]
 80074be:	461a      	mov	r2, r3
 80074c0:	f7f9 ffbd 	bl	800143e <_lseek>
 80074c4:	1c43      	adds	r3, r0, #1
 80074c6:	d102      	bne.n	80074ce <_lseek_r+0x1e>
 80074c8:	682b      	ldr	r3, [r5, #0]
 80074ca:	b103      	cbz	r3, 80074ce <_lseek_r+0x1e>
 80074cc:	6023      	str	r3, [r4, #0]
 80074ce:	bd38      	pop	{r3, r4, r5, pc}
 80074d0:	20004650 	.word	0x20004650

080074d4 <_read_r>:
 80074d4:	b538      	push	{r3, r4, r5, lr}
 80074d6:	4d07      	ldr	r5, [pc, #28]	@ (80074f4 <_read_r+0x20>)
 80074d8:	4604      	mov	r4, r0
 80074da:	4608      	mov	r0, r1
 80074dc:	4611      	mov	r1, r2
 80074de:	2200      	movs	r2, #0
 80074e0:	602a      	str	r2, [r5, #0]
 80074e2:	461a      	mov	r2, r3
 80074e4:	f7f9 ff4b 	bl	800137e <_read>
 80074e8:	1c43      	adds	r3, r0, #1
 80074ea:	d102      	bne.n	80074f2 <_read_r+0x1e>
 80074ec:	682b      	ldr	r3, [r5, #0]
 80074ee:	b103      	cbz	r3, 80074f2 <_read_r+0x1e>
 80074f0:	6023      	str	r3, [r4, #0]
 80074f2:	bd38      	pop	{r3, r4, r5, pc}
 80074f4:	20004650 	.word	0x20004650

080074f8 <_write_r>:
 80074f8:	b538      	push	{r3, r4, r5, lr}
 80074fa:	4d07      	ldr	r5, [pc, #28]	@ (8007518 <_write_r+0x20>)
 80074fc:	4604      	mov	r4, r0
 80074fe:	4608      	mov	r0, r1
 8007500:	4611      	mov	r1, r2
 8007502:	2200      	movs	r2, #0
 8007504:	602a      	str	r2, [r5, #0]
 8007506:	461a      	mov	r2, r3
 8007508:	f7f9 ff56 	bl	80013b8 <_write>
 800750c:	1c43      	adds	r3, r0, #1
 800750e:	d102      	bne.n	8007516 <_write_r+0x1e>
 8007510:	682b      	ldr	r3, [r5, #0]
 8007512:	b103      	cbz	r3, 8007516 <_write_r+0x1e>
 8007514:	6023      	str	r3, [r4, #0]
 8007516:	bd38      	pop	{r3, r4, r5, pc}
 8007518:	20004650 	.word	0x20004650

0800751c <__errno>:
 800751c:	4b01      	ldr	r3, [pc, #4]	@ (8007524 <__errno+0x8>)
 800751e:	6818      	ldr	r0, [r3, #0]
 8007520:	4770      	bx	lr
 8007522:	bf00      	nop
 8007524:	2000001c 	.word	0x2000001c

08007528 <__libc_init_array>:
 8007528:	b570      	push	{r4, r5, r6, lr}
 800752a:	4d0d      	ldr	r5, [pc, #52]	@ (8007560 <__libc_init_array+0x38>)
 800752c:	4c0d      	ldr	r4, [pc, #52]	@ (8007564 <__libc_init_array+0x3c>)
 800752e:	1b64      	subs	r4, r4, r5
 8007530:	10a4      	asrs	r4, r4, #2
 8007532:	2600      	movs	r6, #0
 8007534:	42a6      	cmp	r6, r4
 8007536:	d109      	bne.n	800754c <__libc_init_array+0x24>
 8007538:	4d0b      	ldr	r5, [pc, #44]	@ (8007568 <__libc_init_array+0x40>)
 800753a:	4c0c      	ldr	r4, [pc, #48]	@ (800756c <__libc_init_array+0x44>)
 800753c:	f000 fff8 	bl	8008530 <_init>
 8007540:	1b64      	subs	r4, r4, r5
 8007542:	10a4      	asrs	r4, r4, #2
 8007544:	2600      	movs	r6, #0
 8007546:	42a6      	cmp	r6, r4
 8007548:	d105      	bne.n	8007556 <__libc_init_array+0x2e>
 800754a:	bd70      	pop	{r4, r5, r6, pc}
 800754c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007550:	4798      	blx	r3
 8007552:	3601      	adds	r6, #1
 8007554:	e7ee      	b.n	8007534 <__libc_init_array+0xc>
 8007556:	f855 3b04 	ldr.w	r3, [r5], #4
 800755a:	4798      	blx	r3
 800755c:	3601      	adds	r6, #1
 800755e:	e7f2      	b.n	8007546 <__libc_init_array+0x1e>
 8007560:	08008870 	.word	0x08008870
 8007564:	08008870 	.word	0x08008870
 8007568:	08008870 	.word	0x08008870
 800756c:	08008874 	.word	0x08008874

08007570 <__retarget_lock_init_recursive>:
 8007570:	4770      	bx	lr

08007572 <__retarget_lock_acquire_recursive>:
 8007572:	4770      	bx	lr

08007574 <__retarget_lock_release_recursive>:
 8007574:	4770      	bx	lr

08007576 <strcpy>:
 8007576:	4603      	mov	r3, r0
 8007578:	f811 2b01 	ldrb.w	r2, [r1], #1
 800757c:	f803 2b01 	strb.w	r2, [r3], #1
 8007580:	2a00      	cmp	r2, #0
 8007582:	d1f9      	bne.n	8007578 <strcpy+0x2>
 8007584:	4770      	bx	lr

08007586 <memcpy>:
 8007586:	440a      	add	r2, r1
 8007588:	4291      	cmp	r1, r2
 800758a:	f100 33ff 	add.w	r3, r0, #4294967295
 800758e:	d100      	bne.n	8007592 <memcpy+0xc>
 8007590:	4770      	bx	lr
 8007592:	b510      	push	{r4, lr}
 8007594:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007598:	f803 4f01 	strb.w	r4, [r3, #1]!
 800759c:	4291      	cmp	r1, r2
 800759e:	d1f9      	bne.n	8007594 <memcpy+0xe>
 80075a0:	bd10      	pop	{r4, pc}
	...

080075a4 <__assert_func>:
 80075a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80075a6:	4614      	mov	r4, r2
 80075a8:	461a      	mov	r2, r3
 80075aa:	4b09      	ldr	r3, [pc, #36]	@ (80075d0 <__assert_func+0x2c>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4605      	mov	r5, r0
 80075b0:	68d8      	ldr	r0, [r3, #12]
 80075b2:	b954      	cbnz	r4, 80075ca <__assert_func+0x26>
 80075b4:	4b07      	ldr	r3, [pc, #28]	@ (80075d4 <__assert_func+0x30>)
 80075b6:	461c      	mov	r4, r3
 80075b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80075bc:	9100      	str	r1, [sp, #0]
 80075be:	462b      	mov	r3, r5
 80075c0:	4905      	ldr	r1, [pc, #20]	@ (80075d8 <__assert_func+0x34>)
 80075c2:	f000 fc9f 	bl	8007f04 <fiprintf>
 80075c6:	f000 fcd9 	bl	8007f7c <abort>
 80075ca:	4b04      	ldr	r3, [pc, #16]	@ (80075dc <__assert_func+0x38>)
 80075cc:	e7f4      	b.n	80075b8 <__assert_func+0x14>
 80075ce:	bf00      	nop
 80075d0:	2000001c 	.word	0x2000001c
 80075d4:	08008832 	.word	0x08008832
 80075d8:	08008804 	.word	0x08008804
 80075dc:	080087f7 	.word	0x080087f7

080075e0 <_free_r>:
 80075e0:	b538      	push	{r3, r4, r5, lr}
 80075e2:	4605      	mov	r5, r0
 80075e4:	2900      	cmp	r1, #0
 80075e6:	d041      	beq.n	800766c <_free_r+0x8c>
 80075e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075ec:	1f0c      	subs	r4, r1, #4
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	bfb8      	it	lt
 80075f2:	18e4      	addlt	r4, r4, r3
 80075f4:	f000 f8e8 	bl	80077c8 <__malloc_lock>
 80075f8:	4a1d      	ldr	r2, [pc, #116]	@ (8007670 <_free_r+0x90>)
 80075fa:	6813      	ldr	r3, [r2, #0]
 80075fc:	b933      	cbnz	r3, 800760c <_free_r+0x2c>
 80075fe:	6063      	str	r3, [r4, #4]
 8007600:	6014      	str	r4, [r2, #0]
 8007602:	4628      	mov	r0, r5
 8007604:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007608:	f000 b8e4 	b.w	80077d4 <__malloc_unlock>
 800760c:	42a3      	cmp	r3, r4
 800760e:	d908      	bls.n	8007622 <_free_r+0x42>
 8007610:	6820      	ldr	r0, [r4, #0]
 8007612:	1821      	adds	r1, r4, r0
 8007614:	428b      	cmp	r3, r1
 8007616:	bf01      	itttt	eq
 8007618:	6819      	ldreq	r1, [r3, #0]
 800761a:	685b      	ldreq	r3, [r3, #4]
 800761c:	1809      	addeq	r1, r1, r0
 800761e:	6021      	streq	r1, [r4, #0]
 8007620:	e7ed      	b.n	80075fe <_free_r+0x1e>
 8007622:	461a      	mov	r2, r3
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	b10b      	cbz	r3, 800762c <_free_r+0x4c>
 8007628:	42a3      	cmp	r3, r4
 800762a:	d9fa      	bls.n	8007622 <_free_r+0x42>
 800762c:	6811      	ldr	r1, [r2, #0]
 800762e:	1850      	adds	r0, r2, r1
 8007630:	42a0      	cmp	r0, r4
 8007632:	d10b      	bne.n	800764c <_free_r+0x6c>
 8007634:	6820      	ldr	r0, [r4, #0]
 8007636:	4401      	add	r1, r0
 8007638:	1850      	adds	r0, r2, r1
 800763a:	4283      	cmp	r3, r0
 800763c:	6011      	str	r1, [r2, #0]
 800763e:	d1e0      	bne.n	8007602 <_free_r+0x22>
 8007640:	6818      	ldr	r0, [r3, #0]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	6053      	str	r3, [r2, #4]
 8007646:	4408      	add	r0, r1
 8007648:	6010      	str	r0, [r2, #0]
 800764a:	e7da      	b.n	8007602 <_free_r+0x22>
 800764c:	d902      	bls.n	8007654 <_free_r+0x74>
 800764e:	230c      	movs	r3, #12
 8007650:	602b      	str	r3, [r5, #0]
 8007652:	e7d6      	b.n	8007602 <_free_r+0x22>
 8007654:	6820      	ldr	r0, [r4, #0]
 8007656:	1821      	adds	r1, r4, r0
 8007658:	428b      	cmp	r3, r1
 800765a:	bf04      	itt	eq
 800765c:	6819      	ldreq	r1, [r3, #0]
 800765e:	685b      	ldreq	r3, [r3, #4]
 8007660:	6063      	str	r3, [r4, #4]
 8007662:	bf04      	itt	eq
 8007664:	1809      	addeq	r1, r1, r0
 8007666:	6021      	streq	r1, [r4, #0]
 8007668:	6054      	str	r4, [r2, #4]
 800766a:	e7ca      	b.n	8007602 <_free_r+0x22>
 800766c:	bd38      	pop	{r3, r4, r5, pc}
 800766e:	bf00      	nop
 8007670:	2000465c 	.word	0x2000465c

08007674 <malloc>:
 8007674:	4b02      	ldr	r3, [pc, #8]	@ (8007680 <malloc+0xc>)
 8007676:	4601      	mov	r1, r0
 8007678:	6818      	ldr	r0, [r3, #0]
 800767a:	f000 b825 	b.w	80076c8 <_malloc_r>
 800767e:	bf00      	nop
 8007680:	2000001c 	.word	0x2000001c

08007684 <sbrk_aligned>:
 8007684:	b570      	push	{r4, r5, r6, lr}
 8007686:	4e0f      	ldr	r6, [pc, #60]	@ (80076c4 <sbrk_aligned+0x40>)
 8007688:	460c      	mov	r4, r1
 800768a:	6831      	ldr	r1, [r6, #0]
 800768c:	4605      	mov	r5, r0
 800768e:	b911      	cbnz	r1, 8007696 <sbrk_aligned+0x12>
 8007690:	f000 fc64 	bl	8007f5c <_sbrk_r>
 8007694:	6030      	str	r0, [r6, #0]
 8007696:	4621      	mov	r1, r4
 8007698:	4628      	mov	r0, r5
 800769a:	f000 fc5f 	bl	8007f5c <_sbrk_r>
 800769e:	1c43      	adds	r3, r0, #1
 80076a0:	d103      	bne.n	80076aa <sbrk_aligned+0x26>
 80076a2:	f04f 34ff 	mov.w	r4, #4294967295
 80076a6:	4620      	mov	r0, r4
 80076a8:	bd70      	pop	{r4, r5, r6, pc}
 80076aa:	1cc4      	adds	r4, r0, #3
 80076ac:	f024 0403 	bic.w	r4, r4, #3
 80076b0:	42a0      	cmp	r0, r4
 80076b2:	d0f8      	beq.n	80076a6 <sbrk_aligned+0x22>
 80076b4:	1a21      	subs	r1, r4, r0
 80076b6:	4628      	mov	r0, r5
 80076b8:	f000 fc50 	bl	8007f5c <_sbrk_r>
 80076bc:	3001      	adds	r0, #1
 80076be:	d1f2      	bne.n	80076a6 <sbrk_aligned+0x22>
 80076c0:	e7ef      	b.n	80076a2 <sbrk_aligned+0x1e>
 80076c2:	bf00      	nop
 80076c4:	20004658 	.word	0x20004658

080076c8 <_malloc_r>:
 80076c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076cc:	1ccd      	adds	r5, r1, #3
 80076ce:	f025 0503 	bic.w	r5, r5, #3
 80076d2:	3508      	adds	r5, #8
 80076d4:	2d0c      	cmp	r5, #12
 80076d6:	bf38      	it	cc
 80076d8:	250c      	movcc	r5, #12
 80076da:	2d00      	cmp	r5, #0
 80076dc:	4606      	mov	r6, r0
 80076de:	db01      	blt.n	80076e4 <_malloc_r+0x1c>
 80076e0:	42a9      	cmp	r1, r5
 80076e2:	d904      	bls.n	80076ee <_malloc_r+0x26>
 80076e4:	230c      	movs	r3, #12
 80076e6:	6033      	str	r3, [r6, #0]
 80076e8:	2000      	movs	r0, #0
 80076ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80077c4 <_malloc_r+0xfc>
 80076f2:	f000 f869 	bl	80077c8 <__malloc_lock>
 80076f6:	f8d8 3000 	ldr.w	r3, [r8]
 80076fa:	461c      	mov	r4, r3
 80076fc:	bb44      	cbnz	r4, 8007750 <_malloc_r+0x88>
 80076fe:	4629      	mov	r1, r5
 8007700:	4630      	mov	r0, r6
 8007702:	f7ff ffbf 	bl	8007684 <sbrk_aligned>
 8007706:	1c43      	adds	r3, r0, #1
 8007708:	4604      	mov	r4, r0
 800770a:	d158      	bne.n	80077be <_malloc_r+0xf6>
 800770c:	f8d8 4000 	ldr.w	r4, [r8]
 8007710:	4627      	mov	r7, r4
 8007712:	2f00      	cmp	r7, #0
 8007714:	d143      	bne.n	800779e <_malloc_r+0xd6>
 8007716:	2c00      	cmp	r4, #0
 8007718:	d04b      	beq.n	80077b2 <_malloc_r+0xea>
 800771a:	6823      	ldr	r3, [r4, #0]
 800771c:	4639      	mov	r1, r7
 800771e:	4630      	mov	r0, r6
 8007720:	eb04 0903 	add.w	r9, r4, r3
 8007724:	f000 fc1a 	bl	8007f5c <_sbrk_r>
 8007728:	4581      	cmp	r9, r0
 800772a:	d142      	bne.n	80077b2 <_malloc_r+0xea>
 800772c:	6821      	ldr	r1, [r4, #0]
 800772e:	1a6d      	subs	r5, r5, r1
 8007730:	4629      	mov	r1, r5
 8007732:	4630      	mov	r0, r6
 8007734:	f7ff ffa6 	bl	8007684 <sbrk_aligned>
 8007738:	3001      	adds	r0, #1
 800773a:	d03a      	beq.n	80077b2 <_malloc_r+0xea>
 800773c:	6823      	ldr	r3, [r4, #0]
 800773e:	442b      	add	r3, r5
 8007740:	6023      	str	r3, [r4, #0]
 8007742:	f8d8 3000 	ldr.w	r3, [r8]
 8007746:	685a      	ldr	r2, [r3, #4]
 8007748:	bb62      	cbnz	r2, 80077a4 <_malloc_r+0xdc>
 800774a:	f8c8 7000 	str.w	r7, [r8]
 800774e:	e00f      	b.n	8007770 <_malloc_r+0xa8>
 8007750:	6822      	ldr	r2, [r4, #0]
 8007752:	1b52      	subs	r2, r2, r5
 8007754:	d420      	bmi.n	8007798 <_malloc_r+0xd0>
 8007756:	2a0b      	cmp	r2, #11
 8007758:	d917      	bls.n	800778a <_malloc_r+0xc2>
 800775a:	1961      	adds	r1, r4, r5
 800775c:	42a3      	cmp	r3, r4
 800775e:	6025      	str	r5, [r4, #0]
 8007760:	bf18      	it	ne
 8007762:	6059      	strne	r1, [r3, #4]
 8007764:	6863      	ldr	r3, [r4, #4]
 8007766:	bf08      	it	eq
 8007768:	f8c8 1000 	streq.w	r1, [r8]
 800776c:	5162      	str	r2, [r4, r5]
 800776e:	604b      	str	r3, [r1, #4]
 8007770:	4630      	mov	r0, r6
 8007772:	f000 f82f 	bl	80077d4 <__malloc_unlock>
 8007776:	f104 000b 	add.w	r0, r4, #11
 800777a:	1d23      	adds	r3, r4, #4
 800777c:	f020 0007 	bic.w	r0, r0, #7
 8007780:	1ac2      	subs	r2, r0, r3
 8007782:	bf1c      	itt	ne
 8007784:	1a1b      	subne	r3, r3, r0
 8007786:	50a3      	strne	r3, [r4, r2]
 8007788:	e7af      	b.n	80076ea <_malloc_r+0x22>
 800778a:	6862      	ldr	r2, [r4, #4]
 800778c:	42a3      	cmp	r3, r4
 800778e:	bf0c      	ite	eq
 8007790:	f8c8 2000 	streq.w	r2, [r8]
 8007794:	605a      	strne	r2, [r3, #4]
 8007796:	e7eb      	b.n	8007770 <_malloc_r+0xa8>
 8007798:	4623      	mov	r3, r4
 800779a:	6864      	ldr	r4, [r4, #4]
 800779c:	e7ae      	b.n	80076fc <_malloc_r+0x34>
 800779e:	463c      	mov	r4, r7
 80077a0:	687f      	ldr	r7, [r7, #4]
 80077a2:	e7b6      	b.n	8007712 <_malloc_r+0x4a>
 80077a4:	461a      	mov	r2, r3
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	42a3      	cmp	r3, r4
 80077aa:	d1fb      	bne.n	80077a4 <_malloc_r+0xdc>
 80077ac:	2300      	movs	r3, #0
 80077ae:	6053      	str	r3, [r2, #4]
 80077b0:	e7de      	b.n	8007770 <_malloc_r+0xa8>
 80077b2:	230c      	movs	r3, #12
 80077b4:	6033      	str	r3, [r6, #0]
 80077b6:	4630      	mov	r0, r6
 80077b8:	f000 f80c 	bl	80077d4 <__malloc_unlock>
 80077bc:	e794      	b.n	80076e8 <_malloc_r+0x20>
 80077be:	6005      	str	r5, [r0, #0]
 80077c0:	e7d6      	b.n	8007770 <_malloc_r+0xa8>
 80077c2:	bf00      	nop
 80077c4:	2000465c 	.word	0x2000465c

080077c8 <__malloc_lock>:
 80077c8:	4801      	ldr	r0, [pc, #4]	@ (80077d0 <__malloc_lock+0x8>)
 80077ca:	f7ff bed2 	b.w	8007572 <__retarget_lock_acquire_recursive>
 80077ce:	bf00      	nop
 80077d0:	20004654 	.word	0x20004654

080077d4 <__malloc_unlock>:
 80077d4:	4801      	ldr	r0, [pc, #4]	@ (80077dc <__malloc_unlock+0x8>)
 80077d6:	f7ff becd 	b.w	8007574 <__retarget_lock_release_recursive>
 80077da:	bf00      	nop
 80077dc:	20004654 	.word	0x20004654

080077e0 <__ssputs_r>:
 80077e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077e4:	688e      	ldr	r6, [r1, #8]
 80077e6:	461f      	mov	r7, r3
 80077e8:	42be      	cmp	r6, r7
 80077ea:	680b      	ldr	r3, [r1, #0]
 80077ec:	4682      	mov	sl, r0
 80077ee:	460c      	mov	r4, r1
 80077f0:	4690      	mov	r8, r2
 80077f2:	d82d      	bhi.n	8007850 <__ssputs_r+0x70>
 80077f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80077f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80077fc:	d026      	beq.n	800784c <__ssputs_r+0x6c>
 80077fe:	6965      	ldr	r5, [r4, #20]
 8007800:	6909      	ldr	r1, [r1, #16]
 8007802:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007806:	eba3 0901 	sub.w	r9, r3, r1
 800780a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800780e:	1c7b      	adds	r3, r7, #1
 8007810:	444b      	add	r3, r9
 8007812:	106d      	asrs	r5, r5, #1
 8007814:	429d      	cmp	r5, r3
 8007816:	bf38      	it	cc
 8007818:	461d      	movcc	r5, r3
 800781a:	0553      	lsls	r3, r2, #21
 800781c:	d527      	bpl.n	800786e <__ssputs_r+0x8e>
 800781e:	4629      	mov	r1, r5
 8007820:	f7ff ff52 	bl	80076c8 <_malloc_r>
 8007824:	4606      	mov	r6, r0
 8007826:	b360      	cbz	r0, 8007882 <__ssputs_r+0xa2>
 8007828:	6921      	ldr	r1, [r4, #16]
 800782a:	464a      	mov	r2, r9
 800782c:	f7ff feab 	bl	8007586 <memcpy>
 8007830:	89a3      	ldrh	r3, [r4, #12]
 8007832:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007836:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800783a:	81a3      	strh	r3, [r4, #12]
 800783c:	6126      	str	r6, [r4, #16]
 800783e:	6165      	str	r5, [r4, #20]
 8007840:	444e      	add	r6, r9
 8007842:	eba5 0509 	sub.w	r5, r5, r9
 8007846:	6026      	str	r6, [r4, #0]
 8007848:	60a5      	str	r5, [r4, #8]
 800784a:	463e      	mov	r6, r7
 800784c:	42be      	cmp	r6, r7
 800784e:	d900      	bls.n	8007852 <__ssputs_r+0x72>
 8007850:	463e      	mov	r6, r7
 8007852:	6820      	ldr	r0, [r4, #0]
 8007854:	4632      	mov	r2, r6
 8007856:	4641      	mov	r1, r8
 8007858:	f000 fb66 	bl	8007f28 <memmove>
 800785c:	68a3      	ldr	r3, [r4, #8]
 800785e:	1b9b      	subs	r3, r3, r6
 8007860:	60a3      	str	r3, [r4, #8]
 8007862:	6823      	ldr	r3, [r4, #0]
 8007864:	4433      	add	r3, r6
 8007866:	6023      	str	r3, [r4, #0]
 8007868:	2000      	movs	r0, #0
 800786a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800786e:	462a      	mov	r2, r5
 8007870:	f000 fb8b 	bl	8007f8a <_realloc_r>
 8007874:	4606      	mov	r6, r0
 8007876:	2800      	cmp	r0, #0
 8007878:	d1e0      	bne.n	800783c <__ssputs_r+0x5c>
 800787a:	6921      	ldr	r1, [r4, #16]
 800787c:	4650      	mov	r0, sl
 800787e:	f7ff feaf 	bl	80075e0 <_free_r>
 8007882:	230c      	movs	r3, #12
 8007884:	f8ca 3000 	str.w	r3, [sl]
 8007888:	89a3      	ldrh	r3, [r4, #12]
 800788a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800788e:	81a3      	strh	r3, [r4, #12]
 8007890:	f04f 30ff 	mov.w	r0, #4294967295
 8007894:	e7e9      	b.n	800786a <__ssputs_r+0x8a>
	...

08007898 <_svfiprintf_r>:
 8007898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800789c:	4698      	mov	r8, r3
 800789e:	898b      	ldrh	r3, [r1, #12]
 80078a0:	061b      	lsls	r3, r3, #24
 80078a2:	b09d      	sub	sp, #116	@ 0x74
 80078a4:	4607      	mov	r7, r0
 80078a6:	460d      	mov	r5, r1
 80078a8:	4614      	mov	r4, r2
 80078aa:	d510      	bpl.n	80078ce <_svfiprintf_r+0x36>
 80078ac:	690b      	ldr	r3, [r1, #16]
 80078ae:	b973      	cbnz	r3, 80078ce <_svfiprintf_r+0x36>
 80078b0:	2140      	movs	r1, #64	@ 0x40
 80078b2:	f7ff ff09 	bl	80076c8 <_malloc_r>
 80078b6:	6028      	str	r0, [r5, #0]
 80078b8:	6128      	str	r0, [r5, #16]
 80078ba:	b930      	cbnz	r0, 80078ca <_svfiprintf_r+0x32>
 80078bc:	230c      	movs	r3, #12
 80078be:	603b      	str	r3, [r7, #0]
 80078c0:	f04f 30ff 	mov.w	r0, #4294967295
 80078c4:	b01d      	add	sp, #116	@ 0x74
 80078c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ca:	2340      	movs	r3, #64	@ 0x40
 80078cc:	616b      	str	r3, [r5, #20]
 80078ce:	2300      	movs	r3, #0
 80078d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80078d2:	2320      	movs	r3, #32
 80078d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80078d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80078dc:	2330      	movs	r3, #48	@ 0x30
 80078de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007a7c <_svfiprintf_r+0x1e4>
 80078e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80078e6:	f04f 0901 	mov.w	r9, #1
 80078ea:	4623      	mov	r3, r4
 80078ec:	469a      	mov	sl, r3
 80078ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078f2:	b10a      	cbz	r2, 80078f8 <_svfiprintf_r+0x60>
 80078f4:	2a25      	cmp	r2, #37	@ 0x25
 80078f6:	d1f9      	bne.n	80078ec <_svfiprintf_r+0x54>
 80078f8:	ebba 0b04 	subs.w	fp, sl, r4
 80078fc:	d00b      	beq.n	8007916 <_svfiprintf_r+0x7e>
 80078fe:	465b      	mov	r3, fp
 8007900:	4622      	mov	r2, r4
 8007902:	4629      	mov	r1, r5
 8007904:	4638      	mov	r0, r7
 8007906:	f7ff ff6b 	bl	80077e0 <__ssputs_r>
 800790a:	3001      	adds	r0, #1
 800790c:	f000 80a7 	beq.w	8007a5e <_svfiprintf_r+0x1c6>
 8007910:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007912:	445a      	add	r2, fp
 8007914:	9209      	str	r2, [sp, #36]	@ 0x24
 8007916:	f89a 3000 	ldrb.w	r3, [sl]
 800791a:	2b00      	cmp	r3, #0
 800791c:	f000 809f 	beq.w	8007a5e <_svfiprintf_r+0x1c6>
 8007920:	2300      	movs	r3, #0
 8007922:	f04f 32ff 	mov.w	r2, #4294967295
 8007926:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800792a:	f10a 0a01 	add.w	sl, sl, #1
 800792e:	9304      	str	r3, [sp, #16]
 8007930:	9307      	str	r3, [sp, #28]
 8007932:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007936:	931a      	str	r3, [sp, #104]	@ 0x68
 8007938:	4654      	mov	r4, sl
 800793a:	2205      	movs	r2, #5
 800793c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007940:	484e      	ldr	r0, [pc, #312]	@ (8007a7c <_svfiprintf_r+0x1e4>)
 8007942:	f7f8 fc55 	bl	80001f0 <memchr>
 8007946:	9a04      	ldr	r2, [sp, #16]
 8007948:	b9d8      	cbnz	r0, 8007982 <_svfiprintf_r+0xea>
 800794a:	06d0      	lsls	r0, r2, #27
 800794c:	bf44      	itt	mi
 800794e:	2320      	movmi	r3, #32
 8007950:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007954:	0711      	lsls	r1, r2, #28
 8007956:	bf44      	itt	mi
 8007958:	232b      	movmi	r3, #43	@ 0x2b
 800795a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800795e:	f89a 3000 	ldrb.w	r3, [sl]
 8007962:	2b2a      	cmp	r3, #42	@ 0x2a
 8007964:	d015      	beq.n	8007992 <_svfiprintf_r+0xfa>
 8007966:	9a07      	ldr	r2, [sp, #28]
 8007968:	4654      	mov	r4, sl
 800796a:	2000      	movs	r0, #0
 800796c:	f04f 0c0a 	mov.w	ip, #10
 8007970:	4621      	mov	r1, r4
 8007972:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007976:	3b30      	subs	r3, #48	@ 0x30
 8007978:	2b09      	cmp	r3, #9
 800797a:	d94b      	bls.n	8007a14 <_svfiprintf_r+0x17c>
 800797c:	b1b0      	cbz	r0, 80079ac <_svfiprintf_r+0x114>
 800797e:	9207      	str	r2, [sp, #28]
 8007980:	e014      	b.n	80079ac <_svfiprintf_r+0x114>
 8007982:	eba0 0308 	sub.w	r3, r0, r8
 8007986:	fa09 f303 	lsl.w	r3, r9, r3
 800798a:	4313      	orrs	r3, r2
 800798c:	9304      	str	r3, [sp, #16]
 800798e:	46a2      	mov	sl, r4
 8007990:	e7d2      	b.n	8007938 <_svfiprintf_r+0xa0>
 8007992:	9b03      	ldr	r3, [sp, #12]
 8007994:	1d19      	adds	r1, r3, #4
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	9103      	str	r1, [sp, #12]
 800799a:	2b00      	cmp	r3, #0
 800799c:	bfbb      	ittet	lt
 800799e:	425b      	neglt	r3, r3
 80079a0:	f042 0202 	orrlt.w	r2, r2, #2
 80079a4:	9307      	strge	r3, [sp, #28]
 80079a6:	9307      	strlt	r3, [sp, #28]
 80079a8:	bfb8      	it	lt
 80079aa:	9204      	strlt	r2, [sp, #16]
 80079ac:	7823      	ldrb	r3, [r4, #0]
 80079ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80079b0:	d10a      	bne.n	80079c8 <_svfiprintf_r+0x130>
 80079b2:	7863      	ldrb	r3, [r4, #1]
 80079b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80079b6:	d132      	bne.n	8007a1e <_svfiprintf_r+0x186>
 80079b8:	9b03      	ldr	r3, [sp, #12]
 80079ba:	1d1a      	adds	r2, r3, #4
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	9203      	str	r2, [sp, #12]
 80079c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80079c4:	3402      	adds	r4, #2
 80079c6:	9305      	str	r3, [sp, #20]
 80079c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007a8c <_svfiprintf_r+0x1f4>
 80079cc:	7821      	ldrb	r1, [r4, #0]
 80079ce:	2203      	movs	r2, #3
 80079d0:	4650      	mov	r0, sl
 80079d2:	f7f8 fc0d 	bl	80001f0 <memchr>
 80079d6:	b138      	cbz	r0, 80079e8 <_svfiprintf_r+0x150>
 80079d8:	9b04      	ldr	r3, [sp, #16]
 80079da:	eba0 000a 	sub.w	r0, r0, sl
 80079de:	2240      	movs	r2, #64	@ 0x40
 80079e0:	4082      	lsls	r2, r0
 80079e2:	4313      	orrs	r3, r2
 80079e4:	3401      	adds	r4, #1
 80079e6:	9304      	str	r3, [sp, #16]
 80079e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079ec:	4824      	ldr	r0, [pc, #144]	@ (8007a80 <_svfiprintf_r+0x1e8>)
 80079ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80079f2:	2206      	movs	r2, #6
 80079f4:	f7f8 fbfc 	bl	80001f0 <memchr>
 80079f8:	2800      	cmp	r0, #0
 80079fa:	d036      	beq.n	8007a6a <_svfiprintf_r+0x1d2>
 80079fc:	4b21      	ldr	r3, [pc, #132]	@ (8007a84 <_svfiprintf_r+0x1ec>)
 80079fe:	bb1b      	cbnz	r3, 8007a48 <_svfiprintf_r+0x1b0>
 8007a00:	9b03      	ldr	r3, [sp, #12]
 8007a02:	3307      	adds	r3, #7
 8007a04:	f023 0307 	bic.w	r3, r3, #7
 8007a08:	3308      	adds	r3, #8
 8007a0a:	9303      	str	r3, [sp, #12]
 8007a0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a0e:	4433      	add	r3, r6
 8007a10:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a12:	e76a      	b.n	80078ea <_svfiprintf_r+0x52>
 8007a14:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a18:	460c      	mov	r4, r1
 8007a1a:	2001      	movs	r0, #1
 8007a1c:	e7a8      	b.n	8007970 <_svfiprintf_r+0xd8>
 8007a1e:	2300      	movs	r3, #0
 8007a20:	3401      	adds	r4, #1
 8007a22:	9305      	str	r3, [sp, #20]
 8007a24:	4619      	mov	r1, r3
 8007a26:	f04f 0c0a 	mov.w	ip, #10
 8007a2a:	4620      	mov	r0, r4
 8007a2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a30:	3a30      	subs	r2, #48	@ 0x30
 8007a32:	2a09      	cmp	r2, #9
 8007a34:	d903      	bls.n	8007a3e <_svfiprintf_r+0x1a6>
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d0c6      	beq.n	80079c8 <_svfiprintf_r+0x130>
 8007a3a:	9105      	str	r1, [sp, #20]
 8007a3c:	e7c4      	b.n	80079c8 <_svfiprintf_r+0x130>
 8007a3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a42:	4604      	mov	r4, r0
 8007a44:	2301      	movs	r3, #1
 8007a46:	e7f0      	b.n	8007a2a <_svfiprintf_r+0x192>
 8007a48:	ab03      	add	r3, sp, #12
 8007a4a:	9300      	str	r3, [sp, #0]
 8007a4c:	462a      	mov	r2, r5
 8007a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8007a88 <_svfiprintf_r+0x1f0>)
 8007a50:	a904      	add	r1, sp, #16
 8007a52:	4638      	mov	r0, r7
 8007a54:	f3af 8000 	nop.w
 8007a58:	1c42      	adds	r2, r0, #1
 8007a5a:	4606      	mov	r6, r0
 8007a5c:	d1d6      	bne.n	8007a0c <_svfiprintf_r+0x174>
 8007a5e:	89ab      	ldrh	r3, [r5, #12]
 8007a60:	065b      	lsls	r3, r3, #25
 8007a62:	f53f af2d 	bmi.w	80078c0 <_svfiprintf_r+0x28>
 8007a66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a68:	e72c      	b.n	80078c4 <_svfiprintf_r+0x2c>
 8007a6a:	ab03      	add	r3, sp, #12
 8007a6c:	9300      	str	r3, [sp, #0]
 8007a6e:	462a      	mov	r2, r5
 8007a70:	4b05      	ldr	r3, [pc, #20]	@ (8007a88 <_svfiprintf_r+0x1f0>)
 8007a72:	a904      	add	r1, sp, #16
 8007a74:	4638      	mov	r0, r7
 8007a76:	f000 f879 	bl	8007b6c <_printf_i>
 8007a7a:	e7ed      	b.n	8007a58 <_svfiprintf_r+0x1c0>
 8007a7c:	08008833 	.word	0x08008833
 8007a80:	0800883d 	.word	0x0800883d
 8007a84:	00000000 	.word	0x00000000
 8007a88:	080077e1 	.word	0x080077e1
 8007a8c:	08008839 	.word	0x08008839

08007a90 <_printf_common>:
 8007a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a94:	4616      	mov	r6, r2
 8007a96:	4698      	mov	r8, r3
 8007a98:	688a      	ldr	r2, [r1, #8]
 8007a9a:	690b      	ldr	r3, [r1, #16]
 8007a9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	bfb8      	it	lt
 8007aa4:	4613      	movlt	r3, r2
 8007aa6:	6033      	str	r3, [r6, #0]
 8007aa8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007aac:	4607      	mov	r7, r0
 8007aae:	460c      	mov	r4, r1
 8007ab0:	b10a      	cbz	r2, 8007ab6 <_printf_common+0x26>
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	6033      	str	r3, [r6, #0]
 8007ab6:	6823      	ldr	r3, [r4, #0]
 8007ab8:	0699      	lsls	r1, r3, #26
 8007aba:	bf42      	ittt	mi
 8007abc:	6833      	ldrmi	r3, [r6, #0]
 8007abe:	3302      	addmi	r3, #2
 8007ac0:	6033      	strmi	r3, [r6, #0]
 8007ac2:	6825      	ldr	r5, [r4, #0]
 8007ac4:	f015 0506 	ands.w	r5, r5, #6
 8007ac8:	d106      	bne.n	8007ad8 <_printf_common+0x48>
 8007aca:	f104 0a19 	add.w	sl, r4, #25
 8007ace:	68e3      	ldr	r3, [r4, #12]
 8007ad0:	6832      	ldr	r2, [r6, #0]
 8007ad2:	1a9b      	subs	r3, r3, r2
 8007ad4:	42ab      	cmp	r3, r5
 8007ad6:	dc26      	bgt.n	8007b26 <_printf_common+0x96>
 8007ad8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007adc:	6822      	ldr	r2, [r4, #0]
 8007ade:	3b00      	subs	r3, #0
 8007ae0:	bf18      	it	ne
 8007ae2:	2301      	movne	r3, #1
 8007ae4:	0692      	lsls	r2, r2, #26
 8007ae6:	d42b      	bmi.n	8007b40 <_printf_common+0xb0>
 8007ae8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007aec:	4641      	mov	r1, r8
 8007aee:	4638      	mov	r0, r7
 8007af0:	47c8      	blx	r9
 8007af2:	3001      	adds	r0, #1
 8007af4:	d01e      	beq.n	8007b34 <_printf_common+0xa4>
 8007af6:	6823      	ldr	r3, [r4, #0]
 8007af8:	6922      	ldr	r2, [r4, #16]
 8007afa:	f003 0306 	and.w	r3, r3, #6
 8007afe:	2b04      	cmp	r3, #4
 8007b00:	bf02      	ittt	eq
 8007b02:	68e5      	ldreq	r5, [r4, #12]
 8007b04:	6833      	ldreq	r3, [r6, #0]
 8007b06:	1aed      	subeq	r5, r5, r3
 8007b08:	68a3      	ldr	r3, [r4, #8]
 8007b0a:	bf0c      	ite	eq
 8007b0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b10:	2500      	movne	r5, #0
 8007b12:	4293      	cmp	r3, r2
 8007b14:	bfc4      	itt	gt
 8007b16:	1a9b      	subgt	r3, r3, r2
 8007b18:	18ed      	addgt	r5, r5, r3
 8007b1a:	2600      	movs	r6, #0
 8007b1c:	341a      	adds	r4, #26
 8007b1e:	42b5      	cmp	r5, r6
 8007b20:	d11a      	bne.n	8007b58 <_printf_common+0xc8>
 8007b22:	2000      	movs	r0, #0
 8007b24:	e008      	b.n	8007b38 <_printf_common+0xa8>
 8007b26:	2301      	movs	r3, #1
 8007b28:	4652      	mov	r2, sl
 8007b2a:	4641      	mov	r1, r8
 8007b2c:	4638      	mov	r0, r7
 8007b2e:	47c8      	blx	r9
 8007b30:	3001      	adds	r0, #1
 8007b32:	d103      	bne.n	8007b3c <_printf_common+0xac>
 8007b34:	f04f 30ff 	mov.w	r0, #4294967295
 8007b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b3c:	3501      	adds	r5, #1
 8007b3e:	e7c6      	b.n	8007ace <_printf_common+0x3e>
 8007b40:	18e1      	adds	r1, r4, r3
 8007b42:	1c5a      	adds	r2, r3, #1
 8007b44:	2030      	movs	r0, #48	@ 0x30
 8007b46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007b4a:	4422      	add	r2, r4
 8007b4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007b50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007b54:	3302      	adds	r3, #2
 8007b56:	e7c7      	b.n	8007ae8 <_printf_common+0x58>
 8007b58:	2301      	movs	r3, #1
 8007b5a:	4622      	mov	r2, r4
 8007b5c:	4641      	mov	r1, r8
 8007b5e:	4638      	mov	r0, r7
 8007b60:	47c8      	blx	r9
 8007b62:	3001      	adds	r0, #1
 8007b64:	d0e6      	beq.n	8007b34 <_printf_common+0xa4>
 8007b66:	3601      	adds	r6, #1
 8007b68:	e7d9      	b.n	8007b1e <_printf_common+0x8e>
	...

08007b6c <_printf_i>:
 8007b6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b70:	7e0f      	ldrb	r7, [r1, #24]
 8007b72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007b74:	2f78      	cmp	r7, #120	@ 0x78
 8007b76:	4691      	mov	r9, r2
 8007b78:	4680      	mov	r8, r0
 8007b7a:	460c      	mov	r4, r1
 8007b7c:	469a      	mov	sl, r3
 8007b7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007b82:	d807      	bhi.n	8007b94 <_printf_i+0x28>
 8007b84:	2f62      	cmp	r7, #98	@ 0x62
 8007b86:	d80a      	bhi.n	8007b9e <_printf_i+0x32>
 8007b88:	2f00      	cmp	r7, #0
 8007b8a:	f000 80d2 	beq.w	8007d32 <_printf_i+0x1c6>
 8007b8e:	2f58      	cmp	r7, #88	@ 0x58
 8007b90:	f000 80b9 	beq.w	8007d06 <_printf_i+0x19a>
 8007b94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007b9c:	e03a      	b.n	8007c14 <_printf_i+0xa8>
 8007b9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007ba2:	2b15      	cmp	r3, #21
 8007ba4:	d8f6      	bhi.n	8007b94 <_printf_i+0x28>
 8007ba6:	a101      	add	r1, pc, #4	@ (adr r1, 8007bac <_printf_i+0x40>)
 8007ba8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007bac:	08007c05 	.word	0x08007c05
 8007bb0:	08007c19 	.word	0x08007c19
 8007bb4:	08007b95 	.word	0x08007b95
 8007bb8:	08007b95 	.word	0x08007b95
 8007bbc:	08007b95 	.word	0x08007b95
 8007bc0:	08007b95 	.word	0x08007b95
 8007bc4:	08007c19 	.word	0x08007c19
 8007bc8:	08007b95 	.word	0x08007b95
 8007bcc:	08007b95 	.word	0x08007b95
 8007bd0:	08007b95 	.word	0x08007b95
 8007bd4:	08007b95 	.word	0x08007b95
 8007bd8:	08007d19 	.word	0x08007d19
 8007bdc:	08007c43 	.word	0x08007c43
 8007be0:	08007cd3 	.word	0x08007cd3
 8007be4:	08007b95 	.word	0x08007b95
 8007be8:	08007b95 	.word	0x08007b95
 8007bec:	08007d3b 	.word	0x08007d3b
 8007bf0:	08007b95 	.word	0x08007b95
 8007bf4:	08007c43 	.word	0x08007c43
 8007bf8:	08007b95 	.word	0x08007b95
 8007bfc:	08007b95 	.word	0x08007b95
 8007c00:	08007cdb 	.word	0x08007cdb
 8007c04:	6833      	ldr	r3, [r6, #0]
 8007c06:	1d1a      	adds	r2, r3, #4
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	6032      	str	r2, [r6, #0]
 8007c0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007c14:	2301      	movs	r3, #1
 8007c16:	e09d      	b.n	8007d54 <_printf_i+0x1e8>
 8007c18:	6833      	ldr	r3, [r6, #0]
 8007c1a:	6820      	ldr	r0, [r4, #0]
 8007c1c:	1d19      	adds	r1, r3, #4
 8007c1e:	6031      	str	r1, [r6, #0]
 8007c20:	0606      	lsls	r6, r0, #24
 8007c22:	d501      	bpl.n	8007c28 <_printf_i+0xbc>
 8007c24:	681d      	ldr	r5, [r3, #0]
 8007c26:	e003      	b.n	8007c30 <_printf_i+0xc4>
 8007c28:	0645      	lsls	r5, r0, #25
 8007c2a:	d5fb      	bpl.n	8007c24 <_printf_i+0xb8>
 8007c2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007c30:	2d00      	cmp	r5, #0
 8007c32:	da03      	bge.n	8007c3c <_printf_i+0xd0>
 8007c34:	232d      	movs	r3, #45	@ 0x2d
 8007c36:	426d      	negs	r5, r5
 8007c38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c3c:	4859      	ldr	r0, [pc, #356]	@ (8007da4 <_printf_i+0x238>)
 8007c3e:	230a      	movs	r3, #10
 8007c40:	e011      	b.n	8007c66 <_printf_i+0xfa>
 8007c42:	6821      	ldr	r1, [r4, #0]
 8007c44:	6833      	ldr	r3, [r6, #0]
 8007c46:	0608      	lsls	r0, r1, #24
 8007c48:	f853 5b04 	ldr.w	r5, [r3], #4
 8007c4c:	d402      	bmi.n	8007c54 <_printf_i+0xe8>
 8007c4e:	0649      	lsls	r1, r1, #25
 8007c50:	bf48      	it	mi
 8007c52:	b2ad      	uxthmi	r5, r5
 8007c54:	2f6f      	cmp	r7, #111	@ 0x6f
 8007c56:	4853      	ldr	r0, [pc, #332]	@ (8007da4 <_printf_i+0x238>)
 8007c58:	6033      	str	r3, [r6, #0]
 8007c5a:	bf14      	ite	ne
 8007c5c:	230a      	movne	r3, #10
 8007c5e:	2308      	moveq	r3, #8
 8007c60:	2100      	movs	r1, #0
 8007c62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007c66:	6866      	ldr	r6, [r4, #4]
 8007c68:	60a6      	str	r6, [r4, #8]
 8007c6a:	2e00      	cmp	r6, #0
 8007c6c:	bfa2      	ittt	ge
 8007c6e:	6821      	ldrge	r1, [r4, #0]
 8007c70:	f021 0104 	bicge.w	r1, r1, #4
 8007c74:	6021      	strge	r1, [r4, #0]
 8007c76:	b90d      	cbnz	r5, 8007c7c <_printf_i+0x110>
 8007c78:	2e00      	cmp	r6, #0
 8007c7a:	d04b      	beq.n	8007d14 <_printf_i+0x1a8>
 8007c7c:	4616      	mov	r6, r2
 8007c7e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c82:	fb03 5711 	mls	r7, r3, r1, r5
 8007c86:	5dc7      	ldrb	r7, [r0, r7]
 8007c88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c8c:	462f      	mov	r7, r5
 8007c8e:	42bb      	cmp	r3, r7
 8007c90:	460d      	mov	r5, r1
 8007c92:	d9f4      	bls.n	8007c7e <_printf_i+0x112>
 8007c94:	2b08      	cmp	r3, #8
 8007c96:	d10b      	bne.n	8007cb0 <_printf_i+0x144>
 8007c98:	6823      	ldr	r3, [r4, #0]
 8007c9a:	07df      	lsls	r7, r3, #31
 8007c9c:	d508      	bpl.n	8007cb0 <_printf_i+0x144>
 8007c9e:	6923      	ldr	r3, [r4, #16]
 8007ca0:	6861      	ldr	r1, [r4, #4]
 8007ca2:	4299      	cmp	r1, r3
 8007ca4:	bfde      	ittt	le
 8007ca6:	2330      	movle	r3, #48	@ 0x30
 8007ca8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007cac:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007cb0:	1b92      	subs	r2, r2, r6
 8007cb2:	6122      	str	r2, [r4, #16]
 8007cb4:	f8cd a000 	str.w	sl, [sp]
 8007cb8:	464b      	mov	r3, r9
 8007cba:	aa03      	add	r2, sp, #12
 8007cbc:	4621      	mov	r1, r4
 8007cbe:	4640      	mov	r0, r8
 8007cc0:	f7ff fee6 	bl	8007a90 <_printf_common>
 8007cc4:	3001      	adds	r0, #1
 8007cc6:	d14a      	bne.n	8007d5e <_printf_i+0x1f2>
 8007cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ccc:	b004      	add	sp, #16
 8007cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cd2:	6823      	ldr	r3, [r4, #0]
 8007cd4:	f043 0320 	orr.w	r3, r3, #32
 8007cd8:	6023      	str	r3, [r4, #0]
 8007cda:	4833      	ldr	r0, [pc, #204]	@ (8007da8 <_printf_i+0x23c>)
 8007cdc:	2778      	movs	r7, #120	@ 0x78
 8007cde:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007ce2:	6823      	ldr	r3, [r4, #0]
 8007ce4:	6831      	ldr	r1, [r6, #0]
 8007ce6:	061f      	lsls	r7, r3, #24
 8007ce8:	f851 5b04 	ldr.w	r5, [r1], #4
 8007cec:	d402      	bmi.n	8007cf4 <_printf_i+0x188>
 8007cee:	065f      	lsls	r7, r3, #25
 8007cf0:	bf48      	it	mi
 8007cf2:	b2ad      	uxthmi	r5, r5
 8007cf4:	6031      	str	r1, [r6, #0]
 8007cf6:	07d9      	lsls	r1, r3, #31
 8007cf8:	bf44      	itt	mi
 8007cfa:	f043 0320 	orrmi.w	r3, r3, #32
 8007cfe:	6023      	strmi	r3, [r4, #0]
 8007d00:	b11d      	cbz	r5, 8007d0a <_printf_i+0x19e>
 8007d02:	2310      	movs	r3, #16
 8007d04:	e7ac      	b.n	8007c60 <_printf_i+0xf4>
 8007d06:	4827      	ldr	r0, [pc, #156]	@ (8007da4 <_printf_i+0x238>)
 8007d08:	e7e9      	b.n	8007cde <_printf_i+0x172>
 8007d0a:	6823      	ldr	r3, [r4, #0]
 8007d0c:	f023 0320 	bic.w	r3, r3, #32
 8007d10:	6023      	str	r3, [r4, #0]
 8007d12:	e7f6      	b.n	8007d02 <_printf_i+0x196>
 8007d14:	4616      	mov	r6, r2
 8007d16:	e7bd      	b.n	8007c94 <_printf_i+0x128>
 8007d18:	6833      	ldr	r3, [r6, #0]
 8007d1a:	6825      	ldr	r5, [r4, #0]
 8007d1c:	6961      	ldr	r1, [r4, #20]
 8007d1e:	1d18      	adds	r0, r3, #4
 8007d20:	6030      	str	r0, [r6, #0]
 8007d22:	062e      	lsls	r6, r5, #24
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	d501      	bpl.n	8007d2c <_printf_i+0x1c0>
 8007d28:	6019      	str	r1, [r3, #0]
 8007d2a:	e002      	b.n	8007d32 <_printf_i+0x1c6>
 8007d2c:	0668      	lsls	r0, r5, #25
 8007d2e:	d5fb      	bpl.n	8007d28 <_printf_i+0x1bc>
 8007d30:	8019      	strh	r1, [r3, #0]
 8007d32:	2300      	movs	r3, #0
 8007d34:	6123      	str	r3, [r4, #16]
 8007d36:	4616      	mov	r6, r2
 8007d38:	e7bc      	b.n	8007cb4 <_printf_i+0x148>
 8007d3a:	6833      	ldr	r3, [r6, #0]
 8007d3c:	1d1a      	adds	r2, r3, #4
 8007d3e:	6032      	str	r2, [r6, #0]
 8007d40:	681e      	ldr	r6, [r3, #0]
 8007d42:	6862      	ldr	r2, [r4, #4]
 8007d44:	2100      	movs	r1, #0
 8007d46:	4630      	mov	r0, r6
 8007d48:	f7f8 fa52 	bl	80001f0 <memchr>
 8007d4c:	b108      	cbz	r0, 8007d52 <_printf_i+0x1e6>
 8007d4e:	1b80      	subs	r0, r0, r6
 8007d50:	6060      	str	r0, [r4, #4]
 8007d52:	6863      	ldr	r3, [r4, #4]
 8007d54:	6123      	str	r3, [r4, #16]
 8007d56:	2300      	movs	r3, #0
 8007d58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d5c:	e7aa      	b.n	8007cb4 <_printf_i+0x148>
 8007d5e:	6923      	ldr	r3, [r4, #16]
 8007d60:	4632      	mov	r2, r6
 8007d62:	4649      	mov	r1, r9
 8007d64:	4640      	mov	r0, r8
 8007d66:	47d0      	blx	sl
 8007d68:	3001      	adds	r0, #1
 8007d6a:	d0ad      	beq.n	8007cc8 <_printf_i+0x15c>
 8007d6c:	6823      	ldr	r3, [r4, #0]
 8007d6e:	079b      	lsls	r3, r3, #30
 8007d70:	d413      	bmi.n	8007d9a <_printf_i+0x22e>
 8007d72:	68e0      	ldr	r0, [r4, #12]
 8007d74:	9b03      	ldr	r3, [sp, #12]
 8007d76:	4298      	cmp	r0, r3
 8007d78:	bfb8      	it	lt
 8007d7a:	4618      	movlt	r0, r3
 8007d7c:	e7a6      	b.n	8007ccc <_printf_i+0x160>
 8007d7e:	2301      	movs	r3, #1
 8007d80:	4632      	mov	r2, r6
 8007d82:	4649      	mov	r1, r9
 8007d84:	4640      	mov	r0, r8
 8007d86:	47d0      	blx	sl
 8007d88:	3001      	adds	r0, #1
 8007d8a:	d09d      	beq.n	8007cc8 <_printf_i+0x15c>
 8007d8c:	3501      	adds	r5, #1
 8007d8e:	68e3      	ldr	r3, [r4, #12]
 8007d90:	9903      	ldr	r1, [sp, #12]
 8007d92:	1a5b      	subs	r3, r3, r1
 8007d94:	42ab      	cmp	r3, r5
 8007d96:	dcf2      	bgt.n	8007d7e <_printf_i+0x212>
 8007d98:	e7eb      	b.n	8007d72 <_printf_i+0x206>
 8007d9a:	2500      	movs	r5, #0
 8007d9c:	f104 0619 	add.w	r6, r4, #25
 8007da0:	e7f5      	b.n	8007d8e <_printf_i+0x222>
 8007da2:	bf00      	nop
 8007da4:	08008844 	.word	0x08008844
 8007da8:	08008855 	.word	0x08008855

08007dac <__sflush_r>:
 8007dac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007db4:	0716      	lsls	r6, r2, #28
 8007db6:	4605      	mov	r5, r0
 8007db8:	460c      	mov	r4, r1
 8007dba:	d454      	bmi.n	8007e66 <__sflush_r+0xba>
 8007dbc:	684b      	ldr	r3, [r1, #4]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	dc02      	bgt.n	8007dc8 <__sflush_r+0x1c>
 8007dc2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	dd48      	ble.n	8007e5a <__sflush_r+0xae>
 8007dc8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007dca:	2e00      	cmp	r6, #0
 8007dcc:	d045      	beq.n	8007e5a <__sflush_r+0xae>
 8007dce:	2300      	movs	r3, #0
 8007dd0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007dd4:	682f      	ldr	r7, [r5, #0]
 8007dd6:	6a21      	ldr	r1, [r4, #32]
 8007dd8:	602b      	str	r3, [r5, #0]
 8007dda:	d030      	beq.n	8007e3e <__sflush_r+0x92>
 8007ddc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007dde:	89a3      	ldrh	r3, [r4, #12]
 8007de0:	0759      	lsls	r1, r3, #29
 8007de2:	d505      	bpl.n	8007df0 <__sflush_r+0x44>
 8007de4:	6863      	ldr	r3, [r4, #4]
 8007de6:	1ad2      	subs	r2, r2, r3
 8007de8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007dea:	b10b      	cbz	r3, 8007df0 <__sflush_r+0x44>
 8007dec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007dee:	1ad2      	subs	r2, r2, r3
 8007df0:	2300      	movs	r3, #0
 8007df2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007df4:	6a21      	ldr	r1, [r4, #32]
 8007df6:	4628      	mov	r0, r5
 8007df8:	47b0      	blx	r6
 8007dfa:	1c43      	adds	r3, r0, #1
 8007dfc:	89a3      	ldrh	r3, [r4, #12]
 8007dfe:	d106      	bne.n	8007e0e <__sflush_r+0x62>
 8007e00:	6829      	ldr	r1, [r5, #0]
 8007e02:	291d      	cmp	r1, #29
 8007e04:	d82b      	bhi.n	8007e5e <__sflush_r+0xb2>
 8007e06:	4a2a      	ldr	r2, [pc, #168]	@ (8007eb0 <__sflush_r+0x104>)
 8007e08:	410a      	asrs	r2, r1
 8007e0a:	07d6      	lsls	r6, r2, #31
 8007e0c:	d427      	bmi.n	8007e5e <__sflush_r+0xb2>
 8007e0e:	2200      	movs	r2, #0
 8007e10:	6062      	str	r2, [r4, #4]
 8007e12:	04d9      	lsls	r1, r3, #19
 8007e14:	6922      	ldr	r2, [r4, #16]
 8007e16:	6022      	str	r2, [r4, #0]
 8007e18:	d504      	bpl.n	8007e24 <__sflush_r+0x78>
 8007e1a:	1c42      	adds	r2, r0, #1
 8007e1c:	d101      	bne.n	8007e22 <__sflush_r+0x76>
 8007e1e:	682b      	ldr	r3, [r5, #0]
 8007e20:	b903      	cbnz	r3, 8007e24 <__sflush_r+0x78>
 8007e22:	6560      	str	r0, [r4, #84]	@ 0x54
 8007e24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e26:	602f      	str	r7, [r5, #0]
 8007e28:	b1b9      	cbz	r1, 8007e5a <__sflush_r+0xae>
 8007e2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007e2e:	4299      	cmp	r1, r3
 8007e30:	d002      	beq.n	8007e38 <__sflush_r+0x8c>
 8007e32:	4628      	mov	r0, r5
 8007e34:	f7ff fbd4 	bl	80075e0 <_free_r>
 8007e38:	2300      	movs	r3, #0
 8007e3a:	6363      	str	r3, [r4, #52]	@ 0x34
 8007e3c:	e00d      	b.n	8007e5a <__sflush_r+0xae>
 8007e3e:	2301      	movs	r3, #1
 8007e40:	4628      	mov	r0, r5
 8007e42:	47b0      	blx	r6
 8007e44:	4602      	mov	r2, r0
 8007e46:	1c50      	adds	r0, r2, #1
 8007e48:	d1c9      	bne.n	8007dde <__sflush_r+0x32>
 8007e4a:	682b      	ldr	r3, [r5, #0]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d0c6      	beq.n	8007dde <__sflush_r+0x32>
 8007e50:	2b1d      	cmp	r3, #29
 8007e52:	d001      	beq.n	8007e58 <__sflush_r+0xac>
 8007e54:	2b16      	cmp	r3, #22
 8007e56:	d11e      	bne.n	8007e96 <__sflush_r+0xea>
 8007e58:	602f      	str	r7, [r5, #0]
 8007e5a:	2000      	movs	r0, #0
 8007e5c:	e022      	b.n	8007ea4 <__sflush_r+0xf8>
 8007e5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e62:	b21b      	sxth	r3, r3
 8007e64:	e01b      	b.n	8007e9e <__sflush_r+0xf2>
 8007e66:	690f      	ldr	r7, [r1, #16]
 8007e68:	2f00      	cmp	r7, #0
 8007e6a:	d0f6      	beq.n	8007e5a <__sflush_r+0xae>
 8007e6c:	0793      	lsls	r3, r2, #30
 8007e6e:	680e      	ldr	r6, [r1, #0]
 8007e70:	bf08      	it	eq
 8007e72:	694b      	ldreq	r3, [r1, #20]
 8007e74:	600f      	str	r7, [r1, #0]
 8007e76:	bf18      	it	ne
 8007e78:	2300      	movne	r3, #0
 8007e7a:	eba6 0807 	sub.w	r8, r6, r7
 8007e7e:	608b      	str	r3, [r1, #8]
 8007e80:	f1b8 0f00 	cmp.w	r8, #0
 8007e84:	dde9      	ble.n	8007e5a <__sflush_r+0xae>
 8007e86:	6a21      	ldr	r1, [r4, #32]
 8007e88:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007e8a:	4643      	mov	r3, r8
 8007e8c:	463a      	mov	r2, r7
 8007e8e:	4628      	mov	r0, r5
 8007e90:	47b0      	blx	r6
 8007e92:	2800      	cmp	r0, #0
 8007e94:	dc08      	bgt.n	8007ea8 <__sflush_r+0xfc>
 8007e96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e9e:	81a3      	strh	r3, [r4, #12]
 8007ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ea8:	4407      	add	r7, r0
 8007eaa:	eba8 0800 	sub.w	r8, r8, r0
 8007eae:	e7e7      	b.n	8007e80 <__sflush_r+0xd4>
 8007eb0:	dfbffffe 	.word	0xdfbffffe

08007eb4 <_fflush_r>:
 8007eb4:	b538      	push	{r3, r4, r5, lr}
 8007eb6:	690b      	ldr	r3, [r1, #16]
 8007eb8:	4605      	mov	r5, r0
 8007eba:	460c      	mov	r4, r1
 8007ebc:	b913      	cbnz	r3, 8007ec4 <_fflush_r+0x10>
 8007ebe:	2500      	movs	r5, #0
 8007ec0:	4628      	mov	r0, r5
 8007ec2:	bd38      	pop	{r3, r4, r5, pc}
 8007ec4:	b118      	cbz	r0, 8007ece <_fflush_r+0x1a>
 8007ec6:	6a03      	ldr	r3, [r0, #32]
 8007ec8:	b90b      	cbnz	r3, 8007ece <_fflush_r+0x1a>
 8007eca:	f7ff fa3f 	bl	800734c <__sinit>
 8007ece:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d0f3      	beq.n	8007ebe <_fflush_r+0xa>
 8007ed6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007ed8:	07d0      	lsls	r0, r2, #31
 8007eda:	d404      	bmi.n	8007ee6 <_fflush_r+0x32>
 8007edc:	0599      	lsls	r1, r3, #22
 8007ede:	d402      	bmi.n	8007ee6 <_fflush_r+0x32>
 8007ee0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ee2:	f7ff fb46 	bl	8007572 <__retarget_lock_acquire_recursive>
 8007ee6:	4628      	mov	r0, r5
 8007ee8:	4621      	mov	r1, r4
 8007eea:	f7ff ff5f 	bl	8007dac <__sflush_r>
 8007eee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ef0:	07da      	lsls	r2, r3, #31
 8007ef2:	4605      	mov	r5, r0
 8007ef4:	d4e4      	bmi.n	8007ec0 <_fflush_r+0xc>
 8007ef6:	89a3      	ldrh	r3, [r4, #12]
 8007ef8:	059b      	lsls	r3, r3, #22
 8007efa:	d4e1      	bmi.n	8007ec0 <_fflush_r+0xc>
 8007efc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007efe:	f7ff fb39 	bl	8007574 <__retarget_lock_release_recursive>
 8007f02:	e7dd      	b.n	8007ec0 <_fflush_r+0xc>

08007f04 <fiprintf>:
 8007f04:	b40e      	push	{r1, r2, r3}
 8007f06:	b503      	push	{r0, r1, lr}
 8007f08:	4601      	mov	r1, r0
 8007f0a:	ab03      	add	r3, sp, #12
 8007f0c:	4805      	ldr	r0, [pc, #20]	@ (8007f24 <fiprintf+0x20>)
 8007f0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f12:	6800      	ldr	r0, [r0, #0]
 8007f14:	9301      	str	r3, [sp, #4]
 8007f16:	f000 f88f 	bl	8008038 <_vfiprintf_r>
 8007f1a:	b002      	add	sp, #8
 8007f1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f20:	b003      	add	sp, #12
 8007f22:	4770      	bx	lr
 8007f24:	2000001c 	.word	0x2000001c

08007f28 <memmove>:
 8007f28:	4288      	cmp	r0, r1
 8007f2a:	b510      	push	{r4, lr}
 8007f2c:	eb01 0402 	add.w	r4, r1, r2
 8007f30:	d902      	bls.n	8007f38 <memmove+0x10>
 8007f32:	4284      	cmp	r4, r0
 8007f34:	4623      	mov	r3, r4
 8007f36:	d807      	bhi.n	8007f48 <memmove+0x20>
 8007f38:	1e43      	subs	r3, r0, #1
 8007f3a:	42a1      	cmp	r1, r4
 8007f3c:	d008      	beq.n	8007f50 <memmove+0x28>
 8007f3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f46:	e7f8      	b.n	8007f3a <memmove+0x12>
 8007f48:	4402      	add	r2, r0
 8007f4a:	4601      	mov	r1, r0
 8007f4c:	428a      	cmp	r2, r1
 8007f4e:	d100      	bne.n	8007f52 <memmove+0x2a>
 8007f50:	bd10      	pop	{r4, pc}
 8007f52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f5a:	e7f7      	b.n	8007f4c <memmove+0x24>

08007f5c <_sbrk_r>:
 8007f5c:	b538      	push	{r3, r4, r5, lr}
 8007f5e:	4d06      	ldr	r5, [pc, #24]	@ (8007f78 <_sbrk_r+0x1c>)
 8007f60:	2300      	movs	r3, #0
 8007f62:	4604      	mov	r4, r0
 8007f64:	4608      	mov	r0, r1
 8007f66:	602b      	str	r3, [r5, #0]
 8007f68:	f7f9 fa76 	bl	8001458 <_sbrk>
 8007f6c:	1c43      	adds	r3, r0, #1
 8007f6e:	d102      	bne.n	8007f76 <_sbrk_r+0x1a>
 8007f70:	682b      	ldr	r3, [r5, #0]
 8007f72:	b103      	cbz	r3, 8007f76 <_sbrk_r+0x1a>
 8007f74:	6023      	str	r3, [r4, #0]
 8007f76:	bd38      	pop	{r3, r4, r5, pc}
 8007f78:	20004650 	.word	0x20004650

08007f7c <abort>:
 8007f7c:	b508      	push	{r3, lr}
 8007f7e:	2006      	movs	r0, #6
 8007f80:	f000 fa2e 	bl	80083e0 <raise>
 8007f84:	2001      	movs	r0, #1
 8007f86:	f7f9 f9ef 	bl	8001368 <_exit>

08007f8a <_realloc_r>:
 8007f8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f8e:	4680      	mov	r8, r0
 8007f90:	4615      	mov	r5, r2
 8007f92:	460c      	mov	r4, r1
 8007f94:	b921      	cbnz	r1, 8007fa0 <_realloc_r+0x16>
 8007f96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f9a:	4611      	mov	r1, r2
 8007f9c:	f7ff bb94 	b.w	80076c8 <_malloc_r>
 8007fa0:	b92a      	cbnz	r2, 8007fae <_realloc_r+0x24>
 8007fa2:	f7ff fb1d 	bl	80075e0 <_free_r>
 8007fa6:	2400      	movs	r4, #0
 8007fa8:	4620      	mov	r0, r4
 8007faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fae:	f000 fa33 	bl	8008418 <_malloc_usable_size_r>
 8007fb2:	4285      	cmp	r5, r0
 8007fb4:	4606      	mov	r6, r0
 8007fb6:	d802      	bhi.n	8007fbe <_realloc_r+0x34>
 8007fb8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007fbc:	d8f4      	bhi.n	8007fa8 <_realloc_r+0x1e>
 8007fbe:	4629      	mov	r1, r5
 8007fc0:	4640      	mov	r0, r8
 8007fc2:	f7ff fb81 	bl	80076c8 <_malloc_r>
 8007fc6:	4607      	mov	r7, r0
 8007fc8:	2800      	cmp	r0, #0
 8007fca:	d0ec      	beq.n	8007fa6 <_realloc_r+0x1c>
 8007fcc:	42b5      	cmp	r5, r6
 8007fce:	462a      	mov	r2, r5
 8007fd0:	4621      	mov	r1, r4
 8007fd2:	bf28      	it	cs
 8007fd4:	4632      	movcs	r2, r6
 8007fd6:	f7ff fad6 	bl	8007586 <memcpy>
 8007fda:	4621      	mov	r1, r4
 8007fdc:	4640      	mov	r0, r8
 8007fde:	f7ff faff 	bl	80075e0 <_free_r>
 8007fe2:	463c      	mov	r4, r7
 8007fe4:	e7e0      	b.n	8007fa8 <_realloc_r+0x1e>

08007fe6 <__sfputc_r>:
 8007fe6:	6893      	ldr	r3, [r2, #8]
 8007fe8:	3b01      	subs	r3, #1
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	b410      	push	{r4}
 8007fee:	6093      	str	r3, [r2, #8]
 8007ff0:	da08      	bge.n	8008004 <__sfputc_r+0x1e>
 8007ff2:	6994      	ldr	r4, [r2, #24]
 8007ff4:	42a3      	cmp	r3, r4
 8007ff6:	db01      	blt.n	8007ffc <__sfputc_r+0x16>
 8007ff8:	290a      	cmp	r1, #10
 8007ffa:	d103      	bne.n	8008004 <__sfputc_r+0x1e>
 8007ffc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008000:	f000 b932 	b.w	8008268 <__swbuf_r>
 8008004:	6813      	ldr	r3, [r2, #0]
 8008006:	1c58      	adds	r0, r3, #1
 8008008:	6010      	str	r0, [r2, #0]
 800800a:	7019      	strb	r1, [r3, #0]
 800800c:	4608      	mov	r0, r1
 800800e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008012:	4770      	bx	lr

08008014 <__sfputs_r>:
 8008014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008016:	4606      	mov	r6, r0
 8008018:	460f      	mov	r7, r1
 800801a:	4614      	mov	r4, r2
 800801c:	18d5      	adds	r5, r2, r3
 800801e:	42ac      	cmp	r4, r5
 8008020:	d101      	bne.n	8008026 <__sfputs_r+0x12>
 8008022:	2000      	movs	r0, #0
 8008024:	e007      	b.n	8008036 <__sfputs_r+0x22>
 8008026:	f814 1b01 	ldrb.w	r1, [r4], #1
 800802a:	463a      	mov	r2, r7
 800802c:	4630      	mov	r0, r6
 800802e:	f7ff ffda 	bl	8007fe6 <__sfputc_r>
 8008032:	1c43      	adds	r3, r0, #1
 8008034:	d1f3      	bne.n	800801e <__sfputs_r+0xa>
 8008036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008038 <_vfiprintf_r>:
 8008038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800803c:	460d      	mov	r5, r1
 800803e:	b09d      	sub	sp, #116	@ 0x74
 8008040:	4614      	mov	r4, r2
 8008042:	4698      	mov	r8, r3
 8008044:	4606      	mov	r6, r0
 8008046:	b118      	cbz	r0, 8008050 <_vfiprintf_r+0x18>
 8008048:	6a03      	ldr	r3, [r0, #32]
 800804a:	b90b      	cbnz	r3, 8008050 <_vfiprintf_r+0x18>
 800804c:	f7ff f97e 	bl	800734c <__sinit>
 8008050:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008052:	07d9      	lsls	r1, r3, #31
 8008054:	d405      	bmi.n	8008062 <_vfiprintf_r+0x2a>
 8008056:	89ab      	ldrh	r3, [r5, #12]
 8008058:	059a      	lsls	r2, r3, #22
 800805a:	d402      	bmi.n	8008062 <_vfiprintf_r+0x2a>
 800805c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800805e:	f7ff fa88 	bl	8007572 <__retarget_lock_acquire_recursive>
 8008062:	89ab      	ldrh	r3, [r5, #12]
 8008064:	071b      	lsls	r3, r3, #28
 8008066:	d501      	bpl.n	800806c <_vfiprintf_r+0x34>
 8008068:	692b      	ldr	r3, [r5, #16]
 800806a:	b99b      	cbnz	r3, 8008094 <_vfiprintf_r+0x5c>
 800806c:	4629      	mov	r1, r5
 800806e:	4630      	mov	r0, r6
 8008070:	f000 f938 	bl	80082e4 <__swsetup_r>
 8008074:	b170      	cbz	r0, 8008094 <_vfiprintf_r+0x5c>
 8008076:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008078:	07dc      	lsls	r4, r3, #31
 800807a:	d504      	bpl.n	8008086 <_vfiprintf_r+0x4e>
 800807c:	f04f 30ff 	mov.w	r0, #4294967295
 8008080:	b01d      	add	sp, #116	@ 0x74
 8008082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008086:	89ab      	ldrh	r3, [r5, #12]
 8008088:	0598      	lsls	r0, r3, #22
 800808a:	d4f7      	bmi.n	800807c <_vfiprintf_r+0x44>
 800808c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800808e:	f7ff fa71 	bl	8007574 <__retarget_lock_release_recursive>
 8008092:	e7f3      	b.n	800807c <_vfiprintf_r+0x44>
 8008094:	2300      	movs	r3, #0
 8008096:	9309      	str	r3, [sp, #36]	@ 0x24
 8008098:	2320      	movs	r3, #32
 800809a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800809e:	f8cd 800c 	str.w	r8, [sp, #12]
 80080a2:	2330      	movs	r3, #48	@ 0x30
 80080a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008254 <_vfiprintf_r+0x21c>
 80080a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80080ac:	f04f 0901 	mov.w	r9, #1
 80080b0:	4623      	mov	r3, r4
 80080b2:	469a      	mov	sl, r3
 80080b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080b8:	b10a      	cbz	r2, 80080be <_vfiprintf_r+0x86>
 80080ba:	2a25      	cmp	r2, #37	@ 0x25
 80080bc:	d1f9      	bne.n	80080b2 <_vfiprintf_r+0x7a>
 80080be:	ebba 0b04 	subs.w	fp, sl, r4
 80080c2:	d00b      	beq.n	80080dc <_vfiprintf_r+0xa4>
 80080c4:	465b      	mov	r3, fp
 80080c6:	4622      	mov	r2, r4
 80080c8:	4629      	mov	r1, r5
 80080ca:	4630      	mov	r0, r6
 80080cc:	f7ff ffa2 	bl	8008014 <__sfputs_r>
 80080d0:	3001      	adds	r0, #1
 80080d2:	f000 80a7 	beq.w	8008224 <_vfiprintf_r+0x1ec>
 80080d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080d8:	445a      	add	r2, fp
 80080da:	9209      	str	r2, [sp, #36]	@ 0x24
 80080dc:	f89a 3000 	ldrb.w	r3, [sl]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	f000 809f 	beq.w	8008224 <_vfiprintf_r+0x1ec>
 80080e6:	2300      	movs	r3, #0
 80080e8:	f04f 32ff 	mov.w	r2, #4294967295
 80080ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080f0:	f10a 0a01 	add.w	sl, sl, #1
 80080f4:	9304      	str	r3, [sp, #16]
 80080f6:	9307      	str	r3, [sp, #28]
 80080f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80080fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80080fe:	4654      	mov	r4, sl
 8008100:	2205      	movs	r2, #5
 8008102:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008106:	4853      	ldr	r0, [pc, #332]	@ (8008254 <_vfiprintf_r+0x21c>)
 8008108:	f7f8 f872 	bl	80001f0 <memchr>
 800810c:	9a04      	ldr	r2, [sp, #16]
 800810e:	b9d8      	cbnz	r0, 8008148 <_vfiprintf_r+0x110>
 8008110:	06d1      	lsls	r1, r2, #27
 8008112:	bf44      	itt	mi
 8008114:	2320      	movmi	r3, #32
 8008116:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800811a:	0713      	lsls	r3, r2, #28
 800811c:	bf44      	itt	mi
 800811e:	232b      	movmi	r3, #43	@ 0x2b
 8008120:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008124:	f89a 3000 	ldrb.w	r3, [sl]
 8008128:	2b2a      	cmp	r3, #42	@ 0x2a
 800812a:	d015      	beq.n	8008158 <_vfiprintf_r+0x120>
 800812c:	9a07      	ldr	r2, [sp, #28]
 800812e:	4654      	mov	r4, sl
 8008130:	2000      	movs	r0, #0
 8008132:	f04f 0c0a 	mov.w	ip, #10
 8008136:	4621      	mov	r1, r4
 8008138:	f811 3b01 	ldrb.w	r3, [r1], #1
 800813c:	3b30      	subs	r3, #48	@ 0x30
 800813e:	2b09      	cmp	r3, #9
 8008140:	d94b      	bls.n	80081da <_vfiprintf_r+0x1a2>
 8008142:	b1b0      	cbz	r0, 8008172 <_vfiprintf_r+0x13a>
 8008144:	9207      	str	r2, [sp, #28]
 8008146:	e014      	b.n	8008172 <_vfiprintf_r+0x13a>
 8008148:	eba0 0308 	sub.w	r3, r0, r8
 800814c:	fa09 f303 	lsl.w	r3, r9, r3
 8008150:	4313      	orrs	r3, r2
 8008152:	9304      	str	r3, [sp, #16]
 8008154:	46a2      	mov	sl, r4
 8008156:	e7d2      	b.n	80080fe <_vfiprintf_r+0xc6>
 8008158:	9b03      	ldr	r3, [sp, #12]
 800815a:	1d19      	adds	r1, r3, #4
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	9103      	str	r1, [sp, #12]
 8008160:	2b00      	cmp	r3, #0
 8008162:	bfbb      	ittet	lt
 8008164:	425b      	neglt	r3, r3
 8008166:	f042 0202 	orrlt.w	r2, r2, #2
 800816a:	9307      	strge	r3, [sp, #28]
 800816c:	9307      	strlt	r3, [sp, #28]
 800816e:	bfb8      	it	lt
 8008170:	9204      	strlt	r2, [sp, #16]
 8008172:	7823      	ldrb	r3, [r4, #0]
 8008174:	2b2e      	cmp	r3, #46	@ 0x2e
 8008176:	d10a      	bne.n	800818e <_vfiprintf_r+0x156>
 8008178:	7863      	ldrb	r3, [r4, #1]
 800817a:	2b2a      	cmp	r3, #42	@ 0x2a
 800817c:	d132      	bne.n	80081e4 <_vfiprintf_r+0x1ac>
 800817e:	9b03      	ldr	r3, [sp, #12]
 8008180:	1d1a      	adds	r2, r3, #4
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	9203      	str	r2, [sp, #12]
 8008186:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800818a:	3402      	adds	r4, #2
 800818c:	9305      	str	r3, [sp, #20]
 800818e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008264 <_vfiprintf_r+0x22c>
 8008192:	7821      	ldrb	r1, [r4, #0]
 8008194:	2203      	movs	r2, #3
 8008196:	4650      	mov	r0, sl
 8008198:	f7f8 f82a 	bl	80001f0 <memchr>
 800819c:	b138      	cbz	r0, 80081ae <_vfiprintf_r+0x176>
 800819e:	9b04      	ldr	r3, [sp, #16]
 80081a0:	eba0 000a 	sub.w	r0, r0, sl
 80081a4:	2240      	movs	r2, #64	@ 0x40
 80081a6:	4082      	lsls	r2, r0
 80081a8:	4313      	orrs	r3, r2
 80081aa:	3401      	adds	r4, #1
 80081ac:	9304      	str	r3, [sp, #16]
 80081ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081b2:	4829      	ldr	r0, [pc, #164]	@ (8008258 <_vfiprintf_r+0x220>)
 80081b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80081b8:	2206      	movs	r2, #6
 80081ba:	f7f8 f819 	bl	80001f0 <memchr>
 80081be:	2800      	cmp	r0, #0
 80081c0:	d03f      	beq.n	8008242 <_vfiprintf_r+0x20a>
 80081c2:	4b26      	ldr	r3, [pc, #152]	@ (800825c <_vfiprintf_r+0x224>)
 80081c4:	bb1b      	cbnz	r3, 800820e <_vfiprintf_r+0x1d6>
 80081c6:	9b03      	ldr	r3, [sp, #12]
 80081c8:	3307      	adds	r3, #7
 80081ca:	f023 0307 	bic.w	r3, r3, #7
 80081ce:	3308      	adds	r3, #8
 80081d0:	9303      	str	r3, [sp, #12]
 80081d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081d4:	443b      	add	r3, r7
 80081d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80081d8:	e76a      	b.n	80080b0 <_vfiprintf_r+0x78>
 80081da:	fb0c 3202 	mla	r2, ip, r2, r3
 80081de:	460c      	mov	r4, r1
 80081e0:	2001      	movs	r0, #1
 80081e2:	e7a8      	b.n	8008136 <_vfiprintf_r+0xfe>
 80081e4:	2300      	movs	r3, #0
 80081e6:	3401      	adds	r4, #1
 80081e8:	9305      	str	r3, [sp, #20]
 80081ea:	4619      	mov	r1, r3
 80081ec:	f04f 0c0a 	mov.w	ip, #10
 80081f0:	4620      	mov	r0, r4
 80081f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081f6:	3a30      	subs	r2, #48	@ 0x30
 80081f8:	2a09      	cmp	r2, #9
 80081fa:	d903      	bls.n	8008204 <_vfiprintf_r+0x1cc>
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d0c6      	beq.n	800818e <_vfiprintf_r+0x156>
 8008200:	9105      	str	r1, [sp, #20]
 8008202:	e7c4      	b.n	800818e <_vfiprintf_r+0x156>
 8008204:	fb0c 2101 	mla	r1, ip, r1, r2
 8008208:	4604      	mov	r4, r0
 800820a:	2301      	movs	r3, #1
 800820c:	e7f0      	b.n	80081f0 <_vfiprintf_r+0x1b8>
 800820e:	ab03      	add	r3, sp, #12
 8008210:	9300      	str	r3, [sp, #0]
 8008212:	462a      	mov	r2, r5
 8008214:	4b12      	ldr	r3, [pc, #72]	@ (8008260 <_vfiprintf_r+0x228>)
 8008216:	a904      	add	r1, sp, #16
 8008218:	4630      	mov	r0, r6
 800821a:	f3af 8000 	nop.w
 800821e:	4607      	mov	r7, r0
 8008220:	1c78      	adds	r0, r7, #1
 8008222:	d1d6      	bne.n	80081d2 <_vfiprintf_r+0x19a>
 8008224:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008226:	07d9      	lsls	r1, r3, #31
 8008228:	d405      	bmi.n	8008236 <_vfiprintf_r+0x1fe>
 800822a:	89ab      	ldrh	r3, [r5, #12]
 800822c:	059a      	lsls	r2, r3, #22
 800822e:	d402      	bmi.n	8008236 <_vfiprintf_r+0x1fe>
 8008230:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008232:	f7ff f99f 	bl	8007574 <__retarget_lock_release_recursive>
 8008236:	89ab      	ldrh	r3, [r5, #12]
 8008238:	065b      	lsls	r3, r3, #25
 800823a:	f53f af1f 	bmi.w	800807c <_vfiprintf_r+0x44>
 800823e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008240:	e71e      	b.n	8008080 <_vfiprintf_r+0x48>
 8008242:	ab03      	add	r3, sp, #12
 8008244:	9300      	str	r3, [sp, #0]
 8008246:	462a      	mov	r2, r5
 8008248:	4b05      	ldr	r3, [pc, #20]	@ (8008260 <_vfiprintf_r+0x228>)
 800824a:	a904      	add	r1, sp, #16
 800824c:	4630      	mov	r0, r6
 800824e:	f7ff fc8d 	bl	8007b6c <_printf_i>
 8008252:	e7e4      	b.n	800821e <_vfiprintf_r+0x1e6>
 8008254:	08008833 	.word	0x08008833
 8008258:	0800883d 	.word	0x0800883d
 800825c:	00000000 	.word	0x00000000
 8008260:	08008015 	.word	0x08008015
 8008264:	08008839 	.word	0x08008839

08008268 <__swbuf_r>:
 8008268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800826a:	460e      	mov	r6, r1
 800826c:	4614      	mov	r4, r2
 800826e:	4605      	mov	r5, r0
 8008270:	b118      	cbz	r0, 800827a <__swbuf_r+0x12>
 8008272:	6a03      	ldr	r3, [r0, #32]
 8008274:	b90b      	cbnz	r3, 800827a <__swbuf_r+0x12>
 8008276:	f7ff f869 	bl	800734c <__sinit>
 800827a:	69a3      	ldr	r3, [r4, #24]
 800827c:	60a3      	str	r3, [r4, #8]
 800827e:	89a3      	ldrh	r3, [r4, #12]
 8008280:	071a      	lsls	r2, r3, #28
 8008282:	d501      	bpl.n	8008288 <__swbuf_r+0x20>
 8008284:	6923      	ldr	r3, [r4, #16]
 8008286:	b943      	cbnz	r3, 800829a <__swbuf_r+0x32>
 8008288:	4621      	mov	r1, r4
 800828a:	4628      	mov	r0, r5
 800828c:	f000 f82a 	bl	80082e4 <__swsetup_r>
 8008290:	b118      	cbz	r0, 800829a <__swbuf_r+0x32>
 8008292:	f04f 37ff 	mov.w	r7, #4294967295
 8008296:	4638      	mov	r0, r7
 8008298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800829a:	6823      	ldr	r3, [r4, #0]
 800829c:	6922      	ldr	r2, [r4, #16]
 800829e:	1a98      	subs	r0, r3, r2
 80082a0:	6963      	ldr	r3, [r4, #20]
 80082a2:	b2f6      	uxtb	r6, r6
 80082a4:	4283      	cmp	r3, r0
 80082a6:	4637      	mov	r7, r6
 80082a8:	dc05      	bgt.n	80082b6 <__swbuf_r+0x4e>
 80082aa:	4621      	mov	r1, r4
 80082ac:	4628      	mov	r0, r5
 80082ae:	f7ff fe01 	bl	8007eb4 <_fflush_r>
 80082b2:	2800      	cmp	r0, #0
 80082b4:	d1ed      	bne.n	8008292 <__swbuf_r+0x2a>
 80082b6:	68a3      	ldr	r3, [r4, #8]
 80082b8:	3b01      	subs	r3, #1
 80082ba:	60a3      	str	r3, [r4, #8]
 80082bc:	6823      	ldr	r3, [r4, #0]
 80082be:	1c5a      	adds	r2, r3, #1
 80082c0:	6022      	str	r2, [r4, #0]
 80082c2:	701e      	strb	r6, [r3, #0]
 80082c4:	6962      	ldr	r2, [r4, #20]
 80082c6:	1c43      	adds	r3, r0, #1
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d004      	beq.n	80082d6 <__swbuf_r+0x6e>
 80082cc:	89a3      	ldrh	r3, [r4, #12]
 80082ce:	07db      	lsls	r3, r3, #31
 80082d0:	d5e1      	bpl.n	8008296 <__swbuf_r+0x2e>
 80082d2:	2e0a      	cmp	r6, #10
 80082d4:	d1df      	bne.n	8008296 <__swbuf_r+0x2e>
 80082d6:	4621      	mov	r1, r4
 80082d8:	4628      	mov	r0, r5
 80082da:	f7ff fdeb 	bl	8007eb4 <_fflush_r>
 80082de:	2800      	cmp	r0, #0
 80082e0:	d0d9      	beq.n	8008296 <__swbuf_r+0x2e>
 80082e2:	e7d6      	b.n	8008292 <__swbuf_r+0x2a>

080082e4 <__swsetup_r>:
 80082e4:	b538      	push	{r3, r4, r5, lr}
 80082e6:	4b29      	ldr	r3, [pc, #164]	@ (800838c <__swsetup_r+0xa8>)
 80082e8:	4605      	mov	r5, r0
 80082ea:	6818      	ldr	r0, [r3, #0]
 80082ec:	460c      	mov	r4, r1
 80082ee:	b118      	cbz	r0, 80082f8 <__swsetup_r+0x14>
 80082f0:	6a03      	ldr	r3, [r0, #32]
 80082f2:	b90b      	cbnz	r3, 80082f8 <__swsetup_r+0x14>
 80082f4:	f7ff f82a 	bl	800734c <__sinit>
 80082f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082fc:	0719      	lsls	r1, r3, #28
 80082fe:	d422      	bmi.n	8008346 <__swsetup_r+0x62>
 8008300:	06da      	lsls	r2, r3, #27
 8008302:	d407      	bmi.n	8008314 <__swsetup_r+0x30>
 8008304:	2209      	movs	r2, #9
 8008306:	602a      	str	r2, [r5, #0]
 8008308:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800830c:	81a3      	strh	r3, [r4, #12]
 800830e:	f04f 30ff 	mov.w	r0, #4294967295
 8008312:	e033      	b.n	800837c <__swsetup_r+0x98>
 8008314:	0758      	lsls	r0, r3, #29
 8008316:	d512      	bpl.n	800833e <__swsetup_r+0x5a>
 8008318:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800831a:	b141      	cbz	r1, 800832e <__swsetup_r+0x4a>
 800831c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008320:	4299      	cmp	r1, r3
 8008322:	d002      	beq.n	800832a <__swsetup_r+0x46>
 8008324:	4628      	mov	r0, r5
 8008326:	f7ff f95b 	bl	80075e0 <_free_r>
 800832a:	2300      	movs	r3, #0
 800832c:	6363      	str	r3, [r4, #52]	@ 0x34
 800832e:	89a3      	ldrh	r3, [r4, #12]
 8008330:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008334:	81a3      	strh	r3, [r4, #12]
 8008336:	2300      	movs	r3, #0
 8008338:	6063      	str	r3, [r4, #4]
 800833a:	6923      	ldr	r3, [r4, #16]
 800833c:	6023      	str	r3, [r4, #0]
 800833e:	89a3      	ldrh	r3, [r4, #12]
 8008340:	f043 0308 	orr.w	r3, r3, #8
 8008344:	81a3      	strh	r3, [r4, #12]
 8008346:	6923      	ldr	r3, [r4, #16]
 8008348:	b94b      	cbnz	r3, 800835e <__swsetup_r+0x7a>
 800834a:	89a3      	ldrh	r3, [r4, #12]
 800834c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008350:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008354:	d003      	beq.n	800835e <__swsetup_r+0x7a>
 8008356:	4621      	mov	r1, r4
 8008358:	4628      	mov	r0, r5
 800835a:	f000 f88b 	bl	8008474 <__smakebuf_r>
 800835e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008362:	f013 0201 	ands.w	r2, r3, #1
 8008366:	d00a      	beq.n	800837e <__swsetup_r+0x9a>
 8008368:	2200      	movs	r2, #0
 800836a:	60a2      	str	r2, [r4, #8]
 800836c:	6962      	ldr	r2, [r4, #20]
 800836e:	4252      	negs	r2, r2
 8008370:	61a2      	str	r2, [r4, #24]
 8008372:	6922      	ldr	r2, [r4, #16]
 8008374:	b942      	cbnz	r2, 8008388 <__swsetup_r+0xa4>
 8008376:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800837a:	d1c5      	bne.n	8008308 <__swsetup_r+0x24>
 800837c:	bd38      	pop	{r3, r4, r5, pc}
 800837e:	0799      	lsls	r1, r3, #30
 8008380:	bf58      	it	pl
 8008382:	6962      	ldrpl	r2, [r4, #20]
 8008384:	60a2      	str	r2, [r4, #8]
 8008386:	e7f4      	b.n	8008372 <__swsetup_r+0x8e>
 8008388:	2000      	movs	r0, #0
 800838a:	e7f7      	b.n	800837c <__swsetup_r+0x98>
 800838c:	2000001c 	.word	0x2000001c

08008390 <_raise_r>:
 8008390:	291f      	cmp	r1, #31
 8008392:	b538      	push	{r3, r4, r5, lr}
 8008394:	4605      	mov	r5, r0
 8008396:	460c      	mov	r4, r1
 8008398:	d904      	bls.n	80083a4 <_raise_r+0x14>
 800839a:	2316      	movs	r3, #22
 800839c:	6003      	str	r3, [r0, #0]
 800839e:	f04f 30ff 	mov.w	r0, #4294967295
 80083a2:	bd38      	pop	{r3, r4, r5, pc}
 80083a4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80083a6:	b112      	cbz	r2, 80083ae <_raise_r+0x1e>
 80083a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80083ac:	b94b      	cbnz	r3, 80083c2 <_raise_r+0x32>
 80083ae:	4628      	mov	r0, r5
 80083b0:	f000 f830 	bl	8008414 <_getpid_r>
 80083b4:	4622      	mov	r2, r4
 80083b6:	4601      	mov	r1, r0
 80083b8:	4628      	mov	r0, r5
 80083ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083be:	f000 b817 	b.w	80083f0 <_kill_r>
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d00a      	beq.n	80083dc <_raise_r+0x4c>
 80083c6:	1c59      	adds	r1, r3, #1
 80083c8:	d103      	bne.n	80083d2 <_raise_r+0x42>
 80083ca:	2316      	movs	r3, #22
 80083cc:	6003      	str	r3, [r0, #0]
 80083ce:	2001      	movs	r0, #1
 80083d0:	e7e7      	b.n	80083a2 <_raise_r+0x12>
 80083d2:	2100      	movs	r1, #0
 80083d4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80083d8:	4620      	mov	r0, r4
 80083da:	4798      	blx	r3
 80083dc:	2000      	movs	r0, #0
 80083de:	e7e0      	b.n	80083a2 <_raise_r+0x12>

080083e0 <raise>:
 80083e0:	4b02      	ldr	r3, [pc, #8]	@ (80083ec <raise+0xc>)
 80083e2:	4601      	mov	r1, r0
 80083e4:	6818      	ldr	r0, [r3, #0]
 80083e6:	f7ff bfd3 	b.w	8008390 <_raise_r>
 80083ea:	bf00      	nop
 80083ec:	2000001c 	.word	0x2000001c

080083f0 <_kill_r>:
 80083f0:	b538      	push	{r3, r4, r5, lr}
 80083f2:	4d07      	ldr	r5, [pc, #28]	@ (8008410 <_kill_r+0x20>)
 80083f4:	2300      	movs	r3, #0
 80083f6:	4604      	mov	r4, r0
 80083f8:	4608      	mov	r0, r1
 80083fa:	4611      	mov	r1, r2
 80083fc:	602b      	str	r3, [r5, #0]
 80083fe:	f7f8 ffa3 	bl	8001348 <_kill>
 8008402:	1c43      	adds	r3, r0, #1
 8008404:	d102      	bne.n	800840c <_kill_r+0x1c>
 8008406:	682b      	ldr	r3, [r5, #0]
 8008408:	b103      	cbz	r3, 800840c <_kill_r+0x1c>
 800840a:	6023      	str	r3, [r4, #0]
 800840c:	bd38      	pop	{r3, r4, r5, pc}
 800840e:	bf00      	nop
 8008410:	20004650 	.word	0x20004650

08008414 <_getpid_r>:
 8008414:	f7f8 bf90 	b.w	8001338 <_getpid>

08008418 <_malloc_usable_size_r>:
 8008418:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800841c:	1f18      	subs	r0, r3, #4
 800841e:	2b00      	cmp	r3, #0
 8008420:	bfbc      	itt	lt
 8008422:	580b      	ldrlt	r3, [r1, r0]
 8008424:	18c0      	addlt	r0, r0, r3
 8008426:	4770      	bx	lr

08008428 <__swhatbuf_r>:
 8008428:	b570      	push	{r4, r5, r6, lr}
 800842a:	460c      	mov	r4, r1
 800842c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008430:	2900      	cmp	r1, #0
 8008432:	b096      	sub	sp, #88	@ 0x58
 8008434:	4615      	mov	r5, r2
 8008436:	461e      	mov	r6, r3
 8008438:	da0d      	bge.n	8008456 <__swhatbuf_r+0x2e>
 800843a:	89a3      	ldrh	r3, [r4, #12]
 800843c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008440:	f04f 0100 	mov.w	r1, #0
 8008444:	bf14      	ite	ne
 8008446:	2340      	movne	r3, #64	@ 0x40
 8008448:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800844c:	2000      	movs	r0, #0
 800844e:	6031      	str	r1, [r6, #0]
 8008450:	602b      	str	r3, [r5, #0]
 8008452:	b016      	add	sp, #88	@ 0x58
 8008454:	bd70      	pop	{r4, r5, r6, pc}
 8008456:	466a      	mov	r2, sp
 8008458:	f000 f848 	bl	80084ec <_fstat_r>
 800845c:	2800      	cmp	r0, #0
 800845e:	dbec      	blt.n	800843a <__swhatbuf_r+0x12>
 8008460:	9901      	ldr	r1, [sp, #4]
 8008462:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008466:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800846a:	4259      	negs	r1, r3
 800846c:	4159      	adcs	r1, r3
 800846e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008472:	e7eb      	b.n	800844c <__swhatbuf_r+0x24>

08008474 <__smakebuf_r>:
 8008474:	898b      	ldrh	r3, [r1, #12]
 8008476:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008478:	079d      	lsls	r5, r3, #30
 800847a:	4606      	mov	r6, r0
 800847c:	460c      	mov	r4, r1
 800847e:	d507      	bpl.n	8008490 <__smakebuf_r+0x1c>
 8008480:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008484:	6023      	str	r3, [r4, #0]
 8008486:	6123      	str	r3, [r4, #16]
 8008488:	2301      	movs	r3, #1
 800848a:	6163      	str	r3, [r4, #20]
 800848c:	b003      	add	sp, #12
 800848e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008490:	ab01      	add	r3, sp, #4
 8008492:	466a      	mov	r2, sp
 8008494:	f7ff ffc8 	bl	8008428 <__swhatbuf_r>
 8008498:	9f00      	ldr	r7, [sp, #0]
 800849a:	4605      	mov	r5, r0
 800849c:	4639      	mov	r1, r7
 800849e:	4630      	mov	r0, r6
 80084a0:	f7ff f912 	bl	80076c8 <_malloc_r>
 80084a4:	b948      	cbnz	r0, 80084ba <__smakebuf_r+0x46>
 80084a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084aa:	059a      	lsls	r2, r3, #22
 80084ac:	d4ee      	bmi.n	800848c <__smakebuf_r+0x18>
 80084ae:	f023 0303 	bic.w	r3, r3, #3
 80084b2:	f043 0302 	orr.w	r3, r3, #2
 80084b6:	81a3      	strh	r3, [r4, #12]
 80084b8:	e7e2      	b.n	8008480 <__smakebuf_r+0xc>
 80084ba:	89a3      	ldrh	r3, [r4, #12]
 80084bc:	6020      	str	r0, [r4, #0]
 80084be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084c2:	81a3      	strh	r3, [r4, #12]
 80084c4:	9b01      	ldr	r3, [sp, #4]
 80084c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80084ca:	b15b      	cbz	r3, 80084e4 <__smakebuf_r+0x70>
 80084cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084d0:	4630      	mov	r0, r6
 80084d2:	f000 f81d 	bl	8008510 <_isatty_r>
 80084d6:	b128      	cbz	r0, 80084e4 <__smakebuf_r+0x70>
 80084d8:	89a3      	ldrh	r3, [r4, #12]
 80084da:	f023 0303 	bic.w	r3, r3, #3
 80084de:	f043 0301 	orr.w	r3, r3, #1
 80084e2:	81a3      	strh	r3, [r4, #12]
 80084e4:	89a3      	ldrh	r3, [r4, #12]
 80084e6:	431d      	orrs	r5, r3
 80084e8:	81a5      	strh	r5, [r4, #12]
 80084ea:	e7cf      	b.n	800848c <__smakebuf_r+0x18>

080084ec <_fstat_r>:
 80084ec:	b538      	push	{r3, r4, r5, lr}
 80084ee:	4d07      	ldr	r5, [pc, #28]	@ (800850c <_fstat_r+0x20>)
 80084f0:	2300      	movs	r3, #0
 80084f2:	4604      	mov	r4, r0
 80084f4:	4608      	mov	r0, r1
 80084f6:	4611      	mov	r1, r2
 80084f8:	602b      	str	r3, [r5, #0]
 80084fa:	f7f8 ff85 	bl	8001408 <_fstat>
 80084fe:	1c43      	adds	r3, r0, #1
 8008500:	d102      	bne.n	8008508 <_fstat_r+0x1c>
 8008502:	682b      	ldr	r3, [r5, #0]
 8008504:	b103      	cbz	r3, 8008508 <_fstat_r+0x1c>
 8008506:	6023      	str	r3, [r4, #0]
 8008508:	bd38      	pop	{r3, r4, r5, pc}
 800850a:	bf00      	nop
 800850c:	20004650 	.word	0x20004650

08008510 <_isatty_r>:
 8008510:	b538      	push	{r3, r4, r5, lr}
 8008512:	4d06      	ldr	r5, [pc, #24]	@ (800852c <_isatty_r+0x1c>)
 8008514:	2300      	movs	r3, #0
 8008516:	4604      	mov	r4, r0
 8008518:	4608      	mov	r0, r1
 800851a:	602b      	str	r3, [r5, #0]
 800851c:	f7f8 ff84 	bl	8001428 <_isatty>
 8008520:	1c43      	adds	r3, r0, #1
 8008522:	d102      	bne.n	800852a <_isatty_r+0x1a>
 8008524:	682b      	ldr	r3, [r5, #0]
 8008526:	b103      	cbz	r3, 800852a <_isatty_r+0x1a>
 8008528:	6023      	str	r3, [r4, #0]
 800852a:	bd38      	pop	{r3, r4, r5, pc}
 800852c:	20004650 	.word	0x20004650

08008530 <_init>:
 8008530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008532:	bf00      	nop
 8008534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008536:	bc08      	pop	{r3}
 8008538:	469e      	mov	lr, r3
 800853a:	4770      	bx	lr

0800853c <_fini>:
 800853c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800853e:	bf00      	nop
 8008540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008542:	bc08      	pop	{r3}
 8008544:	469e      	mov	lr, r3
 8008546:	4770      	bx	lr
